
... suite sur les modes d'adressage


7) L'adressage RELATIF AU PC AVEC DêPLACEMENT:    (shÇmatisÇ  d(pc) )
   πππππππππππππππππππππππππππππππππππππππππππ

  Il s'Çcrit:
  πππππππππππ    +---------------------------------------+
                 | Instruction         d(pc),destination |
                 +---------------------------------------+

  Et se lit:
  ππππππππππ
  On ajoute la valeur du dÇplacement signÇ 'd' codÇ sur un MOT au PC ( de
  l'instruction considÇrÇe !) , on prend la donnÇe ainsi pointÇe et on la
  pose dans ( Ö ) l'opÇrande destination.

   d(pc)= d+pc

  Exemple:  J'utilise l'instruction 'JMP destination' , qui opäre un saut
  ππππππππ  du prg Ö l'adresse 'destination' en chargeant la valeur du PC
            avec la valeur de 'destination'.
            (JMP comme JuMP=saut en Anglais)

    si j'Çcris:                        JMP  10(pc)

    Avant l'exÇcution de l'instruction JMP, le PC pointe sur l'adresse de
    cette instruction (JMP  10(pc) )

êcrire JMP  10(pc), provoque un saut de 10 Octets apräs l'adresse pointÇe
par le PC qui pointe cette instruction (soit JMP 10(pc) ), si Ö l'adresse
PC+10 on a un Label ( 'A' ) par exemple, l'instruction JMP  10(pc) provo-
que un saut (en ajoutant 10 Ö PC) Ö ce Label.
(Il peut bien sur y avoir d'autres instructions ou autre chose, tout 
dÇpend de votre listing...)


     exemple:
     ππππππππ

                  Labels      instructions du prg

                               .
                               .
  ici, PC=$AF00        X      JMP  10(pc)        ,il y a saut en PC+10
                               .
                               .
                               .
  ici, PC=$AF10        A       ............      ,on continue en $AF10
                               .
                               .


Il faut donc tenir compte de la taille de l'instruction JMP d(pc) pour le
dÇplacement car le PC prÇcÇdant l'instruction considÇrÇe intervient.
En effet, la taille des instructions en mÇmoire varie selon le mode d'ad-
ressage utilisÇ, Ö la fin de ce chapitre sur les modes d'adressage, je do-
nnerais la taille et la reprÇsentation des modes d'adressage en mÇmoire.
Donc le dÇplacement rÇel, c'est le dÇplacement rÇel + la taille de l'ins-
truction et de ses opÇrandes.



8) L'adressage RELATIF AU PC AVEC INDEX ET DêPLACEMENT: ( d(pc,rn) )
   ππππππππππππππππππππππππππππππππππππππππππππππππππππ

  Il s'Çcrit:
  πππππππππππ    +---------------------------------------+
                 | Instruction      d(pc,rn),destination |
                 +---------------------------------------+

  Et se lit:
  ππππππππππ
 On ajoute la valeur du dÇplacement signÇ 'd' codÇ sur un MOT et celle du
 registre 'rn' au PC (de l'instruction considÇrÇe !) , on prend la donnÇe
 ainsi pointÇe et on la pose dans ( Ö ) l'opÇrande destination

 d(pc,rn)= d+an+pc   OU   d(pc,rn)= d+dn,pc


   Ce mode d'adressage est donc identique au prÇcÇdent, sauf qu'ici on
   ajoute le dÇplacement et le contenu du registre 'rn' au PC qui prÇcäde
   l'instruction considÇrÇe.

   Si 'rn' est un MOT (.W) , le MOT de poids faible du registre 'rn'
   intervient lors de l'opÇration.

   Si 'rn' est un L-M  (.L) , le registre index 'rn' est utilsÇ en entier.



9) L'adressage ABSOLU LONG:   (shÇmatisÇ BBBB )
   ππππππππππππππππππππππππ

   Il s'Çcrit:
   πππππππππππ
                +-----------------------------------+
                | Instruction        source,Adresse |
                +-----------------------------------+
                                OU
                                ππ
                +-----------------------------------+
                | Instruction   Adresse,destination |
                +-----------------------------------+


   Et se lit:
   ππππππππππ
   On pose l'opÇrande source dans ( Ö ) l'adresse indiquÇe par l'opÇrande
   destination.
                                OU
                                ππ


   Exemple:              MOVE   labas,d0
   ππππππππ              .
                         .
                         .
                         DATA

                labas    DC.W   12            en 'labas' on trouve un
                                              MOT=12


     le registre de donnÇe d0 contiendra 12.


   autre exp:            MOVE     D0,$AFFB48   si $AFFB48 est dans un
   ππππππππππ                                  segment DATA ( dÇtails
                                               bientot )

   On pose le not de poids faible de d0 Ö l'adresse $AFFB48



10) L'adressage ABSOLU COURT:   (shÇmatisÇ BB )
    πππππππππππππππππππππππππ

   Il s'Çcrit:
   πππππππππππ
                +-----------------------------------+
                | Instruction        source,Adresse |
                +-----------------------------------+
                                OU
                                ππ
                +-----------------------------------+
                | Instruction   Adresse,destination |
                +-----------------------------------+


   Et se lit:
   ππππππππππ
   On pose l'opÇrande source dans ( Ö ) l'adresse indiquÇe par l'opÇrande
   destination.
                                OU
                                ππ
   On prend la donnÇe pointÇe par l'opÇrande 'Adresse' et on la pose dans
   ( Ö ) l'opÇrande destination.

   Mode d'adressage identique au mode prÇcÇdent, mais ici la valeur de 
   l'adresse doit pouvoir ätre contenue dans un MOT.





     REPRêSENTATION INTERNE DES MODES D'ADRESSAGE ET MOTS D'EXTENSION:
     πππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππ

   A chaque mode d'adressage sont rattachÇs 0,1 ou 2 MOTS D'EXTENSION,
   ceci peut avoir une importance pour la reprÇsentation (taille) des
   diffÇrents modes d'adressage en mÇmoire: 
   (cf le mode d(pc) ou d(pc,rn) )


           +-------------------------+---------------------+
           |         MODES           |    NOMBRE DE MOTS   |
           |      D'ADRESSAGE        |      D'EXTENSION    |
           +-------------------------+---------------------+
           |         BBBB            |          2          |
           +-------------------------+---------------------+
           |          BB             |          1          |
           +-------------------------+---------------------+
           |        #...             |   1 si .B ou .W     |
           |                         |      2 si  .L       |
           +-------------------------+---------------------+
           |         (an)            |          0          |
           +-------------------------+---------------------+
           |         (an)+           |          0          |
           +-------------------------+---------------------+
           |        -(an)            |          0          |
           +-------------------------+---------------------+
           |        d(an)            |          1          |
           +-------------------------+---------------------+
           |        d(an,rn)         |          1          |
           +-------------------------+---------------------+
           |        d(pc)            |          1          |
           +-------------------------+---------------------+
           |        d(pc,rn)         |          1          |
           +-------------------------+---------------------+

 -   Notez que la taille des opÇrandes (si il y en a) intervient aussi
     dans la reprÇsentation des instructions en mÇmoire.

     En gÇnÇral, on compte 1 MOT pour l'instruction + les mots d'exten-
     sion et la taille des opÇrandes.

   exemples:
   πππππππππ
   ainsi:  MOVE.W  #14,D0 sera reprÇsentÇ par 1 mot (instruction) + 1 mot
   (pour le mot 14) + 1 mot (pour Le mot de poids faible de d0) + 1 mot 
   (pour l'adressage immÇdiat avec la taille .W qui admet un mot d'exten-
   sion) = 4 mots en mÇmoire.

   autre exemple: JMP $AFFA02 sera reprÇsentÇ par 3 Mots en mÇmoire ( mode
   d'adressage absolu long qui admet 2 mots d'extension + 1 mot pour JMP )




- VoilÖ pour les modes d'adressage, mais avant de passer aux exercices, je
  vous explique encore les diffÇrentes directives d'assemblage que vous
  trouverez dans les listings.


                      *** DIRECTIVES D'ASSEMBLAGE ***
                      πππππππππππππππππππππππππππππππ

  Vous connaissez dÇjÖ :

  - TEXT   :Permet de reinitialiser le PC, se place au dÇbut du listing.

  - EQU    :Associe une valeur numÇrique Ö une adresse. (Un Label)

  voilÖ quelques autres directives:

  - END    :Elle indique Ö l'assembleur que ce qui suit cette directive
            ne doit plus ätre assemblÇ (donc ignorÇ).
            Attention, elle ne provoque pas la 'fin' du programme.

  - DATA   :Cette directive dÇlimite un SEGMENT DATA, le PC est reini-
            tialisÇ de la mäme maniäre qu'avec 'text'.

            Dans le SEGMENT DATA, on dÇfinit des donnÇes (ou datas)

            On peut alors utiliser les directives DC.B, DC.W ou DC.L :

    DC.B   :Permet de placer en mÇmoire des constantes (donnÇes) sous
            forme d'octets.
            On peut par exemple associer une constante Ö une adresse ,
            les donnÇes doivent ätres sÇparÇes par des virgules.

            exp:  LABEL     DC.B  0,1,6,3,11,46,$4F,%10110010
            ππππ
            ici, Ö l'adresse LABEL, on trouve un OCTET (.B) qui vaut 0,
            Ö l'adresse LABEL+1 on trouve un OCTET (.B) qui vaut 1  ...
            en LABEL+6 on trouve un OCTET (.B) qui vaut $4F  etc...

    DC.W   :identique Ö DC.B sauf qu'ici, on range des Mots en mÇmoire.

    DC.L   :identique Ö DC.W ou DC.B sauf qu'ici, on range des L-M en
            mÇmoire.


  - BSS    :Cette directive reinitialise aussi PC.
            Elle dÇlimite un SEGMENT BSS.

            Dans un segment BSS, on se rÇserve de la place en mÇmoire,
            sous forme d'OCTETS,MOTS ou L-M.

            En effet, on ne peut pas placer une donnÇe en mÇmoire si on
            n'a pas reservÇ cette portion de la mÇmoire !!!
            (sauf cas particuliers que nous Çtudierons)

            On utilise alors la diretive 'DS.suffixe  quantitÇ' pour
            se rÇserver de la place en mÇmoire sans l'initialiser.


     DS.B  :rÇserve une certaine quantitÇ d'Octets en mÇmoire.

            exp:  LABEL     DS.B   120     :Ö l'adresse LABEL, se trouve
            ππππ  une suite de 120 Octets qui nous sont rÇservÇs.On peut
                  alors y dÇposer des donnÇes.


     DS.W  :rÇserve une certaine quantitÇ de Mots en mÇmoire.

     DS.L  :rÇserve une certaine quantitÇ de L-M en mÇmoire.




 - VoilÖ, allez faire les exos (fichier EXOS_1.DOC), il y en a bien une
   tonne, mais apräs áa il n'y aura plus de problàmes (j'espäre!!) avec
   les modes d'adressage.

 - Vous reviendrez ensuite Ö la suite des cours dans le fichier:

   INSTRUC.DOC
   πππππππππππ


                            ππππππππππππππππππ
  

                    
 
  PIECHOCKI Laurent                              exos:  EXOS_1.DOC
  8,impasse Bellevue                                    ππππππππππ
  57980 TENTELING                               cours:  INSTRUC.DOC
                                                        πππππππππππ



