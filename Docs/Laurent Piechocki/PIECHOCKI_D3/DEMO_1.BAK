
           SECTION TEXT

DONNE	SET	4

           move.l     a7,a5		;Initialise le TOS 
           lea        pile,a7
           move.l     4(a5),a5     
           move.l     $c(a5),d0    
           add.l      $14(a5),d0
           add.l      $1c(a5),d0
           add.l      #$100,d0
           move.l     d0,-(sp)
           move.l     a5,-(sp)
           move       #0,-(sp)
           move       #$4a,-(sp)		;SETBLOCK
           trap       #1
           add.l      #12,sp

	dc.w	$a00a
	
	move	#0,-(sp)
	move.l	#-1,-(sp)	
	move.l	#-1,-(sp)	
	move	#5,-(sp)
	trap	#14
	add.l	#12,sp
	
	clr.l	-(sp)
	move	#$20,-(sp)
	trap	#1
	add.l	#6,sp
	move.l	d0,SSP

	movem.l	$ff8240,d0-d7	;sauve palette
	movem.l	d0-d7,PALETTE
	
	move.l	#PAL,$45a
		
	move.l	#PARLE,-(sp)
	move	#9,-(sp)
	trap	#1
	add.l	#6,sp

		
NEXT	move.w	#160,d1	
	move.w	d1,VALEUR
	
	move.l	#TAMPON,a2
	move.l	#SPRIT,a0
	move	#48,d2
	move	#100,d0
	move.w	VALEUR,d1
	jsr	AFF_SPRIT
	
	
	move.l	#ROUTINE,$4d2	;into VBL_list
	move.l	#0,$4d6		;Flag
	move.w	#3,$454		;boucles -> 0


PRINCIPAL move	#$ff,-(sp)
          move	#6,-(sp)
          trap	#1
          addq.l	#4,sp
          tst         d0
          bne         FIN
          tst.b	MUSIX
          beq	PRINCIPAL
          move.l	#sound1,-(sp)
          move	#32,-(sp)
          trap	#14
          add.l	#6,sp
          bra	PRINCIPAL



ROUTINE
           ; 1)=effacer: dernier dessin‚ en premier
           
	move.b    #0,MUSIX		;NO sound
	
	tst       TESTONS
	bne       REMET

           move.l    #TAMPON,a0
           move.l    (a0)+,a1
           move.w    #47,d2		;48 lignes

EFF_1      move.l    (a0)+,(a1)+		;Restauration des 5-1=4 Blocks
           move.l    (a0)+,(a1)+
           
           move.l    (a0)+,(a1)+
           move.l    (a0)+,(a1)+
           
           move.l    (a0)+,(a1)+
           move.l    (a0)+,(a1)+

           move.l    (a0)+,(a1)+
           move.l    (a0)+,(a1)+

           add.l     #128,a1
           dbf       d2,EFF_1
    
          
	; 2) Dessin des sprites
	
	move.l	#TAMPON,a2
	move.l	#SPRIT,a0
	move	#48,d2
	move	#100,d0
	move.w	VALEUR,d1
	jsr	AFF_SPRIT
	
	sub	#DONNE,VALEUR
           cmpi	#DONNE,VALEUR
           bls	ECHANGER	
           rts          
ECHANGER   move.b	#1,TESTONS		;attente VBL d'aprŠs
	move.b	#1,MUSIX		;fin=son
	rts
	
REMET	
           ; 1)=effacer: dernier dessin‚ en premier
           

DONNE	SET	DONNE+8

           move.l    #TAMPON,a0
           move.l    (a0)+,a1
           move.w    #47,d2		;48 lignes

EFF_2      move.l    (a0)+,(a1)+		;Restauration des 5-1=4 Blocks
           move.l    (a0)+,(a1)+
           
           move.l    (a0)+,(a1)+
           move.l    (a0)+,(a1)+
           
           move.l    (a0)+,(a1)+
           move.l    (a0)+,(a1)+

           move.l    (a0)+,(a1)+
           move.l    (a0)+,(a1)+

           add.l     #128,a1
           dbf       d2,EFF_2
    
          
	; 2) Dessin des sprites
	
	move.l	#TAMPON,a2
	move.l	#SPRIT,a0
	move	#48,d2
	move	#100,d0
	move.w	VALEUR,d1
	jsr	AFF_SPRIT

	move.b	#1,TESTONS
	add	#DONNE,VALEUR
           cmpi	#265,VALEUR
	bge	OUI
	rts	
OUI	move.b	#0,TESTONS
	move.b	#1,MUSIX		;fin=son
	rts

AFF_SPRIT mulu      #160,d0
          move      d1,d7
          lsr       #1,d1
          add       d1,d0
          add.l     $44e,d0		
          and.l     #-8,d0
          move.l    d0,a1
          move.l    a1,(a2)+
          and.l     #15,d7
          subq      #1,d2
          move      d2,d6

          **** affichage d'un sprite de 48*48 :Laurent P,  4/2/89 ****
 
_SP1      moveq     #0,d0
          moveq     #0,d1
          moveq     #0,d2
          moveq     #0,d3

          move      (a0)+,d0
          move      (a0)+,d1
          move      (a0)+,d2
          move      (a0)+,d3

          move.l    d0,d4
          or.l      d1,d4
          or.l      d2,d4
          or.l      d3,d4
          not.l     d4

          ror.l     d7,d0
          ror.l     d7,d1
          ror.l     d7,d2
          ror.l     d7,d3
          ror.l     d7,d4

          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d0,(a1)+
          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d1,(a1)+
          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d2,(a1)+
          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d3,(a1)+

          swap      d0
          swap      d1
          swap      d2
          swap      d3
          swap      d4

          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d0,(a1)+
          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d1,(a1)+
          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d2,(a1)+
          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d3,(a1)+
    
    	
          ****  suite du 2 eme block et dessin du 3 eme block **** 
          
          sub.l      #8,a1	;On revient au block 2 pour le 
          			;completer...
                    	   
          moveq     #0,d0
          moveq     #0,d1
          moveq     #0,d2
          moveq     #0,d3

          move      (a0)+,d0
          move      (a0)+,d1
          move      (a0)+,d2
          move      (a0)+,d3

          move.l    d0,d4
          or.l      d1,d4
          or.l      d2,d4
          or.l      d3,d4
          not.l     d4
	
          ror.l     d7,d0
          ror.l     d7,d1
          ror.l     d7,d2
          ror.l     d7,d3
          ror.l     d7,d4
	
          *** pas de sauvegarde dans tampon pour 2 eme block de ***
          *** 16 pixels :    On a deja dessin‚ sur ce block ... ***
          
          and       d4,(a1)
          or        d0,(a1)+
          and       d4,(a1)
          or        d1,(a1)+
          and       d4,(a1)
          or        d2,(a1)+
          and       d4,(a1)
          or        d3,(a1)+

          swap      d0
          swap      d1
          swap      d2
          swap      d3
          swap      d4

          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d0,(a1)+
          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d1,(a1)+
          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d2,(a1)+
          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d3,(a1)+
    	
          ****  suite du 3 eme block et dessin du 4 eme block **** 
          
          sub.l      #8,a1	;On revient au block 3 pour le 
          			;completer...
                    	   
          moveq     #0,d0
          moveq     #0,d1
          moveq     #0,d2
          moveq     #0,d3

          move      (a0)+,d0
          move      (a0)+,d1
          move      (a0)+,d2
          move      (a0)+,d3

          move.l    d0,d4
          or.l      d1,d4
          or.l      d2,d4
          or.l      d3,d4
          not.l     d4
	
          ror.l     d7,d0
          ror.l     d7,d1
          ror.l     d7,d2
          ror.l     d7,d3
          ror.l     d7,d4
	
          *** pas de sauvegarde dans tampon pour 3 eme block de ***
          *** 16 pixels :    On a deja dessin‚ sur ce block ... ***
          
          and       d4,(a1)
          or        d0,(a1)+
          and       d4,(a1)
          or        d1,(a1)+
          and       d4,(a1)
          or        d2,(a1)+
          and       d4,(a1)
          or        d3,(a1)+

          swap      d0
          swap      d1
          swap      d2
          swap      d3
          swap      d4

          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d0,(a1)+
          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d1,(a1)+
          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d2,(a1)+
          move.w    (a1),(a2)+
          and       d4,(a1)
          or        d3,(a1)+

          add.l     #128,a1		;160-(4*8) :4*8=4*4 mots/block
          dbf       d6,_SP1
          rts
   
          
FIN        move.l	#0,$4d2
	move.w	#2,$454
	
	move	#7,-(sp)
	trap	#1
	add.l	#2,sp
	
	dc.w	$a009

	movem.l	PALETTE,d0-d7	;remet ancienne palette
	movem.l	d0-d7,$ff8240
	
           move.l	SSP,-(sp)
	move	#$20,-(sp)
	trap	#1
	add.l	#6,sp
	
	clr.w	-(sp)
	trap	#1

	SECTION	 DATA
	
*
*  NEOchrome cut buffer contents (left justified):
*
*    pixels/scanline    = 48 (bytes/scanline: $0018)
*  # scanlines (height) = 48
*
*  Hardware color pallet  (color 0 to 15):

PAL	dc.w      $0000,$0700,$0730,$0750,$0770,$0470,$0070,$0075
           dc.w      $0077,$0057,$0027,$0007,$0507,$0707,$0704,$0777

SPRIT	dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
	dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
	dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
	dc.w	$0000,$0000,$0000,$0000,$1FF8,$1FF8,$0000,$0000
	dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
	dc.w	$E007,$E007,$1FF8,$0000,$0000,$0000,$0000,$0000
	dc.w	$0003,$0003,$0000,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$C000,$C000,$0000,$0000,$000C,$000C,$0003,$0000
	dc.w	$0000,$0000,$FFFF,$0000,$3000,$3000,$C000,$0000
	dc.w	$0010,$0010,$000F,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$0800,$0800,$F000,$0000,$0020,$0020,$001F,$0000
	dc.w	$0000,$0000,$FFFF,$0000,$0400,$0400,$F800,$0000
	dc.w	$0040,$0040,$003F,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$0200,$0200,$FC00,$0000,$0080,$0080,$007F,$0000
	dc.w	$0000,$0000,$FFFF,$0000,$0100,$0100,$FE00,$0000
	dc.w	$0100,$0100,$00FF,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$0080,$0080,$FF00,$0000,$0200,$0200,$01FF,$0000
	dc.w	$0000,$0000,$FFFF,$0000,$0040,$0040,$FF80,$0000
	dc.w	$0400,$0400,$03FF,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$0020,$0020,$FFC0,$0000,$0400,$0400,$03FE,$0000
	dc.w	$0000,$0000,$3FFE,$0000,$0020,$0020,$3FC0,$0000
	dc.w	$0800,$0800,$07FC,$0000,$0000,$0000,$1FFC,$0000
	dc.w	$0010,$0010,$1FE0,$0000,$0800,$0800,$07F8,$0000
	dc.w	$0000,$0000,$0FF8,$0000,$0010,$0010,$0FE0,$0000
	dc.w	$1000,$1000,$0FF8,$0000,$0000,$0000,$0FF8,$0000
	dc.w	$0008,$0008,$0FF0,$0000,$1000,$1000,$0FF8,$0000
	dc.w	$0000,$0000,$0FF8,$0000,$0008,$0008,$0FF0,$0000
	dc.w	$1000,$1000,$0FFC,$0000,$0000,$0000,$1FFC,$0000
	dc.w	$0008,$0008,$1FF0,$0000,$1000,$1000,$0FFE,$0000
	dc.w	$0000,$0000,$3FFE,$0000,$0008,$0008,$3FF0,$0000
	dc.w	$2000,$2000,$1FFF,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$0004,$0004,$FFF8,$0000,$2000,$2000,$1FFF,$0000
	dc.w	$0000,$0000,$FFFF,$0000,$0004,$0004,$FFF8,$0000
	dc.w	$2000,$2000,$1FFF,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$0004,$0004,$FFF8,$0000,$2000,$2000,$1FFF,$0000
	dc.w	$0000,$0000,$FFFF,$0000,$0004,$0004,$FFF8,$0000
	dc.w	$2000,$2000,$1FFF,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$0004,$0004,$FFF8,$0000,$2000,$2000,$1FFF,$0000
	dc.w	$0000,$0000,$FFFF,$0000,$0004,$0004,$FFF8,$0000
	dc.w	$2000,$2000,$1FFF,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$0004,$0004,$EFF8,$0000,$2000,$2000,$1FFF,$0000
	dc.w	$0000,$0000,$7FFF,$0000,$0004,$0004,$EFF8,$0000
	dc.w	$2000,$2000,$1FFE,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$0004,$0004,$E3F8,$0000,$1000,$1000,$0FF0,$0000
	dc.w	$0000,$0000,$FFFF,$0000,$0008,$0008,$CDF0,$0000
	dc.w	$1000,$1000,$0FFE,$0000,$0000,$0000,$7FFF,$0000
	dc.w	$0008,$0008,$9FF0,$0000,$1000,$1000,$0FFF,$0000
	dc.w	$0000,$0000,$7FFF,$0000,$0008,$0008,$3FF0,$0000
	dc.w	$1000,$1000,$0FFF,$0000,$0000,$0000,$3FFE,$0000
	dc.w	$0008,$0008,$7FF0,$0000,$0800,$0800,$07FF,$0000
	dc.w	$0000,$0000,$8FF8,$0000,$0010,$0010,$FFE0,$0000
	dc.w	$0800,$0800,$07FF,$0000,$0000,$0000,$E1E3,$0000
	dc.w	$0010,$0010,$FFE0,$0000,$0400,$0400,$03FF,$0000
	dc.w	$0000,$0000,$FC0F,$0000,$0020,$0020,$FFC0,$0000
	dc.w	$0400,$0400,$03FF,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$0020,$0020,$FFC0,$0000,$0200,$0200,$01FF,$0000
	dc.w	$0000,$0000,$FFFF,$0000,$0040,$0040,$FF80,$0000
	dc.w	$0100,$0100,$00FF,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$0080,$0080,$FF00,$0000,$0080,$0080,$007F,$0000
	dc.w	$0000,$0000,$FFFF,$0000,$0100,$0100,$FE00,$0000
	dc.w	$0040,$0040,$003F,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$0200,$0200,$FC00,$0000,$0020,$0020,$001F,$0000
	dc.w	$0000,$0000,$FFFF,$0000,$0400,$0400,$F800,$0000
	dc.w	$0010,$0010,$000F,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$0800,$0800,$F000,$0000,$000C,$000C,$0003,$0000
	dc.w	$0000,$0000,$FFFF,$0000,$3000,$3000,$C000,$0000
	dc.w	$0003,$0003,$0000,$0000,$0000,$0000,$FFFF,$0000
	dc.w	$C000,$C000,$0000,$0000,$0000,$0000,$0000,$0000
	dc.w	$E007,$E007,$1FF8,$0000,$0000,$0000,$0000,$0000
	dc.w	$0000,$0000,$0000,$0000,$1FF8,$1FF8,$0000,$0000
	dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
	dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000

PARLE      dc.b      27,'E',27,'Y',32,41,76,65,85,82,69,78,84,39,83,32,83,85
           dc.b      80,69,82,32,83,77,73,76,76,89,0      

sound1: 	dc.b  0,149
	dc.b  1,8
	dc.b  2,97
	dc.b  3,14
	dc.b  4,196
	dc.b  5,13
	dc.b  7,248
	dc.b  8,16
	dc.b  9,16
	dc.b  10,16
	dc.b  11,144
	dc.b  12,33
	dc.b  13,0
	dc.b  129,8
	dc.b  0,4
	dc.b  255,0


          SECTION	BSS
	
          ds.b      300
PILE
          EVEN
TAMPON    ds.W      16*48+2
SSP       ds.l      1
VALEUR    ds.w      1
PALETTE   ds.w      16
TESTONS   ds.b      1		;test pour sequence ADD ou SUB
MUSIX     ds.b      1		;flag Music ou non (Hors Vbl)

	END
