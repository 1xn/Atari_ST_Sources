            
                            πππππππππππππππππππππ
                                   ANNEXE 

                            πππππππππππππππππππππ



                         *** LES DêSASSEMBLEURS ***  
                         ππππππππππππππππππππππππππ

   Pour rester träs simple, on peut dire qu'un dÇsassembleur a 
   exactement la fonction contraire d'un assembleur:
   L'assembleur code les instructions de votre programme en binaire
   et le dÇsassembleur lit les codes binaire, les reconnait, et les
   traduits pour vous donner finalement le LISTING du programme.

   Comme cette opÇration est assez dÇlicate, il se peut qu'il n'arrive
   pas Ö traduire tous les codes qu'il rencontre ...

   Sur la plupart des dÇsassembleurs, il est possible d'obtenir soit
   le dÇsassemblage d'un programme en CODE ASCII (LISTING) soit un
   dÇsassemblage en CODE HEXA (Dans ce cas,il y a rarement des erreurs
   dans le dÇcodage du programme)
 
   RÇfärez vous Ö la notice de votre ASSEMBLEUR pour en savoir plus, la
   pluspart des assembleurs sont livrÇs avec une DêSASSEMBLEUR...


                          *** LES DêBUGGERS ***   
                          πππππππππππππππππππππ

   Un DêBUGGER est un utilitaire qui vous sera par la suite indispens-
   sable, quand vous Çcrirez des programmes d'une longue taille.
   Comme sont nom l'indique, il permet de chercher le BUG (Parasite,
   erreur) qui fait planter votre programme...
   Il resemble un peu Ö un dÇsassembleur, mais son plus grand intÇrrät
   et qu'il permet de visualiser le contenu des registre,du PC,du SR...

   Cet utilitaire accompagne souvent un ASSEMBLEUR, et il est assez
   spÇcifique...
   Je ne pourrais donc pas vous en parler plus longuement, il suffira
   de vous rÇfärer Ö la notice de votre ASSEMBLEUR...

   'SP' sera traduit par A7 ...


NB: Un dÇbugger fonctionne souvent en MODE TRACE.
πππ Ce mode est activÇ par la mise Ö 1 du bit T de SR.
    Le MODE TRACE dirige l'exÇcution d'un programme d'exception dont 
    l'adresse se trouve dans le 29¯äme VECTEUR D'EXCEPTION et qui 
    s'exÇcute Ö chaque instruction dÇcodÇe par le 68000.

    Pour mettre une de nos routine Ö la place de ce programme d'exception,
    il suffit de changer l'adresse que contient le vecteur d'exception qui
    controle le mode trace.

    Pour cela, il faut:

    .Passer en MODE SUPERVISEUR pour pouvoir changer la valeur 
     du vecteur d'exception et activer le bit T de SR  
    .DÇposer l'adresse de la nouvelle routine dans le vecteur d'exception
     (Avec MOVE.L   #ADDRESSE,$24) du mode trace
    .Passer en mode trace par activation du bit T de SR (Par exemple avec
     ORI.w   #%1000000000000000,SR)
    
    La routine elle màme ne devra pas modifier SP (Ou alors le reposi-
    tionner),car Ö la fin de celle-ci, on devra mettre un RTE:
    Le RTE va dÇpiler le PC pour retourner au programme principal:
    Changer SP entrainerait une mauvaise restauration du PC sauvÇ sur
    la pile systäme...


                         *** LA MêMOIRE DES ST ***
                         πππππππππππππππππππππππππ

  VoilÖ la structure de la mÇmoire ROM et RAM des ST:

 
     ADRESSES  :  CONTENU
     ππππππππππππππππππππ
     $0000000  :  SP apräs un RESET
     $0000004  :  PC apräs un RESET
        Ö
     $0000008
        de    
     $00003FF  :  Les VECTEURS d'EXCEPTION
        Ö
     $0000400  :  Les VARIABLES SYSTEME
        Ö
     $00007FF   
        de  
     $001FFFF  :  La RAM
        Ö  
     $007FFFF  fin de la RAM pour les 520 ST
        Ö
     $00FFFFF  fin de la RAM pour les 1040 ST
        Ö
     $01FFFFF  fin de la RAM pour les MEGA 2 ST
        en
     $0FA0000  :  dÇbut ROM de 128 Ko 
        en
     $0FEFFFF  :  ROM de 192 Ko du systäme d'exploitation
        en
     $0FF8000  :  Registres internes
        en
     $0FF8200  :  Registres vidÇo
        en
     $0FF8600  :  Registres DMA et FCD   (Disk)
        en
     $0FF8800  :  Registres AY3-8910  (sons)
        en
     $0FFFA00  :  Registres MFP  (Voir chapitre prÇcÇdent)
        en
     $0FFFC00  :  Registres des ACIA (Clavier et Midi)
                 

      

                              ππππππππππππππππ
    
    
    VoilÖ, cette initiation se termine ici, il ne me reste plus qu'Ö
    vous remercier pour votre collaboration.
    (Et Ö vous fÇliciter pour la bonne idÇe que vous avez eu en 
    voulant vous mettre Ö l'assembleur...)

    Vous pensez bien que la programmation en assembleur ne se termine
    pas ici, au contraire,cette initiation n'avait que pour but de vous 
    apprendre les bases de la programmation en 68000.

    C'est Ö vous maintenant d'explorer le reste de ce langage aux capa-
    citÇs fantastique... 
    Ma mission se termine ici ! (OHHH GOD!)      :SALUT !


    L'auteur:           PIECHOCKI  Laurent
    πππππππππ           8,Impasse Bellevue
                        57980  TENTELING



    Remerciements:

    Merci Ö Vincent et Dominique pour avoir testÇ cette initiation en 
    avant premiäre et pour l'aide qu'ils m'ont apportÇ.
    (Surtout pour leurs suggestions et leurs approbations...)    

    Remerciements Ö THOMSON EFCIS pour la documentation sur le 68000
 
    Remerciements Ö FREDERIK pour ses aides prÇcieuses...
                      
        

                           
