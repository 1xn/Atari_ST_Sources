<HTML>

<HEAD>

<TITLE>The Atari Compendium - Appendix H</TITLE>

</HEAD>

<BODY BACKGROUND BGCOLOR=#FFFFFF>

<P>
<a name=appendh><B><FONT SIZE=2>- APPENDIX H -</FONT></B>
<H2>THE DRAG & DROP<BR>
PROTOCOL</H2>

<HR>

<a name=overview><H4><FONT SIZE=4 >Overview</FONT></H4>

<HR>

<P>
The <a name=d&d>drag and drop protocol provides a simple method of data transmission
between applications that support it. Because this protocol relies
on the use of named pipes, the use of the drag and drop protocol
is only possible under <B>MultiTOS</B>.
<P>
A drag and drop operation involves the user selecting a piece
of program data (or perhaps several pieces) in the 'originator'
application and dragging that piece of data with the mouse to
the window of a 'recipient' application. This appendix will detail
the drag and drop protocol from the perspective of the originator
and the recipient.
<P>
You should note that during a drag and drop operation, neither
application should lock the screen with <B>wind_update()</B>.
<HR>

<a name=originator><H4><FONT SIZE=4 >The Originator</FONT></H4>

<HR>

<P>
When the user selects an object or group of objects, drags the
mouse (and objects), and releases the mouse button outside one
of your application window's work areas, the operation is a candidate
for a drag and drop operation.
<P>
When this action is initiated by the user, your application should
call <B>wind_find()</B> to determine the window handle of the
window at the drop location. From the window handle you can use
<B>wind_get()</B> to determine the owner's application identifier
which will be needed to send an <B>AES</B> message to the application.
<P>
At this point you should use <B>Psignal()</B> to cause <B>SIGPIPE</B>
(13) signals to be ignored and create a pipe named DRAGDROP.xx
where 'xx' is a unique two character combination. The pipe created
should have its 'hidden' attribute set. This causes reads to return
<B>EOF</B> when the other end of the pipe is closed. To ensure
your value is unique, try using the ASCII representation of your
own application ID. If the <B>Fcreate()</B> fails, try a new combination
until you find one that is available.
<P>
Now use <B>appl_write()</B> to send an <B>AES</B> message to the
application whose window was targeted (the recipient) as follows:
<TABLE BORDER=1>

<TR><TH>
<CENTER>
<B><FONT SIZE=1 >WORD</FONT></B>
</CENTER>

</TH><TH><B><FONT SIZE=2 >Contents</FONT></B></TH>
</TR>

<TR><TD>
<CENTER>
0
</CENTER>
</TD><TD><B><FONT SIZE=2>AP_DRAGDROP</FONT></B> (63)
</TD></TR>

<TR><TD>
<CENTER>
1
</CENTER>
</TD><TD><FONT SIZE=2>Originator's application id.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
2
</CENTER>
</TD><TD><FONT SIZE=2>0</FONT>
</TD></TR>

<TR><TD>
<CENTER>
3
</CENTER>
</TD><TD><FONT SIZE=2>Window handle of the target.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
4
</CENTER>
</TD><TD><FONT SIZE=2>Mouse X position at time of drop.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
5
</CENTER>
</TD><TD><FONT SIZE=2>Mouse Y position at time of drop.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
6
</CENTER>
</TD><TD><FONT SIZE=2>Keyboard shift status at time of drop.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
7
</CENTER>
</TD><TD><FONT SIZE=2>2 character pipe ID packed into a <B>WORD</B> (this is the file extension of the created pipe).</FONT>
</TD></TR>

</TABLE>

<P>

<P>
The originator application should now use <B>Fselect()</B> to
wait for either a write to the pipe or a timeout (3 to 4 seconds
should be sufficient). If the call times out then the drag and
drop operation failed and the pipe should be closed, otherwise,
read one byte from the pipe which should be either <B>DD_OK</B>
(0) or <B>DD_NAK</B> (1).
<P>
<B>DD_OK</B> means that the recipient wishes to continue the exchange.
<B>DD_NAK</B> means that the user dropped the data on a window
not prepared to accept data and that the pipe should be closed
and the drag and drop operation aborted.
<P>
On receipt of a <B>DD_OK</B>, the originator should then read
an additional 32 <B>BYTE</B>s from the pipe. These 32 <B>BYTE</B>s
consist of eight 4 <B>BYTE</B> data type values that the recipient
understands in order of preference. This list is not necessarily
complete and the originator should not abort simply because it
can't handle any of the listed data types. If less than eight
data types are listed by the recipient the 32 bytes will be padded
with zeros.
<P>
Data type values are four-byte ASCII values that represent data
that might be exchanged. When these values are prefixed with a
period, they represent data in a format that might be stored in
a disk file. Examples of these are '.IMG', '.TXT', and '.GEM'.
Some data types such as 'ARGS' or 'PATH' are not prefixed with
a period because they represent special data.
<P>
The desktop sends an 'ARGS' drag and drop message to an application
window when the user drags a group of file icons to an application
window. The 'ARGS' data consists of a standard command line with
the names of each file. 'ARGS' data should be translated for non-<B>TOS</B>
file systems. Characters within single quotes should be interpreted
as a single filename. Two single quotes in a row should be interpreted
as a single quote.
<P>
After the originator has consulted the 32 byte list or preferred
file types, it should construct its own structure consisting of
the following data:
<P>
1. The type of data the originator has decided to send (4 ASCII
bytes), ex: '.IMG'.
<P>
2. The length of data in bytes (<B>LONG</B>).
<P>
3. The data's name in ASCII format terminated by a <B>NULL</B>
(this is a variable length field but should be brief as it will
be used to label an icon which represents the data chunk), ex:
"ASCII Text".
<P>
4. The filename the data is associated with in ASCII format terminated
by a <B>NULL</B> (again, a variable length field), ex: "SAMPLE.TXT".
<P>
The originator should now write a <B>WORD</B> to the pipe signifying
the length of the header and then the header itself. After doing
so, the recipient will write a one byte reply indicating a return
code from the following list:
<TABLE BORDER=1>

<TR><TH><B><FONT SIZE=1 >Name</FONT></B></TH><TH>
<CENTER>
<B><FONT SIZE=2 >Value</FONT></B>
</CENTER>

</TH><TH><B><FONT SIZE=2 >Meaning</FONT></B></TH>
</TR>

<TR><TH><B>DD_OK</B></TH><TD>
<CENTER>
<FONT SIZE=2>0</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Ready to receive data. After receiving this message you should <B>Fwrite()</B> the actual data to the pipe and then <B>Fclose()</B> it to complete the operation.</FONT>
</TD></TR>

<TR><TH><B>DD_NAK</B></TH><TD>
<CENTER>
<FONT SIZE=2>1</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Abort the drag and drop. After receiving this message, close the pipe and abort the operation.</FONT>
</TD></TR>

<TR><TH><B>DD_EXT</B></TH><TD>
<CENTER>
<FONT SIZE=2>2</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>The recipient cannot accept the format the data is in. You may either construct a new header and send it as before or close the pipe to abort the operation.</FONT>
</TD></TR>

<TR><TH><B>DD_LEN</B></TH><TD>
<CENTER>
<FONT SIZE=2>3</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>The recipient cannot handle so much data. Either use a format which would cause less data to be sent or close the pipe to abort.</FONT>
</TD></TR>

<TR><TH><B>DD_TRASH</B></TH><TD>
<CENTER>
<FONT SIZE=2>4</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>The data has been dropped on a trashcan. The pipe should be <B>Fclose()</B>'d and the data should be deleted from the originator application.</FONT>
</TD></TR>

<TR><TH><B>DD_PRINTER</B></TH><TD>
<CENTER>
<FONT SIZE=2>5</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>The data has been dropped on a printer. The pipe should be <B>Fclose()</B>'d and the data should be printed.</FONT>
</TD></TR>

<TR><TH><B>DD_CLIPBOARD</B></TH><TD>
<CENTER>
<FONT SIZE=2>6</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>The data has been dropped on a clipboard. The pipe should be <B>Fclose()</B>'d and the exchange should be treated like a 'Copy' clipboard operation.</FONT>
</TD></TR>

</TABLE>

<P>

<P>
The one exception to the above procedure involves the 'PATH' data
type. If the recipient agrees to the 'PATH' data type by sending
a <B>DD_OK</B>, the originator should <I>read</I> a path string
(terminated by a <B>NULL</B> byte). The path string should be
the complete pathname represented by the target window, ex: "C:\WORDPRO\FILES\".
The size of the data, as specified in the header, specifies the
maximum size of the string the recipient should write.
<HR>

<a name=recipient><H4><FONT SIZE=4 >The Recipient</FONT></H4>

<HR>

<P>
The drag and drop protocol begins for the recipient upon receipt
of the <B>AP_DRAGDROP</B> message. When this message is received,
the recipient should immediately open the pipe 'U:\PIPE\DRAGDROP.xx',
where 'xx' is the two-byte ASCII identifier given in <B>WORD</B>
7 of the message, and write a <B>DD_OK</B> (0) to the pipe.
<P>
Next, as the recipient, you should construct a 32 byte structure
consisting of eight 4 byte data names your application can receive.
If your application recognizes less than eight types of data pad
the 32 bytes with zeros. After this structure is constructed,
write it to the pipe.
<P>
Now you should read a <B>WORD</B> from the pipe which will indicate
the size of the message header which should be read immediately
after. The message header consists of a four byte ASCII data type,
a <B>LONG</B> indicating the size of the data, a <B>NULL</B> terminated
string of variable size which identifies the data (or simply <B>NULL</B>
if none), and a <B>NULL</B> terminated filename (or <B>NULL</B>
if none).
<P>
After decoding the message header you should respond with one
of the one-byte response codes as listed in the previous table.
If the recipient cannot process the data type sent, it should
send <B>DD_EXT</B> and wait for reception of another header (preceded
again by a <B>WORD</B> headed size). If the originator cannot
supply any more data types you will receive a 0 byte return from
the <B>Fread()</B> call and you should <B>Fclose()</B> the pipe
and abort.
<P>
If the data type is acceptable, respond with <B>DD_OK</B>, read
the number of data bytes as indicated in the header to receive
the actual data, and then close the pipe.
<P>
A special case arises if the header specifies 'PATH' as a data
type. In this case you should send a <B>DD_OK</B> message (if
appropriate) and write the pathname associated with the target
window (you can write as many bytes as is specified in the message
header data length).
<p>
<hr><center><a href="toc.htm"> Table of Contents | </a><a href="index.htm"> Index </a></center>
</BODY>

</HTML>
