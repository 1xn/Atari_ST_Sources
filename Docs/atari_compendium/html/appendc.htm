<HTML>

<HEAD>

<TITLE>Appendix C: Native File Formats</TITLE>


</HEAD>

<BODY BACKGROUND BGCOLOR=#FFFFFF>

<P>
<a name=appendc><B><FONT SIZE=2>- APPENDIX C -</FONT></B>
<H1>NATIVE FILE FORMATS</H1>

<HR>

<a name=gem><H4><FONT SIZE=4 >The .GEM File Format</FONT></H4>

<HR>

<P>
Files ending in '.GEM' are graphic metafiles created by <B>GDOS</B>.
They are usually used to represent vector graphics but may also
be used to store links to bitmap images and textual information.
<P>
Two primary versions of <B>GEM</B> files exist. Version 1 files
are guaranteed not to contain bezier curves whereas version 3
files may. Version 3.xx files are also commonly referred to as
<B>GEM/3</B> files.
<a name=header><H5>The Metafile Header</H5>

<P>
<B>GEM</B> metafiles begin with a header as follows:
<TABLE BORDER=1>

<TR><TH>
<CENTER>
<B><FONT SIZE=1 >WORD</FONT></B>
</CENTER>

</TH><TH><B><FONT SIZE=2 >Contents</FONT></B></TH>
</TR>

<TR><TD>
<CENTER>
0
</CENTER>
</TD><TD><FONT SIZE=2>Magic number (0xFFFF).</FONT>
</TD></TR>

<TR><TD>
<CENTER>
1
</CENTER>
</TD><TD><FONT SIZE=2>Header length in <B>WORD</B>s.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
2
</CENTER>
</TD><TD><FONT SIZE=2>Version number (major * 100 + minor).</FONT>
</TD></TR>

<TR><TD>
<CENTER>
3
</CENTER>
</TD><TD><FONT SIZE=2>NDC Flag as follows:</FONT> <U><B>Value Meaning</B></U><FONT SIZE=2> 0 (0, 0) in lower-left corner (NDC)</FONT>
<P>
<FONT SIZE=2> 2 (0, 0) in upper-left corner (RC)</FONT>
</TD></TR>

<TR><TD>
<CENTER>
4
</CENTER>
</TD><TD><FONT SIZE=2>Minimum X extent.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
5
</CENTER>
</TD><TD><FONT SIZE=2>Minimum Y extent.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
6
</CENTER>
</TD><TD><FONT SIZE=2>Maximum X extent.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
7
</CENTER>
</TD><TD><FONT SIZE=2>Maximum Y extent.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
8
</CENTER>
</TD><TD><FONT SIZE=2>Page width in tenths of millimeters.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
9
</CENTER>
</TD><TD><FONT SIZE=2>Page height in tenths of millimeters.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
10
</CENTER>
</TD><TD><FONT SIZE=2>Lower Left X value of coordinate system.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
11
</CENTER>
</TD><TD><FONT SIZE=2>Lower Left Y value of coordinate system.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
12
</CENTER>
</TD><TD><FONT SIZE=2>Upper Right X value of coordinate system.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
13
</CENTER>
</TD><TD><FONT SIZE=2>Upper Right Y value of coordinate system.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
...
</CENTER>
</TD><TD><FONT SIZE=2>Other information may appear in the header following which is currently undefined. Use <B>WORD</B> #1 to skip any unknown information.</FONT>
</TD></TR>

</TABLE>

<P>

<P>
The definition of <B>WORD</B>s 4-13 is defined by the creator
of the file using three metafile commands. <B>WORD</B>s 4-7 are
set with the <B>v_meta_extents()</B> function. <B>WORD</B>s 8-9
are defined with the <B>vm_pagesize()</B> function. <B>WORD</B>s
10-13 are defined with <B>vm_coords()</B>. If the creator fails
to specify defaults for any of these values, the appropriate values
will be set to 0 in the header. If zeros appear for <B>WORD</B>s
10-13, the default NDC coordinate system should be assumed.
<a name=records><H5>Metafile Records</H5>

<P>
Following the header will appear a list of records of varying
length which, when translated, can be 'played back' on the destination
<B>VDI</B> device. Each record is formatted as follows:
<TABLE BORDER=1>

<TR><TH>
<CENTER>
<B><FONT SIZE=1 >WORD</FONT></B>
</CENTER>

</TH><TH><B><FONT SIZE=2 >Meaning</FONT></B></TH>
</TR>

<TR><TD>
<CENTER>
0
</CENTER>
</TD><TD><FONT SIZE=2>Opcode of <B>VDI</B> function.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
1
</CENTER>
</TD><TD><FONT SIZE=2>Number of <I>PTSIN</I> elements.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
2
</CENTER>
</TD><TD><FONT SIZE=2>Number of <I>INTIN</I> elements.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
3
</CENTER>
</TD><TD><FONT SIZE=2>Function sub-ID.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
4...
</CENTER>
</TD><TD><I><FONT SIZE=2>PTSIN</FONT></I> elements.
</TD></TR>

<TR><TD>
<CENTER>
...
</CENTER>
</TD><TD><I><FONT SIZE=2>INTIN</FONT></I> elements.
</TD></TR>

</TABLE>

<P>

<P>
The list of records is terminated with an opcode of 0xFFFF (this
record is written when a <B>v_clswk()</B> call is made by the
creator).
<P>
When playing back <B>GEM</B> files, the application must translate
all coordinates from the metafile coordinate system to that of
the destination device. In addition, text metrics should be appropriately
converted. If an unknown opcode is discovered it should be played
after any elements of the <I>PTSIN</I> array are translated (making
the assumption that they should be).
<a name=subopcodes><H5>Metafile Sub-Opcodes</H5>

<P>
<B>GEM</B> metafiles support the use of special sub-opcodes for
implementing reserved and user-defined functions. <B>GEM</B> metafile
translators should ignore sub-opcodes they don't understand. Each
sub-opcode can be identified with the primary opcode of 5, function
ID of 99 and the first (required) member of <I>INTIN</I> being
the sub-opcode ID. The currently defined sub-opcodes are as follows:
<TABLE BORDER=1>

<TR><TH>
<CENTER>
<I><B><FONT SIZE=1 >INTIN</FONT></B></I><B><FONT SIZE=1  FACE="Arial">[0]</FONT></B>
</CENTER>

</TH><TH><B><FONT SIZE=2 >Meaning</FONT></B></TH>
</TR>

<TR><TD>
<CENTER>
10
</CENTER>
</TD><TD><FONT SIZE=2>Start Group.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
11
</CENTER>
</TD><TD><FONT SIZE=2>End Group.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
49
</CENTER>
</TD><TD><FONT SIZE=2>Set No Line Style.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
50
</CENTER>
</TD><TD><FONT SIZE=2>Set Attribute Shadow On.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
51
</CENTER>
</TD><TD><FONT SIZE=2>Set Attribute Shadow Off.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
80
</CENTER>
</TD><TD><FONT SIZE=2>Start Draw Area Type Primitive.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
81
</CENTER>
</TD><TD><FONT SIZE=2>End Draw Area Type Primitive.</FONT>
</TD></TR>

</TABLE>

<P>

<P>
None of the pre-defined sub-opcodes use additional <I>INTIN</I>
or <I>PTSIN</I> elements though user-defined sub-opcodes may.
<P>
Opcodes from 0-100 are reserved for use by Atari. Sub-opcodes
from 101-65535 are available for use by developers but should
be registered with Atari to avoid possible conflicts.
<HR>

<a name=img><H4><FONT SIZE=4 >The .IMG File Format</FONT></H4>

<HR>

<P>
The IMG file format was designed to support raster images with
a varying number of planes. In practice, almost all IMG files
currently available are simple black and white single plane images
because the original file format did not specify a method of storing
palette information with the file. To fill this need, several
unofficial extensions to the format were put into use (some of
which were incorrectly implemented by applications supporting
them). The color extension which will be discussed here to cover
color images is the 'XIMG' format.
<H5>The IMG Header</H5>

<P>
Image headers consist of at least 8 <B>WORD</B>s as follows:
<TABLE BORDER=1>

<TR><TH>
<CENTER>
<B><FONT SIZE=1 >WORD</FONT></B>
</CENTER>

</TH><TH><B><FONT SIZE=2 >Meaning</FONT></B></TH>
</TR>

<TR><TD>
<CENTER>
0
</CENTER>
</TD><TD><FONT SIZE=2>Image file version (Usually 0x0001).</FONT>
</TD></TR>

<TR><TD>
<CENTER>
1
</CENTER>
</TD><TD><FONT SIZE=2>Header length in <B>WORD</B>s.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
2
</CENTER>
</TD><TD><FONT SIZE=2>Number of planes.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
3
</CENTER>
</TD><TD><FONT SIZE=2>Pattern definition length.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
4
</CENTER>
</TD><TD><FONT SIZE=2>Source device pixel width (in microns).</FONT>
</TD></TR>

<TR><TD>
<CENTER>
5
</CENTER>
</TD><TD><FONT SIZE=2>Source device pixel height (in microns).</FONT>
</TD></TR>

<TR><TD>
<CENTER>
6
</CENTER>
</TD><TD><FONT SIZE=2>Scan line width (in pixels).</FONT>
</TD></TR>

<TR><TD>
<CENTER>
7
</CENTER>
</TD><TD><FONT SIZE=2>Number of scan lines.</FONT>
</TD></TR>

</TABLE>

<P>

<P>
Some IMG files will have additional header information which should
be skipped or interpreted as discussed below.
<a name=epi><H5>Interpreting Extra Palette Information</H5>

<P>
If <B>WORD</B> #2 is set to 1, then the image data consists of
one plane (i.e. monochrome) and any extra header information should
be ignored.
<P>
If <B>WORD</B> #2 is set to 16 or 24 then the image data consists
of that many planes of high color or true color data and any extra
header information should be ignored. In a high color image, planes
appear in the order RRRRR GGGGGG BBBBB. In a true-color image,
planes appear in the order RRRRRRRR GGGGGGGG BBBBBBBB.
<P>
If <B>WORD</B> #2 is set to 2, 4, or 8, the image consists of
palette based color image data. If no extra header information
is given then the creator did not specify palette data for this
image. If extra header <B>WORD</B>s appears they may be useful
in determining the color palette. The two primary extensions to
the IMG format are 'XIMG' and 'STTT'. 'STTT' will not be discussed
here as it does not serve well as a machine or device independent
format. The 'XIMG' header extension is as follows:
<TABLE BORDER=1>

<TR><TH>
<CENTER>
<B><FONT SIZE=1 >WORD</FONT></B>
</CENTER>

</TH><TH><B><FONT SIZE=2 >Meaning</FONT></B></TH>
</TR>

<TR><TD>
<CENTER>
8 &amp; 9
</CENTER>
</TD><TD><FONT SIZE=2>ASCII 'XIMG'</FONT>
</TD></TR>

<TR><TD>
<CENTER>
10
</CENTER>
</TD><TD><FONT SIZE=2>Color format (Almost always 0 - RGB).</FONT>
</TD></TR>

<TR><TD>
<CENTER>
11...
</CENTER>
</TD><TD><FONT SIZE=2>RGB <B>WORD</B> triplets. Three <B>WORD</B>s appear for each pen. There are (2 ^ <I>numplanes</I>) pens. Each word contains a value from 0 to 1000 for direct passage to <B>vs_color()</B>.</FONT>
</TD></TR>

</TABLE>

<P>

<a name=data><a name=imagedata><H5>Image Data Format</H5>

<P>
Each scanline contains data in <B>VDI</B> device independent format
which must be converted using the <B>VDI</B> call <B>vr_trnfm()</B>.
Each scanline is padded to the nearest byte. Every plane for each
scanline should appear prior to the beginning of data for the
next scanline. This allows interpreters to decompress and transform
the image data a scanline at a time to conserve on time and memory.
A sample ordering for a four-plane image is listed below:
<TABLE BORDER=1>

<TR><TD>
<CENTER>
Scanline #0 - Plane #0
</CENTER>
</TD></TR>

<TR><TD>
<CENTER>
Scanline #0 - Plane #1
</CENTER>
</TD></TR>

<TR><TD>
<CENTER>
Scanline #0 - Plane #2
</CENTER>
</TD></TR>

<TR><TD>
<CENTER>
Scanline #0 - Plane #3
</CENTER>
</TD></TR>

<TR><TD>
<CENTER>
Scanline #1 - Plane #0
</CENTER>
</TD></TR>

<TR><TD>
<CENTER>
Scanline #1 - Plane #1
</CENTER>
</TD></TR>

<TR><TD>
<CENTER>
Scanline #1 - Plane #2
</CENTER>
</TD></TR>

<TR><TD>
<CENTER>
Scanline #1 - Plane #3
</CENTER>
</TD></TR>

<TR><TD>
<CENTER>
etc.
</CENTER>
</TD></TR>

</TABLE>

<P>

<a name=compress><H5>Image Compression</H5>

<P>
Each scanline is individually compressed. This means that compression
codes should not transgress over scanline boundaries. This enables
decompression routines to work scanline by scanline.
<P>
Scanline data should consist of two components, a vertical replication
count and encoded scanline data. In practice, however, some older
.IMG files may not contain a vertical replication count for each
scan line.
<P>
The vertical replication count specifies the number of times the
following scanline data should be used to replicate an image row.
It is formatted as follows:
<TABLE BORDER=1>

<TR><TH>
<CENTER>
<B><FONT SIZE=1 >BYTE</FONT></B>
</CENTER>

</TH><TH><B><FONT SIZE=2 >Contents</FONT></B></TH>
</TR>

<TR><TD>
<CENTER>
0
</CENTER>
</TD><TD><FONT SIZE=2>0x00</FONT>
</TD></TR>

<TR><TD>
<CENTER>
1
</CENTER>
</TD><TD><FONT SIZE=2>0x00</FONT>
</TD></TR>

<TR><TD>
<CENTER>
2
</CENTER>
</TD><TD><FONT SIZE=2>0xFF</FONT>
</TD></TR>

<TR><TD>
<CENTER>
3
</CENTER>
</TD><TD><FONT SIZE=2>Replication Count</FONT>
</TD></TR>

</TABLE>

<P>

<P>
Immediately following the vertical replication count is the encoded
scanline data. This runlength encoding can by looking for three
separate flag <B>BYTE</B>s. A 0x80 <B>BYTE</B> indicates the beginning
of a bit-string item. A bit-string item is formatted as follows:

<TABLE BORDER=1>

<TR><TH>
<CENTER>
<B><FONT SIZE=1 >BYTE</FONT></B>
</CENTER>

</TH><TH><B><FONT SIZE=2 >Contents</FONT></B></TH>
</TR>

<TR><TD>
<CENTER>
0
</CENTER>
</TD><TD><FONT SIZE=2>0x80</FONT>
</TD></TR>

<TR><TD>
<CENTER>
1
</CENTER>
</TD><TD><FONT SIZE=2>Byte count 'n'.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
2...
</CENTER>
</TD><TD><FONT SIZE=2>'n' <B>BYTE</B>s of unencoded data.</FONT>
</TD></TR>

</TABLE>

<P>

<P>
A pattern-run item begins with a <B>BYTE</B> of 0x00. It specifies
a fixed number of times that the pattern which follows it should
be repeated. It is formatted as follows:
<TABLE BORDER=1>

<TR><TH>
<CENTER>
<B><FONT SIZE=1 >BYTE</FONT></B>
</CENTER>

</TH><TH><B><FONT SIZE=2 >Contents</FONT></B></TH>
</TR>

<TR><TD>
<CENTER>
0
</CENTER>
</TD><TD><FONT SIZE=2>0x00</FONT>
</TD></TR>

<TR><TD>
<CENTER>
1
</CENTER>
</TD><TD><FONT SIZE=2>Length of run.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
2...
</CENTER>
</TD><TD><FONT SIZE=2>Pattern bytes (length of pattern is determined by header <B>WORD</B> #3).</FONT>
</TD></TR>

</TABLE>

<P>

<P>
Finally, a solid-run item begins with any other <B>BYTE</B> code.
If the high order bit is set then this indicates a run of black
pixels, otherwise it indicates a run of white pixels. The lower
7 bits of the byte indicates the length of the run in bytes. For
example a <B>BYTE</B> code of 0x83 indicates a run of 24 black
pixels (3 bytes).
<HR>

<a name=bios><H4><FONT SIZE=4 ><a name=cnt>The .FNT File Format</FONT></H4>

<HR>

<P>
Filenames ending with the extension '.FNT' represent bitmap font
files. These files may be utilized by loading them through any
version of <B>GDOS</B>. FNT files are composed of a file header,
font data, a character offset table, and (optionally) a horizontal
offset table.
<a name=header><H5>The FNT Header</H5>

<P>
Font files begin with a header 88 <B>BYTE</B>s long. <B>WORD</B>
and <B>LONG</B> format entries in the header must be byte-swapped
as they appear in Intel ('Little Endian') format. The font header
is formatted as follows:
<TABLE BORDER=1>

<TR><TH>
<CENTER>
<B><FONT SIZE=1 >BYTE(s)</FONT></B>
</CENTER>

</TH><TH><B><FONT SIZE=2 >Contents</FONT></B></TH>
<TH><B><FONT SIZE=2 >Related VDI Call</FONT></B>
</TH></TR>

<TR><TD>
<CENTER>
0 - 1
</CENTER>
</TD><TD><FONT SIZE=2>Face ID (must be unique).</FONT>
</TD><TD><B><FONT SIZE=2>vqt_name()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
2 - 3
</CENTER>
</TD><TD><FONT SIZE=2>Face size (in points).</FONT>
</TD><TD><B><FONT SIZE=2>vst_point()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
4 - 35
</CENTER>
</TD><TD><FONT SIZE=2>Face name.</FONT>
</TD><TD><B><FONT SIZE=2>vqt_name()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
36 - 37
</CENTER>
</TD><TD><FONT SIZE=2>Lowest character index in face (usually 32 for disk-loaded fonts).</FONT>
</TD><TD><B><FONT SIZE=2>vqt_fontinfo()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
38 - 39
</CENTER>
</TD><TD><FONT SIZE=2>Highest character index in face.</FONT>
</TD><TD><B><FONT SIZE=2>vqt_fontinfo()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
40 - 41
</CENTER>
</TD><TD><FONT SIZE=2>Top line distance expressed as a positive offset from baseline.</FONT>
</TD><TD><B><FONT SIZE=2>vqt_fontinfo()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
42 - 43
</CENTER>
</TD><TD><FONT SIZE=2>Ascent line distance expressed as a positive offset from baseline.</FONT>
</TD><TD><B><FONT SIZE=2>vqt_fontinfo()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
44 - 45
</CENTER>
</TD><TD><FONT SIZE=2>Half line distance expressed as a positive offset from baseline.</FONT>
</TD><TD><B><FONT SIZE=2>vqt_fontinfo()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
46 - 47
</CENTER>
</TD><TD><FONT SIZE=2>Descent line distance expressed as a positive offset from baseline.</FONT>
</TD><TD><B><FONT SIZE=2>vqt_fontinfo()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
48 - 49
</CENTER>
</TD><TD><FONT SIZE=2>Bottom line distance expressed as a positive offset from baseline.</FONT>
</TD><TD><B><FONT SIZE=2>vqt_fontinfo()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
50 - 51
</CENTER>
</TD><TD><FONT SIZE=2>Width of the widest character.</FONT>
</TD><TD><FONT SIZE=2>N/A</FONT></TD></TR>

<TR><TD>
<CENTER>
52 - 53
</CENTER>
</TD><TD><FONT SIZE=2>Width of the widest character cell.</FONT>
</TD><TD><B><FONT SIZE=2>vqt_fontinfo()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
54 - 55
</CENTER>
</TD><TD><FONT SIZE=2>Left offset.</FONT>
</TD><TD><B><FONT SIZE=2>vqt_fontinfo()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
56 - 57
</CENTER>
</TD><TD><FONT SIZE=2>Right offset.</FONT>
</TD><TD><B><FONT SIZE=2>vqt_fontinfo()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
58 - 59
</CENTER>
</TD><TD><FONT SIZE=2>Thickening size (in pixels).</FONT>
</TD><TD><B><FONT SIZE=2>vqt_fontinfo()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
60 - 61
</CENTER>
</TD><TD><FONT SIZE=2>Underline size (in pixels).</FONT>
</TD><TD><B><FONT SIZE=2>vqt_fontinfo()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
62 - 63
</CENTER>
</TD><TD><FONT SIZE=2>Lightening mask (used to eliminate pixels, usually 0x5555).</FONT>
</TD><TD><FONT SIZE=2>N/A</FONT></TD></TR>

<TR><TD>
<CENTER>
64 - 65
</CENTER>
</TD><TD><FONT SIZE=2>Skewing mask (rotated to determine when to perform additional rotation on a character when skewing, usually 0x5555).</FONT>
</TD><TD><FONT SIZE=2>N/A</FONT></TD></TR>

<TR><TD>
<CENTER>
66 - 67
</CENTER>
</TD><TD><FONT SIZE=2>Font flags as follows:</FONT> <U><B>Bit</B></U><B> <U>Meaning (if Set)</U></B>
<P>
<FONT SIZE=2> 0 Contains System Font</FONT>
<P>
<FONT SIZE=2> 1 Horizontal Offset</FONT>
<P>
<FONT SIZE=2>  Tables should be used.</FONT>
<P>
<FONT SIZE=2> 2 Font data need not be</FONT>
<P>
<FONT SIZE=2>  byte-swapped.</FONT> 3 Font is mono-spaced.
</TD><TD><FONT SIZE=2>N/A</FONT></TD></TR>

<TR><TD>
<CENTER>
68 - 71
</CENTER>
</TD><TD><FONT SIZE=2>Offset from start of file to horizontal offset table.</FONT>
</TD><TD><B><FONT SIZE=2>vqt_width()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
72 - 75
</CENTER>
</TD><TD><FONT SIZE=2>Offset from start of file to character offset table.</FONT>
</TD><TD><B><FONT SIZE=2>vqt_width()</FONT></B></TD></TR>

<TR><TD>
<CENTER>
76 - 79
</CENTER>
</TD><TD><FONT SIZE=2>Offset from start of file to font data.</FONT>
</TD><TD><FONT SIZE=2>N/A</FONT></TD></TR>

<TR><TD>
<CENTER>
80 - 81
</CENTER>
</TD><TD><FONT SIZE=2>Form width (in bytes).</FONT>
</TD><TD><FONT SIZE=2>N/A</FONT></TD></TR>

<TR><TD>
<CENTER>
82 - 83
</CENTER>
</TD><TD><FONT SIZE=2>Form height (in scanlines).</FONT>
</TD><TD><FONT SIZE=2>N/A</FONT></TD></TR>

<TR><TD>
<CENTER>
84 - 87
</CENTER>
</TD><TD><FONT SIZE=2>Pointer to the next font (set by <B>GDOS</B> after loading).</FONT>
</TD><TD><FONT SIZE=2>N/A</FONT></TD></TR>

</TABLE>

<P>

<H5>Font Data</H5>

<P>
The binary font data is arranged on a single raster form. The
raster's height is the same as the font's height. The raster's
width is the sum of the character width's padded to end on a <B>WORD</B>
boundary.
<P>
There is no padding between characters. Each character may overlap
<B>BYTE</B> boundaries. Only the last character in a font is padded
to make the width of the form end on an even <B>WORD</B> boundary.
<P>
If bit #2 of the font flags header item is cleared, each <B>WORD</B>
in the font data must be byte-swapped.
<a name=cot><H5>Character Offset Table</H5>

<P>
The Character Offset Table is an array of <B>WORD</B>s which specifies
the distance (in pixels) from the previous character to the next.
The first entry is the distance from the start of the raster form
to the left side of the first character. One succeeding entry
follows for each character in the font yielding (number of characters
+ 1) entries in the table. Each entry must be byte-swapped as
it appears in Intel ('Little Endian') format.
<a name=horizontal><H5>Horizontal Offset Table</H5>

<P>
The Horizontal Offset Table is an optional array of positive or
negative <B>WORD</B> values which when added to the values in
the character offset table yield the true spacing information
for each character. One entry appears in the table for each character.
This table is not often used. 
<HR>

<a name=rsc><a name=rscfileformat><H4><FONT SIZE=4 >The .RSC File Format</FONT></H4>

<HR>

<P>
Resource files contain application specific data which is generally
loaded at run-time. RSC files contain <B>OBJECT</B> trees (see
the discussion of the <B>OBJECT</B> structure in <I>Chapter 6:
<B>AES</B></I><B>&nbsp;</B>), strings, and images.
<P>
Two resource file formats are currently supported. <B>TOS</B>
versions less than 4.0 support the original RSC format while <B>TOS</B>
4.0 and greater will now support the older format and a new extensible
format. The original format will be discussed first followed by
an explanation of the changes incurred by the newer format.
<a name=rscheader><H5>The RSC Header</H5>

<P>
Resource files begin with an 18 <B>WORD</B> header as follows:
<TABLE BORDER=1>

<TR><TH>
<CENTER>
<B><FONT SIZE=1 >WORD</FONT></B>
</CENTER>

</TH><TH><B><FONT SIZE=2 >Field Name</FONT></B></TH>
<TH><B><FONT SIZE=2 >Contents</FONT></B></TH></TR>

<TR><TD>
<CENTER>
0
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_vrsn</FONT></I>
</TD><TD><FONT SIZE=2>Contains the version number of the resource file. This value is 0x0000 or 0x0001 in old format RSC files and has the third bit set (i.e. 0x0004) in the new <a name=fileformat>file format.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
1
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_object</FONT></I>
</TD><TD><FONT SIZE=2>Contains an offset from the beginning of the file to the <B>OBJECT</B> structures.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
2
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_tedinfo</FONT></I>
</TD><TD><FONT SIZE=2>Contains an offset from the beginning of the file to the <B>TEDINFO</B> structures.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
3
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_iconblk</FONT></I>
</TD><TD><FONT SIZE=2>Contains an offset from the beginning of the file to the <B>ICONBLK</B> structures.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
4
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_bitblk</FONT></I>
</TD><TD><FONT SIZE=2>Contains an offset from the beginning of the file to the <B>BITBLK</B> structures.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
5
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_frstr</FONT></I>
</TD><TD><FONT SIZE=2>Contains an offset from the beginning of the file to the string pointer table.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
6
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_string</FONT></I>
</TD><TD><FONT SIZE=2>Contains an offset from the beginning of the file to the string data.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
7
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_imdata</FONT></I>
</TD><TD><FONT SIZE=2>Contains an offset from the beginning of the file to the image data.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
8
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_frimg</FONT></I>
</TD><TD><FONT SIZE=2>Contains an offset from the beginning of the file to the image pointer table.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
9
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_trindex</FONT></I>
</TD><TD><FONT SIZE=2>Contains an offset from the beginning of the file to the tree pointer table.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
10
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_nobs</FONT></I>
</TD><TD><FONT SIZE=2>Number of <B>OBJECT</B>s in the file.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
11
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_ntree</FONT></I>
</TD><TD><FONT SIZE=2>Number of object trees in the file.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
12
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_nted</FONT></I>
</TD><TD><FONT SIZE=2>Number of <B>TEDINFO</B>s in the file.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
13
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_nib</FONT></I>
</TD><TD><FONT SIZE=2>Number of<B> ICONBLK</B>s in the file.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
14
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_nbb</FONT></I>
</TD><TD><FONT SIZE=2>Number of <B>BITBLK</B>s in the file.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
15
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_nstring</FONT></I>
</TD><TD><FONT SIZE=2>Number of free strings in the file.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
16
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_nimages</FONT></I>
</TD><TD><FONT SIZE=2>Number of free images in the file.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
17
</CENTER>
</TD><TD><I><FONT SIZE=2>rsh_rssize</FONT></I>
</TD><TD><FONT SIZE=2>Size of the resource file (in bytes). Note that this is the size of the old format resource file. If the newer format file is being used then this value can be used as an offset to the extension array.</FONT>
</TD></TR>

</TABLE>

<P>

<P>
Many of the header entries represent offsets from the beginning
of the file. These offsets are expressed as positive unsigned
<B>WORD</B>s making the standard file a maximum size of 64k bytes.
<a name=objecttrees><H5>Object Trees</H5>

<P>
Each RSC file may contain a number of object trees. <I>rsh_object</I>
contains an offset from the beginning of the file to the object
trees (stored consecutively). The <B>LONG</B> array pointed to
by <I>rsh_trindex</I> can be used to separate the object trees
in the list. There are <I>rsh_ntree</I> <B>LONG</B>s in this array.
Each array entry can be used as an array index to a different
object tree. After being loaded in memory by <B>rsrc_load()</B>,
the members at <I>rsh_trindex</I> are filled in with the absolute
pointers to their respective trees.
<P>
Each individual <B>OBJECT</B> is stored differently on disk then
in memory. In the file, pointers to <B>TEDINFO</B>s, <B>BITBLK</B>s,
and <B>ICONBLK</B>s are stored as absolute indexes into the arrays
of these members stored in the file. Therefore a <B>G_TEXT</B>
<B>OBJECT</B> whose <I>ob_spec</I> field would normally point
a <B>TEDINFO</B> in memory would contain the value 0 if that <B>TEDINFO</B>
were the first <B>TEDINFO</B> contained in the file. 
<P>
String pointers are represented on disk by their absolute offset
from the beginning of the file. Image pointers in <B>BITBLK</B>
and <B>ICONBLK</B> structures are likewise pointed to through
absolute file offsets, not indexes.
<a name=freestringsandimages><H5>Free Strings and Images</H5>

<P>
<I>rsh_frstr</I> points to a table of <B>LONG</B>s which each
specify an offset from the start of the RSC file to a free string.
<I>rsh_frimg</I> points to a table of <B>LONG</B>s which each
specify an offset from the start of the file to a <B>BITBLK</B>
structure.
<a name=aesresourceformat><H5>AES 3.30 Resource Format</H5>

<P>
Beginning with <B>AES</B> 3.30, the resource file format was altered
to allow for new <B>OBJECT</B> types. The only <B>OBJECT</B> which
currently takes advantage of this format is <B>G_CICON</B>. <B>G_CICON</B>s
can only be stored in files of the new format. The new format
can be identified by the third bit of <I>rsh_vrsn</I> being set.
<a name=extensionarray><H5>The Extension Array</H5>

<P>
Immediately following the old resource data (using <I>rsh_rssize</I>
as an offset) an extension array is added. The first entry in
this array is a <B>LONG</B> containing the true size of the RSC
file. Notice that values such as these are now stored as <B>LONG</B>s
to allow the size of RSC files to exceed 64k. Due to the method
in which some older resource elements were stored many components
of RSC files will still be constrained to 64k.
<P>
Following the file size is a <B>LONG</B> word for each extension
present followed by a 0L which terminates the array. Currently
only one extension exists <a name=cicionblkextension>(<B>CICONBLK</B>) and it <I>always</I>
occupies the first extension slot. As additional extensions are
added, a value of -1L for any entry will indicate that there are
no resource elements of that type in the file. For example an
extension array that does contain <B>CICONBLK</B>s would look
like this.
<TABLE BORDER=1>

<TR><TD>
<CENTER>
...basic resource file...
</CENTER>
</TD>
</TR>

<TR><TD>
<CENTER>
<B>LONG</B> <I>filesize</I>
</CENTER>
</TD>
</TR>

<TR><TD>
<CENTER>
<B>LONG</B> <I>cicon_offset</I>
</CENTER>

</TD></TR>

<TR><TD>
<CENTER>
0L
</CENTER>
</TD></TR>

</TABLE>

<P>

<H5>The CICONBLK Extension</H5>

<P>
The <B>G_CICON</B> object type adds the ability to display color
icons from the <B>AES</B>. The <I>ob_spec</I> of the object indexes
a <B>CICONBLK</B> structure stored in the extension area. Each
<B>CICONBLK</B> must contain a monochrome icon and a color icon
for as many different resolutions as desired. When drawn, the
<B>AES</B> will pick the icon that is the closest match for the
current screen display. If there is no color icon present which
the <B>AES</B> is able to convert, the monochrome icon is displayed.
<P>
The <I>cicon_offset</I> pointer gives an offset from the beginning
of the resource file to a file segment which contains the <B>CICON</B>
data. This segment contains a <B>CICONBLK</B> pointer table followed
by the actual <B>CICONBLK</B>s. 
<P>
The <B>CICONBLK</B> pointer table is simply a longword 0L for
each <B>CICONBLK</B> present in the file. These pointers are filled
in by the <B>AES</B> when loaded. The list is terminated by a
-1L.
<P>
Immediately following the pointer table is one of the following
variable length structures for each <B>CICONBLK</B>:
<PRE>
ICONBLK monoicon;		/* This is the standard monochrome resource. */
<FONT SIZE=2>LONG n_cicons;		/* Number of CICONs of different resolutions. */
</FONT>WORD mono_data[x];	/* Monochrome bitmap data. */
<FONT SIZE=2>WORD mono_mask[x];	/* Monochrome bitmap mask. */
</FONT>CHAR icon_text[12];	/* Icon text (maximum of 12 characters). */
/* for each resolution supported (n_cicons) include the following structure */

<FONT SIZE=2>WORD num_planes;		/* Number of planes this icon was intended for */
</FONT>LONG col_data;		/* Placeholder (calculated upon loading). */
<FONT SIZE=2>LONG col_mask;		/* Placeholder (calculated upon loading). */
</FONT>LONG sel_data;		/* Placeholder (must be non-zero if 'selected' data exists */
<FONT SIZE=2>LONG sel_mask;		/* Placeholder (calculated upon loadind). */
</FONT>LONG next_res;		/* 1L = more icons follow */
<FONT SIZE=2>WORD color_data[n];	/* n WORDs of image data (n is num_planes*WORDs in mono icon).*/
</FONT>WORD color_mask[n];	/* n WORDs of image mask. */
<FONT SIZE=2>WORD select_data[n];	/* Only present if sel_data is non-zero. */
</FONT>WORD select_mask[n];	/* Only present if sel_data is non-zero. */

</PRE>

<H5>CICON Images</H5>

<P>
All color image data is stored in <B>VDI</B> device independent
format on disk and is automatically converted by <B>vr_trnfm()</B>
upon <B>rsrc_load()</B>.
<p>
<hr><center><a href="toc.htm"> Table of Contents | </a><a href="index.htm"> Index </a></center>
</BODY>

</HTML>
