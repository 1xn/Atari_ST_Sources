<HTML>

<HEAD>

<TITLE>Introduction, Part 1</TITLE>
</HEAD>
<BODY BACKGROUND BGCOLOR=ffffff>


<P>
<a name=chap1><B><FONT SIZE=2>- CHAPTER 1 -</FONT></B>
<H1>INTRODUCTION TO<BR>
ATARI PROGRAMMING</H1>

<HR>

<a name=hardware><H4><FONT SIZE=4 >Atari Computer Hardware</FONT>
</H4>

<HR>

<H5>The 260/520/1040 <a name=st>ST</H5>

<P>
The first Atari ST computers became available to the public in
1985. The new Atari models were the first 16-bit computers well-suited
for use in the home. The availability of these computers signaled
the end of the Atari 8-bit era of computers such as the 400, 800,
800XL, 1200XL, 1450XLD, 65XE, and 130XE computers.
<P>
The name 'ST' is derived from the capabilities of the Motorola
68000 processor upon which the original Atari line was based.
The 68000 uses a <B>S</B>ixteen-bit data bus with a <B>T</B>hirty-two
bit address bus.
<P>
16-bit computers introduced a new concept in computer technology
called the operating system <a name=os>(OS). Atari's operating system, <B>T</B>he
<B>O</B>perating <B>S</B>ystem <a name=tos1>(<B>TOS</B>), was loaded from a
boot disk originally, but is now almost always installed in ROM.
<P>
A primary subsystem of <B>TOS</B> is <B>GEM</B> ('Graphics Environment
Manager'), the graphical user interface used by Atari computers.
<B>GEM</B>, which<B> </B>was developed by <a name=dri>Digital Research, Inc.,
manages the graphic interface to applications and provides access
to popular computing features with buzzwords such as windows,
the mouse, menus, and the desktop.
<P>
<a name=gem><B>GEM</B> was originally designed for PC-compatible computers.
PC-based <B>GEM</B>, however, is no longer completely compatible
with Atari <B>GEM</B>. Only components of <B>GEM</B> relative
to its use on the Atari will be covered in this guide. Some functions
which were originally documented for Atari <B>GEM</B> yet never
implemented have been included for completeness.
<P>
Other <B>TOS</B> subsystems include <B>GEMDOS</B>, the <B>BIOS</B>,
and the <B>XBIOS</B>. These subsystems provide a hardware interface
and management functions for the file system.
<P>
The original ST computers featured the following:
<P>
 Motorola 68000 32-bit processor running at 8MHz.
<P>
 Integrated GEM/TOS operating system.
<P>
 RAM memory storage of 256k, 512k, or 1 Mbyte (depending on model).
<P>
 Built-in MIDI, dual joystick, floppy drive, ACSI, serial, and
parallel ports.
<P>
 Sophisticated DMA peripheral access.
<P>
 Yamaha 3-voice FM sound generator.
<P>
 External 128k cartridge port.
<P>
 Integrated video controller capable of generating (320x200x16),
(640x200x4), and (640x400x2) video modes from as many as 512 colors.
<H5>Mega ST 2/4</H5>

<P>
Two years after the release of the original ST series Atari released
the Mega ST series of computers. The Mega ST computers were shipped
with <B>TOS</B> 1.02 and featured several new features as follows:
<P>
 BLiTTER chip (for faster graphics).
<P>
 Internal expansion bus.
<P>
 Separate keyboard and CPU.
<P>
 Either two or four megabytes of RAM.
<P>
 Peripheral co-processor slot (for 68881 coprocessor, etc.).
<a name=stacy><H5>STacy</H5>

<P>
The STacy was released shortly after the Mega ST to provide a
portable means of Atari computing. STacy computers were shipped
with <B>TOS</B> 1.04. The STacy's design supplemented the basic
features of an ST with the following:
<P>
 Integrated CPU/keyboard/carrying case.
<P>
 Monochrome LCD screen.
<P>
 Track ball for mouse control.
<P>
 Optional hard drive.
<H5>1040 STe</H5>

<P>
The 1040 STe, released in 1990, was designed to expand upon the
capabilities of the 1040 ST. Many of the features added were geared
towards entertainment and multimedia applications. The 1040 STe
was shipped originally with <B>TOS</B> 1.06. The following features
were added to those of the basic ST:
<p>
 Blitter chip.
<P>
 Extended color palette to support up to 4096 colors.
<P>
 Support for horizontal and vertical fine scrolling.
<P>
 Video GENLOCK capability.
<P>
 Stereo 8-bit PCM sound.
<P>
 Two extra joystick ports with support for paddles and light pens.
<P>
 256k Operating System in ROM.
<P>
 SIMM memory slots to upgrade memory to 4 Mb
<H5>Mega STe</H5>

<P>
Released in 1990, the Mega STe was designed to provide for more
computing power than the 1040 STe and add several new hardware
features. The Mega STe shipped with <B>TOS</B> 2.02, 2.05, or
2.06. It adds features to that of a 1040 STe as follows:
<P>
 Motorola 68000 32-bit processor running at 8MHz or 16MHz.
<P>
 Optional 68881 math coprocessor.
<P>
 One, two, or four megabytes of RAM memory.
<P>
 Optional internal hard drive.
<P>
 Modern case design with separate keyboard/CPU.
<P>
 Three serial ports.
<P>
 Localtalk compatible networking port.
<P>
 VME compatible expansion slot.
<a name=tt030><H5>TT030</H5>

<P>
Also released in 1990, the TT030 computer was the first Atari
computer workstation designed for high-end computer users. The
TT030 workstation was shipped with <B>TOS</B> 3.01, 3.05, or 3.06.
It adds the following features to that of the Mega STe:
<P>
 Motorola 68030 32-bit processor running at 32MHz with cache.
<P>
 Memory capacity of 32Mb with optional 'fast' RAM.
<P>
 Standard 68882 math coprocessor.
<P>
 Four serial ports.
<P>
 SCSI device port.
<P>
 Stereo RCA jacks for sound output.
<P>
 Extra video resolutions of (320x480x256), (640x480x16), and (1280x960x2).
<a name=stbook><H5>ST Book</H5>

<P>
Designed to replace the STacy as the defacto portable ST computer,
the ST Book brought the basic computing power of an ST to a lightweight
notebook computer. This machine was only released in Europe and
Atari only shipped a very small quantity. The ST Book was shipped
with <B>TOS</B> 2.06. Minus the internal floppy drive, it supported
features beyond that of a STacy as follows:
<P>
 Lightweight case design.
<P>
 Keyboard with integrated numeric keypad.
<P>
 Mouse 'vector' pad.
<P>
 Processor-direct expansion slot.
<P>
 External keypad port.
<P>
 Floppy drive connector.
<H5>Falcon030</H5>

<P>
The newest member of the Atari line, the Falcon030 is to become
the new base model Atari system. The Falcon030 is currently shipping
with <B>TOS</B> 4.04. While remaining backwardly-compatible, the
Falcon030 adds many new features as follows:
<P>
 Integrated case and keyboard design.
<P>
 Motorola 68030 processor running at 16MHz with cache.
<P>
 Motorola 56001 DSP with 96k RAM.
<P>
 Standard configurations with 1, 4, or 14Mb RAM.
<P>
 Internal 2 &#189;" IDE hard drive optional.
<P>
 Video resolutions from 320x200 to 640x480 with a palette from
2 to 256 colors and 16-bit true color.
<P>
 Adaptable to Atari monitors, standard VGA monitors, and composite
video.
<P>
 GENLOCK-ready design.
<P>
 Ports include parallel, serial, external floppy, SCSI2, LAN,
4 joystick, MIDI in/out, microphone, headphone, and ST compatible
cartridge port.
<P>
 Interior processor expansion port.
<P>
 Sound system includes standard Yamaha FM chip, connection matrix,
and 8track, 16bit stereo record/playback.
<H5>Atari 'Clone' Computers</H5>

<P>
Atari 'clone' computers first became available in early 1994.
These computers, while mostly software compatible with Atari-produced
computers, contain hardware enhancements and modifications that
may cause incompatibilities in software that relies on hardware
access rather than the recommended method of using standardized
OS calls.
<P>
The recent availability of these computers as well as enhanced
graphics and peripheral boards emphasizes the value of programming
using the OS whenever possible to allow software to be run on
the widest variety of machine configurations. 
<HR>

<a name=software><H4><font size=4>Atari Computer Software</FONT>
</H4>

<HR>

<H5>GEMDOS</H5>

<P>
<B>GEMDOS</B> consists of file system management routines that
provide access to all of the basic devices supported by Atari
computers. It bears resemblance to MS-DOS in its functions and
opcode numbering while still maintaining some differences and
advantages.
<H5>MultiTOS</H5>

<P>
<B>MultiTOS</B> is the first truly multi-tasking extension to
<B>GEMDOS</B> supported by Atari. Based on <B>MiNT</B>, developed
by Eric Smith, <B>MultiTOS</B> adds true pre-emptive multitasking,
memory protection, and process control. Its methods of job control
and interprocess communication will be familiar to UNIX users.
With the ability to support loadable device drivers and file systems,
<B>MultiTOS </B>provides a complete range of functions to complement
<B>GEMDOS</B>. In its current incarnation, <B>MultiTOS</B> is
an option and thus disk-based as opposed to burned in ROM.
<a name=bios><H5>BIOS</H5>

<P>
The ST <B>BIOS</B> ('Basic Input/Output System') comprises the
lowest-level of device communication. <B>GEMDOS</B> uses the <B>BIOS</B>
to accomplish many of its file system operations.
<H5>XBIOS</H5>

<P>
The <B>XBIOS</B> ('eXtended Basic Input/Output System') controls
other hardware-specific features such as the floppy drive, video
controller, DSP, MFP, and sound system.
<HR>

<a name=gem><H4><font size=4>Atari GEM</FONT></H4>

<HR>

<H5>AES</H5>

<P>
The <B>AES</B> is responsible for window and menu control, messaging
services, and object rendering and manipulation.
<H5>VDI</H5>

<P>
The <B>VDI</B> consists of a series of drivers which provide device-independent
access to the display screen and external output devices such
as printers and plotters through <B>GDOS</B>. All graphic primitive
operations are accomplished with the <B>VDI</B>. The <B>AES</B>,
for instance, uses the <B>VDI</B> to render its objects on screen.

<H5>GDOS</H5>

<P>
<B>GDOS</B> is a disk-loadable subsystem of the <B>VDI</B>. The
term <B>GDOS</B> can refer to original <B>GDOS</B>, <B>FONTGDOS</B>,
or <B>SpeedoGDOS</B>. It controls loadable device drivers and
fonts. The original <B>GDOS</B> was limited to bitmap fonts and
did not have the bezier capabilities of <B>FONTGDOS</B> or <B>SpeedoGDOS</B>.
<H5>FONTGDOS</H5>

<P>
<B>FONTGDOS</B> is essentially a newer, faster <B>GDOS</B> with
bezier rendering functions present. <B>FONTGDOS </B>is otherwise
completely backwardly compatible with<B> GDOS.</B>
<H5>SpeedoGDOS</H5>

<P>
<B>SpeedoGDOS,</B> named for the Speedo<FONT SIZE=1>&trade;</FONT>
font format created by Bitstream, Inc., adds outline font rendering
capability to the basic features of <B>GDOS</B>. <B>SpeedoGDOS</B>
also includes a sophisticated caching system to promote the fastest
rendering possible.
<P>
Two versions of outline <B>GDOS</B> exist. The original version
(referred to as Font Scaling Module (<B>FSMGDOS</B>) ), based
on QMS/Imagen fonts, was never officially released. Nonetheless,
a small number of users still use <B>FSMGDOS</B> and differences
between them are noted. 
<H5>LINE-A</H5>

<P>
<B>LINE-A</B> is a special set of routines that provide an assembly
language interface to routines and variables belonging to the
<B>VDI</B> and <B>XBIOS</B>. It is so named because instruction
opcodes beginning with the hexadecimal number $A utilize a special
microprocessor exception which point to the <B>LINE-A</B> routines
in ROM.
<P>
<B>LINE-A</B> is the only operating system component that has
become out of date and incompatible. Atari recommends that software
developers avoid using <B>LINE-A</B> as it will be supported less
and less as hardware advancements make its use more incompatible.
<B>LINE-A</B> is documented briefly in this reference for completeness.
<H5>Desktop</H5>

<P>
The 'Desktop' is a independent <B>GEM</B> application burned into
ROM. It facilitates program launching and file manipulation as
well as providing a graphical shell for user-interaction.
<H5>XCONTROL</H5>

<P>
<B>XCONTROL</B> (Extensible Control Panel) is a desk accessory
application that provides access to multiple modules called CPX's
(Control Panel Extensions) which are used to control system configuration
and other related functions. A special section in this reference
discusses the creation of CPX's and the utility functions provided
by the <B>XCONTROL</B> shell accessory.
<HR>

<a name=third><H4><font size=4>Third-Party System Software</FONT>
</H4>

<HR>

<H5>Geneva</H5>

<P>
Geneva is an alternative, <B>TOS</B>-compatible operating system
developed by Gribnif Software. It functions mostly as an <B>AES</B>
replacement although it supplements other areas of the OS to provide
cooperative multitasking (as opposed to <B>MultiTOS</B>'s pre-emptive
multitasking).
<P>
Programming for Geneva 1.0 is identical to programming for <B>GEM</B>
with <B>AES</B> version 4.0. Geneva does not currently support
<B>MiNT</B> extensions though Gribnif has announced plans to eliminate
this incompatibility in a future version. You can detect Geneva
by searching for the cookie 'Gnva' in the system cookie jar. Likewise,
the presence of <B>MiNT</B> extensions can be determined by the
'MiNT' cookie.
<P>
Programmers should not rely specifically on the presence of these
cookies to determine if the current OS variety supports multitasking.
The <B>AES</B> <I>global</I> array contains values to help determine
the possible number of concurrent processes and the <B>AES</B>
version number. In addition, the <B>AES</B> call <B>appl_sysinfo()</B>,
available as of <B>AES</B> 4.0, can be used to determine the presence
of special <B>AES</B> features.
<P>
Geneva offers several system extensions not available under <B>MultiTOS</B>.
Information on programming the Geneva OS is available in the commercial
package and direct from Gribnif Software.
<HR>

<a name=programming><H4><font size=4>Programming Languages</FONT></H4>

<HR>

<H5>'C'</H5>

<P>
'C' has become the default standard for Atari computer programming.
Most reference books and materials illustrate OS functions using
'C' style bindings. This book is oriented towards 'C' without,
hopefully, alienating developers who develop in other languages.
Several different 'C' compilers exist in the Atari domain. All
have their various features and quirks which make it necessary
to be familiar enough with your implementation to modify the source
contained in this reference appropriately.
<P>
All 'C' bindings in this book were created for use with Lattice
'C' by Hisoft, Inc.. They should be easily convertable to other
major Atari 'C' compilers.
<P>
Luckily, most 'C' compilers agree with their function naming and
in most cases you can simply call the function as listed. If you
have an older version compiler you may need to add some bindings
using the information provided in accordance with your compiler's
recommendations.
<H5>Assembly Language</H5>

<P>
For the convenience of assembly language programmers, all functions
are listed with their opcode and related binding. In addition,
a section provided in front of the function reference will explain
the calling conventions for functions in that category.
<P>
All assembly listings in this book were created for use by the
AS68 compiler included in the Atari developer's kit.
<H5>BASIC</H5>

<P>
 Depending on the type of BASIC you utilize, functions may be
named identically or differently from what is listed in this book.
It is recommended that you seek a BASIC compiler that gives you
proper access to all of the functions of the machine or familiarize
yourself with a more robust language.
<H5>Other Languages  </H5>

<P>
Various other languages exist in the Atari domain. <a name=pascal>Pascal, <a name=forth>Forth,
'C++', and others have implementations that are similar in design
to 'C'. You should refer to your language manual to properly utilize
information found in this reference.
<HR>

<a name=conventions><H4><font size=4>Conventions</FONT></H4>

<HR>

<a name=typesetting><H5>Typesetting</H5>

<P>
The following table displays a list of typesetting conventions
used in this book:
<CENTER>

<TABLE BORDER=1>

<TR><TH><B><font size=2 face="arial">Style</FONT></B>
</TH><TH><B><font size=2 face="arial">Meaning</FONT></B>
</TH></TR>

<TR><TD>Normal Text</TD><TD>Standard body text.</TD></TR>

<TR><TD><B>BOLD TEXT</B></TD><TD>Bolded words include function names like<B> appl_init()</B> , 'C' macros, '#defined' data types like <B>WORD</B>, and operating system components such as <B>GEM</B> and <B>TOS</B>.
</TD></TR>

<TR><TH><I>Italicized Text</I></TH><TD>Italicized text is used to represent variable names like <I>handle</I>. In addition sections of this book like <I><B>AES</B> Reference Manual</I> will be in capitalized italic text.
</TD></TR>

<TR><TD>| Text between vertical bars |</TD><TD>Vertical bars imply the absolute value of the variable or expression within. For instance:| -2 | == | 2 |
</TD></TR>

<TR><TD>( Number 1, Number 2 )</TD><TD>Two numbers contained within parentheses and separated by a comma indicate a coordinate point X followed by Y. For instance, (&nbsp;100,&nbsp;100&nbsp;).
</TD></TR>

<TR><TD>Number1 ^ Number 2</TD><TD>2 ^ 8 is the same as 2<FONT SIZE=1>8</FONT> or 2 to the power of 8.
</TD></TR>

<TR><TD>
<PRE>
Fixed Width Text
</PRE>
</TD><TD>This style of text is used to present bindings and computer listings.
</TD></TR>

<TR><TD>Table Text</TD><TD>This smaller style of text is used in tables as body text.
</TD></TR>

</TABLE>

</CENTER>

<P>

<H5>Functions</H5>

<P>
The function references in this guide are designed in a compatible
manner for ease of reading. Each function is illustrated as follows
(headings not applicable for a particular function will be omitted):
<H3>objc_draw()       <FONT SIZE=2>Function Name</FONT></H3>

<P>
<B>WORD objc_draw( <I>tree</I>, <I>obj</I>, <I>depth</I>, <I>bx</I>,
<I>by</I>, <I>bw</I>, <I>bh</I> )  <FONT SIZE=2 FACE="Arial">Definition</FONT></B>
<P>
<B>OBJECT *<I>tree</I>;        <FONT SIZE=2 FACE="Arial">Data
Types</FONT></B>
<P>
<B>WORD <I>obj</I>, <I>depth</I>, <I>bx</I>, <I>by</I>, <I>bw</I>,
<I>bh</I>;</B>
<TABLE BORDER=1>

<TR><TH></TH><TD>Immediately following the definition, a brief summary of the function will follow.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Opcode</B></TH><TD>The opcode related to the function will be listed in decimal and hexadecimal where appropriate.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Availability</B></TH><TD>This section will indicate any special conditions that must exist for this function to be present (i.e.: OS version, presence of <B>GDOS</B>, etc.).
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Parameters</B></TH><TD>The meaning of each parameter to the function will be explained here. If any data pointed to by parameters is modified it will be noted here as well. 
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Binding</B></TH><TD>This section will list a binding for the function in either 'C' format or assembly format, whichever is more appropriate. Please note bindings were written with ease of reading, not necessarily optimized code, in mind.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Return Value</B></TH><TD>This section explains the return value of the function. This covers only that value returned on the left side of the function expression.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Version Notes</B></TH><TD>Under this heading, any features of a function which are only present under certain conditions are discussed.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Caveats</B></TH><TD>Known bugs or abnormalities of a function are listed next to this heading.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Comments</B></TH><TD>Other useful information or hints are listed here.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>See Also</B></TH><TD>Functions which bear a relation to the current function or which are codependent on one another are listed here.
</TD></TR>

</TABLE>

<P>

<HR>

<a name=data><H5>Data Types</H5>

<P>
Within function definitions, several data types are referenced
that vary from compiler to compiler. The following provides a
key to the data type used and their actual definition. Other data
types will contain a structure definition or 'typedef' within
the binding. Be aware that some compilers default to 16-bit integers
while others use 32-bit integers.
<CENTER>

<TABLE BORDER=1>

<TR><TH><B><font size=1>Usage</FONT></B></TH><TH><B><font size=2>Synonyms</FONT></B>
</TH><TH><B><font size=2>Meaning</FONT></B></TH>
</TR>

<TR><TD><B>WORD</B></TD><TD><FONT SIZE=2>short, int, short int</FONT>
</TD><TD><FONT SIZE=2>16-bit signed integer</FONT></TD></TR>

<TR><TD><B>UWORD</B></TD><TD><FONT SIZE=2>unsigned int, unsigned short, unsigned short int</FONT>
</TD><TD><FONT SIZE=2>16-bit unsigned integer</FONT></TD></TR>

<TR><TD><B>LONG</B></TD><TD><FONT SIZE=2>long, int, long int</FONT>
</TD><TD><FONT SIZE=2>32-bit signed integer</FONT></TD></TR>

<TR><TD><B>ULONG</B></TD><TD><FONT SIZE=2>unsigned long, unsigned int, unsigned long int</FONT>
</TD><TD><FONT SIZE=2>32-bit unsigned integer</FONT></TD></TR>

<TR><TD><B>VOID</B></TD><TD><FONT SIZE=2>void</FONT></TD><TD><FONT SIZE=2>This naming is used to denote a function with no parameters or return value. </FONT>
</TD></TR>

<TR><TD><B>BOOLEAN</B></TD><TD><FONT SIZE=2>bool, boolean, short, short int, int</FONT>
</TD><TD><FONT SIZE=2>16-bit signed integer valid only as <B>TRUE</B> (non-zero) or <B>FALSE</B> (0)</FONT>
</TD></TR>

<TR><TD><B>WORD</B> *</TD><TD><FONT SIZE=2>short *, int *,
<BR>
short&nbsp;int *</FONT>
</TD><TD><FONT SIZE=2>This is a pointer to a 16-bit signed integer.</FONT>
</TD></TR>

<TR><TD><B>UWORD</B> *</TD><TD><FONT SIZE=2>unsigned short *, unsigned int *, unsigned short int *</FONT>
</TD><TD><FONT SIZE=2>This is a pointer to a 16-bit unsigned integer.</FONT>
</TD></TR>

<TR><TD><B>LONG</B> *</TD><TD><FONT SIZE=2>long *, int *, long&nbsp;int&nbsp;*</FONT>
</TD><TD><FONT SIZE=2>This is a pointer to a 32-bit signed integer.</FONT>
</TD></TR>

<TR><TD><B>ULONG</B> *</TD><TD><FONT SIZE=2>unsigned long *, unsigned int *, unsigned long int *</FONT>
</TD><TD><FONT SIZE=2>This is a pointer to a 32-bit unsigned integer.</FONT>
</TD></TR>

<TR><TD><B>VOIDP</B></TD><TD><FONT SIZE=2>void *, char *</FONT>
</TD><TD><FONT SIZE=2>This represents a pointer to an undefined memory type.</FONT>
</TD></TR>

<TR><TH><B>VOIDPP</B></TH><TD><FONT SIZE=2>void **, char **</FONT>
</TD><TD><FONT SIZE=2>This represents a pointer to a pointer of an undefined memory type.</FONT>
</TD></TR>

<TR><TD><B>char</B> *</TD><TD><FONT SIZE=2>None</FONT></TD><TD><FONT SIZE=2>8-bit character string buffer</FONT>
</TD></TR>

<TR><TD><B>BYTE</B>, <B>CHAR</B></TD><TD><FONT SIZE=2>signed byte, signed&nbsp;char</FONT>
</TD><TD><FONT SIZE=2>8-bit signed byte</FONT></TD></TR>

<TR><TD><B>UBYTE</B>, <B>UCHAR</B></TD><TD><FONT SIZE=2>unsigned byte, unsigned char</FONT>
</TD><TD><FONT SIZE=2>8-bit unsigned byte</FONT></TD></TR>

<TR><TD><B>fix31</B></TD><TD><FONT SIZE=2>None</FONT></TD><TD><FONT SIZE=2>This type holds a 31-bit mantissa and sign bit. The value represents the number contained multiplied times 1/65536. For a complete explanation see<I> Chapter 7: <B>VDI</B></I>.</FONT>
</TD></TR>

</TABLE>

</CENTER>

<P>

<H5>Numeric Values</H5>

<P>
Because different computer languages use different nomenclature
to specify numbers in different bases, you will come across numbers
presented in a variety of different ways within this book as follows:
<TABLE BORDER=1>

<TR><TH>
<CENTER>
<B><font size=1>Prefix</FONT></B>
</CENTER>

</TH><TH>
<CENTER>
<B><font size=2>Decimal 23 as an Example</FONT></B>
</CENTER>

</TH><TH><B><font size=2>Meaning</FONT></B></TH>
</TR>

<TR><TD>
<CENTER>
None
</CENTER>
</TD><TD>
<CENTER>
<FONT SIZE=2>22</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>This number is shown in decimal (base 10) format. The majority of numbers shown will be in this format for simplicity.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
0x
</CENTER>
</TD><TD>
<CENTER>
<FONT SIZE=2>0x16</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>This number is shown in hexadecimal (base 16) format. Function opcodes in assembly language and numbers used as mask values will appear mostly in this format.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
$
</CENTER>
</TD><TD>
<CENTER>
<FONT SIZE=2>$16</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Same as above.</FONT></TD></TR>

<TR><TD>
<CENTER>
0
</CENTER>
</TD><TD>
<CENTER>
<FONT SIZE=2>026</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>This number is shown in octal (base 8) format. Only in extremely specialized cases will numbers by represented in this manner.</FONT>
</TD></TR>

<TR><TD>
<CENTER>
%
</CENTER>
</TD><TD>
<CENTER>
<FONT SIZE=2>%00010110</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>This number is shownn in binary (base 2) format. Only when dealing with hardware registers and in a few other circumstances will numbers be represented in this manner.</FONT>
</TD></TR>

</TABLE>

<P>

<H5>Constant Definitions</H5>

<P>
Modern programming practices dictate the use of named constants
wherever possible in place of 'raw' values. Take for example the
following call to <B>Devconnect()</B>:
<P>
<B>In 'C':</B>
<PRE>
Devconnect( 3, 9, 0, 0, 1 );

</PRE>

<P>
<B>In assembly language:</B>
<PRE>
move.w		#1,-(sp)
move.w		#0,-(sp)
move.w		#0,-(sp)
move.w		#9,-(sp)
move.w		#3,-(sp)
move.w		#$8B,-(sp)
trap		#14
lea		12(sp),sp

</PRE>

<P>
Calling the function in this format makes debugging and program
maintenance more difficult because the parameters' meanings are
concealed by the numeric assignments. The following code illustrates
the preferred method of coding:
<P>
<B>In 'C':</B>
<PRE>
/* Extracted from TOSDEFS.H, included by TOS.H */
#define ADC			3
#define DMAREC		0x01
#define DAC			0x08
#define CLK_25M		0
#define CLK_COMPAT	0
#define NO_SHAKE		1

/* Program segment */
#include &lt;TOS.H&gt;

Devconnect( ADC, DMAREC|DAC, CLK_25M, CLK_COMPAT, NO_SHAKE );

</PRE>

<P>
<B>In assembly language:</B>
<PRE>
; Extracted from TOSDEFS.I

ADC		EQU		3
DMAREC		EQU		$01
DAC		EQU		$08
CLK_25M		EQU		0
CLK_COMPAT	EQU		0
NO_SHAKE	EQU		1

Devconnect	EQU		$8B

; Program Segment
		INCLUDE		"TOSDEFS.I"

		move.w		#NO_SHAKE, -(sp)
		move.w		#CLK_COMPAT,-(sp)
		move.w		#CLK_25M,-(sp)
		move.w		#DMAREC!DAC,-(sp)
		move.w		#ADC,-(sp)
		move.w		#Devconnect,-(sp)
		trap			#14
		lea			12(sp),sp

</PRE>

<P>
Unfortunately, because many function call parameters do not have
standard definitions associated with them, programmers have had
to create their own, which in turn makes their programs less portable,
or use the 'raw' constants. In addition, some compilers do not
use standardized definitions at all.
<P>
To help alleviate these difficulties, this revision of the <I><B>Compendium</B></I>
contains named definitions for almost every possible function
parameter. These definitions come from the 'C' header files TOS.H
and TOSDEFS.H or the assembly include file TOSDEFS.I, both available
on disk from SDS. Every attempt has been made to ensure that these
files compile with development tools in the Lattice 'C', Pure
'C', and Alcyon 'C' packages. Some modifications to these files
may be necessary, however, due to the peculiarities of some compilers.
<P>
The 'C' header files consist of two parts to improve portability
between compilers. The TOS.H file is a compiler dependent file
used to bind the operating system calls to definitions. This file,
in turn, includes the file TOSDEFS.H which should remain portable
between compilers.
<P>
When choosing definitions for inclusion in the TOSDEFS files,
names given by Atari were given highest precedence followed by
those assigned (and kept consistent) by compiler manufacturers.
Other definitions were created with simplicity and consistency
in mind.
<P>
Use of the given constants will increase program code readability
and provide for a higher level of portability between compilers.

<p>
<hl>
<center><a href="toc.htm"> Table of Contents | </a><a href="index.htm"> Index </a></center>
</BODY>

</HTML>

