<HTML>

<HEAD>

<TITLE>Line-A Function Reference</TITLE>


</HEAD>

<BODY BACKGROUND BGCOLOR=#FFFFFF>

<H2>LINE-A Function Reference</H2>

<HR>

<a name=if><H3>$A000 - Initialize</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD COLSPAN=2>Return pointers to the <B>Line-A</B> variable structures.
</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD COLSPAN=2>
<PRE>
; Retrieve Line-A variable table address
<FONT SIZE=2>; and store in A5 for other bindings

</FONT>   .dc.w   $A000
<FONT SIZE=2>   .move.l   a0,a5 ; Line-A variables
</FONT>   .move.l   a1,a6 ; System font headers
</PRE>

</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH><B>Return Value</B></TH><TD COLSPAN=2>The initialize function returns the following information:
</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH></TH><TD>
<CENTER>
<B><FONT SIZE=1 >Register</FONT></B>
</CENTER>

</TD><TD><B><FONT SIZE=2 >Contents</FONT></B></TD>
</TR>

<TR><TH></TH><TD>
<CENTER>
D0
</CENTER>
</TD><TD><FONT SIZE=2>Pointer to <B>Line-A</B> variable table.</FONT>
</TD></TR>

<TR><TH></TH><TD>
<CENTER>
A0
</CENTER>
</TD><TD><FONT SIZE=2>Pointer to <B>Line-A</B> variable table.</FONT>
</TD></TR>

<TR><TH></TH><TD>
<CENTER>
A1
</CENTER>
</TD><TD><FONT SIZE=2>Pointer to a <B>NULL</B> terminated array of pointers to system font headers.</FONT>
</TD></TR>

<TR><TH></TH><TD>
<CENTER>
A2
</CENTER>
</TD><TD><FONT SIZE=2>Pointer to a longword array containing sixteen pointers which are addresses of the actual <B>Line-A</B> functions in memory. For example, JSR'ing through the pointer in the first array element has the same result as calling the <B>Initialize</B> instruction by an exception except that the function must be called from supervisor mode.</FONT>
</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH><B>Comments</B></TH><TD COLSPAN=2>This call is required to return the address of the <B>Line-A </B>variable structure needed for all other <B>Line-A</B> calls. All processes (including the <B>VDI</B>) share this structure so don't expect variables to remain constant between calls.
</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH><B>See Also</B></TH><TD COLSPAN=2><B>v_opnvwk()</B></TD>
</TR>

</TABLE>

<P>

<HR>

<H3>$A001 - Plot Pixel</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD>Plot a single pixel at the specified coordinates.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Parameters</B></TH><TD><I>INTIN</I> points to a <B>WORD</B> containing the color register of the pixel to plot at the specified coordinates. <I>PTSIN</I> points to two <B>WORD</B>s which are the X and Y coordinates respectively.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD>
<PRE>
; Plot a pixel at ( 10, 10 ) using color 1

<FONT SIZE=2>   move.l   #intin,8(a5)
</FONT>   move.l   #ptsin,12(a5)
<FONT SIZE=2>   .dc.w   $A001

</FONT>   .data
<FONT SIZE=2>intin:
</FONT>   .dc.w   1
<FONT SIZE=2>ptsin:
</FONT>   .dc.w   10, 10
</PRE>

</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>See Also</B></TH><TD><B>v_pmarker()</B></TD></TR>

</TABLE>

<P>

<HR>

<H3>$A002 - Get Pixel</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD>Get the color register of the pixel at the specified coordinates.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Parameters</B></TH><TD><I>PTSIN</I> points to two words which are the X and Y coordinates of the pixel to read.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD>
<PRE>
; Read the color index of point ( 10, 10 )

<FONT SIZE=2>   move.l  #ptsin,12(a5)
</FONT>   .dc.w  $A002

<FONT SIZE=2>   .data
</FONT>ptsin:
<FONT SIZE=2>   .dc.w  10, 10</FONT>
</PRE>

</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Return Value</B></TH><TD>The color register of the pixel is returned in D0.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>See Also</B></TH><TD><B>v_getpixel()</B></TD></TR>

</TABLE>

<P>

<HR>

<a name=alf><H3>$A003 - Arbitrary Line</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD>Draw a line between any two coordinates.</TD>
</TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Parameters</B></TH><TD><I>COLBIT0-4</I> are set appropriately to determine the line color. <I>LSTLIN</I> is a flag in which a value of 0 specifies to draw the last point in each line or a value of 1 which specifies not to. <I>LNMASK</I> specifies the pattern mask to apply to the line. <I>WRMODE</I> specifies the write mode of the function (0-3). ( <I>X1</I>, <I>Y1</I> ), and ( <I>X2</I>, <I>Y2&nbsp;</I>) give the starting and ending coordinates of the line.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD>
<PRE>
;Draw a solid line from ( 0, 0 ) to ( 100, 100 )

<FONT SIZE=2>move.w   #1,24(a5)  ; COLBIT 0
</FONT>move.w   #1,26(a5)  ; COLBIT 1
<FONT SIZE=2>move.w   #1,28(a5)  ; COLBIT 2
</FONT>move.w   #1,30(a5)  ; COLBIT 3
<FONT SIZE=2>move.w   #0,32(a5)  ; LSTLIN
</FONT>move.w   #$FFFF,34(a5)  ; LNMASK
<FONT SIZE=2>move.w   #0,36(a5)  ; WRMODE
</FONT>move.w   #0,38(a5)  ; X1
<FONT SIZE=2>move.w   #0,40(a5)  ; Y1
</FONT>move.w   #100,42(a5)  ; X2
<FONT SIZE=2>move.w   #100,42(a5)  ; Y2
</FONT>.dc.w   $A003
</PRE>

</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Caveats</B></TH><TD><I>LNMASK</I> is modified as a result of this call.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>See Also</B></TH><TD><B>$A004, v_pline()</B></TD></TR>

</TABLE>

<P>

<HR>

<H3>$A004 - Horizontal Line</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD>Draw a horizontal line between the specified coordinates.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Parameters</B></TH><TD><I>COLBIT0-3</I> defines the color of the line and <I>WRMODE</I> determines the write mode (0-3). (&nbsp;<I>X1</I>,&nbsp;<I>Y1</I>&nbsp;) and (&nbsp;<I>X2</I>,&nbsp;<I>Y1</I>&nbsp;) determine the starting and ending points of the line. <I>PATMSK</I> is AND'ed with <I>Y1</I> to determine a line index into the pattern pointed to by <I>PATPTR</I>. <I>PATMSK</I> is normally the number of lines in the pattern (should be an even power of 2) minus one. If <I>MFILL</I> is non-zero, <I>WMODE</I> is disregarded and the fill is colored from the values in <I>COLBIT0-3</I>.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD>
<PRE>
;Draw a horizontal dashed line from ( 0, 10 ) to (&nbsp;100,&nbsp;10 )

<FONT SIZE=2>   move.w   #1,24(a5)  ; COLBIT 0
</FONT>   move.w   #1,26(a5)  ; COLBIT 1
<FONT SIZE=2>   move.w   #1,28(a5)  ; COLBIT 2
</FONT>   move.w   #1,30(a5)  ; COLBIT 3
<FONT SIZE=2>   move.w   #0,36(a5)  ; WRMODE
</FONT>   move.w   #0,38(a5)  ; X1
<FONT SIZE=2>   move.w   #0,40(a5)  ; Y1
</FONT>   move.w   #100,42(a5)  ; X2
<FONT SIZE=2>   move.l   #pat,46(a5)  ; PATPTR
</FONT>   move.w   #0,50(a5)  ; PATMSK
<FONT SIZE=2>   move.w   #0,52(a5)  ; MFILL
</FONT>   .dc.w   $A004
</PRE>

</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>See Also</B></TH><TD><B>v_pline()</B></TD></TR>

</TABLE>

<P>

<HR>

<H3>$A005 - Filled Rectangle</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD>Draw a filled rectangle at the specified coordinates.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Parameters</B></TH><TD><I>CLIP</I> is a flag which when set to 1 enables clipping and when set to 0 disables it. All output of this function is confined to the region bounded by (&nbsp;<I>XMINCL</I>,&nbsp;<I>YMINCL</I>&nbsp;) and (&nbsp;<I>XMAXCL</I>,&nbsp;<I>YMAXCL</I>&nbsp;). Other parameters are consistent with the definitions given under <B>$A004</B>.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD>
<PRE>
; Draw a filled rectangle with its upper
<FONT SIZE=2>; left corner at ( 0, 0 ) and its lower
</FONT>; right corner at ( 100, 100 ). Clip the
<FONT SIZE=2>; rectangle to within ( 10, 10 ) and
</FONT>; ( 90, 90 )

<FONT SIZE=2>   move.w   #1,24(a5)  ; COLBIT0
</FONT>   move.w   #1,26(a5)  ; COLBIT1
<FONT SIZE=2>   move.w   #1,28(a5)  ; COLBIT2
</FONT>   move.w   #1,30(a5)  ; COLBIT3
<FONT SIZE=2>   move.w   #0,36(a5)  ; WRMODE
</FONT>   move.w   #0,38(a5)  ; X1
<FONT SIZE=2>   move.w   #0,40(a5)  ; Y1
</FONT>   move.w   #100,42(a5)  ; X2
<FONT SIZE=2>   move.w   #100,44(a5)  ; Y2
</FONT>   move.l   #stipple,46(a5) ; PATPTR
<FONT SIZE=2>   move.w   #1,50(a5)  ; PATMSK
</FONT>   move.w   #0,52(a5)  ; MFILL
<FONT SIZE=2>   move.w   #1,54(a5)  ; CLIP
</FONT>   move.w   #10,56(a5)  ; XMINCL
<FONT SIZE=2>   move.w   #10,58(a5)  ; YMINCL
</FONT>   move.w   #90,60(a5)  ; XMAXCL
<FONT SIZE=2>   move.w   #90,62(a5)  ; YMAXCL
</FONT>   .dc.w   $A005

<FONT SIZE=2>   .data
</FONT>stipple:
<FONT SIZE=2>   .dc.w   $AAAA
</FONT>   .dc.w   $5555
</PRE>

</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>See Also</B></TH><TD><B>v_bar(), vr_recfl()</B></TD>
</TR>

</TABLE>

<P>

<HR>

<H3>$A006 - Filled Polygon</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD>Draw a filled polygon line-by-line.</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Parameters</B></TH><TD><I>PTSIN</I> contains the X/Y coordinate pairs of the vertices of the polygon with the last point being equal to the first. <I>CONTRL[1]</I> specifies the number of vertices. The rest of the variables are consistent with previous usages.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD>
<PRE>
; Draw a filled polygon with vertices at
<FONT SIZE=2>; ( 0, 0 ), ( 319, 120 ), and ( 25, 199 ).

</FONT>move.l   #ptsin,12(a5)  ; PTSIN
<FONT SIZE=2>move.l   #contrl,4(a5)  ; CONTRL
</FONT>move.w   #1,24(a5)  ; COLBIT0
<FONT SIZE=2>move.w   #1,26(a5)  ; COLBIT1
</FONT>move.w   #1,28(a5)  ; COLBIT2
<FONT SIZE=2>move.w   #1,30(a5)  ; COLBIT3
</FONT>move.w   #0,36(a5)  ; WRMODE
<FONT SIZE=2>move.w   #stipple,46(a5) ; PATPTR
</FONT>move.w   #1,50(a5)  ; PATLEN
<FONT SIZE=2>move.w   #0,52(a5)  ; MFILL
</FONT>move.w   #0,54(a5)  ; CLIP

<FONT SIZE=2>; loop to draw the polygon
</FONT>move.w   #0,40(a5)  ; upper Y line
<FONT SIZE=2>move.w   #199,d4   ; lowest Y line
</FONT>       ; - upper Y line
<FONT SIZE=2>loop:
</FONT>   .dc.w   $A006
<FONT SIZE=2>addq.w   #1,40(a5)
</FONT>dbra   d4,loop

<FONT SIZE=2>   .data
</FONT>ptsin:
<FONT SIZE=2>   .dc.w   0, 0, 319, 120, 25, 199, 0, 0
</FONT>contrl:
<FONT SIZE=2>   .dc.w   0, 3
</FONT>stipple:
<FONT SIZE=2>   .dc.w   $AAAA
</FONT>   .dc.w   $5555
</PRE>

</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Caveats</B></TH><TD>Register A0, <I>X1</I>, and <I>X2</I> are destroyed as a result of this call.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>See Also</B></TH><TD><B>v_fillarea()</B></TD></TR>

</TABLE>

<P>

<HR>

<H3>$A007 - BitBlt</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD COLSPAN=3>Perform a bit-block transfer.</TD>
</TR>

<TR><TH></TH><TD COLSPAN=3></TD></TR>

<TR><TH><B>Parameters</B></TH><TD COLSPAN=3>The address of a <B>BitBlt</B> parameter block is passed in register A6. That structure is defined with the following members:
</TD></TR>

<TR><TH></TH><TD COLSPAN=3></TD></TR>

<TR><TH></TH><TD><B><FONT SIZE=1 >Member</FONT></B>
</TD><TD>
<CENTER>
<B><FONT SIZE=2 >Offset/Type</FONT></B>
</CENTER>

</TD><TD><B><FONT SIZE=2 >Meaning</FONT></B></TD>
</TR>

<TR><TH></TH><TD><B>B_WD</B></TD><TD>
<CENTER>
<FONT SIZE=2>+0 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Width of block to blit (in pixels)</FONT>
</TD></TR>

<TR><TH></TH><TD><B>B_HT</B></TD><TD>
<CENTER>
<FONT SIZE=2>+2 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Height of block to blit (in pixels)</FONT>
</TD></TR>

<TR><TH></TH><TD><B>PLANE_CT&#134;</B></TD><TD>
<CENTER>
<FONT SIZE=2>+4 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Number of bit planes to blit.</FONT></TD>
</TR>

<TR><TH></TH><TD><B>FG_COL&#134;</B></TD><TD>
<CENTER>
<FONT SIZE=2>+6 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Bit array used to create index into <B>OP_TAB</B>. <B>FG_COL</B> contributes its bit #'n' (where 'n' is the plane number)  to bit #1 of the index used to select the operation code from <B>OP_TAB</B>. </FONT>
</TD></TR>

<TR><TH></TH><TD><B>BG_COL&#134;</B></TD><TD>
<CENTER>
<FONT SIZE=2>+8 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Bit array used to create index into <B>OP_TAB</B>. <B>BG_COL</B> contributes its bit #'n' (where 'n' is the plane number)  to bit #0 of the index used to select the operation code from <B>OP_TAB</B>. </FONT>
</TD></TR>

<TR><TH></TH><TD><B>OP_TAB</B></TD><TD>
<CENTER>
<FONT SIZE=2>+10 (<B>LONG</B>)</FONT>
</CENTER>

</TD><TD><B><FONT SIZE=2>OP_TAB</FONT></B> is a 4 byte array containing four logic operation codes (0 to 16) to be applied to the image. The table is indexed by using the bit in <B>FG_COL</B> and <B>BG_COL</B> corresponding to the current plane as bit #1 and bit #0 respectively yielding an offset into <B>OP_TAB</B> of 0-3.
</TD></TR>

<TR><TH></TH><TD><B>S_XMIN</B></TD><TD>
<CENTER>
<FONT SIZE=2>+14 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>X pixel offset to source upper left.</FONT>
</TD></TR>

<TR><TH></TH><TD><B>S_YMIN</B></TD><TD>
<CENTER>
<FONT SIZE=2>+16 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Y pixel offset to source upper left.</FONT>
</TD></TR>

<TR><TH></TH><TD><B>S_FORM</B></TD><TD>
<CENTER>
<FONT SIZE=2>+18 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Address of the source form.</FONT></TD>
</TR>

<TR><TH></TH><TD><B>S_NXWD</B></TD><TD>
<CENTER>
<FONT SIZE=2>+22 (<B>LONG</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Number of bits per pixel.</FONT></TD></TR>

<TR><TH></TH><TD><B>S_NXLN</B></TD><TD>
<CENTER>
<FONT SIZE=2>+24 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Byte width of form.</FONT></TD></TR>

<TR><TH></TH><TD><B>S_NXPL</B></TD><TD>
<CENTER>
<FONT SIZE=2>+26 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Byte offset between planes (always 2).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>D_XMIN</B></TD><TD>
<CENTER>
<FONT SIZE=2>+28 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>X pixel offset to destination upper left.</FONT>
</TD></TR>

<TR><TH></TH><TD><B>D_YMIN</B></TD><TD>
<CENTER>
<FONT SIZE=2>+30 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Y pixel offset to destination upper left.</FONT>
</TD></TR>

<TR><TH></TH><TD><B>D_FORM</B></TD><TD>
<CENTER>
<FONT SIZE=2>+32 (<B>LONG</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Address of the destination form.</FONT>
</TD></TR>

<TR><TH></TH><TD><B>D_NXWD</B></TD><TD>
<CENTER>
<FONT SIZE=2>+36 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Number of bits per pixel.</FONT></TD></TR>

<TR><TH></TH><TD><B>D_NXLN</B></TD><TD>
<CENTER>
<FONT SIZE=2>+38 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Byte width of form.</FONT></TD></TR>

<TR><TH></TH><TD><B>D_NXPL</B></TD><TD>
<CENTER>
<FONT SIZE=2>+40 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Byte offset between planes (always 2).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>P_ADDR</B></TD><TD>
<CENTER>
<FONT SIZE=2>+42 (<B>LONG</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Address of pattern buffer (0 = no pattern).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>P_NXLN</B></TD><TD>
<CENTER>
<FONT SIZE=2>+46 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Bytes of pattern per line (should be even).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>P_NXPL</B></TD><TD>
<CENTER>
<FONT SIZE=2>+48 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>Bytes of pattern per plane (if using a single plane fill with a multi-plane destination, this should be 0).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>P_MASK</B></TD><TD>
<CENTER>
<FONT SIZE=2>+50 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><B><FONT SIZE=2>P_MASK</FONT></B> is found by the expression:<FONT SIZE=2>If <B>P_NXLN</B> = 2 ^ n then</FONT>
<P>
<FONT SIZE=2> <B>P_MASK</B> = (length in words - 1) &lt;&lt; n</FONT>
</TD></TR>

<TR><TH></TH><TD><B>SPACE</B></TD><TD>
<CENTER>
<FONT SIZE=2>+52 (<B>WORD</B>)</FONT>
</CENTER>

</TD><TD><FONT SIZE=2>24 bytes of blank space which must be reserved as work area for the function.</FONT>
</TD></TR>

<TR><TH></TH><TD COLSPAN=3></TD></TR>

<TR><TH></TH><TD COLSPAN=3>&#134;These members may be altered by this function.
</TD></TR>

<TR><TH></TH><TD COLSPAN=3></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD COLSPAN=3>
<PRE>
; Perform a blit using the information located
<FONT SIZE=2>; at bprmblk

</FONT>   lea   bprmblk,a6
<FONT SIZE=2>   .dc.w   $A007</FONT>
</PRE>

</TD></TR>

<TR><TH></TH><TD COLSPAN=3></TD></TR>

<TR><TH><B>See Also</B></TH><TD COLSPAN=3><B>vro_cpyfm(), vrt_cpyfm()</B>
</TD></TR>

</TABLE>

<P>

<HR>

<H3>$A008 - TextBlt</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD COLSPAN=2>Blit a single character to the screen.
</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH><B>Parameters</B></TH><TD COLSPAN=2>When performing this call, the following <B>Line-A</B> variables are evaluated:
</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH></TH><TD><B><FONT SIZE=1 >Variable</FONT></B>
</TD><TD><B><FONT SIZE=2 >Meaning</FONT></B></TD>
</TR>

<TR><TH></TH><TD><B>WMODE</B></TD><TD><FONT SIZE=2>Writing mode (see comments below).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>CLIP, XMINCL, YMINCL, XMAXCL, YMAXCL</B></TD>
<TD><FONT SIZE=2>Standard clipping flags and extents.</FONT></TD>
</TR>

<TR><TH></TH><TD><B>XDDA</B></TD><TD><FONT SIZE=2>Scaling accumulator (should be initialized to $8000 prior to each <B>TextBlt</B> call when scaling).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>DDAINC</B></TD><TD><FONT SIZE=2>This amount specifies the fractional amount to scale the character outputted by. If scaling down, this value may by found by the formula:</FONT>
<CENTER>
0x100 * scaled size / actual size
</CENTER>
<FONT SIZE=2>If scaling up, this value may be found with the formula:</FONT>
<CENTER>
0x100 * (scaled size - actual size) / actual size
</CENTER>
<FONT SIZE=2>This variable is only evaluated if scaling is active.</FONT>
</TD></TR>

<TR><TH></TH><TD><B>SCALDIR</B></TD><TD><FONT SIZE=2>Scaling direction (1 = up, 0 = down).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>MONO</B></TD><TD><FONT SIZE=2>If 1 set to monospacing mode, if 0 set to proportional spacing mode.</FONT>
</TD></TR>

<TR><TH></TH><TD><B>SOURCEX, SOURCEY</B></TD><TD><B><FONT SIZE=2>SOURCEX</FONT></B> is the pixel offset into the font form of the character you wish to render. <B>SOURCEY</B> is usually 0 indicating that you wish to render the character from the top. 
</TD></TR>

<TR><TH></TH><TD><B>DESTX, DESTY</B></TD><TD><B><FONT SIZE=2>DESTX</FONT></B> and <B>DESTY</B> specify the destination screen coordinates of the character.
</TD></TR>

<TR><TH></TH><TD><B>DELX, DELY</B></TD><TD><B><FONT SIZE=2>DELX</FONT></B> and <B>DELY</B> specify the width and height of the character to print.
</TD></TR>

<TR><TH></TH><TD><B>FBASE</B></TD><TD><FONT SIZE=2>Pointer to start of font data.</FONT>
</TD></TR>

<TR><TH></TH><TD><B>FWIDTH</B></TD><TD><FONT SIZE=2>Width of font form.</FONT>
</TD></TR>

<TR><TH></TH><TD><B>STYLE</B></TD><TD><B><FONT SIZE=2>STYLE</FONT></B> is a mask of the following bits indicating special effects:<FONT SIZE=2>0x01 = Bold</FONT>0x02 = Light
<P>
<FONT SIZE=2>0x04 = Italic</FONT>
<P>
<FONT SIZE=2>0x08 = Underlined</FONT>
<P>
<FONT SIZE=2>0x10 = Outlined</FONT>
</TD></TR>

<TR><TH></TH><TD><B>LITEMASK</B></TD><TD><FONT SIZE=2>Mask used to lighten text (usually $5555).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>SKEWMASK</B></TD><TD><FONT SIZE=2>Mask used to italicize text (usually $5555).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>WEIGHT</B></TD><TD><FONT SIZE=2>Width by which to thicken boldface text (should be set from font header).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>ROFF</B></TD><TD><FONT SIZE=2>Offset above character baseline when skewing (set from font header).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>LOFF</B></TD><TD><FONT SIZE=2>Offset below character baseline when skewing (from font header).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>SCALE</B></TD><TD><FONT SIZE=2>Scaling flag (0 = no scaling, 1 = scale text).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>CHUP</B></TD><TD><FONT SIZE=2>Character rotation vector (may be 0, 900, 1800, or 2700).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>TEXTFG</B></TD><TD><FONT SIZE=2>Text foreground color.</FONT>
</TD></TR>

<TR><TH></TH><TD><B>SCRTCHP</B></TD><TD><FONT SIZE=2>Pointer to start of text special effects buffer (should be twice as large as the largest distorted character and is only required when using a special effect).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>SCRPT2</B></TD><TD><FONT SIZE=2>Offset of scaling buffer in <B>SCRTCHP</B> (midpoint).</FONT>
</TD></TR>

<TR><TH></TH><TD><B>TEXTBG</B></TD><TD><FONT SIZE=2>Text background color.</FONT>
</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD COLSPAN=2>
<PRE>
; Print a NULL-terminated string with
<FONT SIZE=2>; no effects or clipping

</FONT>   move.w   #0,36(a5)  ; WMODE
<FONT SIZE=2>   move.w   #0,54(a5)  ; CLIP
</FONT>   move.w   #1,106(a5)  ; TEXTFG
<FONT SIZE=2>   move.w   #0,114(a5)  ; TEXTBG
</FONT>   move.w   #100,76(a5)  ; DESTX
<FONT SIZE=2>   move.w   #100,78(a5)  ; DESTY
</FONT>   move.w   #4,90(a5)  ; STYLE
<FONT SIZE=2>   move.w   #0,102(a5)  ; SCALE
</FONT>   move.w   #1,70(a5)  ; MONO

<FONT SIZE=2>; Find the 8x8 font
</FONT>   move.w   4(a6),a6   ; Address of 8x8
<FONT SIZE=2>           ; font
</FONT>   move.w   76(a6),84(a5)  ; FBASE
<FONT SIZE=2>   move.w   80(a6),88(a5)  ; FWIDTH
</FONT>   move.w   82(a6),82(a5)  ; DELY

<FONT SIZE=2>; Print the string
</FONT>   lea    string,a2
<FONT SIZE=2>   move.l   72(a6),a3  ; offset table
</FONT>   moveq.l   #0,d0
<FONT SIZE=2>print:
</FONT>   move.b   (a2)+,d0   ; Get next char
<FONT SIZE=2>   ble    end
</FONT>   sub.w   36(a6),d0  ; Fix offset
<FONT SIZE=2>   lsl.w   #1,d0   ; Double for
</FONT>           ; WORD offset
<FONT SIZE=2>   move.w   0(a3,d0),72(a5) ; SOURCEX
</FONT>   move.w   2(a3,d0),d0  ; x of next char
<FONT SIZE=2>   sub.w   72(a5),d0  ; get true width
</FONT>   move.w   d0,80(a5)  ; DELX
<FONT SIZE=2>   moveq.l   #0,74(a5)  ; SOURCEY
</FONT>   movem.l   a0-a2,-(sp)  ; Save a0-a2
<FONT SIZE=2>   .dc.w   $A008
</FONT>   movem.l   (a7)+,a0-a2  ; Restore regs
<FONT SIZE=2>   bra   print
</FONT>end:
<FONT SIZE=2>   rts

</FONT>   .data
<FONT SIZE=2>string:
</FONT>   .dc.b   "The Atari Compendium",0
</PRE>

</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH><B>Comments</B></TH><TD COLSPAN=2>The value for <I>WMODE</I> is a special case with <B>TextBlt</B>. Values from 0-3 translate to the standard <B>VDI</B> modes. Values from 4-19 translate to the <B>BitBlt</B> modes 0-15.
</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH><B>See Also</B></TH><TD COLSPAN=2><B>v_gtext()</B></TD>
</TR>

</TABLE>

<P>

<HR>

<H3>$A009 - Show Mouse</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD>Show the mouse cursor.</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Parameters</B></TH><TD>No parameters required. Optionally, <I>INTIN</I> can be made to point to a <B>WORD</B> value of 0 to force the mouse cursor to be displayed regardless of the number of times it was hidden.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD>
<PRE>
; Show the mouse regardless of the number
<FONT SIZE=2>; of times it was hidden

</FONT>   move.l   #intin,8(a5)  ; INTIN
<FONT SIZE=2>   .dc.w   $A009

</FONT>   .data
<FONT SIZE=2>intin:
</FONT>   .dc.w   0
</PRE>

</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Comments</B></TH><TD>'Show' and 'Hide' mouse calls are nested, that is, in order to return the mouse cursor to its original state, it must be 'shown' the same number of times it was 'hidden'.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>See Also</B></TH><TD><B>v_show_c(), graf_mouse()</B>
</TD></TR>

</TABLE>

<P>

<HR>

<a name=hmf><H3>$A00A - Hide Mouse</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD>Hide the mouse cursor.</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD>
<PRE>
; Remove the mouse from the screen

<FONT SIZE=2>   .dc.w   $A00A</FONT>
</PRE>

</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Comments</B></TH><TD>See '<B>Show Mouse</B>'.</TD>
</TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>See Also</B></TH><TD><B>v_hide_c(), graf_mouse()</B>
</TD></TR>

</TABLE>

<P>

<HR>

<H3>$A00B - Transform Mouse</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD>Change the mouse's form.</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Parameters</B></TH><TD>On entry <I>INTIN</I> should point to a structure containing the new mouse form data. The format of the structure is defined under the entry for <B>vsc_form()</B>.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD>
<PRE>
; Change the mouse form to the data held in
<FONT SIZE=2>; the newmouse structure.

</FONT>   move.b   -339(a5),d0  ; Save old value
<FONT SIZE=2>   move.b   #0,-339(a5)  ; Disable mouse
</FONT>           ; interrupts
<FONT SIZE=2>   move.l   #newmouse,8(a5) ; INTIN
</FONT>   .dc.w   $A00B
<FONT SIZE=2>   move.b   d0,-339(a5)  ; Restore
</FONT>           ; MOUSE_FLAG
</PRE>

</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Comments</B></TH><TD>The old data can be saved from the information stored in the <B>Line-A</B> variable table at offset -356. To avoid 'mouse droppings' you should disable mouse interrupts by setting <I>MOUSE_FLAG</I> (offset -339) to 0 and restoring it when done.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>See Also</B></TH><TD><B>vsc_form(), graf_mouse()</B>
</TD></TR>

</TABLE>

<P>

<HR>

<H3>$A00C - Undraw Sprite</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD>Undraw a previously drawn sprite.</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Parameters</B></TH><TD>Prior to calling this function, A2 should be loaded with a pointer to the 'sprite save block' defined when drawing the sprite. For the format of this data, see '<B>Draw Sprite</B>'
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD>
<PRE>
; 'Undraw' sprite previously drawn from data
<FONT SIZE=2>; stored in savesprite.

</FONT>   lea   savesprite,a2
<FONT SIZE=2>   .dc.w   $A00C</FONT>
</PRE>

</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Caveats</B></TH><TD>Register A6 is destroyed as a result of this call.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Comments</B></TH><TD>When 'undrawing' sprites, they should be removed in reverse order of drawing to avoid the possibility of creating garbage on screen. 
</TD></TR>

</TABLE>

<P>

<HR>

<H3>$A00D - Draw Sprite</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD COLSPAN=2>Draw a 16x16 sprite on the screen.
</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH><B>Parameters</B></TH><TD COLSPAN=2>Prior to calling this function, four 68x00 registers must be initialized. D0 and D1 should contain the horizontal and vertical position respectively of the coordinates of the sprite to draw. This is relative to the 'hot spot' of the sprite as defined in the sprite definition block.A0 should contain a pointer to a sprite definition block defined as follows:
</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH></TH><TD>
<CENTER>
<B><FONT SIZE=1 >Offset/Type</FONT></B>
</CENTER>

</TD><TD><B><FONT SIZE=2 >Meaning</FONT></B></TD>
</TR>

<TR><TH></TH><TD>
<CENTER>
0x0000 (<B>WORD</B>)
</CENTER>

</TD><TD><FONT SIZE=2>X offset of 'hot spot'. This value is subtracted from the value given in D0 to yield the actual screen position of the upper-left pixel.</FONT>
</TD></TR>

<TR><TH></TH><TD>
<CENTER>
0x0002 (<B>WORD</B>)
</CENTER>

</TD><TD><FONT SIZE=2>Y offset of 'hot spot'. This value is subtracted from the value given in D1 to yield the actual screen position of the upper-right pixel. </FONT>
</TD></TR>

<TR><TH></TH><TD>
<CENTER>
0x0004 (<B>WORD</B>)
</CENTER>

</TD><TD><FONT SIZE=2>Format flag. This value specifies the mode in which the mouse pointer will be drawn. A value of 1 specifies '<B>VDI</B> mode' whereas -1 specifies X-OR mode. The default is 1.</FONT>
</TD></TR>

<TR><TH></TH><TD>
<CENTER>
0x0006 (<B>WORD</B>)
</CENTER>

</TD><TD><FONT SIZE=2>Background color of sprite.</FONT></TD>
</TR>

<TR><TH></TH><TD>
<CENTER>
0x0008 (<B>WORD</B>)
</CENTER>

</TD><TD><FONT SIZE=2>Foreground color of sprite.</FONT></TD>
</TR>

<TR><TH></TH><TD>
<CENTER>
0x000A (32&nbsp;<B>WORD</B>s)
</CENTER>

</TD><TD><FONT SIZE=2>Sprite form data. The bitmap data consists of two 16x16 rasters, one each for the mask and data portion of the form. The data is presented in interleaved format. The first <B>WORD</B> of the mask portion is first, followed by the first <B>WORD</B> of the data portion, and so on.</FONT>
</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH></TH><TD COLSPAN=2>Register A2 is a pointer to a buffer which will be used to save the screen area where the sprite is drawn. The size of the buffer can be determined by the following formula:
<CENTER>
( 10 + ( <I>VPLANES</I> * 64 ) )
</CENTER>

</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD COLSPAN=2>
<PRE>
; Draw a sprite at ( 100, 100 ) whose data
<FONT SIZE=2>; is stored at spritedef with a valid save
</FONT>; buffer at savebuf.

<FONT SIZE=2>   move.w   #100,d0   ; X position
</FONT>   move.w   #100,d1   ; Y position
<FONT SIZE=2>   move.l   #spritedef,a0  ; Sprite form
</FONT>   move.l   #savebuf,a2  ; Save buffer
<FONT SIZE=2>   .dc.w   $A00D</FONT>
</PRE>

</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH><B>Caveats</B></TH><TD COLSPAN=2>Register A6 is destroyed as a result of this call.
</TD></TR>

<TR><TH></TH><TD COLSPAN=2></TD></TR>

<TR><TH><B>Comments</B></TH><TD COLSPAN=2>In order to avoid the mouse form running into any sprites you draw, the mouse should be hidden before drawing and restored afterwards. It may also be advisable to call <B>Vsync()</B> prior to each call to avoid screen flicker.
</TD></TR>

</TABLE>

<P>

<HR>

<H3>$A00E - Copy Raster</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD>Copy a raster form using opaque or transparent mode.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Parameters</B></TH><TD><I>INTIN</I> should point to a <B>WORD</B> array whose first entry specifies the write mode of the operation. In transparent mode, this is a <B>VDI</B> standard mode (0-3), however in opaque mode the full range of <B>BitBlt</B> modes (0-15) are available. In transparent mode, the second and third array entries of <I>INTIN</I> contain the foreground and background color of the destination copy respectively.<I>CONTRL</I> should point to a memory buffer which is filled in with the source and destination <B>MFDB</B>'s (Memory Form Definition Block's) at offsets 14 and 18 respectively. The structure of an <B>MFDB</B> is discussed under <B>vro_cpyfm()</B>.<I>PTSIN</I> should point to an array of 8 <B>WORD</B>'s containing the pixel offsets for the blit in the order sx1, sy1, sx2, sy2, dx1, dy1, dx2, dy2.<I>COPYTRAN</I> specifies the write mode. A value of 0 indicates an opaque copy while a value of 1 indicates a transparent copy.The settings for <I>CLIP</I>, <I>XMINCL</I>, <I>YMINCL</I>, <I>XMAXCL</I>, and <I>YMAXCL</I> are utilitized by this call.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD>
<PRE>
; Copy a 32x32 raster form 'myrast' from a
<FONT SIZE=2>; buffer in memory to the ST medium resolution
</FONT>; screen at ( 100, 100 ) using transparent mode.

<FONT SIZE=2>   move.l   #contrl,4(a5)  ; CONTRL
</FONT>   move.l   #srcmfdb,contrl+14
<FONT SIZE=2>   move.l   #destmfdb,contrl+18

</FONT>   move.l   #intin,4(a5)  ; INTIN
<FONT SIZE=2>   move.l   #ptsin,4(a5)  ; PTSIN
</FONT>   move.w   #1,116(a5)  ; COPYTRAN
<FONT SIZE=2>   move.w   #0,54(a5)  ; CLIP

</FONT>; Fill in some info for MFDB's

<FONT SIZE=2>   move.l   #myrast,srcmfdb ; Source raster
</FONT>   move.w   #$02,-(sp)  ; Physbase()
<FONT SIZE=2>   trap    #14
</FONT>   addq.l   #2,sp
<FONT SIZE=2>   move.l   d0,destmfdb

</FONT>   .dc.w   $A00E

<FONT SIZE=2>   .data
</FONT>contrl:
<FONT SIZE=2>   .dc.w   0, 0, 0, 0, 0, 0, 0, 0, 0, 0
</FONT>intin:
<FONT SIZE=2>   .dc.w   0, 1, 0
</FONT>ptsin:
<FONT SIZE=2>   .dc.w   0, 0, 15, 15, 100, 100, 115, 115
</FONT>srcmfdb:
<FONT SIZE=2>   .dc.w   0, 0, 16, 16, 1, 0, 0, 0, 0, 0
</FONT>destmfdb:
<FONT SIZE=2>   .dc.w   0, 0, 320, 200, 16, 0, 2, 0, 0, 0
</FONT>myrast:
<FONT SIZE=2>   .dc.w   $AAAA,$AAAA,$AAAA,$AAAA
</FONT>   .dc.w   $5555,$5555,$5555,$5555
<FONT SIZE=2>   .dc.w   $AAAA,$AAAA,$AAAA,$AAAA
</FONT>   .dc.w   $5555,$5555,$5555,$5555
<FONT SIZE=2>   .dc.w   $AAAA,$AAAA,$AAAA,$AAAA
</FONT>   .dc.w   $5555,$5555,$5555,$5555
<FONT SIZE=2>   .dc.w   $AAAA,$AAAA,$AAAA,$AAAA
</FONT>   .dc.w   $5555,$5555,$5555,$5555
</PRE>

</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Comments</B></TH><TD>For a more indepth explanation, refer to the <B>VDI</B> calls parallel to these, <B>vro_cpyfm()</B> and <B>vrt_cpyfm()</B>.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>See Also</B></TH><TD><B>vro_cpyfm(), vrt_cpyfm()</B>
</TD></TR>

</TABLE>

<P>

<HR>

<H3>$A00F - Seed Fill</H3>

<TABLE BORDER=1>

<TR><TH></TH><TD>Seed fill an irregularly shaped region.</TD>
</TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Parameters</B></TH><TD><I>INTIN</I> points to a word value which specifies the mode of this function. If the value is negative, color mode is used. In color mode, the fill spreads from the initial point until it hits a color other than that of the initial point. If the value is positive, outline mode is used. It then is interpreted as the <B>VDI</B> color index value at which to stop the fill.<I>PTSIN</I> points to an array of two <B>WORD</B>s which specify the X and Y coordinates respectively of the inital fill point.<I>CUR_WORK</I> should point to a <B>WORD</B> array of 16 words with the sixteenth <B>WORD</B> being the fill color specified as a <B>VDI</B> color index.<I>WMODE</I> specified the <B>VDI</B> writing mode of the fill (03). <I>PATPTR</I> and <I>PATMSK</I> define the fill pattern (as defined in '<B>Horizontal Line</B>').<I>SEEDABORT</I> points to a user routine which can abort the fill, if desired, when called. This routine is called once for each line of the fill. It should zero register D0 to continue or place a non-zero value in it to abort.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Example Binding</B></TH><TD>
<PRE>
; Seed fill an area starting at ( 100, 100 )
<FONT SIZE=2>; in color mode with a clip region defined
</FONT>; as the VDI rectangle ( 50, 50 ), ( 200, 200 ).

<FONT SIZE=2>   move.l   #intin,8(a5)   ; INTIN
</FONT>   move.l   #ptsin,12(a5)   ; PTSIN
<FONT SIZE=2>   move.l   #cur_work,-464(a5)  ; CUR_WORK
</FONT>   move.l   #seedabort,118(a5) ; SEEDABORT
<FONT SIZE=2>   move.w   #0,36(a5)   ; WMODE
</FONT>   move.l   #stipple,46(a5)  ; PATPTR
<FONT SIZE=2>   move.w   #0,50(a5)   ; PATMASK
</FONT>   move.w   #0,52(a5)   ; MFILL
<FONT SIZE=2>   move.w   #50,56(a5)   ; XMINCL
</FONT>   move.w   #50,58(a5)   ; YMINCL
<FONT SIZE=2>   move.w   #200,60(a5)   ; XMAXCL
</FONT>   move.w   #200,62(a5)   ; YMAXCL
<FONT SIZE=2>   .dc.w   $A00F

</FONT>seedabort:
<FONT SIZE=2>   moveq.l   #0, d0    ; Clear D0
</FONT>   rts

<FONT SIZE=2>   .data
</FONT>intin:
<FONT SIZE=2>   .dc.w   -1
</FONT>ptsin:
<FONT SIZE=2>   .dc.w   100, 100
</FONT>cur_work:
<FONT SIZE=2>   .dc.w   0, 0, 0, 0, 0, 0, 0, 0
</FONT>   .dc.w   0, 0, 0, 0, 0, 0, 0, 1
<FONT SIZE=2>stipple:
</FONT>   .dc.w   $AAAA
<FONT SIZE=2>   .dc.w   $5555</FONT>
</PRE>

</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>Comments</B></TH><TD>The clipping variables <I>XMINCL</I>, <I>YMINCL</I>, <I>XMAXCL</I>, and <I>YMAXCL</I> must always be set as they are interpreted regardless of the clipping flag.
</TD></TR>

<TR><TH></TH><TD></TD></TR>

<TR><TH><B>See Also</B></TH><TD><B>v_contourfill()</B></TD></TR>

</TABLE>

<P>
<B></B>
<p>
<hr><center><a href="toc.htm"> Table of Contents | </a><a href="index.htm"> Index </a></center>
</BODY>

</HTML>
