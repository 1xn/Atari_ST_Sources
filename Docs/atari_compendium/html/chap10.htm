<HTML>

<HEAD>

<TITLE>XCONTROL Reference</TITLE>


</HEAD>

<BODY BACKGROUND BGCOLOR=#FFFFFF>

<P>
<a name=chap10><B><FONT SIZE=2>- CHAPTER 10 -</FONT></B>
<a name=xcontrol><H1>XCONTROL</H1>

<HR>

<a name=control><H4><FONT SIZE=4 >The Extensible Control Panel</FONT>
</H4>

<HR>

<H5>Overview</H5>

<P>
<B>XCONTROL</B> is a desk accessory which provides a shell for
Control Panel Extensions (CPX's). Typical uses for CPX's include:
<P>
 System Configuration (volume, key click, etc.)
<P>
 Hardware Configuration (serial port speed, disk access rate,
etc.)
<P>
 TSR Configuration
<P>
Most CPX's require only 512 bytes of system memory for header
storage when not being executed as they are loaded only when selected
by the user.
<P>
Applications, games, and other programs not used for configuration
purposes should <U>not</U> be created as CPX's.
<a name=executableformat><H5>CPX Executable Format</H5>

<P>
A CPX executable is identical to a standard <B>GEMDOS</B> executable
with the exception of an additional 512 byte header which precedes
the standard 28 byte <B>GEMDOS</B> header. When <B>XCONTROL</B>
is initialized at <a name=bootonlycpxs>boot time, the header of each CPX contained
in the user's designated CPX directory is loaded and stored. The
header data contains the following information:
<PRE>
typedef struct _cpxhead
{
	UWORD magic;					/* Magic = 100 dec */

	struct {
			unsigned reserved : 13;	/* Reserved */
			unsigned resident : 1;		/* Resident CPX if set */
			unsigned bootinit : 1;		/* Boot initialize if set*/
			unsigned setonly  : 1;		/* Set only CPX if set */
	} flags;

	LONG 		cpx_id;				/* CPX ID Value */
	UWORD 	cpx_version;			/* CPX Version */
	char		i_text[14];			/* Icon Text */
	UWORD		sm_icon[48];			/* Icon Bitmap 32x24 */
	UWORD		i_color;				/* Icon Color */
	char		title[18];			/* Title (16 char max) */
	UWORD		t_color;				/* Title text color */
	char		buffer[64];			/* User-storage */
	char		reserved[306];		/* Reserved */
} CPXHEAD;

</PRE>

<P>
Following the 512-byte CPX header the 28-byte <B>GEMDOS</B> header
and executable follow. CPX's do not have a '<B>main()</B>' function.
Execution begins at the first instruction of the TEXT segment.
The first source file you should link should resemble the following:
<PRE>
				.xref	_cpx_init

				.text
	cpxstart:
				jmp		_cpx_init

				.end

</PRE>

<P>
Every CPX must have a <B>cpx_init()</B> function.
<P>
If you plan to store defaults back into the CPX using <B>CPX_Save()</B>
(described later) you should add to the first source file a statement
allocating as much storage as you will need at the beginning of
the DATA segment. For example, the following is a complete stub
for a CPX requiring 10 <B>LONG</B>s of data for permanent storage.
<PRE>
				.xref	_cpx_init
				.globl	_save_vars

				.text
	cpxstart:
				jmp		_cpx_init

			.data

	_save_vars:
				.dc.l		0, 0, 0, 0, 0, 0, 0, 0, 0, 0

				.end

</PRE>

<HR>

<a name=xcontrol><H4><FONT SIZE=4 >XCONTROL Structures</FONT></H4>

<HR>

<H5>CPXINFO</H5>

<P>
A pointer to a CPX's <B>CPXINFO</B> structure must be returned
by the <B>cpx_init()</B> function <a name=setonlycpxs>('Set Only' CPX's return <B>NULL</B>).
The <B>CPXINFO</B> structure is filled in with pointers to user
functions as follows:
<PRE>
typedef struct
{
	WORD (*cpx_call)( GRECT * );
	VOID (*cpx_draw)( GRECT * );
	VOID (*cpx_wmove)( GRECT * );
	VOID (*cpx_timer)( WORD * );
	VOID (*cpx_key)( WORD, WORD, WORD * );
	VOID (*cpx_button)( MRETS *, WORD * );
	VOID (*cpx_m1)( MRETS *, WORD * );
	VOID (*cpx_m2)( MRETS *, WORD * );
	WORD (*cpx_hook)( WORD, WORD *, MRETS *, WORD *, WORD * );
	WORD (*cpx_close)( WORD );
} CPXINFO;

</PRE>

<P>
<a name=formcpxs>Form CPX's use only <a name=cpxcall><B>cpx_call()</B> and (optionally) <B>cpx_close()</B>.
Event CPX's use the remaining members. Members not being used
should be set to <B>NULL</B>. 
<H5>XCPB</H5>

<P>
A pointer to the "XControl <a name=parameterblock>Parameter Block" is passed
to the <B>cpx_call()</B> function. This pointer should be copied
to a static variable on entry so that other functions may utilize
its members. <B>XCPB</B> is defined as follows:
<PRE>
typedef struct
{
	WORD		handle;
	WORD		booting;
	WORD		reserved;
	WORD		SkipRshFix;
	VOID		*reserve1;
	VOID		*reserve2;
<FONT SIZE=2>	VOID		(*rsh_fix)( WORD, WORD, WORD, WORD, OBJECT *, TEDINFO *, char *, 			ICONBLK *, BITBLK&nbsp;*, LONG *, LONG *, LONG *,	VOID * );
</FONT>	VOID	<a name=rshobfix>	(*rsh_obfix)( OBJECT *, WORD );
<FONT SIZE=2>	WORD	<a name=popup>	(*Popup)( char *items[], WORD, WORD, WORD, 								GRECT&nbsp;*, GRECT&nbsp;* );
</FONT>	VOID	<a name=slsize>	(*Sl_size)( OBJECT *, WORD, WORD, WORD, WORD, 							WORD, WORD );
<FONT SIZE=2>	VOID	<a name=slx>	(*Sl_x)( OBJECT *, WORD, WORD, WORD, WORD, WORD, 							void (*)();
</FONT>	VOID	<a name=sly>	(*Sl_y)( OBJECT *, WORD, WORD, WORD, WORD, WORD, 							void (*)() );
<FONT SIZE=2>	VOID	<a name=slarrow>	(*Sl_arrow)( OBJECT *, WORD, WORD, WORD, WORD, 							WORD, WORD, WORD *, WORD, void (*)() );
</FONT>	VOID		<a name=sldragx>(*Sl_dragx)( OBJECT *, WORD, WORD, WORD, WORD, 							WORD *, void (*)() );
<FONT SIZE=2>	VOID		<a name=sldragy>(*Sl_dragy)( OBJECT *, WORD, WORD, WORD, WORD, 							WORD *, void (*)() );
</FONT>	WORD		(*Xform_do)( OBJECT *, WORD, WORD * );
<FONT SIZE=2>	GRECT *	(*GetFirstRect)( GRECT * );
</FONT>	GRECT *<a name=getnextrect>	(*GetNextRect)( VOID );
<FONT SIZE=2>	VOID		<a name=setevntmask>(*Set_Evnt_Mask)( WORD, MOBLK *, MOBLK *, LONG );
</FONT>	WORD		<a name=xgenalert>(*XGen_Alert)( WORD );
<FONT SIZE=2>	WORD		(*CPX_Save)( VOID *, LONG );
</FONT>	VOID *<a name=getbuffer>	(*Get_Buffer)( VOID );
<FONT SIZE=2>	WORD	<a name=getcookie>	(*getcookie)( LONG, LONG * );
</FONT>	WORD		Country_Code;
<FONT SIZE=2>	VOID	<a name=mfsave>	(*MFSave)( WORD, MFORM * );
</FONT>} XCPB;

</PRE>

<P>
Almost all of <a name=xcpb><B>XCPB</B>'s members are pointers to <a name=utilityfunctions>utility functions
covered in the <B>XCONTROL</B><a name=functionreference> Function Reference at the end of
this chapter. The remaining utilized members have the following
meaning:
<TABLE BORDER=1>

<TR><TH><B><FONT SIZE=1 >XCPB Member</FONT></B></TH>
<TH><B><FONT SIZE=2 >Meaning</FONT></B></TH></TR>

<TR><TD><I>handle</I></TD><TD><FONT SIZE=2>This value contains the physical workstation handle returned by <B>graf_handle()</B> to the Control Panel for use in calling <B>v_opnvwk()</B>.</FONT>
</TD></TR>

<TR><TD><I>booting</I></TD><TD><FONT SIZE=2>When <B>XCONTROL</B> is initializing as the result of a power-on, reset, or resolution change, it loads each CPX and calls its <B>cpx_init()</B> function with <I>booting</I> set to <B>TRUE</B>. At all other times, <B>XCONTROL</B> sets <I>booting</I> to <B>FALSE</B>.</FONT>
</TD></TR>

<TR><TD><I>SkipRshFix</I></TD><TD><FONT SIZE=2>When a CPX is first called after being loaded, its <I>SkipRshFix</I> flag is set to <B>FALSE</B>. The application should then use <B>xcpb-&gt;<a name=rshfix>rsh_fix()</B> to fix its internal resource tree. <B>xcpb-&gt;rsh_fix()</B> sets the CPX's <I>SkipRshFlag</I> to <B>TRUE</B> so that the CPX can skip this step on subsequent calls. </FONT>
</TD></TR>

<a name=cc><TR><TD><I>Country_Code</I></TD><TD><FONT SIZE=2>This value indicates the country which this version of the Control Panel was compiled for as follows:</FONT> <U><I><B>Country_Code</B></I><B>  Country</B></U><FONT SIZE=2>  0   USA</FONT>
<P>
<FONT SIZE=2>  1   Germany</FONT>
<P>
<FONT SIZE=2>  2   France</FONT>
<P>
<FONT SIZE=2>  3   United Kingdom</FONT>
<P>
<FONT SIZE=2>  4   Spain</FONT>
<P>
<FONT SIZE=2>  5   Italy</FONT>
<P>
<FONT SIZE=2>  6   Sweden</FONT>
<P>
<FONT SIZE=2>  7   Swiss (French)</FONT>
<P>
<FONT SIZE=2>  8   Swiss (German)</FONT>
<P>
<FONT SIZE=2>  9   Turkey</FONT>
<P>
<FONT SIZE=2>  10   Finland</FONT>
<P>
<FONT SIZE=2>  11   Norway</FONT>
<P>
<FONT SIZE=2>  12   Denmark</FONT>
<P>
<FONT SIZE=2>  13   Saudi Arabia</FONT>
<P>
<FONT SIZE=2>  14   Holland</FONT>
</TD></TR>

</TABLE>

<PRE>

</PRE>

<HR>

<a name=flavors><a name=cpxflavors><H4><FONT SIZE=4 >CPX Flavors</FONT></H4>

<HR>

<H5>Boot Initialization</H5>

<P>
Any CPX which has its <I>_cpxhead.bootinit</I> flag set will have
its <B>cpx_init()</B> function called when <B>XCONTROL</B> initializes
upon bootup. This provides a way for CPX's to set system configuration
from data the user has saved in previous sessions. 
<P>
<B>cpx_init()</B> is always called each time the user selects
your CPX from the <B>XCONTROL</B> CPX list prior to calling <B>cpx_call()</B>.
If the CPX is being initialized at boot time, the <I>xcpb-&gt;booting</I>
flag will be <B>TRUE</B>.
<a name=residentcpxs><H5>Resident CPX's</H5>

<P>
CPX's which have their <I>_cpxhead.resident</I> flag set will
be retained in memory after being initialized at bootup. In general,
this option should not be used unless absolutely necessary.
<P>
Resident CPX's should be aware that variables stored in their
DATA and BSS segments will not be reinitialized each time the
CPX is called.
<H5>Set-Only CPX's</H5>

<P>
Set-Only CPX's are designed to initialize system configuration
options each time <B>XCONTROL</B> initializes (during boot-ups
and resolution changes) by calling the <B>cpx_init()</B> function.
These CPX's will <U>not</U> appear in the <B>XCONTROL</B> list
of CPX's. 
<H5>Form CPX's</H5>

<P>
<a name=eventcpxs>Every CPX must be either a 'Form' or 'Event' CPX. Most CPX's will
be Form CPX's.
<P>
In a Form CPX, <B>XCONTROL</B> handles most user-interaction and
messaging by relaying messages through a <a name=callbackfunctions>callback function. <B>XCONTROL</B>
is responsible for redraws (although the CPX does have a hook
to do non-<B>AES</B> object redraws) and form handling. A simple
'C' outline for a Form CPX follows:
<PRE>
/* Example Form CPX Skeleton */

#include "skel.h"
#include "skel.rsh"
#include &lt;cpxdata.h&gt;

CPXINFO *cpx_init();
BOOLEAN cpx_call();

XCPB *xcpb;
CPXINFO cpxinfo;

CPXINFO
*cpx_init( Xcpb )
XCPB *Xcpb;
{
	xcpb = Xcpb;

	appl_init();

	if(xcpb-&gt;booting)
	{

		/* CPX's that do boot-time initialization do it here */

		/* Returning TRUE here tells XCONTROL to retain the header
		 * for later access by the user. If CPX is Set-Only,
		 * return FALSE.
		 */
	
		return ( (CPXINFO *) TRUE )
	} 
	else
	{
		/* If you haven't already done so, fix resource tree.
		 *
		 * DEFINE's and variables are from an RSH file generated
		 * by the Atari Resource Construction Set.
		 */

		if(!SkipRshFix)
<FONT SIZE=2>			(*xcpb-&gt;rsh_fix)( NUM_OBS, NUM_FRSTR, NUM_FRIMG, 	NUM_TREE, rs_object, 				rs_tedinfo, rs_strings, rs_iconblk, rs_bitblk, rs_frstr, rs_frimg, 				rs_trindex, rs_imdope );

</FONT>		cpxinfo.cpx_call = cpx_call;
<FONT SIZE=2>		cpxinfo.cpx_draw = NULL;
</FONT>		cpxinfo.cpx_wmove = NULL;
<FONT SIZE=2>		cpxinfo.cpx_timer = NULL;
</FONT>		cpxinfo.cpx_key = NULL;
<FONT SIZE=2>		cpxinfo.cpx_button = NULL;
</FONT>		cpxinfo.cpx_m1 = NULL;
<FONT SIZE=2>		cpxinfo.cpx_m2 = NULL;
</FONT>		cpxinfo.cpx_hook = NULL;
<FONT SIZE=2>		cpxinfo.cpx_close = NULL;

</FONT>		/* Tell XCONTROL to send generic and keyboard
<FONT SIZE=2>		 * messages.
</FONT>		 */

<FONT SIZE=2>		return ( &amp;cpxinfo );
</FONT>	}
<FONT SIZE=2>}

</FONT>BOOLEAN
<FONT SIZE=2>cpx_call( rect )
</FONT>GRECT *rect;
<FONT SIZE=2>{
</FONT>	/* Put MAINFORM tree in *tree for object macros */

<FONT SIZE=2>	OBJECT *tree = (OBJECT *)rs_trindex[ MAINFORM ];
</FONT>	WORD button, quit = FALSE;
<FONT SIZE=2>	WORD msg[8];

</FONT>	ObX( ROOT ) = rect-&gt;g_x;
<FONT SIZE=2>	ObY( ROOT ) = rect-&gt;g_y;

</FONT>	objc_draw( tree, ROOT, MAX_DEPTH, PTRS( rect ) );

<FONT SIZE=2>	do
</FONT>	{
<FONT SIZE=2>		button = (*xcpb-&gt;<a name=xformdo>Xform_do)( tree, 0, msg );

</FONT>		/* Be sure and mask off double-clicks if you're
<FONT SIZE=2>		 * not interested in them.
</FONT>		 */

<FONT SIZE=2>		if( ( button &amp; 0x8000 ) &amp;&amp; ( button != 0xFFFF ) ) {
		button &amp;= 0x7FFF;
</FONT>			
<FONT SIZE=2>		button &amp;= 0x7FFF;

</FONT>		switch( button )
<FONT SIZE=2>		{
</FONT>			/* Check for EXIT or TOUCHEXIT resource objects */

<FONT SIZE=2>			case OK:
</FONT>				break;
<FONT SIZE=2>			case CANCEL:
</FONT>				break;
<FONT SIZE=2>			case -1:
</FONT>				switch( msg[0] )
<FONT SIZE=2>				{
</FONT>					case WM_REDRAW:
<FONT SIZE=2>						break;
</FONT>					case AC_CLOSE:
<FONT SIZE=2>						quit = TRUE;
</FONT>						break;
<FONT SIZE=2>					case WM_CLOSED:
</FONT>						quit = TRUE;
<FONT SIZE=2>						break;
</FONT>					case CT_KEY:
<FONT SIZE=2>						break;
</FONT>				}
<FONT SIZE=2>				break;
</FONT>		}
<FONT SIZE=2>	} while( !quit );

</FONT>	return( FALSE );
<FONT SIZE=2>}	
</FONT>								
</PRE>

<H5>Event CPX's</H5>

<P>
<a name=cpx>CPX's which are not possible as Form CPX's may be designed as
Event CPX's.
<P>
Event CPX's accomplish most of their work in several callback
functions identified to the Control Panel by the <B>CPXINFO</B>
structure and called when the appropriate message is received.
An outline for a typical Event CPX follows:
<PRE>
/* Example Event CPX Skeleton */

#include "skel.h"
#include "skel.rsh"
#include &lt;cpxdata.h&gt;

CPXINFO *cpx_init();
BOOLEAN cpx_call();
void cpx_draw(), cpx_wmove(), cpx_key();

XCPB *xcpb;
CPXINFO cpxinfo;

CPXINFO
*cpx_init( Xcpb )
XCPB *Xcpb;
{
	xcpb = Xcpb;

	appl_init();

	if(xcpb-&gt;booting)
	{

		/* CPX's that do boot-time initialization do it here */

		/* Returning TRUE here tells XCONTROL to retain the header
		 * for later access by the user. If CPX is Set-Only,
		 * return FALSE.
		 */
	
		return ( (CPXINFO *) TRUE )
	} 
	else
	{
		/* If you haven't already done so, fix resource tree.
		 *
		 * DEFINE's and variables are from RSH file generated
		 * by the Atari Resource Construction Set.
		 */

		if(!SkipRshFix)
<FONT SIZE=2>			(*xcpb-&gt;rsh_fix)( NUM_OBS, NUM_FRSTR, NUM_FRIMG, 	NUM_TREE, rs_object, 				rs_tedinfo, rs_strings, rs_iconblk, rs_bitblk, rs_frstr, rs_frimg, 				rs_trindex, rs_imdope );

</FONT>		cpxinfo.cpx_call = cpx_call;
<FONT SIZE=2>		cpxinfo.cpx_draw = cpx_draw;
</FONT>		cpxinfo.cpx_wmove = cpx_wmove;
<FONT SIZE=2>		cpxinfo.cpx_timer = NULL;
</FONT>		cpxinfo.cpx_key = cpx_key;
<FONT SIZE=2>		cpxinfo.cpx_button = NULL;
</FONT>	<a name=cpx>	cpxinfo.cpx_m1 = NULL;
<FONT SIZE=2>		cpxinfo.cpx_m2 = NULL;
</FONT>		cpxinfo.cpx_hook = NULL;
<FONT SIZE=2>		cpxinfo.cpx_close = NULL;

</FONT>		/* Tell XCONTROL to send generic and keyboard
<FONT SIZE=2>		 * messages.
</FONT>		 */

<FONT SIZE=2>		(*xcpb-&gt;Set_Evnt_Mask)( MU_MESAG | MU_KEYBD, NULL, NULL, -1L );

</FONT>		return ( &amp;cpxinfo );
<FONT SIZE=2>	}
</FONT>}

<FONT SIZE=2>BOOLEAN
</FONT>cpx_call( rect )
<FONT SIZE=2>GRECT *rect;
</FONT>{
<FONT SIZE=2>	/* Put MAINFORM tree in *tree for object macros */

</FONT>	OBJECT *tree = (OBJECT *)rs_trindex[ MAINFORM ];

<FONT SIZE=2>	ObX( ROOT ) = rect-&gt;g_x;
</FONT>	ObY( ROOT ) = rect-&gt;g_y;

<FONT SIZE=2>	objc_draw( tree, ROOT, MAX_DEPTH, PTRS( rect ) );

</FONT>	return ( TRUE );
<FONT SIZE=2>}

</FONT>VOID
<FONT SIZE=2>cpx_draw( rect )
</FONT>GRECT *rect;
<FONT SIZE=2>{
</FONT>	OBJECT *tree = (OBJECT *)rs_trindex[ MAINFORM ];
<FONT SIZE=2>	GRECT *xrect, rect;

</FONT><a name=getfirstrect>	xrect = (*xcpb-&gt;GetFirstRect)( rect );

<FONT SIZE=2>	while( xrect )
</FONT>	{
<FONT SIZE=2>		rect = *xrect;
</FONT>		objc_draw( tree, ROOT, MAX_DEPTH, ELTS( rect ) );
<FONT SIZE=2>		xrect = (*xcpb-&gt;GetNextRect)();
</FONT>	}
<FONT SIZE=2>}

</FONT>VOID
<FONT SIZE=2>cpx_wmove( work )
</FONT>GRECT *work;
<FONT SIZE=2>{
</FONT>	OBJECT *tree = (OBJECT *)rs_trindex[ MAINFORM ];

<FONT SIZE=2>	ObX( tree ) = work-&gt;g_x;
</FONT>	ObY( tree ) = work-&gt;g_y;
<FONT SIZE=2>}

</FONT>VOID
<FONT SIZE=2>cpx_key( kstate, key, quit )
</FONT>WORD kstate, key;
<FONT SIZE=2>WORD *quit;
</FONT>{
<FONT SIZE=2>	/* Substitute case values for values you're interested
</FONT>		* in.
<FONT SIZE=2>		*/

</FONT>	switch( key )
<FONT SIZE=2>	{
</FONT>		case KEY_1:
<FONT SIZE=2>		case KEY_2:
</FONT>	}
<FONT SIZE=2>}
</FONT>
</PRE>

<HR>

<a name=cpx><H4><FONT SIZE=4 ><a name=file formats>CPX File Formats</FONT></H4>

<HR>

<a name=filenaming><H5>File Naming</H5>

<P>
Several standard naming conventions for CPX executables and development
files follow:
<TABLE BORDER=1>

<TR><TH><B><FONT SIZE=1 >File Name</FONT></B></TH>
<TH><B><FONT SIZE=2 >Meaning</FONT></B></TH></TR>

<TR><TD>*.CPX</TD><TD><FONT SIZE=2>Standard CPX ready for execution by the Control Panel.</FONT>
</TD></TR>

<TR><TD>*.CP</TD><TD><FONT SIZE=2>CPX missing the 512 byte header.</FONT>
</TD></TR>

<TR><TD>*_R.CPX</TD><TD><FONT SIZE=2>A resident CPX.</FONT></TD>
</TR>

<TR><TD>*_S.CPX</TD><TD><FONT SIZE=2>A "Set-only" CPX.</FONT>
</TD></TR>

<TR><TD>*.HDR</TD><TD><FONT SIZE=2>A 512 byte CPX header file.</FONT>
</TD></TR>

<TR><TD>*.CPZ</TD><TD><FONT SIZE=2>An inactive CPX.</FONT></TD>
</TR>

<TR><TD>*.RSH</TD><TD><FONT SIZE=2>An "embeddable" resource file. CPX's can't execute a <B>rsrc_load()</B> so all resource files must be in this format.</FONT>
</TD></TR>

</TABLE>

<H5></H5>

<H5>The CPX File Format</H5>

<P>
A CPX file can be represented graphically as follows:
<CENTER>

<TABLE BORDER=1>

<TR><TH>
<CENTER>
<B><FONT SIZE=1>CPX Header Record</FONT></B>
</CENTER>

<P>

<CENTER>
<B><FONT SIZE=1>(512 bytes)</FONT></B>
</CENTER>

</TH></TR>

<TR><TH>
<CENTER>
<B><FONT SIZE=1 >GEMDOS Executable Header</FONT></B>
</CENTER>

<P>

<CENTER>
<B><FONT SIZE=1 >(28 bytes)</FONT></B>
</CENTER>

</TH></TR>

<TR><TH>
<CENTER>
<B><FONT SIZE=1>CPX TEXT Segment<BR>
(cpx_init() must begin at offset 0 of this segment)</FONT></B>
</CENTER>

</TH></TR>

<TR><TH>
<CENTER>
<B><FONT SIZE=1 >CPX DATA Segment</FONT><FONT SIZE=1 >(any data to be saved back into the CPX must begin at offset 0 of this segment)</FONT></B>
</CENTER>

</TH></TR>

<TR><TH>
<CENTER>
<B><FONT SIZE=1>CPX Symbol Table (if any)</FONT></B>
</CENTER>

</TH></TR>

</TABLE>

</CENTER>

<P>

<HR>

<a name=calling><H4><FONT SIZE=4 ><a name=functioncallingprocedure>XCONTROL Function Calling Procedure</FONT>
</H4>

<HR>

<H5>Calling Conventions</H5>

<P>
<B>XCONTROL</B> uses "right-left" stack-based parameter
passing for all of its functions and expects that user defined
callback functions are similarly "right-left" stack-based.
Compilers which do not default to this method should use either
the 'cdecl' or '_stdargs' keyword depending on your compiler.
<P>
Function entry stubs must also consider the longword return code
placed on the stack by the 68x00 'JSR' function. 'C' compilers
always expect this. For example, the pointer to the <B>XCPB</B>
passed to the <B>cpx_init()</B> function can be stored through
the following machine language statement:
<PRE>
	_cpx_init:
					move.l		4(sp),xcpb

</PRE>

<H5><FONT SIZE=2><a name=stackspace>Stack Space</FONT></H5>

<P>
CPX programmers should note that all CPX operations use the default
Control Panel stack space (2048 bytes) and should therefore restrict
heavy usage of automatic variables and other large consumers of
stack space.
<p>
<hr><center><a href="toc.htm"> Table of Contents | </a><a href="index.htm"> Index </a></center>
</BODY>

</HTML>
