

                         ππππππππππππππππππππππππππ
                          TOME I,   CHAPITRE NR¯1

                                INTRODUCTION
                            
                         ππππππππππππππππππππππππππ

  BONJOUR!       Pour commencer, comme le titre de ce premier chapitre
  l'indique , voilÖ une explication quant Ö l'utilisation de ce manuel
  digital et aussi une introduction gÇnÇrale Ö la programmation en as-
  sembleur 68000 sur ATARI ST.

  
                    *** COMMENT UTILISER CE MANUEL ? ***
                    ππππππππππππππππππππππππππππππππππππ

-   Ceci est un manuel digital, c'est Ö dire qu'il se compose de textes
    sur support magnÇtique: une disquette

-    L'avantage de cette mÇthode  ?   Une Çconomie non nÇgligeable pour
  l'acheteur , des programmes et surtout des listings dejÖ Çcrits (donc
  gain de temps et finies les fautes de frappe ou autres erreurs...)

-  Vous pouvez charger les diffÇrents textes, regroupÇs par fichiers et
  les lire avec un traitement de texte (par exemple FIRST WORD) ou (si
  vous n'en possädez pas) avec  tout  autre  utilitaire  chargeant  des
  textes au format ASCII (c'est Ö dire un fichier contenant du texte et
  pouvant ätre listÇ Ö partir du DESKTOP comme tel):

        C'est possible avec les Çditeurs de texte de METACOMCO ( sÇlec-
  tionnez le fichier Ö lire en passant par l'utilitaire NENU+.PRG avec
  l'option 'CHOOSE *.*' puis l'option 'EDIT' )

   Cette mÇthode s'applique aussi Ö DEVPAC 68000. (MÇtacomco et Devpac
   sont des assembleurs, voir plus loin pour plus de dÇtails).

  Vous pouvez aussi vous servir des options du DESKTOP: double-cliquez
  sur le fichier texte choisi puis sÇlectionnez 'IMPRIMER' ou 'VOIR'.

  Bien entendu, vous pouvez aussi imprimer librement tous les fichiers
  avec votre traitement de texte une fois ceux-ci chargÇs...


-   Ce manuel est formÇ par une suite de textes classÇs par chapitres
    (comme dans un livre) pour donner une structure Ö l'ensemble.

-   A la fin de chaque fichier, une indication vous donnera le nom exact
  du prochain texte Ö lire:Vous ne devrez pas rencontrer de problämes.



                         *** STRUCTURE DU LIVRE ***
                         ππππππππππππππππππππππππππ
-   Comme vous pouvez l'apercevoir, les titres sont centrÇs, encadrÇs
    par des Çtoiles,soulignÇs et espacÇs de maniäre Ö aÇrer le texte.

    Le texte lui màme sera regroupÇ en paragraphes pour une meilleure
    clartÇ.

-   Plus tard , les mots importants et Ö retenir par la suite seront
    Çcris en majuscules. (exemples: OCTET,REGISTRE etc...)

-   J'utiliserais aussi certaines abrÇviations: "c.Ö.d" pour "c'est Ö
    dire "  ou  "exp." pour "exemple" , "prg" pour "programme" ...

-   Les programmes exemples seront prÇsents sur la disquette.
    ( vous pourrez les charger directement avec votre assembleur sans
    avoir Ö les retaper! )

    Il en est de màme pour les programmes exÇcutables issus de ces 
    listings et pour les corrections des exercices.
    

                       *** UNE MêTHODE DIDACTIQUE ***
                       ππππππππππππππππππππππππππππππ
-   L'assembleur est rÇputÇ pour sa difficultÇ, et il est vrai que pro-
 grammer en assembleur demande beaucoup plus d'effort que de programmer
 en BASIC ou màme en langage C ...

-  Ne vous inquiätez pas ...!   Pour faire une comparaison, on pourrait
 dire que programmer en assembleur est aussi difficile que d'apprendre
 Ö lire ou Çcrire , or qui d'entre vous ne sait pas lire ET Çcrire ?!

-   Tout commme pour l'apprentissage de la lecture, cet ouvrage placera
   la pratique en premier plan et sera trÇs abondant en exemples divers
   tous commentÇs en dÇtail et d'exercices personnels (avec rÇponses
   complätes).

-   Il faudra vous dÇbarasser de tous prÇjugÇs sur l'assembleur:

    Quelqu'un qui ne sait pas lire sera dÇcouragÇ devant un texte, qui
    n'est pour lui qu'une tartine de lettres dont l'allignement n'a rien
    d'apparemment logique.

    Il doit en ätre de màme pour vous devant un listing en assembleur,
    alors patience ...


-   Il faudra d'abord apprendre l'alphabet (c.Ö.d les dÇfinitions utiles)
  puis Çtudier des exemples ,les rägles de grammaire (donc les relations
  qui donnent une cohÇrence Ö votre programme) mais aussi les exceptions
  (donc les cas particuliers en assembleur).

    A la fin de cet ouvrage vous serez donc tous capable de LIRE un pro-
    gramme en assembleur 68000 et de le COMPRENDRE.
    
    Bref, vous aurez acquis les bases de la programmation en ASS. 68000
    et vous pourrez Çcrire vos premiers programmes

-     A ce momment, vous pourrez enfin vous plonger dans divers livres
  traitant de la programmation en assembleur 68000, livres qui pour la
  plupart s'adressent Ö un public dÇjÖ averti, et vous constaterez vous
  màme que votre progression ne fera que s'accÇlÇrer...

-  Le but de ce livre est donc träs ambitieux: Il a pour but de vous ap-
   prendre un langage informatique qui vous est inconnu.

   Devant la difficultÇ de la chose j'ai tentÇ de rendre les problämes
   que pose la programmation en assembleur trÇs clairs:

  πππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππ
*  Ce livre n'a pas ÇtÇ Çcrit pour Çblouir ou impressionner ses lecteurs
   par un vocabulaire technique incomprÇhensible, il est au contraire un
   exemple de clartÇ.

*  Chaque notion importante est expliquÇe en profondeur et illustrÇe par
   des exemples divers et dÇtaillÇs.

*  Le vocabulaire utilisÇ sera dÇfinit et la linÇaritÇ du livre ammänera
   le lecteur Ö un rÇsultat progressif,rapide et sans ambiguitÇ.

  πππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππ

-  N'oubliez jamais cette rägle d'or:

                  " LA QUALITE VAUT MIEUX QUE LA QUANTITE ! "

     Ceci est surtout vrai pour la programmation en assembleur, je vous
  conseille de ne pas lire trop vite, vous ne pourrez pas progresser si
  vous n'assimilez pas les notions des divers chapitres de faáon rÇgu-
  liäre :

     La programmation en assembleur suit des rägles träs strictes.

     La relecture sera indispensable et frÇquente, c'est normal.

     Arrätez-vous si vous n'avez pas compris quelquechose et relisez 
     träs lentement.



                          *** MATERIEL NECESSAIRE ***
                          πππππππππππππππππππππππππππ
1) Logiciels:
   πππππππππ
-    Un ASSEMBLEUR complet :EDITEUR,ASSEMBLEUR,LINKER (termes expliquÇs
   plus loin) vous seront indispensables si vous voulez crÇer vous màme
   vos propres programmes en assembleur 68000.

     Plusieurs sont disponibles chez tout bon revendeur, voilÖ les plus
     courants.

* METACOMCO MC 68000:    .Un bon assembleur,l'Çditeur est gÇrÇ par le
  ππππππππππππππππππ      clavier:il est donc trÇs convivial et rapide.

                         .L'assembleur est paramÇtrable et permet de dÇ-
                          finir des MACROS-INSTRUCTIONS  (sortes de fonc-
                          tions crÇÇes par le programmeur et pouvant si-
                          muler par la suite une nouvelle instruction ,
                          je dÇtaillerais plus tard ...)

                         .Les accäs au lecteur de disquette sont Ö mon
                          avis trop nombreux, on y perd donc en rapidi-
                          tÇ, c'est dommage.     

* PROFIMAT           :   .C'est cet assembleur que nous utiliseront dans
  ππππππππ                les exemples, mais les listings restent vala-                         
                          bles pour les autres assembleurs. 
                               
                         .L'Çditeur est trÇs complet (aides, gestion avec
                          la souris par des menus dÇroulants ...)

                         .L'assembleur est paramÇtrable et gÇnäre un CODE
                          OBJET optimisÇ.
                          (patience pour les explications...)

                         .Permet aussi de crÇer des MACROS.

                         .L'Çditeur,l'Assembleur,le Linker sont dispo-
                          nibles en meme temps , les accäs au lecteur 
                          de disquette sont donc limitÇs, Träs bien !

contient aussi:          .Un DEBUGGER (pour trouver les ERREURS dans vos
                          prg en assembleur ( permet aussi d'Çtudier le
                          contenu de la mÇmoire de l'ordi. ),
                          Et un DESASSEMBLEUR qui donne un fichier texte
                          (listing) Ö partir d'un programme COMPILê ( ou
                          programme exÇcutable du type NOM .PRG )

                          Ces 2 termes seront expliquÇs dans un chapitre
                          Ö part.

                         .TrÇs complet


* DEVPAC ST (1 ou 2)     .Màmes caractÇristiques que Profimat mais en
  ππππππππππππππππππ      moins dÇveloppÇ pour Devpac I.

                         .Träs performant (surtout DEVPAC II) et simple
                          d'accäs.
     
                         .Vous pourrez,avec DEVPAC II,lancer directement
                          le programme crÇÇ, sans avoir Ö quitter l'Çdi-
                          teur, et retraiter le listing en cas d'erreur!
                         
                         .DEVPAC II est livrÇ avec MONST2, le meilleur
                          dÇbugger et dÇsassembleur que vous puissiez
                          trouver...

                         .DEVPAC II admet des DIRECTIVES D'ASSEMBLAGE
                          (patience pour les explications...) träs
                          puissantes:INCBIN,REPT,ENDR,ELSEIF,RSSET...

                         .DEVPAC II est Ö mon avis LE meilleur assembleur
                          que vous puissiez trouver: N'hÇsitez pas !

     
* GFA ASSEMBLEUR         .Je n'ai pu que tester une prÇversion de cet
  ππππππππππππππ          assembleur:
                 
                         .Il vous sera träs utile car il corrige les
                          syntaxes incorrectes.

                         .Le programme peut ätre directement exÇcutÇ,
                          sous l'Çditeur.(Comme avec DEVPAC II)
                    
                         .Contient un dÇbugger träs convivial...
                         
                         .L'EDITEUR est superbe!(Il est plus rapide que
                          celui du GFA BASIC).  
   
                         (Demandez de plus amples dÇtails Ö votre reven-
                         deur...)
 
* METACOMCO 12.0         .Contient un Träs bon EDITEUR.
  ππππππππππππππ         
                         .L'ASSEMBLEUR,le LINKER et le DEBUGGER fournis
                          sont träs puissants.

                         .La notice fournie est träs bien rÇalisÇe...

  Les prix de ces diffÇrents assembleur peuvent varier, mais ils sont en
  gÇnÇral assez ÇlevÇs car il s'agit dÇja d'utilitaires trÇs complexes
  et rÇservÇs Ö des professionnels, mais ils conviennent träs bien Ö nos
  besoins et leur utilisation ne pose  pas de  probläme  si l'on connait
  l'assembleur.

     Vous avez encore tout le temps de faire votre choix si cela n'a pas
  encore ÇtÇ fait, patientez encore pour pouvoir parfaire votre jugement
  car rien ne presse ...


2) Manuels complÇmentaires (facultatif)
   ππππππππππππππππππππππππππππππππππππ

-       Par la suite, lorsque nous Çtudierons les fonctions du GEMDOS, de
   l'XBIOS et du BIOS,  il vous sera träs utile de possäder: "LA BIBLE DU
   ST" de MICRO APPLICATION,ce livre contient justement tous les noms des 
   fonctions des 'librairies' que sont le GEMDOS,l'XBIOS et le BIOS.

   Les fonctions du GEMDOS,de l'XBIOS et du BIOS peuvent ätres appellÇes
   en assembleur et  permettent  l'Çxecution de  fonctions de base comme
   l'Çdition de caractäres,l'ouverture de fichiers sur Disquette, ou en- 
   core le changement de la palette des couleurs  etc...

      Un chapitre expliquera en dÇtail toutes ces fonctions avec des 
      exemples,des exercices corrigÇs et une description minutieuse.


-  Vous pouvez aussi acheter "LE LIVRE DU GEM" de MICRO APPLICATION ,il
   contient les fonctions VDI et AES :

    Le VDI est une 'Bibliothäque' de fonctions tout comme le BIOS ou le
    GEMDOS et l'XBIOS, mais ces fonctions sont graphiques et permettent
    par exemple le traáage de cercles,polygones,les remplissages...

    L'AES gäre l'environnement pour les applications, c.Ö.d. qu'il gäre
    et permet la crÇation des fenàtres,des icones... par lesquels l'uti-
    lisateur  communique des  informations Ö l'ordi.  grÖce Ö la souris
    notamment.

-   Nous nous interässeront d'avantage au VDI dans un chapitre Ö part car
    l'utilisation de L'AES dÇpasse le cadre de notre objectif vu la com-
    plexitÇ de sa mise en oeuvre.

    

   .Un chapitre entier sera consacrÇ aux fonctions du GEMDOS,BIOS,XBIOS
    et VDI (Vous Çtudierez aussi les LineAs et les programmes sous in-
    terruption...)



                    *** QU'EST CE QUE L'ASSEMBLEUR ? ***
                    ππππππππππππππππππππππππππππππππππππ

-    L'ASSEMBLEUR a la triste rÇputation d'ätre difficile Ö mettre en
     oeuvre, c'est pourquoi on lui prÇfäre un langage comme le BASIC,
     le PASCAL,le C etc...

     Une des raisons majeures ayant contribuÇe Ö cette rÇputation est
     sans doute l'absence de toute initiation compläte et didactique
     Ö ce langage fantastique qu'est l'ASSEMBLEUR.
     Souvent les ouvrages publiÇs sur l'ASSEMBLEUR sont totalement dÇ-
     pourvus de toute ambition pÇdagogique et ne sont en fait rien de
     plus que des catalogues de termes techniques incomprÇhensibles.

     C'est ainsi, que la plupart des programmeurs amateurs ne connais-
     sent rien Ö l'assembleur bien que ce soit le langage naturel de
     leur ordinateur !

     VoilÖ qui est bien dommage, car les performances de l'assembleur
     ne peuvent màme pas àtre comparÇes avec celles de  certains lan-                                           
     gages dits 'evoluÇs'.(surtout sur le plan graphique)

-       L'ASSEMBLEUR, permet de comprendre le fonctionnement interne de
     l'ordinateur, dans un programme en ASSEMBLEUR chaque composante de
     la structure de l'ordinateur apparait clairement:MêMOIRE,REGISTRES
     ,VARIABLES...

-    Chacune de ces composantes peut ätre modifiÇe en ASSEMBLEUR.

     L'ASSEMBLEUR est en prise directe avec l'ordi. et n'utilise donc
     pas de moyens dÇtournÇs, il arrive toujours Ö un rÇsultat prÇcis.

     Un programme en BASIC de 3 lignes compilÇ sera composÇ d'une cen-
     taine d'instructions ASSEMBLEUR, alors que le mäme programme, di-
     rectement Çcris en ASSEMBLEUR n'en occuperait que le dixiäme...


-    Comme chaque  langage informatique, l'ASSEMBLEUR  comporte diverses
     instructions, mais il peut aussi faire appel directement Ö des fon-
     ctions (XBIOS,BIOS,GEMDOS,AES,VDI...) en fournissant les paramätres
     nÇcessaires.

-    L'ASSEMBLEUR 68000 travaille en deux modes diffÇrents:

          Le mode Utilisateur: une zone de mÇmoire rÇservÇe est
                               disponible au programmeur.

          Le mode Superviseur: Le programmeur a accäs Ö toutes les
                               instructions et toute la mÇmoire.


-     L'ASSEMBLEUR est trÇs spÇcifique : on ne programme pas en Assem-
      bleur Z80 sur AMSTRAD CPC comme sur ATARI ST en Assembleur 68000.


   ππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππ
        Toutes ces notions seront dÇfinies en profondeur plus tard:
                          Pas de Panique !

   ππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππππ



               *** POURQUOI PROGRAMMER EN ASSEMBLEUR ? ***
               πππππππππππππππππππππππππππππππππππππππππππ

 -   Qui d'entre vous ne räve pas de pouvoir Çgaler ou surpasser les
     programmeurs de vos jeux favoris ??

     Exp: OVERLANDER et PANDORA ont ÇtÇ programmÇs avec DEVPAC II
          et 95% des bons jeux sur ST sont Çcris en Assembleur.
          
 -   Dans certains cas L'ASSEMBLEUR peut ätre 100 fois plus rapide
     que GFA BASIC...

 -   Si vous programmez en BASIC , vous ne disposerez que des intru-
     ctions propres Ö l'utilitaire tandis qu'en ASSEMBLEUR vous dis-
     posez  d'une centaine  de fonctions  directement utilisables et
     d'un jeu d'instructions qui vous  permettera de  diriger chaque
     opÇration avec une prÇcision et une rapiditÇ inÇgalable.

 -   L'ASSEMBLEUR est träs spÇcifique car il varie selon le MICRO-
     PROCESSEUR (le 'cerveau' de votre ordi.).

     L'ATARI ST est ÇquipÇ du Microprocesseur MC 68000 (de Motorola)
     :Donc on programme en Assembleur 68000 sur ST...

     Un AMSTRAD CPC est ÇquipÇ d'un microprocesseur Z80,diffÇrent du
     MC 68000 sur beaucoup de points.Ceci explique les diffÇrences de
     performances, et de programmation  entre ces 2 ordinateurs.

-    Mais aujourd'hui, on trouve des ordinateurs ÇquipÇs de Micoproces-
     seurs de la famille du MC 68000: les 68008,68010,68012...
     Un expemple: L'AMIGA possäde aussi un micoprocesseur MC 68000.

     Il vous sera donc assez aisÇ de vous adapter Ö la programmation en
     assembleur sur ces (nouveaux) ordinateurs.

     Les microprocesseurs de la famille 68000 ont donc encore de beaux
     jours devant eux... ( contrairement au Z80 par exemple, qui est
     totalement dÇpassÇ )


                                ππππππππππππππ

     VoilÖ pour la partie thÇorique, mais maintenant passons aux choses
     sÇrieuses...



       Laurent PIECHOCKI
       8, impasse Bellevue                       suite dans :  NR#2.DOC
       57980 TENTELING                                         ππππππππ


