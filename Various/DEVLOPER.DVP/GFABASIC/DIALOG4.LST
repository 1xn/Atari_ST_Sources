'
' Afficher boåte de dialogue / boutons Touchexit (UP/DOWN)
' GFA-BASIC                     DIALOG4.GFA
'
DEFINT "a-z"   ! Toutes les variables en entiers de 4 octets
'
dialog=0       ! Constantes dans DIALOG4.H2
actuel=5
dn=7           ! (GFA-BASIC convertirait DOWN en DO WHILE)
up=6
sortie=8
'
VOID APPL_INIT()
'
IF RSRC_LOAD("DIALOG4.RSC")=0
  VOID FORM_ALERT(1,"[3][Pas de fichier RSC!][Fin]")
ELSE
  '
  ' Demander l'adresse de l'arbre:
  '
  VOID RSRC_GADDR(0,dialog,arbre_adr)
  '
  ' Initialiser le champ de sortie (actuel):
  '
  write_text(arbre_adr,actuel,"0")
  chiffre=0
  '
  ' Afficher la boåte de dialogue, stocker les coordonnÇes:
  '
  GOSUB show_dialog(arbre_adr,x,y,w,h)
  '
  REPEAT
    '
    ' Faire travailler la boåte de dialogue; "entrÇe" premier champ Edit
    '
    bouton=FORM_DO(arbre_adr,entree)
    '
    SELECT bouton
    CASE up
      INC chiffre
    CASE dn
      DEC chiffre
    ENDSELECT
    '
    ' Tester la validitÇ du champ:
    '
    SELECT chiffre
    CASE 10
      chiffre=0
    CASE -1
      chiffre=9
    ENDSELECT
    '
    ' êcrire le chiffre dans le formulaire:
    '
    write_text(arbre_adr,actuel,STR$(chiffre))
    VOID OBJC_DRAW(arbre_adr,actuel,0,x,y,w,h) ! 0=dessiner actuel seulement
    '
    ' Courte pause (0.2 secondes):
    '
    VOID EVNT_TIMER(200)
  UNTIL bouton=sortie
  '
  ' Effacer l'Çtat selected:
  '
  deselect(arbre_adr,bouton)
  '
  ' Faire disparaåtre la boåte de dialogue:
  '
  GOSUB hide_dialog(arbre_adr)
  '
  ' Effacer le fichier ressource de la mÇmoire:
  '
  VOID RSRC_FREE()
  '
ENDIF
'
VOID APPL_EXIT()
'
END
'
'
PROCEDURE select(arbre,index)
  ' Mettre le bit 0 Ö 1:
  OB_STATE(arbre,index)=OB_STATE(arbre,index) OR 1
RETURN
'
'
PROCEDURE deselect(arbre,index)
  ' Effacer le bit 0:
  OB_STATE(arbre,index)=OB_STATE(arbre,index) AND -2
RETURN
'
'
DEFFN selected(arbre,index)=OB_STATE(arbre,index) AND 1
'
'
PROCEDURE show_dialog(arbre,VAR x,y,w,h)
  LOCAL x,y,w,h
  '
  ' Centrer le formulaire Ö l'Çcran
  ' (n'est pas encore dessinÇ)
  '
  VOID FORM_CENTER(arbre,x,y,w,h)
  '
  ' Stocker les cadres des fenàtres:
  '
  VOID FORM_DIAL(0,x,y,w,h,x,y,w,h)
  '
  ' Dessin d'un rectangle "zoom":
  '
  VOID FORM_DIAL(1,25,25,25,25,x,y,w,h)
  '
  ' Dessin du formulaire:
  ' Commencer par l'objet no 0 (objet racine, boåte/cadre extÇrieur)
  ' Profondeur: 12 niveaux (valeur arbitraire)
  '
  VOID OBJC_DRAW(arbre,0,12,x,y,w,h)
  '
RETURN
'
'
PROCEDURE hide_dialog(arbre)
  LOCAL x,y,w,h
  '
  ' Redemander les coordonnÇes:
  '
  VOID FORM_CENTER(arbre,x,y,w,h)
  '
  ' Dessiner un rectangle rÇtrÇcissant:
  '
  VOID FORM_DIAL(2,25,25,25,25,x,y,w,h)
  '
  ' Restaurer les cadres des fenàtres et envoyer des messages
  ' Redraw Ö toutes les fenàtres dÇtruites:
  '
  VOID FORM_DIAL(3,x,y,w,h,x,y,w,h)
  '
RETURN
'
'
PROCEDURE write_text(arbre,index,text$)
  LOCAL adr,i,a$
  '
  ' Passer l'adresse du texte proprement dit (te_ptext):
  '
  adr=LPEEK(OB_SPEC(arbre,index))
  '
  ' Ajouter un octet nul:
  '
  a$=text$+CHR$(0)
  '
  FOR i=1 TO LEN(a$)
    POKE adr+i-1,ASC(MID$(a$,i,1))
  NEXT i
RETURN
'
'
PROCEDURE read_text(arbre,index,VAR text$)
  LOCAL adr,i
  '
  ' Passer te_ptext:
  '
  adr=LPEEK(OB_SPEC(arbre,index))
  '
  text$=""
  i=0
  '
  WHILE PEEK(adr+i)<>0    ! Lire jusqu'Ö l'octet nul
    text$=text$+CHR$(PEEK(adr+i))
    INC i
  WEND
RETURN
'
