'
' Charger le fichier ressource et afficher une barre de menus
' GFA-BASIC                    MENU1.GFA
'
' Il faut restituer de la m‚moire au GEM pour rsrc_load:
'
RESERVE -33000   ! Cela devrait suffire car les
'                  fichiers ressource ne d‚passent pas 32 Ko
'
menus=0   ! Ces constantes ont ‚t‚ charg‚es par "merge"
info=7    ! MENU1.H2, qui peut ˆtre cr‚‚ par le programme
fin=16    ! BASHEAD (voir description)
'
tampon$=SPACE$(16)   ! De la place pour 8 mots
'
DEFFN p(x)=CVI(MID$(tampon$,x*2+1,2))  ! La fonction lit le
'                                        mot no X dans le tampon
'
VOID APPL_INIT()
'
' Chargement du fichier ressource (MENU1.RSC):
'
IF RSRC_LOAD("MENU1.RSC")=0
  VOID FORM_ALERT(1,"[3][Pas de fichier ressource!][Quitte]")
ELSE
  '
  ' Demander l'adresse de l'arbre objet menus (0 pour arbre):
  '
  VOID RSRC_GADDR(0,menus,menus_adresse%)
  '
  ' Affichage (1) de la barre des menus:
  '
  VOID MENU_BAR(menus_adresse%,1)
  '
  ' Boucle d'‚vŠnements:
  '
  sortie%=0
  '
  REPEAT
    VOID EVNT_MESAG(VARPTR(tampon$))
    '
    IF FN p(0)=10         ! Cliqu‚ une option de menu?
      title%=FN p(3)      ! Stocker le num‚ro du titre
      IF FN p(4)=info     ! Demand‚ Information?
        VOID FORM_ALERT(1,"[1][Programme d‚mo de menus|(c) 1989 Micro-Application][Continue]")
      ENDIF
      IF FN p(4)=fin     ! ou fin programme?
        IF FORM_ALERT(2,"[2][Quitter? Vraiment?][Oui|Non]")=1
          sortie%=1
        ENDIF
      ENDIF
      '
      ' Affichage normal (1) du titre de menu:
      '
      VOID MENU_TNORMAL(menus_adresse%,title%,1)
    ENDIF
  UNTIL sortie%=1
  '
  VOID MENU_BAR(menus_adresse%,0)  ! Effacer la barre de menus
  VOID RSRC_FREE()                 ! Lib‚rer la m‚moire
ENDIF
'
RESERVE
VOID APPL_EXIT()
'
END
'
