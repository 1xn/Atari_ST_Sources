'
' ReprÇsentation graphique de chiffres sous forme d'histogramme et de camembert
' GFA-BASIC                                   DIAGRAMM.GFA
'
RESERVE -33000    ! Restituer un peu de mÇmoire au GEMDOS
'
DEFINT "a-z"      ! A partir d'ici toutes les variables sont des entiers
'
' Constantes du fichier ressource:
'
b_data=2
s1=4
w1=5
w2=8
s2=7
s3=10
w3=11
s4=13
w4=14
s5=16
w5=17
w6=20
s6=19
s7=22
w7=23
s8=25
w8=26
ok=28
sortir=27
b_menus=0
info=8
charger=17
sauv=18
sauvgr=20
fin=22
dedit=24
histogr=26
camemb=27
legende=29
lignes=30
b_info=1
'
' Constantes spÇciales:
'
act_form=histogr  ! 'histogr' et 'camemb' sont dÇfinies ci-dessus '
DIM chiffr$(8),valeur$(8),valeur#(8)   ! DonnÇes d'un graphe
FOR i=1 TO 8
  chiffr$(i)=""
  valeur$(i)=""
  valeur#(i)=0
NEXT i
'
DIM opts$(100)      ! Graphe supplÇmentaire stockÇ ici pour Redraw
next_opt=0
'
' Le sÇlecteur de fichier va avoir besoin d'un chemin:
'
path$=CHR$(ASC("A")+GEMDOS(&H19))+":"+DIR$(0)+"\*.DIF"
path2$=CHR$(ASC("A")+GEMDOS(&H19))+":"+DIR$(0)+"\*.DOO"
default$=""
default2$=""
'
VOID APPL_INIT()
'
IF RSRC_LOAD("DIAGRAMM.RSC")=0
  VOID FORM_ALERT(1,"[3][Pas de fichier RSC!][Fin]")
  VOID APPL_EXIT()
  END
ENDIF
'
' Lire les adresses des arbres:
'
VOID RSRC_GADDR(0,b_menus,menus_ptr)
VOID RSRC_GADDR(0,b_info,info_ptr)
VOID RSRC_GADDR(0,b_data,donnees_ptr)
'
' Passer la zone de travail, dessiner les surfaces grisÇes:
'
VOID WIND_GET(0,4,xdesk,ydesk,wdesk,hdesk)
'
DEFFILL 1,2,4        ! Gris du bureau
BOUNDARY 0           ! Encadrement dÇsactivÇ
PBOX xdesk,ydesk,xdesk+wdesk-1,ydesk+hdesk-1
'
' Les options Lignes et LÇgendes ne sont pas encore autorisÇes
'
VOID MENU_IENABLE(menus_ptr,legende,0)
VOID MENU_IENABLE(menus_ptr,lignes,0)
VOID MENU_IENABLE(menus_ptr,sauvgr,0)  ! concerne Çgalement "Sauvegarder graphe"
'
' Afficher la barre des menus:
'
VOID MENU_BAR(menus_ptr,1)
'
fenetre_ouvrt=0      ! Flag: Fenàtre pas encore ouverte
sortir=0            ! Flag: Pas encore Quitter
tampon$=SPACE$(16)   ! Place pour le tampon d'Çvänements GEM
'
REPEAT
  nouv_dessin=0     ! Flag: Graphe n'a pas Ö àtre redessinÇ
  VOID EVNT_MESAG(VARPTR(tampon$))   ! Attendre message
  '
  IF FN p(0)=10   ! Option?
    title=FN p(3) ! Stocker l'index du titre de menu
    '
    SELECT FN p(4)
    CASE info
      sub_info
    CASE charger
      sub_charger
    CASE sauv
      sub_sauv
    CASE sauvgr
      sub_sauvgr
    CASE fin
      sub_fin
    CASE dedit
      sub_dedit
    CASE histogr
      sub_histogr
    CASE camemb
      sub_camemb
    CASE legende
      sub_legende
    CASE lignes
      sub_lignes
    ENDSELECT
    '
    VOID MENU_TNORMAL(menus_ptr,title,1)  ! Afficher le titre "normal"
  ENDIF
  '
  IF FN p(0)=20 AND FN p(3)=whandle     ! Redraw
    redraw
  ENDIF
  '
  IF FN p(0)=21 AND FN p(3)=whandle     ! Topped
    nouv_dessin=1
  ENDIF
  '
  IF FN p(0)=22 AND FN p(3)=whandle     ! Closed
    sub_fin
  ENDIF
  '
  ' Tester: une modification exige-t-elle le redessin
  ' du graphe?
  '
  IF nouv_dessin=1
    IF fenetre_ouvrt=1
      '
      ' Voir si notre fenàtre est ouverte (active):
      '
      VOID WIND_GET(whandle,10,dessus,dummy,dummy,dummy)
      '
      IF whandle<>dessus
        VOID WIND_SET(whandle,10,0,0,0,0)
        pas_redraw=1    ! Redraw suit automatiquement WIND_SET
      ENDIF
    ENDIF
    dessine_graphe
  ENDIF
  '
UNTIL sortir=1
'
IF fenetre_ouvrt=1
  VOID WIND_CLOSE(whandle)
  VOID WIND_DELETE(whandle)
ENDIF
'
VOID MFREE(s_ptr)   ! La ligne titre Çtait ici
'
VOID MENU_BAR(menus_ptr,0)     ! Effacer la barre de menus
'
VOID RSRC_FREE()               ! Effacer les donnÇes ressource
VOID APPL_EXIT()
'
RESERVE
'
END
'
'
' Fonction d'accäs Ö chaque mot du tampon des messages de l'AES:'
DEFFN p(x)=CVI(MID$(tampon$,x*2+1,2))
'
'
PROCEDURE sub_sauvgr
  FILESELECT path2$,default2$,affich$
  IF affich$<>"" AND RIGHT$(affich$,1)<>"\"
    screen2=MALLOC(32000)
    IF screen2>0
      FOR i=0 TO 31996 STEP 4
        LPOKE screen2+i,0
      NEXT i
      '
      ' Afficher encore une fois le graphe apräs sÇlection dans sÇlecteur de '
      ' fichiers'
      ' Voir si notre fenàtre est dessus (active):'
      '
      VOID WIND_GET(whandle,10,dessus,dummy,dummy,dummy)
      IF whandle<>dessus
        VOID WIND_SET(whandle,10,0,0,0,0)
        pas_redraw=1    ! Redraw suit automatiquement WIND_SET
      ENDIF
      '
      dessine_graphe
      '
      RC_COPY XBIOS(3),xwork,ywork,wwork,hwork TO screen2,xwork,ywork
      '
      BSAVE affich$,screen2,32000
      '
      VOID MFREE(screen2)
    ELSE
      VOID FORM_ALERT(1,"[3][Pas assez de place en mÇmoire|pour cette opÇration!][Dommage]")
    ENDIF
  ENDIF
RETURN
'
'
PROCEDURE sub_camemb
  IF act_form<>camemb
    act_form=camemb
    '
    VOID MENU_ICHECK(menus_ptr,histogr,0)  ! Efface coche histogramme
    VOID MENU_ICHECK(menus_ptr,camemb,1)  ! êcrit coche camembert
    IF fenetre_ouvrt=1     ! Dessiner uniquement si fenàtre dÇjÖ ouverte
      nouv_dessin=1        ! (sinon la fenàtre serait ouverte n'importe oó
    ENDIF                  ! sans donnÇes pertinentes
  ENDIF
RETURN
'
'
PROCEDURE sub_histogr
  IF act_form<>histogr
    act_form=histogr
    '
    VOID MENU_ICHECK(menus_ptr,camemb,0)
    VOID MENU_ICHECK(menus_ptr,histogr,1)
    '
    IF fenetre_ouvrt=1
      nouv_dessin=1
    ENDIF
  ENDIF
RETURN
'
'
PROCEDURE sub_legende
  '
  ' DÇsactiver menus et fenàtres:
  '
  VOID WIND_UPDATE(3)     ! Rendre contrìle souris au programme (= Ö nous)
  CLIP xwork,ywork,wwork,hwork
  '
  VOID GRAF_MOUSE(5,0)    ! RÇticule
  a$=""
  '
  ' Vider le tampon du clavier:
  '
  WHILE INKEY$<>""
  WEND
  '
  GRAPHMODE 3          ! Mode XOR
  text_abbr=0
  x=MOUSEX
  y=MOUSEY
  '
  REPEAT
    IF MOUSEK=1        ! Bouton appuyÇ
      TEXT x,y,a$      ! Effacer Ö nouveau le texte
      GRAPHMODE 1      ! Mode remplace
      TEXT x,y,a$      ! êcrire le texte "correctement"
      text_abbr=1
    ENDIF
    '
    IF MOUSEX<>x OR MOUSEY<>y
      TEXT x,y,a$      ! Effacer l'ancien texte
      x=MOUSEX         ! Reprendre les coordonnÇes
      y=MOUSEY
      TEXT x,y,a$      ! RÇÇcrire le texte
    ENDIF
    '
    z$=INKEY$
    IF z$<>""
      IF z$=CHR$(8)    ! Backspace?
        IF a$<>""
          TEXT x,y,a$
          a$=LEFT$(a$,LEN(a$)-1)
          TEXT x,y,a$
        ENDIF
      ELSE
        TEXT x,y,a$
        a$=a$+z$
        TEXT x,y,a$
      ENDIF
    ENDIF
    '
  UNTIL text_abbr=1
  '
  ' Entrer l'affichage du texte dans la liste des options:
  '
  INC next_opt
  opts$(next_opt)=CHR$(act_form)+CHR$(0)+MKI$(x)+MKI$(y)+a$
  '
  VOID WIND_UPDATE(2)     ! Contrìle de la souris au GEM
  VOID GRAF_MOUSE(0,0)    ! Pointeur: fläche
  CLIP OFF
RETURN
'
'
PROCEDURE sub_lignes
  VOID WIND_UPDATE(3)     ! Rendre contrìle souris au programme (= Ö nous)
  CLIP xwork,ywork,wwork,hwork
  '
  VOID GRAF_MOUSE(5,0)    ! RÇticule
  '
  REPEAT          ! Permettons Ö l'utilisateur de lÉcher le bouton de la souris
  UNTIL MOUSEK=0  ! apräs avoir cliquÇ dans le menu
  '
  REPEAT          ! Attendre clic
  UNTIL MOUSEK=1
  '
  GRAPHMODE 3     ! Mode XOR
  x1=MOUSEX       ! Stocker les coordonnÇes
  y1=MOUSEY
  '
  x=x1
  y=y1
  LINE x,y,x,y    ! Un point doit àtre dÇjÖ marquÇ
  '
  REPEAT
    IF x<>MOUSEX OR y<>MOUSEY
      LINE x1,y1,x,y    ! Effacer la ligne
      x=MOUSEX
      y=MOUSEY
      LINE x1,y1,x,y    ! Tracer une autre ligne
    ENDIF
  UNTIL MOUSEK=0
  LINE x1,y1,x,y        ! Effacer Ö nouveau
  GRAPHMODE 1           ! Mode remplacement
  LINE x1,y1,x,y        ! Dessiner correctement
  '
  ' Entreer dans la liste des graphiques:
  '
  INC next_opt
  opts$(next_opt)=CHR$(act_form)+CHR$(1)+MKI$(x1)+MKI$(y1)+MKI$(x)+MKI$(y)
  '
  VOID WIND_UPDATE(2)   ! Rendre contrìle au GEM
  VOID GRAF_MOUSE(0,0)  ! Pointeur souris = fläche
  CLIP OFF
RETURN
'
'
PROCEDURE sub_fin
  IF FORM_ALERT(2,"[2][Vraiment quitter le programme?][Oui|Non]")=1
    sortir=1
  ENDIF
RETURN
'
'
PROCEDURE sub_info
  do_dialog(info_ptr,0,dummy)
RETURN
'
'
PROCEDURE sub_dedit    ! êditeur de donnÇes
  write_text(donnees_ptr,s1,chiffr$(1))
  write_text(donnees_ptr,s2,chiffr$(2))
  write_text(donnees_ptr,s3,chiffr$(3))
  write_text(donnees_ptr,s4,chiffr$(4))
  write_text(donnees_ptr,s5,chiffr$(5))
  write_text(donnees_ptr,s6,chiffr$(6))
  write_text(donnees_ptr,s7,chiffr$(7))
  write_text(donnees_ptr,s8,chiffr$(8))
  '
  write_text(donnees_ptr,w1,valeur$(1))
  write_text(donnees_ptr,w2,valeur$(2))
  write_text(donnees_ptr,w3,valeur$(3))
  write_text(donnees_ptr,w4,valeur$(4))
  write_text(donnees_ptr,w5,valeur$(5))
  write_text(donnees_ptr,w6,valeur$(6))
  write_text(donnees_ptr,w7,valeur$(7))
  write_text(donnees_ptr,w8,valeur$(8))
  '
  do_dialog(donnees_ptr,s1,cliqua)
  '
  IF cliqua=ok
    read_text(donnees_ptr,s1,a$)        ! Äa a l'air compliquÇ, non?
    chiffr$(1)=a$
    read_text(donnees_ptr,s2,a$)        ! Mais c'est le seul moyen!
    chiffr$(2)=a$
    read_text(donnees_ptr,s3,a$)
    chiffr$(3)=a$
    read_text(donnees_ptr,s4,a$)
    chiffr$(4)=a$
    read_text(donnees_ptr,s5,a$)
    chiffr$(5)=a$
    read_text(donnees_ptr,s6,a$)
    chiffr$(6)=a$
    read_text(donnees_ptr,s7,a$)
    chiffr$(7)=a$
    read_text(donnees_ptr,s8,a$)
    chiffr$(8)=a$
    '
    read_text(donnees_ptr,w1,a$)        ! De mal en pis...
    valeur$(1)=a$
    valeur#(1)=VAL(a$)
    read_text(donnees_ptr,w2,a$)
    valeur$(2)=a$
    valeur#(2)=VAL(a$)
    read_text(donnees_ptr,w3,a$)
    valeur$(3)=a$
    valeur#(3)=VAL(a$)
    read_text(donnees_ptr,w4,a$)
    valeur$(4)=a$
    valeur#(4)=VAL(a$)
    read_text(donnees_ptr,w5,a$)
    valeur$(5)=a$
    valeur#(5)=VAL(a$)
    read_text(donnees_ptr,w6,a$)
    valeur$(6)=a$
    valeur#(6)=VAL(a$)
    read_text(donnees_ptr,w7,a$)
    valeur$(7)=a$
    valeur#(7)=VAL(a$)
    read_text(donnees_ptr,w8,a$)
    valeur$(8)=a$
    valeur#(8)=VAL(a$)
    '
    nouv_dessin=1    ! Flag: redessiner le graphe, SVP
    pas_redraw=1    ! Mais: si nous redessinons quoiqu'il arrive, nous
    '            pourrons ignorer un Redraw par la boåte de dialogue!
  ENDIF
RETURN
'
' (Re)dessiner le graphe:
'
PROCEDURE dessine_graphe
  IF fenetre_ouvrt=0    ! Fenàtre pas encore ouverte?
    whandle=WIND_CREATE(3,xdesk,ydesk,wdesk,hdesk)
    '
    ' CrÇer barre de menus:
    '
    s_ptr=MALLOC(20)
    '
    FOR i=1 TO LEN(" DIAGRAMM "+CHR$(0))
      POKE s_ptr-1+i,ASC(MID$(" DIAGRAMM "+CHR$(0),i,1))
    NEXT i
    '
    VOID WIND_SET(whandle,2,s_ptr DIV 65536,s_ptr MOD 65536,0,0)
    '
    VOID WIND_OPEN(whandle,xdesk+5,ydesk+5,wdesk-10,hdesk-10)
    '
    ' Calcul de la zone de travail:
    '
    VOID WIND_CALC(1,3,xdesk+5,ydesk+5,wdesk-10,hdesk-10,xwork,ywork,wwork,hwork)
    '
    fenetre_ouvrt=1
    '
    pas_redraw=1      !  Redraw suit automatiquement WIND_OPEN     '
    ' La fenàtre Çtant ouverte, nous pouvons autoriser les options '
    ' "LÇgendes" et "Lignes":
    '
    VOID MENU_IENABLE(menus_ptr,legende,1)
    VOID MENU_IENABLE(menus_ptr,lignes,1)
    VOID MENU_IENABLE(menus_ptr,sauvgr,1)
    '
  ENDIF
  '
  BOUNDARY 0    !  Pas de cadre pendant le remplissage
  DEFFILL 1,0
  PBOX xwork,ywork,xwork+wwork-1,ywork+hwork-1
  '
  IF act_form=histogr
    dessine_histogr
  ELSE
    dessine_camemb
  ENDIF
  '
  IF next_opt>0          ! Entrer lignes et Texte:
    CLIP xwork,ywork,wwork,hwork
    FOR i=1 TO next_opt
      IF ASC(opts$(i))=act_form
        IF MID$(opts$(i),2,1)=CHR$(0)
          TEXT CVI(MID$(opts$(i),3,2)),CVI(MID$(opts$(i),5,2)),MID$(opts$(i),7)
        ELSE
          LINE CVI(MID$(opts$(i),3,2)),CVI(MID$(opts$(i),5,2)),CVI(MID$(opts$(i),7,2)),CVI(MID$(opts$(i),9,2))
        ENDIF
      ENDIF
    NEXT i
    CLIP OFF
  ENDIF
RETURN
'
'
PROCEDURE dessine_histogr
  '
  ' DÇterminer le nombre de valeurs Ö dessiner:
  '
  FOR i=1 TO 8
    EXIT IF valeur$(i)=""
  NEXT i
  '
  last=i-1   ! L'entrÇe prÇcÇdemment testÇe est dÇjÖ vide '
  ' Calcul des zones des valeurs:
  '
  max_valeur#=valeur#(1)
  min_valeur#=valeur#(1)
  IF last>1
    FOR i=2 TO last
      max_valeur#=MAX(valeur#(i),max_valeur#)
      min_valeur#=MIN(valeur#(i),min_valeur#)
    NEXT i
  ENDIF
  '
  IF min_valeur#<0
    IF max_valeur#=>0
      zonevaleur#=max_valeur#-min_valeur#
      ligne_zero=TRUNC(ywork+40+(hwork-61)*max_valeur#/zonevaleur#)
    ELSE
      zonevaleur#=-min_valeur#
      ligne_zero=ywork+20
    ENDIF
  ELSE
    zonevaleur#=max_valeur#
    ligne_zero=ywork+hwork-41
  ENDIF
  '
  facteur#=(hwork-60)/zonevaleur#
  '
  LINE xwork+5,ligne_zero,xwork+wwork-6,ligne_zero
  '
  largeur#=(wwork-20)/(last+0.5*(last-1))
  '
  BOUNDARY 1
  DEFFILL 1,2,5
  '
  FOR i=1 TO last
    x1=TRUNC(xwork+10+1.5*(i-1)*largeur#)
    x2=TRUNC(x1+largeur#)
    y=TRUNC(ligne_zero-facteur#*valeur#(i))
    '
    PBOX x1,ligne_zero,x2,y
    '
    IF SGN(valeur#(i))=1
      ADD y,10
    ENDIF
    IF SGN(valeur#(i))=0
      SUB y,3
    ENDIF
    '
    TEXT x1+(largeur#-8*LEN(valeur$(i)))\2,y-SGN(valeur#(i))*15,valeur$(i)
    '
    IF SGN(valeur#(i))=-1
      by=ligne_zero-8
    ELSE
      by=ligne_zero+20
    ENDIF
    '
    TEXT x1+(largeur#-8*LEN(chiffr$(i)))\2,by,chiffr$(i)
  NEXT i
RETURN
'
'
PROCEDURE dessine_camemb
  '
  ' DÇterminer le nombre de valeurs Ö dessiner:
  '
  FOR i=1 TO 8
    EXIT IF valeur$(i)=""
  NEXT i
  '
  last=i-1
  '
  ' Calcul de la somme de tous les montants:
  '
  somme=0
  FOR i=1 TO last
    ADD somme,ABS(valeur#(i))
  NEXT i
  '
  angle=0
  '
  BOUNDARY 1     ! RÇactiver le cadre
  '
  ELLIPSE xwork+wwork\2,ywork+hwork\2+15,wwork\2-50,hwork\2-50,1800,3600
  '
  LINE xwork+50,ywork+hwork\2,xwork+50,ywork+hwork\2+15
  LINE xwork+wwork-50,ywork+hwork\2,xwork+wwork-50,ywork+hwork\2+15
  '
  FOR i=1 TO last
    DEFFILL 1,2,i
    anglepart=TRUNC(3600*ABS(valeur#(i))/somme)
    PELLIPSE xwork+wwork\2,ywork+hwork\2,wwork\2-50,hwork\2-50,angle,angle+anglepart
    '
    IF angle+anglepart>1800 OR angle+anglepart=0
      xx=xwork+wwork\2+(wwork\2-50)*COS((3600-angle-anglepart)*PI/1800)
      yy=ywork+hwork\2+(hwork\2-50)*SIN((3600-angle-anglepart)*PI/1800)
      LINE xx,yy,xx,yy+15
      '
      IF angle<1800
        w=1800
        t=anglepart-1800+angle
      ELSE
        w=angle
        t=anglepart
      ENDIF
      xx=xwork+wwork\2+(wwork\2-50)*COS((3600-w-t\2)*PI/1800)
      yy=ywork+hwork\2+(hwork\2-50)*SIN((3600-w-t\2)*PI/1800)
      FILL xx,yy+8
    ENDIF
    '
    ADD angle,anglepart
  NEXT i
  '
  FOR i=1 TO last
    y=ywork+5+((i-1)\4)*(hwork-25)
    x=xwork+10+((i-1) MOD 4)*((wwork-20)\4)
    DEFFILL 1,2,i
    PBOX x,y,x+16,y+16
    TEXT x+21,y+13,chiffr$(i)+" ("+valeur$(i)+")"
  NEXT i
  '
RETURN
'
'
PROCEDURE redraw
  LOCAL x,y,w,h
  '
  IF pas_redraw=1
    pas_redraw=0
  ELSE
    '
    ' Aucune activitÇ souris, SVP:
    '
    VOID WIND_UPDATE(1)
    '
    VOID WIND_GET(whandle,11,x,y,w,h)   ! Premier rectangle de la liste
    '
    WHILE NOT w=0
      '
      ' Clip limite l'affichage au rectangle Ö redessiner. C'est
      ' l'intersection formÇe par le rectangle de la liste et par
      ' celui du message
      '
      IF RC_INTERSECT(FN p(4),FN p(5),FN p(6),FN p(7),x,y,w,h)
        CLIP x,y,w,h
        dessine_graphe
      ENDIF
      '
      VOID WIND_GET(whandle,12,x,y,w,h)
    WEND
    '
    CLIP OFF
    VOID WIND_UPDATE(0)
  ENDIF
RETURN
'
'
PROCEDURE sub_charger
  FILESELECT path$,default$,affich$
  IF affich$<>"" AND RIGHT$(affich$,1)<>"\"
    OPEN "I",#1,affich$
    FOR i=1 TO 8
      LINE INPUT #1,chiffr$(i)
      LINE INPUT #1,valeur$(i)
    NEXT i
    CLOSE #1
    '
    FOR i=1 TO 8               ! Conversion de la chaåne en valeur
      valeur#(i)=VAL(valeur$(i))
    NEXT i
    '
    nouv_dessin=1   ! Aucun Redraw par le sÇlecteur de fichier car...
    pas_redraw=1    ! ... nous redessinons tout sans nous prÇoccuper de rien
    '
    next_opt=0       ! Ne pas inclure des objets graphiques de l'ancienne liste
  ENDIF
RETURN
'
'
PROCEDURE sub_sauv
  FILESELECT path$,default$,affich$
  IF affich$<>"" AND RIGHT$(affich$,1)<>"\"
    OPEN "O",#1,affich$
    FOR i=1 TO 8
      PRINT #1,chiffr$(i)
      PRINT #1,valeur$(i)
    NEXT i
    CLOSE #1
  ENDIF
RETURN
'
' Sous-programmes utiles pour objets:
'
PROCEDURE select(arbre,index)
  OB_STATE(arbre,index)=OB_STATE(arbre,index) OR 1
RETURN
'
PROCEDURE deselect(arbre,index)
  OB_STATE(arbre,index)=OB_STATE(arbre,index) AND -2
RETURN
'
PROCEDURE do_dialog(arbre,start_ed,VAR exit_button)
  LOCAL x,y,w,h
  '
  VOID FORM_CENTER(arbre,x,y,w,h)           ! Dessiner arbre, ...
  VOID FORM_DIAL(0,x,y,w,h,x,y,w,h)
  VOID FORM_DIAL(1,25,25,25,25,x,y,w,h)
  VOID OBJC_DRAW(arbre,0,12,x,y,w,h)
  '
  exit_button=FORM_DO(arbre,start_ed)       ! le faire traiter ...
  deselect(arbre,exit_button)
  '
  VOID FORM_DIAL(2,25,25,25,25,x,y,w,h)    ! et effacer
  VOID FORM_DIAL(3,x,y,w,h,x,y,w,h)
RETURN
'
PROCEDURE write_text(arbre,index,text$)
  LOCAL adr,i,a$
  '
  adr=LPEEK(OB_SPEC(arbre,index))
  a$=text$+CHR$(0)
  '
  FOR i=1 TO LEN(a$)
    POKE adr+i-1,ASC(MID$(a$,i,1))
  NEXT i
RETURN
'
PROCEDURE read_text(arbre,index,VAR text$)
  LOCAL adr,i
  '
  adr=LPEEK(OB_SPEC(arbre,index))
  text$=""
  i=0
  '
  WHILE PEEK(adr+i)<>0     ! Lire jusqu'Ö l'octet nul
    text$=text$+CHR$(PEEK(adr+i))
    INC i
  WEND
RETURN
'
