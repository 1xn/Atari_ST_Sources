

#ifndef WORD
#define WORD int
#endif WORD

#define Array_els(arr) (sizeof(arr)/sizeof(arr[0]))

/* 16 bit or 32 bit ints? */
#define NUMBER int		

/* Some useful defines in Aztec's ctype.h missing from other implementations. */
#ifndef iscsymf
#define iscsymf(x) ( isalpha(x) || (x) == '_')
#endif iscsymf

#ifndef iscsym
#define iscsym(x)	( iscsymf(x) || isdigit(x) )
#endif iscsym

extern char *add_string();

typedef int function();


/* Pretty much a generic list of names structure */
struct names
	{
	struct names *next;
	char *name;
	};
typedef struct names Names;
extern Names *literals;

/* Overlap an integer and a pointer in the same space */
union pt_int
	{
	NUMBER i;
	void *p;
	long l;
	};
extern union pt_int dstack_buf[];

/* Symbol table (just for linear searching so far...) */
struct symbol
	{
	struct symbol *next;
	union pt_int symval;
	int doff;
	char *name;
	int type;	/* basic data type */
	int elements;	/* array elements, 0 if not array */
	int tok_type;	/* what sort of token value to return if matched */
	char scope;		/* global or local */
	char assigned;	/* has variable been assigned to? */
	char used;		/* is variable used? */
	char pad;	
	};
typedef struct symbol Symbol;
/* defines for different types of symbols */

extern int creature_count;

#define GLOBAL 0
#define LOCAL 1

#define INT 0
#define FUNC 1		/* resolved function */
#define LABEL 2		/* resolved label */
#define FLABEL 3	/* forward label */
#define FFUNC 4		/* forward function */
#define FFFUNC 5	/* very very first function use not defined */
#define PREDEF 6	/* built in function */
#define STRING 7
#define ACTION 8
#define BAD 9
#define CREATURE 10
#define FCREATURE 11
#define CONSTANT 12
#define UNKNOWN 13
/* Types of parameters */

extern char *tnames[];

/* the instructions for POGO's virtual machine */
struct pogo_op
	{
	int type;
	union pt_int data;
	};
void *run_ops();	/* the virtual machine */

#define OP_CON 0
#define OP_VAR 1
#define OP_ADD 2
#define OP_SUB 3
#define OP_DIV 4
#define OP_MUL 5
#define OP_NEG 6
#define OP_ASSIGN 7
#define OP_SPAWN 8
#define OP_CBRA 9
#define OP_BRA 10
#define OP_EQ	11
#define OP_NE	12
#define OP_LT	13
#define OP_GT	14
#define OP_END	15
#define OP_FUN  16
#define OP_EVOLVE 17
#define OP_MOD 18
#define OP_BAND 19
#define OP_BOR 20
#define OP_BXOR 21
#define OP_BNOT 22
#define OP_CALL 23
#define OP_LNOT 24
#define OP_LE	25
#define OP_GE	26
#define OP_RSHIFT 27
#define OP_LSHIFT 28
#define OP_LAND 29
#define OP_LOR	30
#define OP_RETRIEVE 31
#define OP_LVAR 32
#define OP_LASSIGN 33
#define OP_ARR 34
#define OP_LARR 35
#define OP_AASSIGN 36
#define OP_LAASSIGN 37
#define OP_CHECK 38
#define OP_MOVES 39
#define OP_PREDEF 40
#define OP_KILL 41
#define OP_PCALL 42
#define OP_PREDEFL 43
#define OP_PPREDEF 44
#define OP_CHECKTYPE 45
#define OP_STATEMENT 46
#define OP_SVAR	47
#define OP_LSVAR 48
#define OP_SARR 49 
#define OP_LSARR 50
#define OP_SASSIGN 51
#define OP_LSASSIGN 52
#define OP_ASASSIGN 53
#define OP_LASASSIGN 54
#define OP_FREES 55
#define OP_CSASSIGN 56
#define OP_CASASSIGN 57
#define OP_CALLS 58


#define FREFS 64
#define SSZ (8*1024)
#define CSZ 1024

/* function to keep track of forward creature local variable refs. */
struct crw_fixup
	{
	struct crw_fixup *next;
	Symbol *creature;
	char *lvar;
	int code_offset;
	int source_line;
	};
/* A structure to keep track of function calling references... */
struct func_forward
	{
	struct func_forward *next;
	Symbol *fsym;
	int source_line;
	int code_offset;
	};
extern struct func_frame *ff_list;
extern struct func_frame *universe_function;

struct statement
	{
	struct statement *next;
	int line_pos;
	int char_pos;
	};
typedef struct statement Statement;

/* A local frame of reference for a function during compile. */
struct pogo_frame
	{
	struct pogo_frame *parent;
	Symbol *symbols;
	int dcount;
	int pcount;
	struct func_forward *ffixes;
	struct crw_fixup *crw_fixes;
	struct pogo_op code_buf[CSZ];
	int op_count;
	int fref_ops[FREFS];
	void *fref_sym[FREFS];
	int fref_count;
	int ret_type;
	};
extern struct pogo_frame *rframe;
extern struct pogo_frame *global_frame;

#define MAX_PARAMS 16
/* What's left of the function's frame after compilation */
struct func_frame
	{
	struct func_frame *next;
	Symbol *symbols;
	int pcount;		/* parameter count */
	int dcount;
	struct func_forward *ffixes;
	struct crw_fixup *crw_fixes;
	struct pogo_op *code;
	int code_size;
	unsigned char ptypes[MAX_PARAMS];
	char *name;
	int crtype;
	int ret_type;
	char got_strings;
	char foo;
	};


/* Two structures to help fix up forward references generated by break
   statements.  One break_frame for each loop, one break_fixer for
   each break. */
struct break_fixer
	{
	struct break_fixer *next;
	int code_offset;
	};

struct break_frame
	{
	struct break_frame *next;
	struct break_fixer *fixes;
	};
/* break fixup list */
extern struct break_frame *bfix_frame;


/* variables to keep track of where we are in source file */
#define SZTOKE 512
#define MAX_SYM_LEN 40

/* variables maintained by next_token() */
extern char ctoke[SZTOKE];
extern Symbol *csym;
extern int cint;
extern int cttype;
extern int reuse;

/* bracket and paren strings here so don't mess of my editors paren
   matching... */

#define LBRACE_STR	"{"
#define RBRACE_STR	"}"
#define LPAREN_STR	"("
#define RPAREN_STR  ")"


/* values stored in cttype by tokenizer */
#define TOK_LBRACE '{'
#define TOK_RBRACE '}'
#define TOK_LPAREN '('
#define TOK_RPAREN ')'
#define TOK_SQUO  '\''
#define TOK_LNOT	'!'
#define HIASC 256
#define TOK_VAR (HIASC+0)
#define TOK_NUM (HIASC+1)
#define TOK_QUO (HIASC+2)
#define TOK_UNDEF (HIASC+3)
#define TOK_EQ	(HIASC+4)
#define TOK_NE	(HIASC+5)
#define TOK_LE	(HIASC+6)
#define TOK_GE	(HIASC+7)
#define TOK_LSHIFT (HIASC+8)
#define TOK_RSHIFT (HIASC+9)
#define TOK_LAND  (HIASC+10)
#define TOK_LOR   (HIASC+11)
#define TOK_FOR	(HIASC+12)
#define TOK_WHILE (HIASC+13)
#define TOK_LOOP (HIASC+14)
#define TOK_IF  (HIASC+15)
#define TOK_ELSE (HIASC+16)
#define TOK_FUNCTION (HIASC+17)
#define TOK_CREATURE (HIASC+18)
#define TOK_INT	(HIASC+19)
#define TOK_SPAWN (HIASC+20)
#define TOK_KILL (HIASC+21)
#define TOK_EVOLVE (HIASC+22)
#define TOK_BREAK (HIASC+23)
#define TOK_TO (HIASC+24)
#define TOK_STEP (HIASC+25)
#define TOK_GOTO (HIASC+26)
#define TOK_RETURN (HIASC+27)
#define TOK_CID	(HIASC+28)
#define TOK_CAGE (HIASC+29)
#define TOK_CNEW (HIASC+30)
#define TOK_CNAME (HIASC+31)
#define TOK_CX	(HIASC+32)
#define TOK_CY  (HIASC+33)
#define TOK_CDX (HIASC+34)
#define TOK_CDY (HIASC+35)
#define TOK_CONSTANT (HIASC+36)
#define TOK_CLOSESTT (HIASC+37)
#define TOK_CREAD (HIASC+38)
#define TOK_CWRITE (HIASC+39)
#define TOK_STRING (HIASC+40)
#define TOK_NULL (HIASC+41)


/* yer basic error state */
extern int global_err;
extern int got_eof;
extern int got_stop;
extern int user_abort, run_abort;


extern FILE *pogo_in;
extern char *title;	
extern char line_buf[SZTOKE];
extern char *line_pos;
extern int line_count;

extern Symbol *new_symbol(), *named_symbol(), *find_symbol(), *in_list();
extern void *askmem(), *beg_mem(), *beg_zero();
extern char *clone_string();

extern int lastkey;	/* what pogo break store 'cause share keyboard with pogo */

#define SECRETS 12	/* space for system */
					/* (must have 2 more secrets than really use) */
					/* Currently have secrets - ID, Age, NewBorn */
					/* MyName, MyX, MyY, MyDx, MyDy */
#define CID		0
#define CAGE	1
#define CNEW	2
#define CNAME	3
#define CX		4
#define CY		5
#define CDX	6
#define CDY	7
#define CTYPE 8


extern int in_creature, in_loop, in_func, run_time;

extern long mult_to_long();	/* 2 short arguments, long result */

extern int cur_pid, active_frame;

#define RMAX 64

extern struct func_frame *strace[RMAX];

extern int watchdog;

extern int do_frees;

#define XMAX 320
#define BPR 320
#define YMAX 200
#define WIDTH 320
#define HEIGHT 200
#define DEPTH 8
#define COLORS 256
#define SCREEN_SIZE (BPR*HEIGHT)
#define VGA_SCREEN ((void *)0xa0000000)
#define CH_WIDTH 6
#define CH_HEIGHT 8


extern int fret_type;
