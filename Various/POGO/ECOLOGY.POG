
;simulate a little ecosystem.  Got a constant source of lo-level food
;(the fountains and green dots), creatures that eat green dots, and
;creatures (harry) that eat the creatures that eat green dots.
;
;Goal - to make the whole thing keep going.
;


constant BLACK = 0		
constant GREEN = 1
constant RED = 4
constant BLUE = 5
constant HCOLOR = 6	;color of the Harry preditor
constant WHITE = 7
constant PURPLE = 8	;lowest 'purpler' color
constant IAFRAID = 50	;initial radius where purplers get scared of harrys
constant PUPCOUNT = 7	;# of 'purpler' colors
constant PSPOKES = 6	;# of spokes in a spoked purpler

constant pline=190

constant dspeed = -3
constant hspeed = 4
constant bspeed = 2

int time,total

int pcount
int bcount
int hcount
int lhcount
int rcount
int gcount
int ave_fraid
int ave_rsize
int ave_span
int ave_pspeed
int ave_energy

;draw_spoked_wheel - draws one class of purpler creatures
function draw_spoked_wheel(color,x,y,rad,theta,spokes)
{
int i,t

theta = theta % 360
for i=1 to spokes
	{
	t = theta + i * 360/spokes
	line(color, x, y, x+arcx(t,rad), y+arcy(t,rad) )
	}
}

;purpler - the evolving creature.  Shows up as green to purple depending
;on the value of it's afraid variable, which also controls when it
;starts fleeing harrys.  Will be a circle or spoked wheel depending on
;its stop variable, which also controls if it stops after eating.
;The size of its children and the size it reproduces at also mutate.
;
creature purpler
{
int size
int fed
int near
int food, fx, fy,fdist
int gx,gy
int stop
int ax,ay
int dist
int hnear,hx,hy
int monster
int afraid
int mycolor
int rsize
int lifespan
int pspeed,energy
int spin
int theta

pcount = pcount+1
ave_pspeed = ave_pspeed + pspeed
ave_energy = ave_energy + energy
ave_rsize = ave_rsize + rsize
ave_fraid = ave_fraid + afraid
ave_span = ave_span + lifespan
if (stop)
	draw_spoked_wheel(BLACK,cx,cy,size,theta,PSPOKES)
else
	circle(cx,cy,size,BLACK);
theta = theta + spin
if (cnew)
	{
	size = energy
	}
food = closestt(greendot,cx,cy)
if (food)
	{
	gx = creaturex(food)
	gy = creaturey(food)
	dist = distance(cx,cy,gx,gy)
	if (dist < size)
		{
		size = size + 2
		putdot(0, gx, gy )
		if (stop)
			{
			cdx = 0
			cdy = 0
			fed = 16
			}
		kill(food)
		}
	}
near = food
monster = closestt(harry,cx,cy)
if (monster)
	{
	int mx,my

	mx = creaturex(monster)
	my = creaturey(monster)
	dist = distance(cx,cy,mx,my)
	if (dist < afraid)
		{
		near = monster
		fed = 0
		gx = mx
		gy = my
		}
	}
if ((!fed && near))
	{
	if (gx > cx)
		ax = 1
	else
		ax = -1
	if (gy > cy)
		ay = 1
	else
		ay = -1
	if (near != food)
		{
		ax = -ax
		ay = -ay
		}
	cdx = cdx + ax
	cdy = cdy + ay
	if (cdx > pspeed)
		cdx = pspeed
	if (cdx < -pspeed)
		cdx = -pspeed
	if (cdy > pspeed)
		cdy = pspeed
	if (cdy < -pspeed)
		cdy = -pspeed
	cx = cx + cdx
	cy = cy + cdy
	}
else
	fed = fed - 1
if (size < 2 || cage > lifespan)	;got too small and starved or got too old
	{
	kill(cid)
	}
else
	{
	if (cage&0xf == 7)	;the metabolism burns a size point every 16 ticks
		{
		size = size-1
		}
	if (size > rsize)	;if bigger than 24 go spawning
		{
		split_purpler(cx,cy,cdx,cdy,
			afraid,mycolor,rsize,lifespan,
			pspeed,energy,spin, stop)
		if (stop)
			{
			cdx = 0
			cdy = 0
			}
		size = size - energy
		return;
		}
redraw:
	if (stop)
		draw_spoked_wheel(mycolor,cx,cy,size,theta,PSPOKES)
	else
		circle(cx,cy,size,mycolor);
	}
}

function mutate_color(color, off)
{
color = color+off/2
if (color < PURPLE)
	color = PURPLE
if (color >= PURPLE+PUPCOUNT)
	color = PURPLE+PUPCOUNT-1
return(color)
}

;go breed a new purpler.  Mutate it a little.
function split_purpler(x,y,dx,dy,
	afraid,mycolor,rsize,lifespan,
	pspeed,energy, spin, stop)
{
int new, t, off

new = spawn(purpler, x, y, -dx, -dy)
if (new)
	{
	off = Random(11)-5
	Cwrite(purpler,afraid,new,afraid+off)
	Cwrite(purpler,mycolor,new,mutate_color(mycolor,off))
	t = rsize + Random(6)-2
	if (t > 50)
		t = 50
	Cwrite(purpler,rsize,new,t)
	Cwrite(purpler,lifespan,new,lifespan + Random(11)-5)
	Cwrite(purpler,pspeed,new,pspeed + Random(3)-1)
	energy = energy + Random(5) - 2
	if (energy < 5)
		energy = 5
	if (energy >= rsize - 5)
		energy = rsize - 5;
	Cwrite(purpler,energy,new,energy)
	Cwrite(purpler,spin,new,spin+Random(5)-2)
	t = stop
	if (random(8) == 0)	;1 in  8 chance of flip-flopping spokiness
		t = !t
	Cwrite(purpler,stop,new,t)
	}
}

;Early 'seed' phase of a blue creature
creature bluenymph
{
putdot(BLACK,cx,cy)
putdot(BLACK,cx+1,cy+1)
if (cage > 15)
	{
	kill(cid)
	spawn(bluefeeder,cx,cy,cdx,cdy)
	return
	}
cx = cx + cdx
cy = cy + cdy
putdot(BLUE,cx,cy)
putdot(BLUE,cx+1,cy+1)
}

creature bluefeeder
{
int size
int fed
int near
int food, fx, fy,fdist
int gx,gy
int ax,ay
int dist
int hclose,hx,hy
int monster
int theta

bcount = bcount+1
circle(cx,cy,size,BLACK)
if (cnew)
	{
	size = 8
	}
food = closestt(greendot,cx,cy)
if (food)
	{
	gx = creaturex(food)
	gy = creaturey(food)
	dist = distance(cx,cy,gx,gy)
	if (dist < size)
		{
		size = size + 2
		putdot(0, gx, gy )
		cdx = 0
		cdy = 0
		fed = 16
		kill(food)
		}
	}
near = food
monster = closestt(HARRY,cx,cy)
if (monster)
	{
	int mx,my

	mx = creaturex(monster)
	my = creaturey(monster)
	dist = distance(cx,cy,mx,my)
	if (dist < 65)
		{
		near = monster
		fed = 0
		gx = mx
		gy = my
		}
	}
if ((!fed && near))
	{
	if (gx > cx)
		cdx = bspeed
	else
		cdx = -bspeed
	if (gy > cy)
		cdy = bspeed
	else
		cdy = -bspeed
	if (near != food)
		{
		cdx = -cdx
		cdy = -cdy
		}
	cx = cx + cdx
	cy = cy + cdy
	}
else
	fed = fed - 1
if (size < 2 || cage > 250)	;got too small and starved
	{
	kill(cid)
	}
else
	{
	if (cage&0xf == 7)	;the metabolism burns a size point every 16 ticks
		{
		size = size-1
		}
	if (size > 24)	;if bigger than 24 go spawning
		{
		split_bluefeeder(cx,cy,cdx,cdy,theta)
		theta = theta + 43
		cdx = 0
		cdy = 0
		size = size - 8
		return;
		}
redraw:
	circle(cx,cy,size,BLUE)
	}
}

function split_bluefeeder(x,y,dx,dy,theta)
{
spawn(bluenymph, x, y, arcx(theta,6) + dx, arcy(theta,6)+dy)
}



;Red circle creature
creature redfeeder
{
int size
int near
int sthet

rcount = rcount+1
circle(cx,cy,size,BLACK)
if (cage < 8)
	{
	sthet = random(360)
	cx = cx + cdx
	cdx = cdx>>1
	cy = cy + cdy
	cdy = cdy*4/5
	if (cnew)
		size = 15
	}
near = closestt(GREENDOT,cx,cy)
if (near)
	{
	if (distance(creaturex(near), creaturey(near), cx, cy) < size)
		{
		size = size + 2
		putdot(0, creaturex(near), creaturey(near) )
		kill(near)
		}
	}
if (size < 4 || cage > 250)
	{
	kill(cid)
	}
else
	{
	if (cage&15 == 7)
		{
		size = size-1
		}
	if (size > 40)
		{
		make_redn(cx,cy,sthet)
		sthet = sthet + 97
		size = size - 15
		}
	circle(cx,cy,size,RED)
	}
}

;red creature seed stage
creature rednymph
{
int size
int x, y
int fdist, hdist
int f,h

if cnew
	{
	x = cx
	y = cy
	size = 100
	}
rectangle(BLACK,cx,cy,cx+size>>4,cy+size>>4)
size = size - 1
if (size < 10)
	{
	kill(cid)
	return;
	}

f = closestcreature(cid,cx,cy)
if (f)
	{
	;seems to crash if next line is in...
	if ("GREENDOT" == CreatureName(f))
		{
		h = closestt(HARRY,cx,cy)
		if (h)
			{
			hdist = distance(cx,cy,CreatureX(h),CreatureY(h))
			if (hdist < 70)
				{
				goto move;
				}
			}
		if (distance(cx,cy,x,y) > 60)
			{
			spawn(redfeeder,cx,cy,0,0)
			kill(cid)
			return;
			}
		}
	}
move:
cx = cx + cdx
cy = cy + cdy
rectangle(RED,cx,cy,cx+size>>4,cy+size>>4)
}

function make_redn(x,y,sthet)
{
int i

spawn(rednymph, x, y, arcx(sthet,8), arcy(sthet,8) )
}

;Food for red,blue, and purple creatures.
creature greendot
{
gcount = gcount+1
putdot(BLACK, cx, cy)
if (cage > 25)
	Kill(cid)
else
	{
	cx = (cx + cdx)
	cy = (cy + cdy)
	putdot(GREEN, cx, cy)
	}
}

creature fountain
{
int theta2
int rx,ry

rx = cx+arcx(theta2,cdx)
ry = cy+arcy(theta2,cdx)
;line(2+random(2), rx,ry, cx, cy)
spawn(greendot,rx,ry,arcx(theta2,dspeed), arcy(theta2,dspeed))
theta2 = theta2 + cdy
if theta2 > 360
	theta2 = theta2 - 360
if theta2 < 0
	theta2 = 360-theta2
}

;set up color map for simulation
function crcolors()
{
int i,r,g,b

Setcolor(GREEN,0,255,0)
Setcolor(2,255,200,0)
Setcolor(3,200,100,0)
Setcolor(RED,255,0,0)
Setcolor(BLUE,0,0,255)
Setcolor(HCOLOR,255, 100, 0)
Setcolor(WHITE,255, 255, 255)

r = 255 - 2*PUPCOUNT
g = 0
b = 255
for i = PURPLE to PURPLE+PUPCOUNT/2-1
	{
	setcolor(i, r, g, b)
	r = r + 4
	}
for i = PURPLE+PUPCOUNT/2 to PURPLE+PUPCOUNT
	{
	setcolor(i, r, g, b)
	b = b - 4
	}
;for i = PURPLE to PURPLE+PUPCOUNT
	;rectangle(i, i*3, 0, (i+1)*3, 20);
}

;Seed stage of a harry
creature hnymph
{
disk(cx,cy,5,BLACK)
cx = cx + cdx
cy = cy + cdy
if (cage >= 10)
	{
	;if lhcount < 3
		spawn(harry, cx, cy, 0, 0)
	kill(cid)
	return
	}
disk(cx,cy,5,HCOLOR)
}

;The predator creature.  Orange circle
creature harry
{
int size,dclose,sclose,cclose
int ddis, sdis, cdis
int ccx, ccy
int victim
int theta
int ate;
int hungry
int s,t
int psize
int fsize

hcount = hcount+1
if (cnew)
	{
	size = 30
	psize = size/3
	hungry = 6
	}
else
	circle(cx,cy,psize,BLACK)
hungry = hungry - 1
if (!hungry)
	{
	hungry = 6
	size = size-1
	if (size < 4)
		{
		kill(cid);
		return;
		}
	}
if (!ate)
	{
	sclose = closestt(bluefeeder, cx, cy)
	if (sclose)
		{
		ccx = creaturex(sclose)
		ccy = creaturey(sclose)
		sdis = distance(ccx,ccy,cx,cy)
		if (sdis < psize)	;if center of food creature in our radius eat it
			{
			fsize = Cread(bluefeeder,size,sclose)
			circle(ccx,ccy, fsize, BLACK)	;erase blue feeder
			ate = fsize>>1;
			size = size + ate
			kill(sclose);
			goto gospawn
			}
		}
	dclose = closestt(PURPLER, cx, cy)
	if (dclose)
		{
		ccx = creaturex(dclose)
		ccy = creaturey(dclose)
		ddis = distance(ccx,ccy,cx,cy)
		if (ddis < psize)
			{
			fsize = Cread(purpler,size,dclose);
			if (Cread(purpler,stop,dclose))		;erase purpler
				draw_spoked_wheel(BLACK,ccx,ccy,fsize,
					Cread(purpler,theta,dclose), PSPOKES)
			else
				circle(ccx,ccy, fsize, BLACK)
			ate = fsize>>1;
			size = size + ate
			kill(dclose);
			goto gospawn
			}
		}
	cclose = closestt(redfeeder, cx, cy)
	if (cclose)
		{
		ccx = creaturex(cclose)
		ccy = creaturey(cclose)
		cdis = distance(ccx,ccy,cx,cy)
		if (cdis < psize)
			{
			fsize = Cread(redfeeder,size,cclose);
			circle(ccx,ccy, fsize, BLACK)
			ate = fsize>>1;
			size = size + ate
			kill(cclose);
			goto gospawn
			}
		}
	victim = 0	;find a creature to head towards...
	if (sclose)
		{
		if (dclose)
			{
			if (cclose)		;all alive
				{
				if (sdis < cdis)
					{
					if (sdis < ddis)
						victim = sclose
					else
						victim = dclose
					}
				else
					{
					if cdis < ddis
						victim = cclose
					else
						victim = dclose
					}
				}
			else	;cclose dead, sclose, dclose alive
				{
				if (sdis < ddis)
					victim = sclose
				else
					victim = dclose
				}
			}
		else
			{
			if (cclose)
				{
				if (cdis < sdis)
					victim = cclose
				else
					victim = sclose
				}
			else
				victim = sclose;
			}
		}
	else	;sclose already dead
		{
		if (cclose)
			{
			if (dclose)
				{
				if (cdis < ddis)
					victim = cclose
				else
					victim = dclose
				}
			else
				{
				victim = cclose
				}
			}
		else
			victim = dclose
		}
	if (victim)
		{
		ccx = CreatureX(victim)
		ccy = CreatureY(victim)
		if (ccx < cx)
			cx = cx - hspeed;
		else
			cx = cx + hspeed
		if (ccy < cy)
			cy = cy - hspeed
		else
			cy = cy + hspeed
		}
	}
else
	ate = ate - 1
gospawn:
if (size > 90)
	{
	theta = random(360)
	spawn(hnymph, cx, cy, arcx(theta, 8), arcy(theta,8))
	size = size - 50
	ate = 10
	}
psize = size/3
if cage=400
    kill (cid)
else
	circle(cx,cy,psize,HCOLOR)
}

function random_purpler()
{
int pp

pp = spawn(purpler, Random(320), Random(200), 0, 0)
if (pp)
	{
	Cwrite(purpler,afraid,pp,44)
	Cwrite(purpler,mycolor,pp,PURPLE+PUPCOUNT/2)
	Cwrite(purpler,rsize,pp,30)
	Cwrite(purpler,lifespan,pp,200)
	Cwrite(purpler,pspeed,pp,2)
	Cwrite(purpler,energy,pp,12)
	Cwrite(purpler,spin,pp,5)
	Cwrite(purpler,stop,pp,Random(2) )
	}
}


;Start of the main code 


int i

crcolors()			;set up the color map
					;spawn the initial creatures
time = 0


loop
	{
	int k

	random(2)	;just to jiggle random values

	time = time+1
	; check keyboard and maybe create some new creatures
	k = inkey()
	if k == 'h'
		spawn(harry, Random(320), Random(200), 0, 0)
	else if k == 'p'
		random_purpler();
	else if k == 'r'
		spawn(redfeeder, Random(320), Random(200), 0, 0)
	else if k == 'b'
		spawn(bluefeeder, Random(320), Random(200), 0, 0)
	else if k == 'f'
		spawn(fountain, 160, 100, random(100), random(360))
	else if k == 'k'
		{
		KillAll()
		ClearScreen()
		time = 0
		}
	;set up variables to keep track of how many of what creature around.
	hcount = 0	
	rcount = 0
	bcount = 0
	pcount = 0
	gcount = 0
	;and variables to track purpler evolution
	ave_fraid = 0
	ave_rsize = 0
	ave_span = 0
	ave_pspeed = 0
	ave_energy = 0
	;let everyone live 1 tick
	evolve()
	;and display results in text
	gtext(WHITE,0,0,"Evolve # ")
	gnumber(WHITE,60,0,5, time)
	gnumber(HCOLOR, 0, 10, 3, hcount)
	lhcount = hcount
	gnumber(PURPLE, 0, 20, 3, pcount)
	if (pcount > 0)
		{
		gnumber(PURPLE, 30, pline, 3, ave_fraid/pcount)
		gnumber(PURPLE, 60, pline, 3, ave_rsize/pcount)
		gnumber(PURPLE, 90, pline, 4, ave_span/pcount)
		gtext(PURPLE, 130, pline, "speed")
		gnumber(PURPLE, 170, pline, 4, ave_pspeed/pcount)
		gtext(PURPLE, 210, pline, "energy")
		gnumber(PURPLE, 260, pline, 4, ave_energy/pcount)
		}
	gnumber(RED,0,30,3, rcount)
	gnumber(BLUE,0,40,3, bcount)
	gnumber(GREEN,0,50,3, gcount)
	total = hcount + pcount + rcount + bcount
	gnumber(WHITE,0,60,3,total)
	}
waitkey()
