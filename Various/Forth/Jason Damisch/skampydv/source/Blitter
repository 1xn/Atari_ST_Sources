
\  *****************************************
\  **  BLITTER CHIP ACCELERATED GRAPHICS  **
\  *****************************************

\  Jason ( Warpstar ) Damisch
\  Damich Cybernetics / Forth Games Workshop


: graphics ;

hex


\ **************************
\ Non-Blitter Graphics Words
\ **************************

\ ***********************
\ Screen Access Addresses 

44e constant physical-top
45e constant screen-swap-address
45a constant pallet-change-address


\ *********************************************
physical-top @ constant original-screen-address


\ *******
: top
\ (  --  screen-address  )
	physical-top @
; 


\ ********
\ Canvases

\ ********* 
: next-page  
\ (  here  --  bottom-of-page  )  
\ Returns the bottom of the next available page
    ffffff00 and 100 +
;


\ ***
: k  400 *  ;


\ *****************
: screen-block-size  20 k ;


\ **************
: here>next-page
    here next-page
    dp !
;
   

\ ***********************
\ a-canvas  and  b-canvas

here>next-page

here   screen-block-size allot
here   screen-block-size allot

constant b-canvas
constant a-canvas


\ *************
\ Swap-Canvases

\ ****************
2variable canvases

 
b-canvas a-canvas canvases 2!


\ *************
: swap-canvases
    canvases 2@  swap  canvases 2!
    canvases @ screen-swap-address !
;


\ **********
: wet-canvas
    canvases 2@ drop
;


\ ***************
: playfield-start
 	wet-canvas f00 +
;


\ *********************************
\ *  Changing Of The Pallet Area  *
\ *********************************

\ ***********
create pallet   20 allot


\ **********
: get-pallet
\ (  pallet-address  --  )
	open-current
	04 ifd @ +fseek   20   ifd @   fgets   drop
	close-current
;


\ **************
: get-neopicture
\ (  adr  --  )
	open-current
	80 ifd @ +fseek   20 k   ifd @   fgets   drop
	close-current
;


\ *************
: change-pallet
\ (  pallet-address  --  )
	pallet-change-address !
; 


\  **********
: neopicture>
	pallet get-pallet
	pallet change-pallet
	top get-neopicture
;


\  ************************
\  ***  Rainbow Effect  ***

create color-patterns
0000 ,   0001 ,   0010 ,   0011 ,   0100 ,   0101 ,   0110 ,   0010 ,


\ *************
: rainbow-delay
	23 0 do
		noop
	loop
;


ff8240 constant background-color

\ ******
: band
\ (  index  --  )
	8 0 do
		background-color w@
		over 4 * color-patterns + @ + 
		background-color w!
		rainbow-delay
	loop
	drop
	0 background-color w!	
;


\ *********
: (rainbow)
	8 0 do
		i band
	loop
;


\ *******
: rainbow
	0 background-color w!
	80 0 do
		(rainbow)
	loop
;


\ **********************
\ Blitter Graphics Words
\ **********************


\ *****************
\ Blitter-Registers

ff8a00 constant halftone-ram  

ff8a20 constant source-x-increment
ff8a22 constant source-y-increment
ff8a24 constant source-address

ff8a28 constant endmask-1
ff8a2a constant endmask-2
ff8a2c constant endmask-3

ff8a2e constant destination-x-increment
ff8a30 constant destination-y-increment
ff8a32 constant destination-address

ff8a36 constant x-count
ff8a38 constant y-count

ff8a3a constant function-register-a

ff8a3c constant function-register-b


\ ****************
code wipe'
\ (  adr  count  --  )
	
	sp )+   d0           lmove
	1 #     d0           lsr

	sp )+  destination-address l#)  lmove 
	0000 l#  source-address    l#)  lmove

	-1 #  endmask-1 l#)  wmove
	-1 #  endmask-2 l#)  wmove
	-1 #  endmask-3 l#)  wmove

	d0      x-count l#)  wmove
	0001 #  y-count l#)  wmove
	
	0002 #  destination-x-increment l#)  wmove
	0002 #  destination-y-increment l#)  wmove

	0000 #  source-x-increment l#)  wmove
	0000 #  source-y-increment l#)  wmove

	0000 #  function-register-a l#)  wmove
	c000 #  function-register-b l#)  wmove
	
	begin
	d0 long clr
	sr d0 word move
	0400 l#    d0 long and
	0= until
c;


\ ***********
: wipe-canvas'
	wet-canvas 20 k wipe'
;


\ **************
code copy-screen 
\ (  source  destination  --  )

	sp )+  destination-address l#)  lmove
	sp )+  source-address l#)  lmove
	
	-1 #  endmask-1 #)  wmove
	-1 #  endmask-2 #)  wmove
	-1 #  endmask-3 #)  wmove
	
	4000 #  x-count #)  wmove
	0001 #  y-count #)  wmove

	0002 #  source-x-increment #)  wmove
	0002 #  source-y-increment #)  wmove

	0002 #  destination-x-increment #)  wmove
	0002 #  destination-y-increment #)  wmove

	0203 #  function-register-a #)  wmove
	c000 #  function-register-b #)  wmove
	
	begin
	d0 long clr
	sr d0 word move
	0400 l#    d0 long and
	0= until
c;


\ *************
code .playfield' 
\ (  grid  font  write-location  --  )

long

\  HEAD

	sp )+  destination-address l#)  lmove
	sp )+  d1   lmove   \  d0 is font
	sp )+  a1   lmove   \  a1 is grid
	
	-1 #  endmask-1 #)  wmove
	-1 #  endmask-2 #)  wmove
	-1 #  endmask-3 #)  wmove

	0002 #  source-x-increment #)  wmove
	0002 #  source-y-increment #)  wmove

	0002 #  destination-x-increment #)  wmove
	009a #  destination-y-increment #)  wmove

	0203 #  function-register-a #)  wmove 

	000a l#  d3   lmove    \   number of lines

	0004 #  x-count #)  wmove  

	d5 clr

\  BODY

	begin

		0013 l#  d2  lmove   \ number of collumns

		begin

			0010 #  y-count #)  wmove

			d0             clr
			a1 )+    d0    bmove
			7  #     d0    lsl
			d1       d0    add
			d0  source-address l#)  lmove

			c000 #  function-register-b #)  wmove
					
				begin
				sr d5 word move
				0400 l#    d5 long and
				0= until
	
			9f8 l#   destination-address l#)   subi

		never  d2  dbuntil

		960 l#   destination-address l#)   addi

	never  d3  dbuntil
c;


\ **********
code .player'
\ (  x  y  data  videotop  --  )

	long	

	sp )+  d0  lmove	   \ videotop
	sp )+  d1  lmove           \ data
	
	sp )+    d2   lmove        \ y
	00a0  #  d2   mulu
	d2       d0   add	

	0000ffff l#   d4   lmove   \ mask

	sp )+    d2   lmove        \  x

	d2       d3   lmove        \ skew  
	word
	000f #   d3   and   
	long
	d3       d4   ror
	word
	c000 #   d3   or    

	fff0 #   d2   and
	1    #   d2   lsr
	long
	d2       d0   add

	d0   destination-address l#)   lmove
	d1   source-address      l#)   lmove
		
	d4  endmask-1 l#)  wmove
	d4  endmask-2 l#)  wmove
	d4  endmask-3 l#)  wmove
	
	0004 #  x-count l#)  wmove
	0010 #  y-count l#)  wmove

	0002 #  source-x-increment l#)  wmove
	0002 #  source-y-increment l#)  wmove

	0002 #  destination-x-increment l#)  wmove
	009a #  destination-y-increment l#)  wmove

	0203 #  function-register-a l#)    wmove
	d3      function-register-b l#)   wmove   \ start blit


	9f8 l#  destination-address l#)   subi    \ next collumn

	d4    		   swap
	d4  endmask-1 l#)  wmove
	d4  endmask-2 l#)  wmove
	d4  endmask-3 l#)  wmove

	0010 #   y-count l#)    wmove

	d1       source-address       l#)   lmove
	word
	c0c0 #   d3   or    
	d3	function-register-b   l#)   wmove    \ start blit
	
	begin
	d0 long clr
	sr d0 word move
	0400 l#    d0 long and
	0= until
 c;


\ *************
code .my-number'  
\ (  x  y  data  videotop  --  )

	long	

	sp )+  d0  lmove	   \ videotop
	sp )+  d1  lmove           \ data
	
	sp )+    d2   lmove        \ y
	00a0  #  d2   mulu
	d2       d0   add	

	0000ffff l#   d4   lmove   \ mask

	sp )+    d2   lmove        \  x

	d2       d3   lmove        \ skew  
	word
	000f #   d3   and   
	long
	d3       d4   ror
	word
	c000 #   d3   or    

	fff0 #   d2   and
	1    #   d2   lsr
	long
	d2       d0   add

	d0   destination-address l#)   lmove
	d1   source-address      l#)   lmove
		
	d4  endmask-1 l#)  wmove
	d4  endmask-2 l#)  wmove
	d4  endmask-3 l#)  wmove
	
	0004 #  x-count l#)  wmove
	000e #  y-count l#)  wmove

	0002 #  source-x-increment l#)  wmove
	0002 #  source-y-increment l#)  wmove

	0002 #  destination-x-increment l#)  wmove
	009a #  destination-y-increment l#)  wmove

	0203 #  function-register-a l#)    wmove
	d3      function-register-b l#)   wmove   \ start blit
	
	begin
	d0 long clr
	sr d0 word move
	0400 l#    d0 long and
	0= until
c;


decimal
