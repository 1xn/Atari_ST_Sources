*******************
**  S K A M P Y  **
*******************

      SKAMPY
        BY
  JASON DAMISCH
     AND THE
FORTH GAMES WORKSHOP
       2000

CONTENTS

0.  Story
1.  Play Instructions
2.  Installation Instructions
3.  My Story
4.  Ending Comments
 		
				
*******************
**   0.  Story   **
*******************
 									
It was a very long time ago that Mimi the good witch created the magical
domain of Zowgo.  In this underground realm did she study arcane magic and
cast many amazing spells.  At times studying magic can be a very lonesome
affair. In her lonelyness she eventually created a magical creature to keep
her company.  This creature was named SKAMPY.

This green smiley face with legs was a good companion.  Even after she
passed away from the world he was faithful to her memory.  He inherited
the magical domain of Zowgo for himself, and all of the fruit for his own
munching.  Unfortunately, several years latter, monsters invaded Zowgo
looking for something to much on themselves, and it wasn't fruit.  Skampy
must eat, but this makes his life that much more difficult.		
				

*********************************
**   1.   PLAY INSTRUCTIONS   ***
*********************************
				
In the game of SKAMPY, you must wander many underground mazes in search 
of food while avoiding monsters.			
							
A.   The game is joystick controled, use the port other than the mouse port

B.   Eat all of the fruit to advance to the next level.
				
C.   In order for SKAMPY to defend himself, there are two methods		
	1. Stepping on a green tile stuns monsters for a period of time.
	2. After picking up a rock, throw it at a monster by pressing the
           fire button while aiming to stun it for a period of time.
           The rocks bounce off and can be picked up again for reuse.	
        3. The goons and skulls can be restuned before they move again.
	  
D.   SKAMPY can gain a free life by steping on a tile that looks like
     himself.

E.   Warning, steping on a red tile will stun SKAMPY for a period of
     time.

F.   There are doors that open automatically by picking up a key of the 
     corresponding color.	
						
G.  The Skull Monsters wander in a predetermined pattern		

H.  The Ghost Monsters also wander in a pattern.  They are gaseous, so
    they are immune to rocks, and can move through walls.

I.  The Eyeball Monsters chase SKAMPY relentlessly.

J.  There is a timer.  If the timer goes to zero, the ghosts will break
    out of their confines and chase SKAMPY.

K.  Touching a clock tile will give SKAMPY more time.

L.  Pressing Spacebar will pause the game.

M.  Pressing 'E' will exit the current game and return to the attract mode.

N.  See if you can get through all of the levels to reach the end game
    sequence.  Good Luck!


Monster           Nickname
-------           --------
Skull Monster     Skinny
Ghost Monster	  Creepy
Goon  Monster     Tuna Lips


***************************************
**   2.   INSTALATION INSTRUCTIONS   **
***************************************

When the game is decompressed, it should pretty much be ready to run,
with the files in their proper places.  Here are the files

Folder  	SKAMPY

containing

Folder		LEVELS
File		READ.ME
File		SKAMPY.TOS

Folder		LEVELS

containing

File		HISCORES
File		LEVEL.000
File		LEVEL.001
.		.
.		.
File		LEVEL.099
File		TOPPER

You may need to run this from a minimaly configured system. That is to
say, run it from TOS. If you have half a meg, run it from floppy with no
hard drive active and no desk accessorys either. If you have more than half
a meg, you can run it from a hard drive, but it probably won't run from any
desktop or operating system other than TOS.  If it does I'd like to know
about it.
		
Bug:  SKAMPY will run if booted up from low res, but when exiting, the screen
will look funny, sorry, this is a glitch that I could not correct.
Fault of the Forthmacs compiler.  Boot up from medium res!


************************
**   3.   MY STORY    **
************************

WARNING:  This is somewhat technical, you can skip it if you like.


I always had this dream of creating an Atari game, even when I was a little
kid.  It was something that stuck with me from the time that I first played
Air Sea Battle, Combat, and others on the venerable old 2600.

My first computer was an Timex Sinclare 1000, yech!  I may have been barely
out of my teens when I bought it with very hard earned money that I aquired
by picking strawberrys during the Summer. I remember the sales lady telling
me that I should not buy it because it was not much of a computer. Probably
should have listened.

By using this computer I first learned what a programming loop was.  I tried
to learn about that on the TRS 80 at school, but the idea would not sink in.
Then at home I tried to get a pixel/block to move from one side of the screen
to the other. My BASIC program consisted of line after line of statements,
all alike, which drew the block in a location, erased that block, and drew
the next one in the new location ajacent to the preceeding one and so on.
I ended up filling up the pathetic 1K RAM space before I was able to get the
dot to move all of the way across the screen.  Pretty frustrating for a little
kid. 'So thats what a looping statment is for?!'

Perhaps only the next year after that, my poor mom scraped up enough money
to buy me an Atari 800XL computer, which was on sale at K-Mart, for $100, plus
a cassette tape drive.  Finally a real machine!  I'd still say the nicest 8bit
computer ever built.

On this machine I learned Atari BASIC, which seemed nicer that the TRS 80 or
the Timex BASIC.  At the public library I found a very special book

Dr. C. Wackos Miracle Guild To Creating Your Own Videogame
( or something like that )

a true classic in my mind, which I still wish I could have in my collection.
Very entertaining while being able to lay down the fundamentals of operating
the Atari hardware, sound, graphics, joystick, all in the context of writing
a game. Wonderfull.

So, in order to test out my new knowledge, I tried to create something simple,
which would not be too hard to build, for my first game.  It was FRACK MAN,
a PAC-MAN clone.  This striped down version had no power pellets and only 
two ghosts. Well, much to my dismay, the game was so slow you could basically
move your player in one direction, let up on the joystick, walk away to make
some breakfast, and come back after you had eaten breakfast and still wait for
the player to move a pixel across the screen.  Well, it wasn't that slow, but it
was most unplayable.  And, I worked so hard on it.  I didn't know it at the
time, but interpretive BASIC is dog slow, and unless you have a really tight
efficient program which can only be created through experience, a game in
interpreted BASIC will be too slow to be playable.  

Maybe a year after that or two, I was talking to my friend at school, which
happened to be the smartest kid in class.  He had tried to write some games
for another 6502 baised machine.  He had this peice of line rule paper which
had all of the machine language commands written on it with their hexadecimal
and decimal values along with their nuemonics.  This was the key!!!  Machine
language is the fastest language.

But, too bad, our family was poor.  So, I could not afford to buy an assembler
cartridge, or a hard disk drive.  Actually, I didn't even know what an
assembler was.  We were lucky to be able to buy two new 2600 carts a year
though, so a Hard Drive was out of the question.  It never really 
occured to me to get some real development tools.

So, I proceeded to hack out a graphics exceleration subroutine by coping
commands from the peice of paper my pal gave me, onto another peice of paper
and then POKEing it into the memory of my 800XL from BASIC.  There was a
special command in Atari BASIC to call a machine language subroutine that way.
I learned about page addressing, and registers X, Y, and the Accumulator.

For this, I decided to create a new game, called RECOVERY.  Here is the premise
of it.  You drive around a little armored vehicle.  You are supposed to pick
up canisters of radioactive material laying around the screen, one at a time
and drive them back to a central disposal bin.  While this is happening, there
are three space ships trying to chase you down.  You can shoot the space ships.
There are mountains around the screen which you have to drive around while
doing this, but the space ships can fly over them.  There are three levels
each with a different screen layout.

Well, this game, while being much faster than FRACK-MAN, was also much too slow
to be playable.  It was neater, but still too slow to be playable.  What was
happening was that although the graphics routines were in assembler, the rest
of the game was still in BASIC, and was being slowed down by such. 

And both of these games were littered with bugs and glitches.

Threw in the towel for a few years.

I got old enough to have a job and earn some money after school.  So, I worked
hard, 4 hours every night, and saved up some money.  Then low and behold, the
Atari ST came out.  A decision had to be made, get a disk drive for the 800XL,
or get the ST.  I guess it was a toss up, but I decided to go for the ST. On
this machine I knew that I was going to be able to create videogames for sure
this time. So, I went to Toys R Us to get the ST.

WRONG

The included BASIC was worse than the 800XL one, and the LOGO was even worse
than that, atleast from the perspective of writing games.  What the heck is
an operating system?  Where are the player missle graphics?

As I latter found out, this machine is mondo mondo harder to program than the
800XL I so foolishly left behind.  You have to deal with things such as
bit planes.  And, you have to write and install a data package handling
routine to access the joystick on an ST. On the good old 800XL, the sticks
were just a PEEK away.  I was flabbergasted.  Even the sound chip is harder
to use.  You need to first tell the chip which register on it you want to
use, and then tell it what you want in that register.

Somewhere along the way, I heard about a language called FORTH, which seemed
interesting.  I went to the library and read up on it.  It seemed like a
really great idea.  Here is a language that you can add any command to that
you wanted.  I could create a command called BANG, which when typed in, would
make an explosion sound.  I could create a command called DIE, which when I 
typed it in, would destroy a spaceship.  Wonderful.  And on top of all of this
it was supposed to be fast !

So, I tried a few commercial FORTH implimentations.  The first was a FORTH put
out by the Fly by Night Group.  I was suprised at the total lack of
documentation.  How was anybody supposed to learn how to use this?  Well,
I tried hacking with it, and that is how I really found out about how much more
difficult it would be to write an ST game than an 8bit game.  But, it wasn't
a very usable product anyway.  One glaring fault was a total lack of a 68000
assembler for writing assembly language routines.  I wanted to create a wiz
bang fast arcade game, and I knew I needed an assembler to do the graphics
subroutines.  The rest of the game could be in FORTH.

Then I latter tried 4x4 by the Dragon Group.  Ok, here is the key! Or so
I thought.  But, as it turned out, the assember package in this FORTH was
buggy.  I can't remember all of what was wrong with this system, but it was
not good enough for my purposes.  And I heard good things about 4x4 too.

A few years latter on I decided to try Mitch Bradleys ForthMacs for the ST.
Difference of night and day.  It worked.  The documentation was good. And it
was shareware, only $50. By that time I was in college and used it to create
a disk sector recovery utility, and another utility to flip a bitmap image
for creating T-shirt iron ons with.  But I didn't have time to write a game.
I tried a little on and off, but I didn't really have all of the knowledge of
the hardware to really do it right anyway.

Ended up dropping out of school and joining the work force but thats another
story.

Until a few years ago, this dream of mine was lying dormant, but still viable.
The dream to create a real videogame. So, I started to try again. Got online
to get the rest of the information about the hardware I needed.  Learned how
to crank out decient assembly routines for the graphics.  Learned how to
create code that was elegant enough to not be bug strewn, and which was
somewhat maintainable and developable.  Followed the FORTH phylosophy of
writing and then immediately testing one subroutine at a time, always. It
started to come together at last.
 
And here you have it!

Game:      Skampy
Genre:     Gobble Game
Language:  ForthMacs
Graphics:  OCP Artstudio 


*****************************
**   4.  FINAL COMMENTS   ***
*****************************

I hope you like the game. I think that it is a decient amature effort, not
as good as Yak, maybe somewhat behind Munsies stuff, but better than a poke in 
the eye!  Hey, it looks, feels, and sounds like a real videogame. And, yes,
its fast enough to be playable!  FORTH is fast enough to write arcade games
in, I always knew that.  And I guess I was always too headstrong to try STOS
although I've seen stuff in STOS which was in the PD library which was still
not as good as my game.

Dream:  Write an outstanding good RPG for Dreamcast or Nuon

Take Care.

Jason Damisch
Forth Games Workshop

" Games For The Future"
