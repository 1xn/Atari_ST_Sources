\ *******************************
\ **  JOYSTICK ACCESS LEXICON  **
\ *******************************

\ Jason Damisch
\ Forth Games Workshop

: joystick ;

decimal


\ ****************
34 xbios: kbdvbase { -- l.kbdvbase }


\ **************
25 xbios: ikbdws  { l.pointer w.length-minus-one -- }


\ ***** Keyboard-Commands *****

create <mouse-on>	   8  c,
create <joysticks-on>      21 c,
create <joysticks-off>     26 c,
create <interrogate>       22 c,


\ ********
: mouse-on
\ The mouse must be turned on after the sticks are turned off
\ if this does not occur, the mouse will be frozen apon program termination
	<mouse-on> 0 ikbdws
;


\ ***********
: interrogate
\ This must be used once per loop of the game
	<interrogate> 0 ikbdws
;


\ ***** packet-handler *****

variable joy-data0   0 joy-data0 !
variable joy-data1   0 joy-data1 !

\ *****************
code packet-handler
\ moves the data packets to a safer location
	d0    long clr
	d1    long clr
	a0 )+  d0    byte move
	a0 )+  d1    byte move
	d0   joy-data0 l#)   long move
	d1   joy-data1 l#)   long move
	rts
c;
  

\ *************
: joysticks-off
\ Turns off all joystick activity
	<joysticks-off> 0 ikbdws
;


\ ************
: joysticks-on
\ Turns on the auto return mode for joystick 
	<joysticks-on> 0 ikbdws
;


\ *****  enable-sticks  *****

\ This should be envoked once at the start of the primary initialization

variable joystick-save
 
\ *************
: enable-sticks
	kbdvbase
	24 +
	dup @ joystick-save !
	['] packet-handler
	swap !
	joysticks-on
;


\ **************
: disable-sticks
\ use this to set the system right, before exiting the program
	joystick-save @
	kbdvbase 
	24 +
	!
	joysticks-off
	mouse-on
;


\ ***
: bye
	disable-sticks bye
;


\ *********
: joystick0
\ (  atom  --  )
\ gives the movement discription nybble for that joystick
	joy-data0 @
	15 and
	swap >compass !
;


\ *********
: joystick1
\ (  atom  --  )
\ gives the movement discription nybble for that joystick
	joy-data1 @
	15 and
	swap dup >compass @ over >last-compass !
	>compass !
;


\ ******* 
: button0 
\ (  --  f  )
\ true if button was pressed
	joy-data0 @
	128 and
;


\ *******
: button1
\ (  --  f  )
\ true if button was pressed
	joy-data1 @
	128 and
;
