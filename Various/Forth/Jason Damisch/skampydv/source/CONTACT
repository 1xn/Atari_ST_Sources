\ *********************
\ *****  CONTACT  *****
\ *********************

\ This is to implement collision detection, so that players in a videogame
\ can interact with their surroundings

: contact ;

decimal


\ *************
variable <4or0>   <4or0> off

\ ****
: 4or0
	1 <4or0> +! 
	<4or0> @ 3 = if
		<4or0> off   
		4
	else
		0
	then
;


\ **********
: hand-index
\ (  coordinate  --  index  )
	4or0 +   4 +   16 /
;


\ ******
: hand
\ (  player-atom  --  position  )
	>r				 
	r@ >y @	hand-index   #collumns *
	r> >x @ hand-index   
	+ chamber +
;


\ *****  FOREGROUND  *****

\ *** Foreground Elements ***
0   constant empty

1   constant killer

2   constant solid
3   constant smack

4   constant vapor
5   constant drain

7   constant foes

8   constant scampy
 
16   constant stunned

32  constant flying-rock

\ ***********************************************
#rows #collumns 16 * *   constant foreground-size


\ ***************
create foreground   foreground-size allot


\ ***************
: wipe-foreground
	foreground foreground-size wipe
;


\ **************
code >foreground
(  x  y  token  --  )

	long

	foreground l#)   pea            	\ contact-space
        sp )+   a0   move
	sp )+   d2   move    			\ token

	sp )+   d0   move    			\ y	
	2  #    d0   lsr
	#collumns 4 *    #    d0   mulu
	d0      a0   adda

	sp )+   d0   move    			\ x
	2  #    d0   lsr
	d0	a0   adda

	byte
	d2   a0 )+  or
	d2   a0 )+  or
	d2   a0 )+  or
	d2   a0 )+  or
	long
	#collumns 4 * 4 -    l#   a0     adda

	byte
	d2   a0 )+  or
	d2   a0 )+  or
	d2   a0 )+  or
	d2   a0 )+  or
	long
	#collumns 4 * 4 -    l#   a0     adda
	
	byte
	d2   a0 )+  or
	d2   a0 )+  or
	d2   a0 )+  or
	d2   a0 )+  or
	long
	#collumns 4 * 4 -   l#   a0      adda
	
	byte
	d2   a0 )+  or
	d2   a0 )+  or
	d2   a0 )+  or
	d2   a0 )+  or
c;


\ **************
code <foreground
(  x  y  token  --  )

	long


	foreground l#)   pea            	\ contact-space
        sp )+   a0   move
	sp )+   d2   move    			\ token
		d2   not

	sp )+   d0   move    			\ y	
	2  #    d0   lsr
	#collumns 4 *    #    d0   mulu
	d0      a0   adda

	sp )+   d0   move    			\ x
	2  #    d0   lsr
	d0	a0   adda

	byte
	d2   a0 )+  and
	d2   a0 )+  and
	d2   a0 )+  and
	d2   a0 )+  and
	long
	#collumns 4 * 4 -    l#   a0     adda

	byte
	d2   a0 )+  and
	d2   a0 )+  and
	d2   a0 )+  and
	d2   a0 )+  and
	long
	#collumns 4 * 4 -    l#   a0     adda
	
	byte
	d2   a0 )+  and
	d2   a0 )+  and
	d2   a0 )+  and
	d2   a0 )+  and
	long
	#collumns 4 * 4 -   l#   a0      adda
	
	byte
	d2   a0 )+  and
	d2   a0 )+  and
	d2   a0 )+  and
	d2   a0 )+  and
c;


\ ************
code present?
\ (  x  y  token/comparee  --  flag  )

	long

	foreground l#)   pea            	\ contact-space
        sp )+   a0   move
	sp )+   d2   move    			\ comparee

	sp )+   d0   move    			\ y	
	2  #    d0   lsr
	#collumns 4 *      #    d0   mulu
	d0      a0   adda

	sp )+   d0   move    			\ x
	2  #    d0   lsr
	d0	a0   adda
	1  l#   a0   adda

		d3   clr
		d0   clr
	-1 l#   d1   move

	byte
	a0 )+   d0  move
 	d2      d0  and 0<> if
		d1  d3   lmove
	then	

	a0 )+   d0  move
	d2      d0  and 0<> if
		d1   d3  lmove
	then
	
	long
	#collumns 4 * 3 -    l#   a0     adda

	byte
	a0 )+   d0  move
	d2      d0  and 0<> if
		d1   d3  lmove
	then	
	
	a0 )+   d0  move
	d2      d0  and 0<> if
		d1   d3  lmove
	then
	
	a0 )+   d0  move
	d2      d0  and 0<> if
		d1   d3  lmove
	then
	
	a0 )+   d0  move
	d2      d0  and 0<> if
		d1   d3  lmove
	then

	long
	#collumns 4 * 4 -   l#   a0   adda

	byte
	a0 )+   d0  move
	d2      d0  and 0<> if
		d1   d3  lmove
	then	
	
	a0 )+   d0  move
	d2      d0  and 0<> if
		d1   d3  lmove
	then
	
	a0 )+   d0  move
	d2      d0  and 0<> if
		d1   d3  lmove
	then
	
	a0 )+   d0  move
	d2      d0  and 0<> if
		d1   d3  lmove
	then

	long
	#collumns 4 * 3 -   l#   a0   adda
	
	byte
	a0 )+   d0  move
	d2      d0  and 0<> if
		d1   d3  lmove
	then
	
	a0 )+   d0  move
	d2      d0  and 0<> if
		d1   d3  lmove
	then
	
	d3   sp -)   lmove
c;
