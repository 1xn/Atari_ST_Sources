\ *********************
\ **** S C A M P Y ****
\ *********************

\ A simple two dimentional gobble game


decimal

: game ;


\ ***** GLOBAL VARIABLES *****

\ *************
variable #lives   3  #lives !
variable #foes    2  #foes  !
variable #fruit   0  #fruit !   
variable #rocks   0  #rocks !
variable #held    0  #held  !

variable start-time   0 start-time !


\ *****  PRESENTATION AREA *****

\ ******
: .level   
	0 #row !   28 #collumn !   #level @ u.
;


\ ******
: .lives
	0 #row !   38 #collumn !   #lives @ u.   
;


\ ******
: .score
	0 #row !   6  #collumn !   score @ u.
;


\ *****
: .time
	0 #row !   18 #collumn !   time @ 30 / u.
;


\ *******
: score+!
\ (  value  --  )
	score +!   .score
;


\ *******
: lives+!
	#lives +!   .lives
;


\ ************************
\ *** SCREEN PREP AREA ***

\ ***********
: .scoreboard
	<.scoreboard>   .level   .lives   .score   .time
;


\ *************
: wipe-canvases
	d-canvas @ drawee !   wipe-drawee
	b-canvas @ drawee !   wipe-drawee  
	c-canvas @ drawee !   wipe-drawee  
	a-canvas @ drawee !   wipe-drawee
;


\ *******************
\ **  I'M A CLOCK  **


\ *******
: \_siren
	time @ 1 = if
		((.))siren
	then
;

\ ******
: clock
	time @ 0<> if
		-1 time +!
		time @ 30 mod
		0= if
			.time
		then
	then
	\_siren
;


\ *******  LOAD IN A LEVEL  *******


\ ****************
create "level.000"   ," level.000"


\ ***********
: first-level
	"level.000" "current-file
;

first-level

\ *********
: set-level
\ (  n  --  )
	<# # # # #>         
	"current-file" 7 +  
	swap cmove	    
	"current-file" "load
;


\ *************
create "topper"  ," topper"


\ ************
create "level"   ," level"


\ ***********
: load-topper
	"topper" "load
;


\ ************
: forget-level
	"level" canonical current @ vfind 0= ?missing (forget)
;


\ **********
: next-level
	-sounds
	rainbow
	0 #held !
	forget-level
	1 #level +!
	#level @ set-level
	load-topper
;


\ ********
: new-game
	3 #lives !
	0 #held  !
	0 #level !
	0 score  !
	forget-level
	first-level
	#level @ set-level
	load-topper
;

\ ****************************
\ *****  FRAME  FACTORY  *****

create |scampy|     file,  scampy.dat
create |goon|       file,  goon.dat
create |skull|	    file,  skull.dat
create |ghost|      file,  ghost.dat
create |rock|       file,  rock.dat


variable frame   0 frame !


\ ******
: +frame
	frame @ 1 +
	dup 16 < and	
	frame !
;


create  ghost-directions

0  512   *   ,		\  0	still
1  512   *   ,		\  1	north
2  512   *   ,		\  2	south
0            ,		\  3	not used
1  512   *   ,		\  4	west
1  512	 *   ,		\  5	northwest
1  512   *   ,		\  6	southwest
0            ,		\  7    not used
2  512   *   ,		\  8	east
2  512   *   ,		\  9	northeast
2  512   *   ,   	\  10	southeast


create  skull-directions

0  512   *   ,		\  0	still
1  512   *   ,		\  1	north
2  512   *   ,		\  2	south
0            ,		\  3	not used
2  512   *   ,		\  4	west
1  512	 *   ,		\  5	northwest
2  512   *   ,		\  6	southwest
0            ,		\  7    not used
2  512   *   ,		\  8	east
1  512   *   ,		\  9	northeast
2  512   *   ,   	\  10	southeast


create  standard-directions

0  512   *   ,		\  0	still
1  512   *   ,		\  1	north
2  512   *   ,		\  2	south
0            ,		\  3	not used
3  512   *   ,		\  4	west
3  512	 *   ,		\  5	northwest
3  512   *   ,		\  6	southwest
0            ,		\  7    not used
4  512   *   ,		\  8	east
4  512   *   ,		\  9	northeast
4  512   *   ,   	\  10	southeast
0	     ,		\  11  
0	     ,		\  12
0	     ,		\  13
0	     ,		\  14
0            ,		\  15


\ ******
: frame>
\ (  atom  |frames|  frame-type  --  address  )
	rot
	dup >compass @ 0= if
		>last-compass @
	else
		>compass @
	then
	4*   + @
	frame @   4 /   128 *   +   +
;


\ **** SPECIAL EFFECTS DEPARTMENT *****


\ *****
: flash
	4095 0 do  
		i <scampy-pallet> w!
		<scampy-pallet> change-pallet  
	loop 
	000 <scampy-pallet> w!   <scampy-pallet> change-pallet
;   


\ ***********
variable <go>
variable <game-over>


\ ******
: time+!
\ (  time  --  )
	30 * 
	time @
	30 / 30 *
	+   2970 min	
	time !
;


\ ***************
create for-scampy   element-size 1 * allot


\ ****
: die
	reset-sounds
	for-scampy >x @   for-scampy >y @   |scampy|  512 5 * + 
	playfield-start   .player
	frame-finished

	0 #held !
	0 -tone   1 -tone
	255 noise-pitch
	0 +noise
	0 15 do
		flash
		i 0 volume 
	-2 +loop
	-1 #lives +!
	-((.))0voice
	clear   rp0 @ rp!  
	#lives @  0 = if   <game-over> @ execute   then
	10 time+!
	<go> @ execute
;


\ **************************
\ **  BADNICKS OF INFAMY  **
\ **************************


\ **************
0 constant still


\ *************
create for-foes   element-size 10 * allot


\ ********
: element!
\ (  x  y  compass  last-compass  vector  saved-vector  frames  behaviour  )  
\ (  array  index  --  )

	1 + element-size * +         
	element-size 4 /   0 do
		4 - tuck !
	loop
	drop
;


\ *****
: .foe
\ (  #  --  )
	element-size *   for-foes +
	dup >vector   @ execute
;


\ *****
: .foes
	#foes @
	0 ?do
		i .foe
	loop
;


\ *************************************
\ ***** FLYING OBJECTS DEPARTMENT *****
\ *************************************


\ **************
create for-rocks  element-size 6 * allot



\ **************
\ variable <.rock>

\ ***********************
\ variable <rock-behaviour>


\ *********
: held-rock
\ (  atom  --  )
	drop
;


\ *******************
: held-rock-behaviour
\ (  atom  --  )
	drop
;


\ ******
: .rocks
	for-rocks
	#rocks @   0 ?do
		dup
		dup >vector @ execute
		element-size +
	loop
	drop
;


\ ***********
: .still-rock
\ (  rock-atom  -- )
	dup >x @   swap >y @   |rock|   playfield-start   .missle
;


\ **********************
: still-rock-behaviour
\ (  rock-atom  --  )
	dup >x @   over >y @   scampy present?
	if
		2 score+!
		((.))glomp
		1 #held +!
		dup   ['] held-rock             swap >vector    !
		      ['] held-rock-behaviour   swap >behaviour !
	else
		drop	
	then
;


\ **************
: available-rock
\ (  --  atom )
	for-rocks
	begin
		dup >vector @
		['] held-rock <> while
		element-size +
	repeat
;


\ ***************
: rock-behaviours
	for-rocks
	#rocks @   0 ?do
		dup dup >behaviour @ execute
		element-size +
	loop
	drop
;


\ *****
: fall
\ (  rock-atom  --  flag  )
	hand
	c@ 0<>
;


\ *****
: .rock
\ (  rock-atom  --  )
	dup >x @   over >y @   flying-rock  >foreground
	dup move-player
	dup >x @   over >y @   flying-rock  >foreground
	dup move-player
	dup >x @   over >y @   flying-rock  >foreground
	dup >x @   swap >y @   |rock|   playfield-start  .missle
;


\ ****************
: rock-behaviour
\ (  rock-atom  --  )
	dup fall swap 
	dup >x @   over >y @   solid present?
	rot or if
		dup
		dup player-vectors negate 4 * rot   >y +! 
				   negate 4 * over  >x +!
		dup >vector   ['] .still-rock  swap !
		>behaviour ['] still-rock-behaviour swap !
		((.))pok		
	else
		drop
	then
;


\ *******
: <throw>
	available-rock >r
	for-scampy >compass @   r@ >compass !
\	for-scampy player-vectors 2* swap 3 *
	for-scampy >x @ ( + )     r@ >x !
	for-scampy >y @ ( + )     r@ >y !
	['] .rock r@ >vector !
	['] rock-behaviour r> >behaviour !
	-1 #held +!
	((.))ween
;


\ *****
: throw
	#held @ 0>
	for-scampy >compass @ 0<>
	and if
		<throw>
	then
;


\ *************
variable thrown

\ ******
: defend
	button1 128 =   thrown @ false =   and
	if
		throw   thrown on
	then
	button1 0 = if
		thrown off
	then
;


\ *****************
\ **  TILE AREA  **
\ *****************


\ ************
: <erase-tile>
\ (  location  --  )
	chamber -   #collumns /mod
	refillee @ >playfield 
	obscure
; 


\ **********
: erase-tile
\ (  location  --  )
	dup <erase-tile>
	0 swap c!
;


\ **********
: open-doors
\ (  key#  --  )
 	16 +
	chamber   #rows #collumns *   +
	chamber  
	do
 		i c@
		2dup <> 
		and i c!
	loop
	drop
	build-background
;


0 constant red-key
1 constant green-key
2 constant blue-key


\ **************
: open-red-doors
\ (  position  --  )
	red-key open-doors
	((.))blong
	erase-tile
;


\ ****************
: open-green-doors
\ (  position  --  )
	green-key open-doors
	((.))blong
	erase-tile
;


\ ***************
: open-blue-doors
\ (  position  --  )
	blue-key open-doors
	((.))blong
	erase-tile
;


\ *********
: dec-fruit
	-1 #fruit +!
;


\ ********
: :fruit
( Runtime |  location --  )
	create ,
	does>
	@ score+!
	((.))glimp
	dec-fruit
	erase-tile
;


44 :fruit apple
55 :fruit banana
66 :fruit cherries
77 :fruit mellon
88 :fruit berry
99 :fruit mushroom


\ *****
: +2000
\ (  location  --  )
	erase-tile
	((.))glomp
	2000 score+!
;


\ *****
: +4000
\  (  location  --  )
	erase-tile
	((.))glomp
	4000 score+!
;


\ **********
: extra-life
\ (  location  --  )
	1 lives+!
	((.))glomp
	erase-tile
;


\ ****************
variable more-time


\ *********
: time-tile
\ (  location  --  )
	erase-tile
	more-time @   time+!
	((.))glomp
	.time
	+step
;


\ ***************
variable ^restun^

variable ^.goon^
variable ^goon^
variable ^.stunned-goon^

variable ^.skull^
variable ^skull^
variable ^.stunned-skull^

variable ^.ghost^
variable ^ghost^
variable ^.stunned-ghost^
variable ^stunned-ghost^

variable ^.stunned-scampy^
variable ^stunned-scampy^


\ **********************
  variable stun-duration
  100 stun-duration !


\ ***********
: <stun-foes>
	#foes @ element-size *   for-foes +   for-foes do
		i >id @
		case
			1 of
				^.stunned-goon^ @   i >vector !
				^restun^        @   i >behaviour !
				stun-duration   @   i >timer !
			endof		
			2 of
				^.stunned-skull^ @  i >vector !
				^restun^	 @  i >behaviour !
				stun-duration    @  i >timer !
			endof
			3 of
				^.stunned-ghost^ @  i >vector !
				^stunned-ghost^  @  i >behaviour !
				stun-duration    @  i >timer !
			endof
		endcase
	element-size +loop
;


\ *********
: stun-foes
\ (  location  --  )
	((.))wenwen
	<stun-foes>
	erase-tile
;


\ ***********
: stun-scampy
\ (  location  --  )
	((.))wunwun
	^.stunned-scampy^ @   for-scampy >vector    !
	^stunned-scampy^  @   for-scampy >behaviour !
	stun-duration     @   for-scampy >timer !
	erase-tile
;


\ ****************************
create background-interactions   15 4 * allot

\ *********************************
: initialize-background-interactions
	background-interactions
	['] apple ,'
	['] banana ,' 
	['] cherries ,'
        ['] mellon ,'   
        ['] berry ,'   
        ['] mushroom ,'
	['] extra-life ,'
        ['] stun-foes ,'
        ['] stun-scampy ,'
	['] open-red-doors ,'
        ['] open-green-doors ,'
        ['] open-blue-doors ,'
	['] time-tile    ,'
        ['] +2000 ,'
   	['] +4000 ,'  
	drop
	;

\ *******
: touches
\ (  position  background-interactions   --  )
	over c@ dup 1 15 between if
		1 -  4 * +   @ execute
	else
		2drop drop
 	then
;


\ ***********
: search-mode
\ (  goon-atom  --  )
	>r
	r@ >compass @   r@ >last-compass ! 
	r@ >way @
	r@ >compass !
	-1 r> >way-count +!		
;


\ ************
: chase-scampy
\ (  goon-atom  --  )
	dup >way-count @ if
		search-mode
	else
		for-scampy chase
	then
;


\ *********
: a-chooser
	2 random
;

\ *********
: b-chooser
	2 random
;

\ *********
: direction
\ (  goon-atom  --  compass  )
	dup >y @   for-scampy >y @  = if
		a-chooser 1+   nip exit
	then

	dup >x @   for-scampy >x @  = if
		a-chooser 1+ 4*   nip exit
	then

	>r

	r@ >y @   for-scampy >y @  < if
		8 2 4 2
	else
		8 1 4 1
	then

	r> >x @   for-scampy >x @  < if
		2drop
	else	
		2swap  2drop
	then
	b-chooser if
		drop
	else
		nip
	then
;


\ *************
: \_search-mode
\ (  goon-atom  --  )
	dup >compass @ 0=  ( over >way-count @ 0=   and ) if
		dup direction over >way !
		>way-count 6 swap !
	else
		drop	
	then
;


\ ******************************
\ *****  GENERAL FOE AREA  *****
\ ******************************


\ ********
: restun
\ (  foe-atom  --  )
	dup >x @   over >y @   flying-rock present? if
		stun-duration @ swap >timer !
	else
		drop
	then
;


\ ***************
: .stunned-player
\ (  'active-foe  '.foe  density  foe-atom  --  )
	>r
	r@ >x @   r@ >y @  rot  >foreground

	r@ >timer @   33 >
	r@ >timer @   5 mod 1 =
	or if
		r@ >x @   r@ >y @   r@ >frames @  playfield-start   .player
	then

	-1 r@ >timer +!
	r@ >timer @  1 < if
       		r@ >vector    !
		r@ >behaviour !
	else
		2drop
	then
	r> drop
;


\ ***************
: active-foe
\ (  'foe-stunned  foe-atom  --  )
	dup >x @   over >y @  flying-rock present?
	if
		dup >x @ over >y @ smack <foreground
		dup >behaviour   ['] restun   swap !
		tuck >vector !
		stun-duration @ swap >timer !
	else
		2drop
	then	 
;


\ **************
: foe-behaviours
	for-foes
	#foes @
	0 ?do
		dup dup >behaviour @ execute
		element-size +
	loop
	drop
;


\ ***********************
\ *****  GOON ZONE  *****


\ *************
: .stunned-goon
\ (  goon-atom  --  )
	solid
	^goon^  @
	^.goon^ @
	2swap swap .stunned-player
;


\ ****
: goon
\ (  goon-atom  --  )
	['] .stunned-goon swap
	active-foe
;


\ *****
: .goon
\ (  foe-atom  --  )
	>r
	r@ chase-scampy
	r@ blockage
	r@ move-player
	r@ \_search-mode
	r@ >x @   r@ >y @
	2dup   r@ |goon| standard-directions frame>   playfield-start   .player
	smack >foreground
	r> drop
;


\ *************************
\ ****  SKELETON LAB  *****


\ *****
: :path
( DS   n s e w...  #directions  --  )
( IS   --  name         )
	255 swap
	create
	0 c,
	here swap 1+ allot
	here 1- do
		i c!	 
	-1 +loop		
;


\ *****
: path@
\ (  path  --  byte  )
	>r
	r@ c@ 1+   r@ + c@
	r@ c@ 2+   r@ + c@
	255 <>
	r@ c@ 1+ and
	r> c!
;

 
\ n s w   3 :path test
\ test  for-scampy  >path !


\ **********
: reset-path
\ (  path  -- same-path  )
	0 over c!
;


\ ****
: path
\ (  atom --  )
	dup >path @ path@
	swap dup >compass @ over >last-compass !
	>compass !
;


\ **************
: .stunned-skull
\ (  foe-atom  --  )
	solid
	^skull^  @
	^.skull^ @
	2swap swap .stunned-player
;


\ *****
: skull
\ (  foe-atom  --  )
	['] .stunned-skull swap
	active-foe
;


\ ******
: .skull
\ (  foe-atom  --  )
	>r
	r@ path
	r@ blockage
	r@ move-player
	r@ >x @   r@ >y @   2dup   
	r@ r@ >frames @ skull-directions frame>   playfield-start   .player
	smack >foreground
	r> drop
;


\ ************************
\ *****  GHOST HALL  *****


\ **************
: .stunned-ghost
\ (  foe-atom  --  )
	vapor
	^ghost^  @
	^.ghost^ @
	2swap swap .stunned-player
;


\ *************
: stunned-ghost
\ (  foe-atom  --  )
	drop
;


\ *****
: ghost
\ (  foe-atom  --  )
	drop
;


\ ******
: .ghost
\ (  foe-atom  --  )
	>r
	r@   time @ 0= if   
		chase-scampy   
	else   
		path    
	then
	r@ move-player
	r@ >x @   r@ >y @   2dup   
	r@ r@ >frames @ ghost-directions frame>
	playfield-start   .player
	drain >foreground
	r> drop
;


\ **********************************
\ ***** SCAMPY DEFINITION AREA *****


\ *****
: hurt
	for-scampy >x @   for-scampy >y @   killer  present?
	if
		die
	then
;


\ *********
: ^.scampy^
	interrogate for-scampy joystick1
	for-scampy blockage
	for-scampy move-player
        for-scampy >x @   for-scampy >y @
	for-scampy |scampy| standard-directions frame>  playfield-start  .player
	for-scampy >x @   for-scampy >y @   scampy  >foreground
	for-scampy step
;


\ *******
: .scampy
	for-scampy >vector @ execute
;


\ ******************
: ^scampy-behaviour^
	for-scampy hand   background-interactions touches
\	defend
	hurt
;


\ ****************
: scampy-behaviour
	for-scampy >behaviour @ execute
;

	
\ ***************
: .stunned-scampy
	['] ^scampy-behaviour^
	['] ^.scampy^	
	solid
	for-scampy
	.stunned-player
	2 -noise
;


\ **************
: stunned-scampy
	hurt
;


\ ************************************
\ *****  MOLECULE FILLING WORDS  *****

\ *****
: don't
\ ( ..... d  --  ...d.  )
	rot drop swap
;


\ ********
: use-goon
\ (  x  y  --  ......  )
	0 0
	['] .goon		
	['] goon	   
	1 ( goon id )			  
	|goon|		
	still			   
	still			   
	0
;


\ *********
: use-skull
\ (  x  y  --  ......  )
	0 0
	['] .skull	
	['] skull	   
	2 ( skull id )			  
	|skull|		
	still			   
	still			   
;


\ *********
: use-ghost
\ (  x  y  --  ......  )
	0 0
	['] .ghost		
	['] ghost	   
	3 ( ghosts id )			  
	|ghost|
	still			   
	still			   
;


\ **********
: use-scampy
\ (  x  y  --  ......  )
	0 0 
	['] ^.scampy^			
	['] ^scampy-behaviour^	   
	0	 		  
	|scampy|   512 5 *   +
	still			   
	still			   
	0
;


\ *********
: use-rocks
\ (  --  ......  )
\ (  x  y  --  ......  )
	0 0
	['] .still-rock		
	['] still-rock-behaviour	   
	0			  
   	0			
	still			   
	still			
	0
;
