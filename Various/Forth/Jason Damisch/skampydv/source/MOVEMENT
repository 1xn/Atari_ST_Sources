
\ ********************
\ ***** MOVEMENT *****
\ ********************

\ This contains some words to move players in 2d videogames.

: movement ;

decimal


\ *****  MOVE-PLAYER  *****

\ *****************
create vector-array
 0 ,   0 ,
 0 ,  -4 ,
 0 ,   4 ,
 0 ,   0 ,

-4 ,   0 ,
-4 ,  -4 ,
-4 ,   4 ,
 0 ,   0 ,

 4 ,   0 ,
 4 ,  -4 ,
 4 ,   4 ,
 0 ,   0 ,
 
 0 ,   0 ,
 0 ,   0 ,
 0 ,   0 ,
 0 ,   0 ,


\ **************
: player-vectors
\ (  atom  --  x-vector  y-vector  ) 
	>compass @ 
	8 * vector-array +   2@
	swap
;


\ ***********
: move-player
\ (  player-atom  --  )
\ changes the values of the x and y coordinate variables  
	dup player-vectors   
	rot tuck  >y +!   >x +!
;


\ *****  CHASE  *****

\ ****************
: chase-horizontal
\ (  foe-y  scampy-y  --  movement-nibble  )
	2dup
	> 4 and -rot   < 8 and   +
; 


\ **************
: chase-vertical
\ (  foe-x  scampy-x  --  movement-nibble  )
	2dup
	> 1 and -rot   < 2 and   +
;


\ *****
: chase
\ (  foe-atom  scampy-atom  -- )
\ causes the Foe to chase the Human Opponent
	swap >r
	r@ >x @   over >x @   chase-horizontal
	r@ >y @   rot  >y @   chase-vertical
	+
	r@ >compass @ r@ >last-compass !
	r> >compass !
;


\ *****  BLOCKAGE  *****
\ Prevents players from moving through walls like phantoms
\ (  player-atom  --  )


binary
	0000 constant h
	0001 constant n
	0010 constant s
	1000 constant e
	0100 constant w
	0101 constant nw	
	0110 constant sw
	1001 constant ne
	1010 constant se
decimal


\ ***************
11 constant #rows

\ *******************
20 constant #collumns


\ ********
: position
\ (  player-atom  --  position  )
	dup  >x @ 16 /
	swap >y @ 16 / #collumns *
	+   chamber + 
;


\ *****
: ajar
\ (  cordinate  --  0-or-1  )
	16 mod 0> abs
;


\ *****
: wall?
\ (  position  --  f  )
	c@ 16 70 between
;


\ ********
: aligned?
\ (  cordinate  --  f  )
	16 mod 0=
;


\ *******
: ?block
\ (  f  direction  atom  --  )
	-rot and
	over >compass @ xor
	swap >compass !
;


\ *******
: ?corner
\ (  f  direction  atom  --  )
	rot if
		tuck >last-compass @ dup 
		0= if
			drop dup
		then
		xor
		swap >compass !
	else
		2drop
	then
;


\ ************
: save-compass 
\ (  atom  --  )
	dup >compass @
	swap >last-compass !
;


\ *******
: check-n
\ (  player-atom  --  )
	dup dup >y @ aligned?
	if
		dup position			\ pa pos
		#collumns - dup			\ pa pos-y pos-y
		wall? -rot			\ f  pa    pos-y 
		swap >x @ ajar +		\ f      pos-y-1
		wall?
		or
	else
		drop   false
	then
	n rot ?block
;


\ *******
: check-s
\ (  player-atom  --  )
	dup dup >y @ aligned?
	if
		dup position			\ pa pos
		#collumns + dup			\ pa pos-y pos-y
		wall? -rot			\ f  pa    pos-y 
		swap >x @ ajar +		\ f      pos-y-1
		wall?
		or
	else
		drop   false
	then
	s rot ?block
;


\ *******
: check-e
\ (  player-atom  --  )
	dup dup >x @ aligned?
	if
		dup position			\ pa pos
		1 +  dup			\ pa pos-y pos-y
		wall? -rot			\ f  pa    pos-y 
		swap >y @ ajar   #collumns * +	\ f      pos-y-1
		wall?
		or
	else
		drop   false
	then
	e rot ?block
;

 
\ *******
: check-w
\ (  player-atom  --  )
	dup dup >x @ aligned?
	if
		dup position			\ pa pos
		1 -  dup			\ pa pos-y pos-y
		wall? -rot			\ f  pa    pos-y 
		swap >y @ ajar   #collumns * +	\ f      pos-y-1
		wall?
		or
	else
		drop   false
	then
	w rot ?block
;


\ ********
: check-nw
\ (  player-atom  --  )
	>r
	r@ check-n
	r@ check-w
	r@ >x @ aligned?
	r@ >y @ aligned?
	r@ >compass @ nw =
	r@ position   #collumns -   1 -   wall?
	and and and
	nw r> ?corner	
;


\ ********
: check-sw
\ (  player-atom  --  )
	>r
	r@ check-s
	r@ check-w
	r@  >x @ aligned?
	r@  >y @ aligned?
	r@ >compass @ sw =
	r@ position   #collumns +   1 -   wall?
	and and and
	sw r> ?corner	
;


\ ********
: check-ne
\ (  player-atom  --  )
	>r
	r@ check-n
	r@ check-e
	r@ >x @ aligned?
	r@ >y @ aligned?
	r@ >compass @ ne =
	r@ position   #collumns -   1 +   wall?
	and and and
	ne r> ?corner	
;



\ ********
: check-se
\ (  player-atom  --  )
	>r
	r@ check-s
	r@ check-e
	r@ >x @ aligned?
	r@ >y @ aligned?
	r@ >compass @ se =
	r@ position   #collumns +   1 +   wall?
	and and and
	se r> ?corner	
;


\ **********
: not-moving
\ (  player-atom  --  )
	drop
;


\ *******************
create blockage-table   16 4 * allot

\ *****
: ,'
	over !
        4 +
	;

\ *************************
: initialize-blockage-table
	blockage-table
	['] not-moving	,'	\ not moving
	['] check-n	,'   	\ n
	['] check-s	,'   	\ s
	['] not-moving 	,'   	\ unused
	['] check-w 	,'	\ w
	['] check-nw	,'      \ nw
	['] check-sw	,'      \ sw
	['] not-moving	,'	\ unused
	['] check-e	,'	\ e
	['] check-ne	,'	\ ne
	['] check-se	,'	\ se
	['] not-moving    ,'
	['] not-moving    ,'
	['] not-moving    ,'
	['] not-moving    ,'
	['] not-moving    ,'
	drop
	;


\ ********
: blockage
\ (  player-atom  --  )
	dup >compass @
	4 * blockage-table + @ execute
;


decimal
