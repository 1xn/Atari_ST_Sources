CLS
CLEAR                           ! Clear all var in memory
ON BREAK GOSUB break            ! If we break the prog
ON ERROR GOSUB error            ! If an error occur
logical$=SPACE$(32225)
logical%=V:logical$+&HFF AND &HFFFF00
old_logical%=XBIOS(2)           ! Save old logical screen%
spr$=SPACE$(32000)              ! A little bit of memory for
spr%=V:spr$                     ! the sprite, give the adress
@load_neo("ground.neo",spr%) ! Load the sprite picture
physical_screen%=XBIOS(2)       ! Get the physical screen for drawing
'                               ! on monitor !!!
BMOVE spr%,physical_screen%,32000 ! Copy sprite picture into the physical
REM -LOADS THE IMAGES (no mask!)-
GET 0,0,31,31,grass$
REM -LOADS THE CHARAKTER-IMAGES(mask!)-
GET 32,0,63,31,walku1$
GET 64,0,63+32,31,walku2$
GET 32,32,63,63,walkr1$
GET 64,32,63+32,63,walkr2$
GET 32,64,63,95,walkd1$
GET 64,64,63+32,95,walkd2$
GET 32,96,32*2-1,127,walkl1$
GET 64,96,32*3-1,127,walkl2$
x&=40
y&=20
DIM map(10,10)
move=1
DATA 0,0,0,0,0
DATA 0,0,0,0,0
DATA 0,0,0,0,0
DATA 0,0,0,0,0
DATA 0,0,0,0,0
REM -SET THE CHARAKTER START POSITION-
c_posx=3*32
c_posy=2*32
py=2
px=3
REM -LOAD THE MAP INFO INTO THE DIM MEMORY-
FOR y=1 TO 5
  FOR x=1 TO 5
    READ map(x,y)
  NEXT x
NEXT y
REM -START THE MAIN PROGRAM-
DO
  '
  SWAP logical%,physical_screen%        ! Swap logical and physical screen
  '
  '
  ~XBIOS(5,L:logical%,L:physical_screen%,W:-1) ! This xbios call
  '                                            ! is used to set logical and
  '                                            ! physical screen, so at this time
  '                                            ! everything we draw was drawned
  '                                            ! in logical screen (something
  '                                            ! in memory)
  '
  VSYNC                                 ! Wait vertical Synchro
  '                                     ! This thing to synchronize our
  '                                     ! display to avoid some flickering !!
  CLS
  IF INKEY$=CHR$(27) THEN
    END
  ENDIF
REM -THE CODE PUTS MAP IMAGES(no mask!)-
  FOR x=0 TO 5
    FOR y=0 TO 5
      PUT x*32-scrollx,y*32-scrolly,grass$
    NEXT y
  NEXT x
REM -THE CODE PUTS CHARAKTER IMAGES(mask!)-
REM move=1 is down, move=2 is up, move=3 is left and the move=4 is right!
  IF move=1 THEN
    IF anim=1 THEN
      PUT c_posx-scrollx,c_posy-scrolly,walkd1$
    ENDIF
    IF anim=2 THEN
      PUT c_posx-scrollx,c_posy-scrolly,walkd2$
    ENDIF
  ENDIF
  IF move=2 THEN
    IF anim=1 THEN
      PUT c_posx-scrollx,c_posy-scrolly,walku1$
    ENDIF
    IF anim=2 THEN
      PUT c_posx-scrollx,c_posy-scrolly,walku2$
    ENDIF
  ENDIF
  IF move=3 THEN
    IF anim=1 THEN
      PUT c_posx-scrollx,c_posy-scrolly,walkl1$
    ENDIF
    IF anim=2 THEN
      PUT c_posx-scrollx,c_posy-scrolly,walkl2$
    ENDIF
  ENDIF
  IF move=4 THEN
    IF anim=1 THEN
      PUT c_posx-scrollx,c_posy-scrolly,walkr1$
    ENDIF
    IF anim=2 THEN
      PUT c_posx-scrollx,c_posy-scrolly,walkr2$
    ENDIF
  ENDIF

  REM ------------------------- MOVEMENT-FUNCTION ---------------------
  REM -- DOWN --
  IF move=1 THEN
    IF aa>0
      scrolly=scrolly+4
      c_posy=c_posy+4
      xo=xo+2
      IF xo=16 THEN
        aa=0
        py=py+1
        xo=0
      ENDIF
    ENDIF
  ENDIF
  REM -- UP --
  IF move=2 THEN
    IF aa>0
      scrolly=scrolly-4
      c_posy=c_posy-4
      xo=xo+2
      IF xo=16 THEN
        aa=0
        py=py-1
        xo=0
      ENDIF
    ENDIF
  ENDIF
  REM -- LEFT --
  IF move=3 THEN
    IF aa>0
      scrollx=scrollx-4
      c_posx=c_posx-4
      xo=xo+2
      IF xo=16 THEN
        aa=0
        px=px-1
        xo=0
      ENDIF
    ENDIF
  ENDIF
  REM -- RIGHT --
  IF move=4 THEN
    IF aa>0
      scrollx=scrollx+4
      c_posx=c_posx+4
      xo=xo+2
      IF xo=16 THEN
        aa=0
        px=px+1
        xo=0
      ENDIF
    ENDIF
  ENDIF
  IF xo=0 THEN
    anim=1
  ENDIF
  IF xo=8 THEN
    anim=2
  ENDIF
  REM ------------------ END OF MOVEMENT-FUNCTION -------------------
REM -------- INPUT FUNCTION --------
  REM ---- RIGHT-KEY -----
  IF STICK(1)=8 THEN
    IF map(px+1,py)<1 THEN
      IF aa<1 THEN
        move=4
        aa=1
      ENDIF
    ENDIF
  ENDIF
  REM ---- LEFT-KEY -----
  IF STICK(1)=4 THEN
    IF map(px-1,py)<1 THEN
      IF aa<1 THEN
        move=3
        aa=1
      ENDIF
    ENDIF
  ENDIF
  REM ---- UP-KEY -----
  IF STICK(1)=1 THEN
    IF map(px,py-1)<1 THEN
      IF aa<1 THEN
        move=2
        aa=1
      ENDIF
    ENDIF
  ENDIF
  REM ---- DOWN-KEY -----
  IF STICK(1)=2 THEN
    IF map(px,py+1)<1 THEN
      IF aa<1 THEN
        move=1
        aa=1
      ENDIF
    ENDIF
  ENDIF
LOOP
'
PROCEDURE break
  ~XBIOS(5,L:old_logical%,L:old_logical%,W:-1)  ! to restore normal screen
  EDIT                                          ! else gfa will display
RETURN                                          ! everything in our logical
'                                               ! screen, not on screen !
'
PROCEDURE error
  ~XBIOS(5,L:old_logical%,L:old_logical%,W:-1)  ! Same thing
  EDIT
RETURN
PROCEDURE load_neo(a$,adr%)
  '
  pal$=SPACE$(32)               ! A little bit of space
  pal%=V:pal$                   ! for palette colours
  '
  OPEN "i",#1,a$                ! Open the file
  '
  SEEK #1,4                     ! Jump 4 bytes, no needed
  BGET #1,pal%,32               ! Get the pal
  SEEK #1,128                   ! Seek Neo header
  BGET #1,adr%,32000            ! Read the picture
  '
  CLOSE #1                      ! Close the file
  '
  ~XBIOS(6,L:pal%)              ! Put the pal by a xbios call
  '
RETURN
