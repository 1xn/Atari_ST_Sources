RESERVE
DIM sprite$(2,8)
DIM masque$(2,8)
DIM more_sauve$(2),sauve$(2)
DIM old_x%(2),old_y%(2),more_old_x%(2),more_old_y%(2),anime%(2)
DIM decor%(20,12)
DIM en_anime!(2)
DIM module$(2)
DIM px%(1),py%(1),cdx%(1),cdy%(1)
RESERVE 30000
'
HIDEM
palette%=MALLOC(32)
buffer1%=MALLOC(32260)
buffer2%=MALLOC(32260)
ecran1%=(buffer1% AND &HFFFF00)+256
ecran2%=(buffer2% AND &HFFFF00)+256
'
adr_phy%=XBIOS(2)
adr_log%=XBIOS(3)
rez&=XBIOS(4)
' mdecode&=XBIOS(88,W:-1)       ! uniquement sur FALCON!
'
VOID XBIOS(5,L:ecran1%,L:ecran2%,W:0)   !Rajoutez le modecode sur FALCON!
charge_pi1("A:SPRITES.PI1")
setpalette(palette%)
coupe_sprites
coupe_modules
cree_decor
BMOVE ecran1%,ecran2%,32000
'
more_old_x%(0)=-1
old_x%(0)=-1    ! Nouveau sprite
anime%(0)=1     ! premiere image
pos_x%=160   ! position x de d‚part
pos_y%=96    ! position y de d‚part
'
more_old_x%(1)=-1 ! Nouveau sprite.
old_x%(1)=-1      ! Nouveau sprite.
anime%(1)=1       ! premiŠre image.
en_anime!(1)=1    ! En animation.
px%(0)=16         ! d‚part position x.
py%(0)=16         ! d‚part position y.
cdx%(0)=2         ! coefficients...
cdy%(0)=1         ! directeur x et y.
'
' more_old_x%(2)=-1
' old_x%(2)=-1
' anime%(2)=1
' en_anime!(2)=1
' px%(1)=288
' py%(1)=160
' cdx%(1)=-1
' cdy%(1)=-2
'
DO
  '
  en_anime!(0)=STRIG(1)
  test_joystick
  test_monstres(0)
  '  test_monstres(1)
  '
  restor_decor(0)
  restor_decor(1)
  ' restor_decor(2)
  '
  sauve_decor(0,pos_x%,pos_y%)
  sauve_decor(1,px%(0),py%(0))
  ' sauve_decor(2,px%(1),py%(1))
  '
  affiche_sprite(0,2,pos_x%,pos_y%)
  affiche_sprite(1,1,px%(0),py%(0))
  ' affiche_sprite(2,1,px%(1),py%(1))
  '
  SWAP ecran1%,ecran2%
  VOID XBIOS(5,L:ecran1%,L:ecran2%,W:-1)
  VSYNC
LOOP UNTIL INKEY$<>""
'
VOID XBIOS(5,L:adr_log%,L:adr_phy%,W:rez&,W:modecode&)
VOID MFREE(palette%)
VOID MFREE(buffer1%)
VOID MFREE(buffer2%)
SHOWM
~MOUSEK
END
'
' ------------------------------------------------- PROCEDURE & FUNCTION
'
' ******************************
' * chargement d'une image PI1 *
' ******************************
> PROCEDURE charge_pi1(nom$)
  OPEN "i",#3,nom$
  ' on saute les 2 octets de la resolution
  SEEK #3,2
  ' on charge les 32 octets de la palette
  BGET #3,palette%,32
  ' puis les 32000 octets de l'image.
  BGET #3,ecran1%,32000
  CLOSE #3
RETURN
' ****************************************
' * Mise en place d'une nouvelle palette *
' ****************************************
> PROCEDURE setpalette(adr%)
  ' On utilise ici la fonction 6 du XBIOS
  VOID XBIOS(6,L:adr%)
RETURN
' *******************************************
' * Decoupe des sprites et de leurs masques *
' *******************************************
> PROCEDURE coupe_sprites
  ' On decoupe d'abord les sprites
  FOR i%=0 TO 7
    x%=16*i%
    GET x%,0,x%+15,15,sprite$(1,i%+1)
    GET x%,16,x%+15,31,sprite$(2,i%+1)
  NEXT i%
  ' On decoupe ensuite leurs masques
  FOR i%=0 TO 7
    x%=(16*i%)+(8*16)
    GET x%,0,x%+15,15,masque$(1,i%+1)
    GET x%,16,x%+15,31,masque$(2,i%+1)
  NEXT i%
RETURN
' ******************************************
' * Decoupe des modules pour cree le decor *
' ******************************************
> PROCEDURE coupe_modules
  GET 256,0,271,15,module$(1)
  GET 272,0,288,15,module$(2)
RETURN
' **********************
' * affichage du decor *
' **********************
> PROCEDURE cree_decor
  '
  ' On ce place au debut des DATA
  '
  RESTORE decor1
  '
  ' on boucle sur 12 lignes (192/16=12)
  '
  FOR y%=0 TO 11*16 STEP 16
    '
    ' Et sur 20 colones (320/16=20)
    '
    FOR x%=0 TO 19*16 STEP 16
      '
      ' On lit le numero du module dans les data
      '
      READ numero_module%
      '
      ' Puis on l'affiche sur l'ecran
      '
      PUT x%,y%,module$(numero_module%)
      decor%(x%/16,y%/16)=numero_module%
    NEXT x%
  NEXT y%
decor1:
  DATA 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
  DATA 2,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2
  DATA 2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2
  DATA 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
RETURN
' *********************
' * restaure le decor *
' *********************
> PROCEDURE restor_decor(nbr%)
  '
  ' si on n'affiche pas le sprite pour la 1ere
  ' fois, on efface son anciene position.
  '
  IF more_old_x%(nbr%)<>-1
    PUT more_old_x%(nbr%),more_old_y%(nbr%),more_sauve$(nbr%)
  ENDIF
RETURN
' ******************
' * sauve le decor *
' ******************
> PROCEDURE sauve_decor(nbr%,x%,y%)
  '
  ' On sauvegarde le decor sous le sprite
  '
  more_sauve$(nbr%)=sauve$(nbr%)
  GET x%,y%,x%+15,y%+15,sauve$(nbr%)
RETURN
' ********************
' * Affichage sprite *
' ********************
> PROCEDURE affiche_sprite(nbr%,bnk%,x%,y%)
  '
  ' On anime le sprite si "en_anime!" est vrai.
  '
  IF en_anime!(nbr%)
    IF anime%(nbr%)<8
      anime%(nbr%)=anime%(nbr%)+1
    ELSE
      anime%(nbr%)=1
    ENDIF
  ENDIF
  '
  ' On fait un trou dans le decor avec
  ' le masque correspondant au sprite.
  '
  PUT x%,y%,masque$(bnk%,anime%(nbr%)),4
  '
  ' On pose notre sprite.
  '
  PUT x%,y%,sprite$(bnk%,anime%(nbr%)),7
  '
  ' Et pour finir on sauve les coordon‚es
  ' pour la prochaine fois.
  '
  more_old_x%(nbr%)=old_x%(nbr%)
  more_old_y%(nbr%)=old_y%(nbr%)
  old_x%(nbr%)=x%
  old_y%(nbr%)=y%
RETURN
' ******************************
' * Test de direction JOYSTICK *
' ******************************
> PROCEDURE test_joystick
  '
  ' Suivant la valeur du JOYSTICK
  ' on execute la routine correspondante
  '
  SELECT STICK(1)
  CASE 1
    haut
  CASE 2
    bas
  CASE 4
    gauche
  CASE 8
    droite
  CASE 9
    haut
    droite
  CASE 5
    haut
    gauche
  CASE 6
    bas
    gauche
  CASE 10
    bas
    droite
  ENDSELECT
RETURN
' *************************
' * deplacement du sprite *
' *************************
> PROCEDURE haut
  LOCAL cx%,cy%
  '
  ' Si on n'est pas d‚j… au max en
  ' haut et que la case du dessus
  ' n'est pas un mur...
  '
  cx%=pos_x%/16
  cy%=(pos_y%-2)/16
  IF pos_y%>1 AND decor%(cx%,cy%)<>2
    '
    ' Si le sprite n'est pas … cheval
    ' sur deux cases, on monte.
    ' Sinon on ne monte que si la
    ' case au-dessus … droite n'est
    ' pas un mur.
    '
    IF cx%=pos_x%/16
      pos_y%=pos_y%-2
    ELSE IF decor%(cx%+1,cy%)<>2
      pos_y%=pos_y%-2
    ENDIF
  ENDIF
RETURN
> PROCEDURE bas
  LOCAL cx%,cy%
  '
  ' Si on n'est pas d‚j… au max en
  ' bas et que la case du dessous
  ' n'est pas un mur...
  '
  cx%=pos_x%/16
  cy%=(pos_y%+2+15)/16
  IF pos_y%<175 AND decor%(cx%,cy%)<>2
    '
    ' Si le sprite n'est pas … cheval
    ' sur deux cases, on descend.
    ' Sinon on ne descend que si la
    ' case au-dessus … droite n'est
    ' pas un mur.
    '
    IF cx%=pos_x%/16
      pos_y%=pos_y%+2
    ELSE IF decor%(cx%+1,cy%)<>2
      pos_y%=pos_y%+2
    ENDIF
  ENDIF
RETURN
> PROCEDURE droite
  LOCAL cx%,cy%
  '
  ' Si on n'est pas d‚j… au max …
  ' droite et que la case de droite
  ' n'est pas un mur...
  '
  cx%=(pos_x%+2+15)/16
  cy%=pos_y%/16
  IF pos_x%<303 AND decor%(cx%,cy%)<>2
    '
    ' Si le sprite n'est pas … cheval
    ' sur deux cases, on va … droite.
    ' Sinon on ne va … droite que si la
    ' case … droite en dessous n'est
    ' pas un mur.
    '
    IF cy%=pos_y%/16
      pos_x%=pos_x%+2
    ELSE IF decor%(cx%,cy%+1)<>2
      pos_x%=pos_x%+2
    ENDIF
  ENDIF
RETURN
> PROCEDURE gauche
  LOCAL cx%,cy%
  '
  ' Si on n'est pas d‚j… au max …
  ' gauche et que la case de gauche
  ' n'est pas un mur...
  '
  cx%=(pos_x%-2)/16
  cy%=pos_y%/16
  IF pos_x%>1 AND decor%(cx%,cy%)<>2
    '
    ' Si le sprite n'est pas … cheval
    ' sur deux cases, on va … gauche.
    ' Sinon on ne va … gauche que si la
    ' case … gauche en dessous n'est
    ' pas un mur.
    '
    IF cy%=pos_y%/16
      pos_x%=pos_x%-2
    ELSE IF decor%(cx%,cy%+1)<>2
      pos_x%=pos_x%-2
    ENDIF
  ENDIF
RETURN
' ******************************
' * Test de direction monstres *
' ******************************
> PROCEDURE test_monstres(n%)
  '
  ' Suivant la valeur des
  ' coeficients directeurs
  ' on execute la routine
  ' correspondante.
  '
  IF cdx%(n%)>0
    @mdroite(n%)
  ELSE IF cdx%(n%)<0
    @mgauche(n%)
  ENDIF
  IF cdy%(n%)>0
    @mbas(n%)
  ELSE IF cdy%(n%)<0
    @mhaut(n%)
  ENDIF
RETURN
' ****************************
' * deplacement des mechants *
' ****************************
> PROCEDURE mhaut(n%)
  LOCAL cx%,cy%,npy%
  '
  ' Si il n'est pas d‚j… au max en
  ' haut et que la case du dessus
  ' n'est pas un mur, il monte.
  ' Sinon il rebondit vers le bas.
  '
  npy%=py%(n%)+cdy%(n%)
  cx%=px%(n%)/16
  cy%=npy%/16
  IF npy%>-1 AND decor%(cx%,cy%)<>2
    '
    ' Si le sprite n'est pas … cheval
    ' sur deux cases, on monte.
    ' Sinon on ne monte que si la
    ' case au-dessus … droite n'est
    ' pas un mur.
    ' Sinon il rebondit vers le bas.
    '
    IF cx%=px%(n%)/16
      py%(n%)=npy%
    ELSE IF decor%(cx%+1,cy%)<>2
      py%(n%)=npy%
    ELSE
      cdy%(n%)=-(cdy%(n%))
      @mbas(n%)
    ENDIF
  ELSE
    cdy%(n%)=-(cdy%(n%))
    @mbas(n%)
  ENDIF
RETURN
> PROCEDURE mbas(n%)
  LOCAL cx%,cy%,npy%
  '
  ' Si il n'est pas d‚j… au max en
  ' bas et que la case du dessous
  ' n'est pas un mur, il descend.
  ' Sinon il rebondit vers le haut.
  '
  npy%=py%(n%)+cdy%(n%)
  cx%=px%(n%)/16
  cy%=(npy%+15)/16
  IF npy%<176 AND decor%(cx%,cy%)<>2
    '
    ' Si le sprite n'est pas … cheval
    ' sur deux cases, il descend.
    ' Sinon il ne descend que si la
    ' case au-dessous et … droite
    ' n'est pas un mur.
    ' Sinon il rebondit vers le haut.
    '
    IF cx%=px%(n%)/16
      py%(n%)=npy%
    ELSE IF decor%(cx%+1,cy%)<>2
      py%(n%)=npy%
    ELSE
      cdy%(n%)=-(cdy%(n%))
      @mhaut(n%)
    ENDIF
  ELSE
    cdy%(n%)=-(cdy%(n%))
    @mhaut(n%)
  ENDIF
RETURN
> PROCEDURE mdroite(n%)
  LOCAL cx%,cy%,npx%
  '
  ' Si il n'est pas d‚j… au max …
  ' droite et que la case de droite
  ' n'est pas un mur.
  ' Sinon il rebondit … gauche
  '
  npx%=px%(n%)+cdx%(n%)
  cx%=(npx%+15)/16
  cy%=py%(n%)/16
  IF npx%<304 AND decor%(cx%,cy%)<>2
    '
    ' Si le sprite n'est pas … cheval
    ' sur deux case, on va … droite.
    ' Sinon on ne va … droite que si
    ' la case … droite en dessous
    ' n'est pas un mur.
    ' Sinon il rebondit … gauche.
    '
    IF cy%=py%(n%)/16
      px%(n%)=npx%
    ELSE IF decor%(cx%,cy%+1)<>2
      px%(n%)=npx%
    ELSE
      cdx%(n%)=-(cdx%(n%))
      @mgauche(n%)
    ENDIF
  ELSE
    cdx%(n%)=-(cdx%(n%))
    @mgauche(n%)
  ENDIF
RETURN
> PROCEDURE mgauche(n%)
  LOCAL cx%,cy%,npx%
  '
  ' Si on n'est pas d‚j… au max …
  ' gauche et que la case de gauche
  ' n'est pas un mur.
  ' Sinon il rebondit … droite.
  '
  npx%=px%(n%)+cdx%(n%)
  cx%=npx%/16
  cy%=py%(n%)/16
  IF npx%>-1 AND decor%(cx%,cy%)<>2
    '
    ' Si le sprite n'est pas … cheval
    ' sur deux case, on va … gauche.
    ' Sinon on ne va … gauche que si la
    ' case … gauche en dessous n'est
    ' pas un mur.
    ' Sinon il rebondit … droite.
    '
    IF cy%=py%(n%)/16
      px%(n%)=npx%
    ELSE IF decor%(cx%,cy%+1)<>2
      px%(n%)=npx%
    ELSE
      cdx%(n%)=-(cdx%(n%))
      @mdroite(n%)
    ENDIF
  ELSE
    cdx%(n%)=-(cdx%(n%))
    @mdroite(n%)
  ENDIF
RETURN
