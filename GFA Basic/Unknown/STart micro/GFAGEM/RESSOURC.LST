' * Demonstration d'utilisation du GEM *
'
DIM input1$(100),actu1$(100)
DIM input2$(100),actu2$(100)
DIM input3$(100),actu3$(100)
DIM theme$(100)
'
DEFFILL 3
PBOX 0,0,639,199
'
GRAPHMODE 2
DEFTEXT 2,,,40
TEXT 175,25,"Ressource DEMO"
@load_rsc
'
DO
  '
  retour%=0
  '
  @gaddr(0)     ! Cherche l'adresse (adr%) de l'arbre nø0
  '
  redraw=TRUE
  @treat
  @clean   ! On remet les boutons en ‚tat
  '
  SELECT retour%
  CASE 1
    @nouvelle_fiche
    '
  CASE 2
    @charger_fiche
    @mod_fiches
    '
  CASE 3
    @free_rsc
    EDIT
    '
  ENDSELECT
LOOP
'
PROCEDURE nouvelle_fiche
  ' *************************************
  ' * SAISIE DES INFORMATIONS GENERALES *
  ' *************************************
  @gaddr(1)             ! Adresse de l'arbre Nø1, c'est-…-dire le 2Šme
  @infos
  '
  ' ******************************
  ' *  CHOIX DE LA RUBRIQUE      *
  ' ******************************
  '
  @gaddr(2)
  redraw=TRUE
  @treat
  @clean
  '
  IF retour%=1 ! Choix de la rubrique 'ACTUALITES'
    @actu
  ENDIF
  '
  @sauve_fiche  ! Sauvegarde toutes les donn‚es
  @free_rsc
RETURN
'
PROCEDURE infos
  ' ***********************************
  ' * Infos: num‚ro, date de parution *
  ' *  commentaires                   *
  ' ***********************************
  '
  DO
    redraw=TRUE ! On redessine tout
    @treat
    @clean
    '
    num$=CHAR{{OB_SPEC(adr%,2)}}    ! Attribution des champs saisis aux
    par$=CHAR{{OB_SPEC(adr%,4)}}    ! variables
    com1$=CHAR{{OB_SPEC(adr%,6)}}   !
    com2$=CHAR{{OB_SPEC(adr%,7)}}   !
    '
    @mod_num                    ! On donne la bonne longueur
    @mod_parution               ! aux donn‚es. Attention, cette
    @mod_coms                   ! ‚tape est OBLIGATOIRE
    EXIT IF num$<>"___"         ! RepŠte tant que le numero est invalide
  LOOP
  '
RETURN
'
PROCEDURE actu
  ' **********************************
  ' * Traitement des infos relatives *
  ' *         … l'actualit‚          *
  ' **********************************
  '
  theme$="ACTU"
  @gaddr(3)
  chaine$="START Nø"+num$           ! Affichage d'un texte dans
  CHAR{{OB_SPEC(adr%,6)}}=chaine$   ! une BOXTEXT
  '
  redraw=TRUE
  @treat
  @clean
  @mod_coms
  '
  actu1$=CHAR{{OB_SPEC(adr%,3)}}   ! Attribue aux variables
  actu2$=CHAR{{OB_SPEC(adr%,4)}}   ! les donn‚es saisies
  actu3$=CHAR{{OB_SPEC(adr%,5)}}   ! dans 3,4 et 5
  '
  @mod_actu                        ! Formatage des entr‚es
  '
RETURN
'
PROCEDURE charger_fiche
  ' **********************************
  ' *      On charge une fiche       *
  ' **********************************
  '
  FILESELECT "A:\*.STT","",file$   ! S‚lecteur de fichier
  '
  OPEN "I",#1,file$                ! Ouverture en LECTURE
  long=LOF(#1)                     ! D‚termine la longueur du fichier
  nb_fiche=(long-(73))/(96+6)    ! Calcule le nombre de fiches
  '
  ' ****************************
  ' * Charge donnees generales *
  ' ****************************
  '
  INPUT #1,num$            ! Attribution des valeurs lues
  INPUT #1,par$            ! dans les fichier aux variables
  INPUT #1,com1$           !
  INPUT #1,com2$           !
  '
  ' *******************************
  ' * Charge donn‚es des fiches   *
  ' *******************************
  '
  FOR fiche=1 TO nb_fiche       ! Chargement de tout le
    INPUT #1,theme$(fiche)      ! reste du fichier
    INPUT #1,input1$(fiche)
    INPUT #1,input2$(fiche)
    INPUT #1,input3$(fiche)
  NEXT fiche
  '
  CLOSE #1
RETURN
'
PROCEDURE mod_fiches
  ' ***********************************
  ' * Modification de fiches charg‚es *
  ' ***********************************
  '
  gaddr(4)
  fiche=1
  CHAR{{OB_SPEC(adr%,6)}}=STR$(fiche)   ! Affichage dans une
  CHAR{{OB_SPEC(adr%,4)}}=theme$(fiche) ! BOXTEXT
  redraw=TRUE
  @treat
  @clean
  '
  ' *****************************
  ' * On gŠre les fleches :     *
  ' * scrolling des fiches      *
  ' *****************************
  '
  DO
    '
    IF retour%=2 AND fiche+1<=nb_fiche
      INC fiche
      CHAR{{OB_SPEC(adr%,6)}}=STR$(fiche)
    ENDIF
    '
    IF retour%=3 AND fiche-1>0
      DEC fiche
      CHAR{{OB_SPEC(adr%,6)}}=STR$(fiche)
    ENDIF
    '
    @clean
    '
    CHAR{{OB_SPEC(adr%,4)}}=theme$(fiche)
    '
    ~OBJC_DRAW(adr%,4,1,x%,y%,w%,h%) ! Redessine les boutons
    ~OBJC_DRAW(adr%,2,1,x%,y%,w%,h%) ! et les BOXTEXT = mise
    ~OBJC_DRAW(adr%,3,1,x%,y%,w%,h%) ! … jour
    ~OBJC_DRAW(adr%,6,1,x%,y%,w%,h%)
    '
    EXIT IF retour%=5
    '
    redraw=FALSE
    @treat
    @clean
    '
  LOOP
  '
  '
  @gaddr(1)
  CHAR{{OB_SPEC(adr%,2)}}=num$  ! Attribue les variables aux
  CHAR{{OB_SPEC(adr%,4)}}=par$  ! champs 2,4,6 et 7
  CHAR{{OB_SPEC(adr%,6)}}=com1$
  CHAR{{OB_SPEC(adr%,7)}}=com2$
  '
  @infos
  '
  num$=CHAR{{OB_SPEC(adr%,2)}}          ! R‚cupŠre les entr‚es
  par$=CHAR{{OB_SPEC(adr%,4)}}
  com1$=CHAR{{OB_SPEC(adr%,6)}}
  com2$=CHAR{{OB_SPEC(adr%,7)}}
  '
  IF theme$(fiche)="ACTU"
    @gaddr(3)
    CHAR{{OB_SPEC(adr%,3)}}=input1$(fiche)
    CHAR{{OB_SPEC(adr%,4)}}=input2$(fiche)
    CHAR{{OB_SPEC(adr%,5)}}=input3$(fiche)
    '
    @actu       ! GŠre l'actualit‚ avec les donn‚es charg‚es
    '
    actu1$(fiche)=CHAR{{OB_SPEC(adr%,3)}}  ! Attribue les entr‚es aux
    actu2$(fiche)=CHAR{{OB_SPEC(adr%,4)}}  ! ‚l‚ments des tableaux
    actu3$(fiche)=CHAR{{OB_SPEC(adr%,5)}}
    '
    ALERT 1,"     D‚sirez-vous     |     sauver les     |
 modifications?     ",1,"oui|non",bouton%
    IF bouton%=1
      '
      theme$=theme$(fiche)
      actu1$=actu1$(fiche)
      actu2$=actu2$(fiche)
      actu3$=actu3$(fiche)
      @sauve_old_fiche
    ENDIF
    '
  ENDIF
  '
  ' ***********************************
  ' * Ajoutez ici les traitements des *
  ' * autres rubriques(jeu, musique..)*
  ' ***********************************
  '
RETURN
PROCEDURE sauve_fiche
  FILESELECT "A:\*.STT",num$+".STT",file$
  IF EXIST(file$)
    OPEN "a",#1,file$
  ELSE
    OPEN "o",#1,file$
    PRINT #1,num$
    PRINT #1,par$
    PRINT #1,com1$
    PRINT #1,com2$
  ENDIF
  '
  PRINT #1,theme$
  IF theme$="ACTU"
    PRINT #1,actu1$
    PRINT #1,actu2$
    PRINT #1,actu3$
  ENDIF
  '
  ' *************************************
  ' *  Ajoutez ici les commentaires des *
  ' *  autres rubriques que vous avez   *
  ' *  rajout‚                          *
  ' *************************************
  CLOSE #1
RETURN
'
'
PROCEDURE sauve_old_fiche
  FILESELECT "A:\*.STT",num$+".STT",file$
  OPEN "o",#1,file$
  PRINT #1,num$
  PRINT #1,par$
  PRINT #1,com1$
  PRINT #1,com2$
  '
  FOR fiche=1 TO nb_fiche
    PRINT #1,theme$(fiche)
    IF theme$(fiche)="ACTU"
      PRINT #1,actu1$(fiche)
      PRINT #1,actu2$(fiche)
      PRINT #1,actu3$(fiche)
    ENDIF
    '
    ' ***************************
    ' * Ici, vous pouvez sauver *
    ' * les autres rubriques    *
    ' ***************************
    '
  NEXT fiche
  '
  CLOSE #1
RETURN
'
PROCEDURE load_rsc
  ' *******************************
  ' *   Chargement du fichier     *
  ' *         ressource           *
  ' *******************************
  '
  IF RSRC_LOAD("test2.rsc")=0
    ~FORM_ALERT(1,"[3][| |fichier RSC non trouv‚.][Fin]")
  ENDIF
RETURN
'
PROCEDURE gaddr(tree%)
  ' ********************************
  ' * Donne l'adresse de l'arbre   *
  ' ********************************
  '
  ~RSRC_GADDR(0,tree%,adr%)
RETURN
'
PROCEDURE treat
  ~FORM_CENTER(adr%,x%,y%,w%,h%)
  ~FORM_DIAL(0,0,0,0,0,x%,y%,w%,h%)
  ~FORM_DIAL(1,0,0,0,0,x%,y%,w%,h%)
  IF redraw=TRUE
    ~OBJC_DRAW(adr%,0,5,x%,y%,w%,h%)
  ENDIF
  retour%=FORM_DO(adr%,0)
  ~FORM_DIAL(2,0,0,0,0,x%,y%,w%,h%)
  ~FORM_DIAL(3,0,0,0,0,x%,y%,w%,h%)
RETURN
PROCEDURE free_rsc
  ~RSRC_FREE()
RETURN
'
PROCEDURE mod_coms
  '
  IF LEN(com1$)<25
    FOR i=LEN(com1$) TO 24
      com1$=com1$+"_"
    NEXT i
  ENDIF
  '
  IF LEN(com2$)<25
    FOR i=LEN(com2$) TO 24
      com2$=com2$+"_"
    NEXT i
  ENDIF
  '
RETURN
'
PROCEDURE mod_num
  IF LEN(num$)<3
    FOR i=LEN(num$) TO 2
      num$=num$+"_"
    NEXT i
  ENDIF
RETURN
'
PROCEDURE mod_parution
  IF LEN(par$)<12
    FOR i=LEN(par$) TO 11
      par$=par$+"_"
    NEXT i
  ENDIF
RETURN
'
PROCEDURE mod_actu
  IF LEN(actu1$)<30
    FOR i=LEN(actu1$) TO 29
      actu1$=actu1$+"_"
    NEXT i
  ENDIF
  '
  IF LEN(actu2$)<30
    FOR i=LEN(actu2$) TO 29
      actu2$=actu2$+"_"
    NEXT i
  ENDIF
  '
  IF LEN(actu3$)<30
    FOR i=LEN(actu3$) TO 29
      actu3$=actu3$+"_"
    NEXT i
  ENDIF
RETURN
'
PROCEDURE clean
  ' *******************************************
  ' * Cette procedure met le bit SELECTED des *
  ' * boutons EXIT non gris‚s … 0             *
  ' *******************************************
  FOR obj%=1 TO 15
    IF BTST(OB_STATE(adr%,obj%),0) AND NOT BTST(OB_STATE(adr%,obj%),3)
      ~OBJC_CHANGE(adr%,obj%,0,x%,y%,w%,h%,0,0)
    ENDIF
  NEXT obj%
RETURN
