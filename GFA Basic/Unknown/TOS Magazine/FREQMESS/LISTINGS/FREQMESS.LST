' Dreifingergriff verbieten
ON BREAK CONT
' OPTION "U0" -> fÅr den Compiler
' Fehler abfangen
ON ERROR GOSUB err_handle
' Mauszeiger ausschalten
HIDEM
' Bildschirm lîschen
CLS
' Nicht gleich wieder abbrechen
exit_flag%=FALSE
' Graphicmodus: ersetzen
GRAPHMODE 1
' Auflîsung feststellen und wenn <>2, dann raus
IF XBIOS(4)<>2 THEN
  SHOWM
  dummy$="[3][Das Programm lÑuft|nur in der hohen|ST-Auflîsung!|(640x400)][OK]"
  ~FORM_ALERT(1,dummy$)
  END
ENDIF
' TeilverhÑltnis fÅr weitere Vorteiler
teil=1
' Einheit = kHz
einh%=1
' erster Rangebereich
m%=1
malt%=0
' Das Array fÅr die graphische Ausgabe
DIM werte(600)
' Grenzfrequenzen einlesen
DIM mbereich(4,1)
FOR i%=1 TO 4
  READ mbereich(i%,0),mbereich(i%,1)
NEXT i%
' Anzahl der Nachkommastellen einlesen
DIM nkomma%(4,4)
FOR i%=1 TO 4
  FOR z%=1 TO 4
    READ nkomma%(i%,z%)
  NEXT z%
NEXT i%
' Tastaturabfrage ein
no_check%=FALSE
' Maske in den Bildschirmspeicher laden
screen%=XBIOS(2)
BLOAD "\FREQMESS\FREQMESS.DOO",screen%
' Maus im IKBD abschalten
mouse_off
' Zeit fÅr 1s
z%=116
za%=0
zn%=3
' Hardware reseten
reset_counter
' Und richtigen Vorteiler einschalten
~XBIOS(28,(m% AND 3),143)
' Hier werden beim Aufruf des Assembler-Prgs die Register abgespeichert
DIM reg%(16)
' Speicher fÅr das Assembler-Prg reservieren
adr%=MALLOC(300)
' Assembler-Prg laden
BLOAD "\FREQMESS\FREQMESS.EXE",adr%
' und los geht's
PRINT AT(7,23);"Hard- und Software Ω by T.Peuû und T.Mokler"
REPEAT
  ' Messwerte aufnehmen
  messen
  ' Mit eingestelltem VorteilerverhÑltnis mal nehmen
  erg_out=erg*teil
  IF ntime% OR ranged% THEN
    clear_display
    GOTO no_out
  ELSE
    ' Je nach Betriebsmodus Ergebnis anders ausgeben
    IF rflag% THEN
      ptext(230,64,erg_out/rel,nkomma%(za%,m%),2)
    ELSE IF tflag%
      ptext(230,64,1000/(erg_out+1.0E-10),nkomma%(za%,m%),0)
    ELSE
      ptext(230,64,erg_out,nkomma%(za%,m%),einh%)
    ENDIF
  ENDIF
no_out:
  ntime%=0
UNTIL exit_flag%
mouse_on
~MFREE(adr%)
SHOWM
END
' Procedure zum Messwert ausgeben
PROCEDURE ptext(x%,y%,zahl,n%,mflag%)
  LOCAL z%,v%,v$,sv%,sn%,zahl$,z$,d$,m$,i%
  v%=8
  v$=" "
  IF (LEN(v$)<>1 OR zahl>999999999) THEN
    d$="*********.****     "
    GOTO out
  ENDIF
  zahl=ROUND(zahl,n%)
  zahl$=STR$(zahl)
  z%=LEN(zahl$)
  sv%=LEN(STR$(INT(zahl)))
  sn%=z%-sv%-1
  IF sv%>v% THEN
    d$="*********.****     "
    GOTO out
  ENDIF
  z$=" "+STRING$(v%-sv%,v$)+zahl$+STRING$(n%-sn%,"0")
  z%=LEN(z$)
  d$=""
  FOR i%=1 TO z%
    m$=MID$(z$,i%,1)
    SELECT m$
    CASE " "
      d$=d$+" "
      GOTO endp
    ENDSELECT
    d$=d$+CHR$(ASC(m$)-32)
  endp:
  NEXT i%
  ' je nach Flag die richtige Einheit anhÑngen
  SELECT mflag%
  CASE 0
    d$=d$+" Ês    "
  CASE 1
    d$=d$+" kHz   "
  CASE 2
    d$=d$+"       "
  ENDSELECT
  '
  d$=LEFT$(d$,v%+1)+"."+RIGHT$(d$,n%+7)
out:
  DEFTEXT 1,0,0,26
  TEXT x%,y%,d$
RETURN
' Procedure zum Tastatur ÅberprÅfen
PROCEDURE check_keyb
  ' richtige Felder invertieren
  IF zn%<>0 THEN
    IF za%<>0 THEN
      switch(57+88*(za%-1),221,129+88*(za%-1),259)
    ENDIF
    switch(57+88*(zn%-1),221,129+88*(zn%-1),259)
    za%=zn%
    zn%=0
  ENDIF
  IF malt%=0 THEN
    switch(57+88*(m%-1),165,129+88*(m%-1),203)
    malt%=m%
  ENDIF
  IF malt%<>m% THEN
    switch(57+88*(malt%-1),165,129+88*(malt%-1),203)
    switch(57+88*(m%-1),165,129+88*(m%-1),203)
    malt%=m%
  ENDIF
  ' Tastatur abfragen
  a$=UPPER$(INKEY$)
  '
  SELECT a$
    ' keine Taste -> raus
  CASE ""
    GOTO end_check
    ' Quit mit Abfrage
  CASE "Q"
    clear_dialog
    PRINT AT(7,23);"Wollen Sie das Programm wirklich verlassen (J/N)?";
    REPEAT
      a$=UPPER$(INKEY$)
    UNTIL (a$="J" OR a$="N")
    PRINT " ";a$
    clear_dialog
    IF a$="J" THEN
      exit_flag%=1
      PRINT AT(7,23);"Aufwiedersehen bis zum nÑchsten Mal!"
      PAUSE 25
    ENDIF
    GOTO end_check
    ' Reset
  CASE "R"
    ~MFREE(adr%)
    mouse_on
    RUN
    ' Messzeit 10ms
  CASE "1"
    z%=2
    zn%=1
    clear_display
    ntime%=TRUE
    GOTO end_check1
    ' Messzeit 0.1s
  CASE "2"
    z%=12
    zn%=2
    clear_display
    ntime%=TRUE
    GOTO end_check1
    ' Messzeit 1s
  CASE "3"
    z%=116
    zn%=3
    clear_display
    ntime%=TRUE
    GOTO end_check1
    ' Messzeit 10s
  CASE "4"
    z%=1160
    zn%=4
    clear_display
    ntime%=TRUE
    GOTO end_check1
    ' VorteilerverhÑltnis
  CASE "V"
    clear_dialog
    PRINT AT(7,23);"VorteilerverhÑltnis (x:1) ";
    INPUT vor$
    dummy=VAL(vor$)
    IF dummy>=1 THEN
      teil=dummy
    ELSE
      clear_dialog
      PRINT AT(7,23);"Nur Vorteilergrîûen >=1 sind mîglich!"
    ENDIF
    clear_dialog
    GOTO end_check
    ' Auflîsung
  CASE "A"
    clear_dialog
    dummy=(2*16^(m%-1)*teil)/z%
    PRINT AT(7,23);"Auflîsung in Hertz : ";ROUND(dummy,4)
    GOTO end_check
    ' Hold
  CASE "H"
    IF tflag% THEN
      ptext(230,140,1000/(erg_out+1.0E-11),nkomma%(za%,m%),0)
    ELSE IF NOT rflag%
      ptext(230,140,erg_out,nkomma%(za%,m%),einh%)
    ENDIF
    GOTO end_check
    ' Frequenzen relativ zu einer Anderen
  CASE "L"
    IF NOT rflag% THEN
      clear_dialog
      PRINT AT(7,23);"Relativ-Frequenz eingeben : ";
      INPUT dummy$
      dummy=VAL(dummy$)
      clear_dialog
      IF dummy<=0 THEN
        PRINT AT(7,23);"Nur Relativfrequenzen >0 sind mîglich!"
      ELSE
        rel=dummy
        rflag%=TRUE
        ptext(230,140,dummy,nkomma%(za%,m%),einh%)
        switch(321,277,393,315)
        IF tflag% THEN
          tflag%=FALSE
          switch(409,277,481,315)
        ENDIF
      ENDIF
      GOTO end_check
    ELSE
      rflag%=FALSE
      switch(321,277,393,315)
    ENDIF
    GOTO end_check
    ' Frequenz oder Periodendauer
  CASE "F"
    IF rflag% THEN
      rflag%=FALSE
      switch(321,277,393,315)
    ENDIF
    switch(409,277,481,315)
    IF tflag% THEN
      tflag%=FALSE
    ELSE
      tflag%=TRUE
    ENDIF
    GOTO end_check
    ' Frequenzverlaufsdiagramm
  CASE "T"
    no_check%=TRUE
    anz%=0
    wmax=0
    clear_dialog
    PRINT AT(7,23);"Abstand zwischen den Messungen in s : ";
    INPUT dummy$
    p=ABS(VAL(dummy$))*50
    clear_dialog
    PRINT AT(7,23);"Messen unterbrechen mit Taste! Messwert Nr. : ";
    REPEAT
      PAUSE p
    neu_mess:
      messen
      IF ranged% THEN
        GOTO neu_mess
      ENDIF
      werte(anz%)=erg*teil
      IF wmax<werte(anz%) THEN
        wmax=werte(anz%)
      ENDIF
      INC anz%
      PRINT AT(55,23);anz%
    UNTIL anz%=601 OR INKEY$<>""
    DEC anz%
    skala=wmax
    dummy$=STR$(INT(skala)+1)
    skala=skala/10^(LEN(dummy$)-1)
    skala=INT(skala+1)*10^(LEN(dummy$)-1)
    SGET bild$
    CLS
    zeichnen
    REPEAT
      dummy$=UPPER$(INKEY$)
    UNTIL dummy$<>""
    TEXT 200,397,SPACE$(51)
    IF dummy$="A" THEN
      mouse_on
      SHOWM
      FILESELECT "","FT.PIC",dummy$
      IF dummy$<>"" AND dummy$<>"\" THEN
        BSAVE dummy$,screen%,32000
      ENDIF
      mouse_off
      HIDEM
    ENDIF
    SPUT bild$
    no_check%=FALSE
    clear_dialog
    GOTO end_check
    ' Hilfe
  CASE "?"
    hilfe
    GOTO end_check
  CASE "û"
    hilfe
    GOTO end_check
  ENDSELECT
end_check1:
  '
  IF za%=zn% THEN
    ntime%=FALSE
  ENDIF
  '
end_check:
RETURN
' Mausabfrage im IKBD abschalten
PROCEDURE mouse_off
  LOCAL adr%
  adr%=MALLOC(1)
  POKE adr%,&H12
  ~XBIOS(25,0,L:adr%)
  ~MFREE(adr%)
RETURN
' Mausabfrage im IKBD anschalten
PROCEDURE mouse_on
  LOCAL adr%
  adr%=MALLOC(1)
  POKE adr%,&H8
  ~XBIOS(25,0,L:adr%)
  ~MFREE(adr%)
RETURN
' Error-Handler
PROCEDURE err_handle
  mouse_on
  ~MFREE(adr%)
  SHOWM
  IF ERR=-33 THEN
    ~FORM_ALERT(1,"[1][Datei nicht gefunden!][Ok]")
  ELSE
    ~FORM_ALERT(1,ERR$(ERR))
  ENDIF
  END
RETURN
' Dialogfenster lîschen
PROCEDURE clear_dialog
  PRINT AT(7,23);SPACE$(69)
RETURN
' Hardwarevorteiler reseten
PROCEDURE reset_counter
  ' Pin 3 am Drucker-Port auf Low ziehen
  ~XBIOS(28,4,143)
RETURN
' Anzeige lîschen
PROCEDURE clear_display
  GRAPHMODE 1
  TEXT 80,64,SPACE$(29)
RETURN
' Buttons umschalten
PROCEDURE switch(x1%,y1%,x2%,y2%)
  GRAPHMODE 3
  PBOX x1%,y1%,x2%,y2%
  GRAPHMODE 1
RETURN
' Messwerte aufnehmen
PROCEDURE messen
  ranged%=FALSE
  sum=0
  FOR i%=1 TO z%
    IF no_check% THEN
      GOTO n_check
    ENDIF
    check_keyb
  n_check:
    ' Wenn Quit, dann raus
    EXIT IF exit_flag%
    ' Wenn neue Messzeit, dann raus
    EXIT IF ntime%
    ' Assembler-Prg aufrufen
    RCALL adr%,reg%()
    ' in x wird der Messwert in kHz abgespeichert
    x=(255-reg%(0))/10*16^(m%-1)
    ' Wenn Messwert zu klein, dann einen Rangebereich runter
    IF (x<mbereich(1,0) OR x<mbereich(m%,0)) AND m%>1 THEN
      DEC m%
      reset_counter
      ~XBIOS(28,(m% AND 3),143)
      ranged%=TRUE
    ENDIF
    ' Wenn Åberlauf im ZÑhler, dann ein Rangebereich hoch
    IF (reg%(1)<>0 OR x>mbereich(m%,1)) AND m%<4
      INC m%
      reset_counter
      ~XBIOS(28,(m% AND 3),143)
      ranged%=TRUE
    ENDIF
    ' Messwerte aufsummieren
    sum=sum+x
  NEXT i%
  ' Ergebnis =Summe der Messwerte/Anzahl der Messungen
  erg=sum/z%
RETURN
' Frequenzverlaufsdiagramm ausgeben
PROCEDURE zeichnen
  ' Iconschrift
  DEFTEXT 1,0,0,4
  ' X- und Y-Achse zeichnen
  DRAW 40,10 TO 40,380
  DRAW 40,10 TO 35,20
  DRAW 40,10 TO 45,20
  DRAW 40,380 TO 640,380
  DRAW 640,380 TO 630,375
  DRAW 640,380 TO 630,385
  ' Skala zeichnen
  FOR i%=0 TO 3
    DRAW 35,(i%*87.5)+30 TO 40,(i%*87.5)+30
    IF skala<1 THEN
      dummy$=STR$(ROUND((skala/4*(i%+1)),3))
      dummy=LEN(dummy$)
      dummy$=SPACE$(6-LEN(dummy$))+dummy$
      TEXT 0,295-i%*87.5,dummy$
    ELSE IF skala>999
      dummy$=STR$(ROUND((skala/4*(i%+1)),1))
      dummy$=SPACE$(6-LEN(dummy$))+dummy$
      TEXT 0,295-i%*87.5,dummy$
    ELSE
      dummy$=STR$(ROUND((skala/4*(i%+1)),2))
      dummy$=SPACE$(6-LEN(dummy$))+dummy$
      TEXT 0,295-i%*87.5,dummy$
    ENDIF
  NEXT i%
  FOR i%=80 TO 620 STEP 40
    DRAW i%,380 TO i%,385
    TEXT i%,390,STR$(i%-40)
  NEXT i%
  TEXT 580,397,"Messwerte"
  p=p/50
  TEXT 20,397,"Abstand : "+STR$(p+10^za%/1000)+" s"
  TEXT 200,397,"(A)bspeichern oder andere Taste fÅr raus"
  TEXT 5,7,"f in kHz"
  IF skala=0 THEN
    GOTO null
  ENDIF
  ' Kurve zeichnen
  DRAW 40,380-werte(0)/skala*350
  FOR i%=1 TO anz%
    DRAW  TO 40+i%,380-werte(i%)/skala*350
  NEXT i%
null:
RETURN
' Hilfefunktion
PROCEDURE hilfe
  SGET bild$
  CLS
  RESTORE text
  FOR x%=1 TO 23
    READ dummy$
    PRINT dummy$
  NEXT x%
  REPEAT
  UNTIL INKEY$<>""
  SPUT bild$
RETURN
' Grenzfrequenzen fÅr die Rangebereiche in kHz
DATA 0.0001,20
DATA 10,200
DATA 100,2000
DATA 1000,20000
' Anzahl der Nachkommastellen
DATA 1,0,0,0
DATA 2,1,0,0
DATA 3,2,1,0
DATA 4,3,2,1
'
text:
DATA ""
DATA "Hilfefunktion:"
DATA "=============="
DATA ""
DATA "A  Auflîsung  Zeigt die theoretisch erreichbare Genauigkeit in AbhÑngigkeit von"
DATA "              Meûzeit, Range-Bereich und Vorteiler an."
DATA "F  f/T        Umschaltung zwischen Frequenz- und Periodendaueranzeige."
DATA "H  Hold       HÑlt die aktuelle Anzeige im unteren Display fest. (Nicht bei"
DATA "              Relativ-Messungen!)"
DATA "L  f rel      Die Frequenz wird relativ zu einer einzugebenden Frequenz in kHz"
DATA "              gemessen."
DATA "Q  Quit       Verlassen des Programms!"
DATA "R  Reset      Versetzt das Programm und die Hardware in den Einschaltzustand."
DATA "T  f(t)       Miût 600 mal im Abstand von einer einzugebenden Zeit in Sekunden"
DATA "              plus aktuelle Meûzeit und zeichnet danach ein Diagramm."
DATA "V  Vorteiler  Bei Verwendung eines Vorteilers kann dessen TeilverhÑltnis"
DATA "              eingegeben werden, um die Anzeige zu korrigieren."
DATA "?  Hilfe      Ruft diese Hilfe-Seite auf."
DATA "1,2,3,4       Meûzeiten von 10 ms bis 10 s."
DATA ""
DATA ""
DATA ""
DATA "                              Bitte Taste drÅcken !"
