' Here are some functions that deal with all kinds
' of stuff concerning dates/times.  Just look at the
' routines to see how they work. An example should
' give you an idea of their usage. By the way, back
' in 1582 people started using the calender we still
' use today (Julian). Before that, things were very
' different: each year divisible by 4 was a leapyear,
' but after 1582 a year also has to be UNdevisible by
' 100, UNLESS it's devisible by 400.
' Therefore you cannot use these routines
' for dates earlier than 1583 ! The easter-routine
' only works for dates between 1600 and 2900. I don't
' really know why.. ask your local priest I guess.
'
' First the settings for GfA I always use. With my compiler it is
' ESSENTIAL to tell it to OPTION BASE 0 (arrays start with element
' zero). If I don't, the compiler I use (v3.5) will initiate (unlike
' my editor) at OPTION BASE 1, leaving me with a lot of bombs..
'
OPTION BASE 0     ! 1st element of array is number ZERO
DEFWRD "a-z"      ! all variables with no suffix are 2-byte signed WORDS
DEFLIST 4         ! show commands in CAPS, variables in lowercase
'
' an example:
'
language=1              ! 1=english,2=dutch,3=french,4=german,5=spanish
'
@dat_init                                 ! fill strings
IF @dat_tonum(DATE$,day,month,year)       ! datestring to numbers
  PRINT "Today it's : ";day$(@dat_wkday(day,month,year))';
  PRINT day';month$(month-1)';year
  PRINT
ENDIF
PRINT "My birthday:"
PRINT day$(@dat_wkday(12,4,year))';12';month$(4-1)';year
SELECT @dat_compare(12,4,year,day,month,year)
CASE 0  ! dates are equal
  PRINT "That's TODAY !"
CASE 1  ! second date is AFTER first date
  PRINT "Was ";@dat_dayspast(12,4,year,day,month,year);" days ago.."
CASE -1 ! second date is BEFORE first date
  PRINT "Will be in ";ABS(@dat_dayspast(12,4,year,day,month,year));" days.."
ENDSELECT
IF @dat_easter(day,month,year)
  PRINT
  PRINT "1st day of Easter: ";@dat_tostring$(day,month,year)
  PRINT "will be in week# : ";@dat_wknum(day,month,year)
ENDIF
IF @tim_tonum(TIME$,uur,minuut,seconde)    ! read current time
  IF @tim_12hourclock(uur)
    h12$=" PM"
  ELSE
    h12$=" AM"
  ENDIF
  PRINT
  PRINT "Time now: "+@tim_tostring$(uur,minuut,seconde)+h12$
ENDIF
PRINT
PRINT "Press key.."
~INP(2)
EDIT
'
DEFFN dat_leapyear(j)=AND((j MOD 4)=0,j MOD 100>0 OR j MOD 400=0)
'
DEFFN dat_gemget=GEMDOS(&H2A)                             ! Gemdos Tgetdate()
' after this you can @dat_gemread(date%,day,month,year)
' to translate the gemdos-word into variables
DEFFN dat_gemset(d,m,j)=GEMDOS(&H2B,@dat_gemmake(d,m,j))  ! Gemdos Tsetdate()
'
DEFFN tim_gemget=GEMDOS(&H2C)                             ! Gemdos Tgettime()
' after this you can @tim_gemread(time%,hour,minute,second)
' to translate the gemdos-word into variables
DEFFN tim_gemset(h,m,s)=GEMDOS(&H2D,@tim_gemmake(h,m,s))  ! Gemdos Tsettime()
'
> PROCEDURE dat_add_days(days,VAR d,m,j)    ! -> date in .. days
  ADD d,days
  IF d<1                                  ! counting backwards
    DO
      DEC m
      IF m<1
        m=12
        DEC j
      ENDIF
      ADD d,@dat_mnthlen(m,j)
    LOOP UNTIL d>0
  ELSE                                    ! days ahead
    DO
      days=@dat_mnthlen(m,j)
      EXIT IF d<=days
      SUB d,days
      INC m
      IF m>12
        m=1
        INC j
      ENDIF
    LOOP
  ENDIF
RETURN
'
> FUNCTION dat_check(d,m,VAR j)             ! checks given date
IF j<100                                ! century not filled in?
  ADD j,1900
ELSE IF j<1000
  ADD j,1000
ENDIF
IF j<1583                               ! Gregorian calender
  RETURN FALSE
ENDIF
IF OR(d<1,d>31)
  RETURN FALSE                          ! day out_of_range
ELSE IF OR(m<1,m>12)
  RETURN FALSE                          ! month out_of_range
ENDIF
IF d>@dat_mnthlen(m,j)
  RETURN FALSE
ENDIF
RETURN TRUE                             ! ok
ENDFUNC
'
> FUNCTION dat_compare(d1,m1,j1,d2,m2,j2)   ! compares two dates or times
LOCAL dat1%,dat2%
dat1%=SHL(j1,16)+SHL(m1,8)+d1           ! 0  --> dates are equal
dat2%=SHL(j2,16)+SHL(m2,8)+d2           ! 1  --> 2nd date AFTER 1st date
RETURN SGN(dat2%-dat1%)                 ! -1 --> 2nd date BEFORE 1st date
ENDFUNC
'
> FUNCTION dat_dayspast(d1,m1,j1,d2,m2,j2)  ! -> number of days between dates
LOCAL distance%,count,lastmonth,sign
sign=@dat_compare(d1,m1,j1,d2,m2,j2)
IF sign=0
RETURN 0
ENDIF
IF sign<0                               ! going back in time?
SWAP d1,d2
SWAP m1,m2
SWAP j1,j2
ENDIF
IF AND(m1=m2,j1=j2)
RETURN (d2-d1)*sign
ENDIF
IF SUCC(j1)<=PRED(j2)
FOR count=SUCC(j1) TO PRED(j2)
ADD distance%,365-@dat_leapyear(count)
NEXT count
ENDIF
IF j1<j2
lastmonth=12
ELSE
lastmonth=PRED(m2)
ENDIF
IF m1<lastmonth
FOR count=SUCC(m1) TO lastmonth
ADD distance%,@dat_mnthlen(count,j1)
NEXT count
ENDIF
IF AND(m2>1,lastmonth=12)
FOR count=1 TO PRED(m2)
ADD distance%,@dat_mnthlen(count,j2)
NEXT count
ENDIF
ADD distance%,@dat_mnthlen(m1,j1)
ADD distance%,d2-d1
RETURN distance%*sign
ENDFUNC
'
> FUNCTION dat_easter(VAR d,m,j)            ! --> 1st easterday in year j
LOCAL a,b
IF j<100                                ! no century?
ADD j,1900
ELSE IF j<1000
ADD j,1000
ENDIF
IF OR(j<1600,j>2900)                    ! works between 1600 and 2900
RETURN FALSE
ENDIF
m=SUCC(j-(j DIV 19)*19)
a=SUCC(j DIV 100)
b=INT(3*a/4)-12
a=INT((8*a+5)/25)-5
d=INT(5*j/4)-b-10
b=11*m+20+a-b
SUB b,(b DIV 30)*30
IF OR(b=24,AND(b=25,m>11))
INC b
ENDIF
b=44-b
IF b<21
ADD b,30
ENDIF
m=d+b
SUB m,(m DIV 7)*7
d=b+7-m
IF d<32
m=3
ELSE
m=4
SUB d,31
ENDIF
RETURN TRUE
ENDFUNC
'
> FUNCTION dat_gemmake(d,j,m)               ! puts d,j,m into a GEM date_WORD
LOCAL gemdat%
gemdat%=d AND &X11111                             ! day
gemdat%=OR(gemdat%,SHL(m AND &X1111,5))           ! month
gemdat%=OR(gemdat%,SHL((j-1980) AND &X1111111,9)) ! year
RETURN gemdat%
ENDFUNC
'
> PROCEDURE dat_gemread(gemdate%,VAR d,m,j) ! puts GEM date_WORD into d,m,j
'
' you can get gemdate% for instance with function Tgetdate()
' or from a filedate (CARD{dta%+24})
'
d=gemdat% AND &X11111                   ! day, bits 0-4
m=SHR(gemdat%,5) AND &X1111             ! month, bits 5-8
j=1980+SHR(gemdat%,9) AND &X1111111     ! year, bits 9-15 + 1980
RETURN
'
> PROCEDURE dat_init                        ! fill day$() and month$()
LOCAL d
ERASE day$(),month$()
DIM day$(6),month$(11)
' you COULD look into the OSHEADER to find the machine's language
' lan=SHR(PEEK(LPEEK(&H4F2)+&H1C),1)
' and/or look for the '_AKP' cookie
SELECT language
CASE 1
RESTORE dat_english
CASE 2
RESTORE dat_dutch
CASE 3
RESTORE dat_french
CASE 4
RESTORE dat_german
CASE 5
RESTORE dat_spanish
ENDSELECT
FOR d=0 TO 6
READ day$(d)
NEXT d
FOR d=0 TO 11
READ month$(d)
NEXT d
'
dat_english:
DATA Monday,Tuesday,Wednesday,Thursday,Friday,Saterday,Sunday
DATA Januari,Februari,March,April,May,June,July,Augustus
DATA September,October,November,December
dat_dutch:
DATA maandag,dinsdag,woensdag,donderdag,vrijdag,zaterdag,zondag
DATA januari,februari,maart,april,mei,juni,juli,augustus
DATA september,oktober,november,december
dat_french:
DATA lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche
DATA janvier,f‚vrier,mars,avril,mai,juin,juillet,ao–t
DATA septembre,octobre,novembre,decembre
dat_german:
DATA Montag,Dienstag,Mittwoch,Donnerstag,Freitag,Samstag,Sonntag
DATA Januar,Februar,M„rz,April,Mai,Juni,Juli,August
DATA September,Oktober,November,Dezember
dat_spanish:
DATA lunes,martes,mi‚rcoles,jueves,viernes,s bado,domingo
DATA enero,febrero,marzo,abril,mayo,junio,julio,agosto
DATA septiembre,octubre,noviembre,diciembre
RETURN
'
> FUNCTION dat_mnthlen(m,j)                 ! --> length of given month
IF m=2                                  ! februari
RETURN 28-@dat_leapyear(j)
ELSE
IF AND(m<8,EVEN(m))
RETURN 30                           ! month has 30 days
ELSE IF AND(m>7,ODD(m))
RETURN 30
ENDIF
ENDIF
RETURN 31
ENDFUNC
'
> FUNCTION dat_tostring$(d,m,j)             ! puts d,m,j into a DATE$ format
IF @dat_check(d,m,j)
RETURN RIGHT$("00"+STR$(d),2)+"."+RIGHT$("00"+STR$(m),2)+"."+STR$(j,4)
ENDIF
RETURN ""                               ! error, no such date
ENDFUNC
'
> FUNCTION dat_tonum(d$,VAR d,m,j)          ! puts DATE$ into d,m,j
LOCAL punt
punt=INSTR(d$,".")                      ! divisorcharacter "." or "/"
IF punt=0                               ! allowed
punt=INSTR(d$,"/")
ENDIF
IF AND(d$>"",punt>0)
d=VAL(LEFT$(d$,PRED(punt)))
d$=RIGHT$(d$,LEN(d$)-punt)
punt=INSTR(d$,".")
IF punt=0
punt=INSTR(d$,"/")
ENDIF
IF AND(d$>"",punt>0)
m=VAL(LEFT$(d$,PRED(punt)))
d$=RIGHT$(d$,LEN(d$)-punt)
IF LEN(d$)>3
j=VAL(d$)
ELSE
j=1900+VAL(RIGHT$(d$,2))
ENDIF
RETURN TRUE                         ! ok
ENDIF
ENDIF
CLR d,m,j
RETURN FALSE                            ! error, d,m and j invalid
ENDFUNC
'
> FUNCTION dat_wkday(d,m,j)                 ! --> day of the week
LOCAL wkday%
IF m<3
wkday%=PRED(m)*31
ELSE
wkday%=ABS(@dat_leapyear(j))+INT((306*m-324)/10)
ENDIF
ADD wkday%,d
DEC j
ADD wkday%,(j*365)+(j DIV 4)-(j DIV 100)+(j DIV 400)
wkday%=PRED(wkday% MOD 7)
IF wkday%<0                             ! sunday
RETURN 6
ENDIF
RETURN wkday%                           ! --> 0=monday, 6=sunday
ENDFUNC
'
> FUNCTION dat_wknum(d,m,j)                 ! --> weeknumber for date d,m,j
LOCAL wkday,dag1,wkn
wkday=@dat_wkday(1,1,j)                 ! 0 (monday)- 6 (zondag)
dag1=8-wkday
IF wkday>3                              ! week of 1st januari
IF AND(d<dag1,m=1)                    ! has no thursday?
RETURN 52
ENDIF
wkn=SUCC(ABS(@dat_dayspast(dag1,1,j,d,m,j)) DIV 7)
ELSE IF wkday<>0                        ! count one week on
IF AND(d<dag1,m=1)
RETURN 1
ENDIF
wkn=2+ABS(@dat_dayspast(dag1,1,j,d,m,j)) DIV 7
ELSE                                    ! week 1 starts on monday 1 januari
wkn=SUCC(ABS(@dat_dayspast(1,1,j,d,m,j)) DIV 7)
ENDIF
IF wkn>52
RETURN 1
ENDIF
RETURN wkn
ENDFUNC
'
> PROCEDURE dat_wkstart(wkn,VAR d,m,j)      ! --> 1st (mon)day of given week
LOCAL day1
d=1
m=1
day1=@dat_wkday(d,m,j)
IF day1>3
SUB day1,7
ENDIF
@dat_add_days(PRED(wkn)*7-day1,d,m,j)
RETURN
'
> PROCEDURE datim_getsys(VAR day,month,year,hour,minute,second)
LOCAL datim%                            ! reads system date and time
datim%=XBIOS(23)                        ! Gettime()
@dat_gemread(CARD(datim%),day,month,year)
@tim_gemread(SHR(datim%,16),hour,minute,second)
RETURN
'
> PROCEDURE datim_setsys(day,month,year,hour,minute,second)
LOCAL datim%                            ! sets system date and time
datim%=SHL(@tim_gemmake(hour,minute,second),16)
ADD datim%,@dat_gemmake(day,month,year)
~XBIOS(22,L:datim%)                     ! Settime()
RETURN
'
> FUNCTION tim_12hourclock(VAR u)           ! switches over to 12-hour clock
IF u<12
RETURN FALSE                          ! 0 --> do nothing, it's AM
ENDIF
u=(u MOD 12)
IF u=0
IF OR(m>0,s>0)
u=1
ELSE
u=12
ENDIF
ENDIF
RETURN TRUE                             ! -1 --> it's PM
ENDFUNC
'
> FUNCTION tim_24hourclock(pm!,VAR u)       ! switches over to 24-hour clock
IF pm!                                  ! after noon ?
ADD u,12
ENDIF
u=(u MOD 24)
RETURN u
ENDFUNC
'
> PROCEDURE tim_add(uadd,madd,sadd,VAR u,m,s)  ! adds or substracts time
ADD u,uadd
ADD m,madd
ADD s,sadd
@tim_check(u,m,s)
RETURN
'
> PROCEDURE tim_check(VAR u,m,s)            ! checks and corrects given date
s=ABS(s)
m=ABS(m)
u=ABS(u)
IF s>59
ADD m,(s DIV 60)
s=(s MOD 60)
ENDIF
IF m>59
ADD u,(m DIV 60)
m=(m MOD 60)
ENDIF
u=(u MOD 24)
RETURN
'
> FUNCTION tim_gemmake(u,m,s)               ! puts u,m,s into GEM time_WORD
LOCAL gemtim%
gemtim%=(s AND &X11111)\2                         ! seconds
gemtim%=OR(gemtim%,SHL(m AND &X111111,5))         ! minutes
gemtim%=OR(gemtim%,SHL(u AND &X11111,11))         ! hours
RETURN gemtim%
ENDFUNC
'
> PROCEDURE tim_gemread(gemtime%,VAR u,m,s) ! puts GEM time_WORD into u,m,s
'
' you can get gemtime% for instance with function Tgettime()
' or from a file (CARD{dta%+22})
'
s=SHL((gemtime% AND &X11111),1)         ! seconds, bits 0-4 * 2
m=SHR(gemtime%,5) AND &X111111          ! minutes, bits 5-10
u=SHR(gemtime%,11) AND &X11111          ! hours, bits 11-15
RETURN
'
> FUNCTION tim_tonum(t$,VAR u,m,s)          ! sets variables according to TIME$
IF LEN(t$)<>8                           ! not in 'hh:mm:ss' format ?
CLR u,m,s                             ! clear variables
RETURN FALSE
ENDIF
u=VAL(LEFT$(t$,2))
m=VAL(MID$(t$,4,2))
s=VAL(RIGHT$(t$,2))
RETURN TRUE
ENDFUNC
'
> FUNCTION tim_tostring$(u,m,s)             ! creates TIME$ according to u,m,s
LOCAL t$
t$=RIGHT$("00"+STR$(u),2)+":"
t$=t$+RIGHT$("00"+STR$(m),2)+":"
RETURN t$+RIGHT$("00"+STR$(s),2)
ENDFUNC
