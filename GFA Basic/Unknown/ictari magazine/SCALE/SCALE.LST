 '  Demo-program for Scaling (high resolution)
 CLS                                                       'Clear screen
 TEXT 50,28,"Demo of Crosshair with single Raster"         '1.Demo
 Crosshair(50,590,370,70,-30,80,20,60,0,1)                 'Single Crosshair
 WAIT 10                                                   ' 10 Second wait
 CLS                                                       ' Clear Screen
 TEXT 50,28,"Demo Crosshair-box with doubled Raster"       ' 2.Demo
 Crosshair(50,590,370,70,-30,80,20,60,1,2)                 ' single Crosshair
 WAIT 10'                                                  ' 10 Second wait
 CLS '                                                     ' Clear Screen
 TEXT 50,28,"Demo for different x-Scalings of equal length" '3.Demo
 FOR I=40 TO 370 STEP 30'                                   'Scale loop x
   Axis(40,600,I,I,0,(I/190)^5.3,-2,0)                      ' Scale in x
 NEXT I
 WAIT 10                                                    '10 Second wait
 CLS                                                        'Clear screen
 TEXT 50,28,"Demo for different y-Scalings of equal length" '4.Demo
 FOR I=70 TO 620 STEP 50                                    'Scale loop y
   Axis(50,370,I,I,0,(I/177)^4.3,2,0)                       'Scale in y
 NEXT I 
 WAIT 10                                                    '10 Second wait
 CLS                                                        'Clear screen
 TEXT 50,28,"Demo for different Scalings and Raster"        '5. Demo
 Axis(60,580,366,60,-30,30,-2,2)                            'lower x-Axis 
 Axis(60,580,60,366,1210,1250,-1,0)                         'upper x-Axis 
 Axis(60,366,60,580,-.05,-.01,2,3)                          'left y-Axis 
 Axis(60,366,580,60,35,40,1,0)                              'right y-Axis 
 WAIT 10                                                    '10 Second wait
 CLS 
 TEXT 50,28,"Demo for equal Scaling and reversed direction with mixed Raster"
 Axis(550,60,360,60,-20,60,-2,3)                            'lower x-Axis
 Axis(60,550,60,360,-20,60,-1,2)                            'upper x-Axis
 Axis(360,60,60,550,-.4,.1,2,4)                             'left y-Axis
 Axis(60,360,550,60,-.4,.1,1,3)                             'right y-Axis
 WAIT 60                                                    '60 Second wait
 END
 ' #####################
 ' # Crosshair-box     #
 ' #####################
 DEF PROC Crosshair(Left,Right,Lower,Upper,Xmin!,Xmax!,Ymin!,Ymax!,How,Raster)
   ' Left - Left Pixel edge value    Right - Right Pixel edge value
   ' Lower - Lower Pixel edge value   Upper   - Upper Pixel edge value
   ' Xmin!, Xmax! - Scale value x
   ' Ymin!, Ymax! - Scale value y
   ' How: 0 Only Crosshair, 1 Axis-box 
   ' Raster: Raster width in 4er-Pixel (0 no Raster)
   Axis(Left,Right,Lower,Upper,Xmin!,Xmax!,-2,Raster)
   IF How=1 THEN Axis(Left,Right,Upper,Lower,Xmin!,Xmax!,-1,0)
   Axis(Lower,Upper,Left,Right,Ymin!,Ymax!,2,Raster)
   IF How=1 THEN Axis(Lower,Upper,Right,Left,Ymin!,Ymax!,1,0)
 RETURN
 ' #####################
 ' # Scaling Axis      #
 ' #####################
 DEF PROC Axis(From,At,Where,Here,Low!,Up!,What,Rast)
   ' From  - Start point of the Axis,          At  - Target point of the Axis
   ' Where   - Other Ordinate Axis themselves,  Here - Other Ordinate for Raster
   ' Low! - Really lowest value,         Up!  - Really highest value
   ' What  - Axis direction (>0 y-Axis, <0 x-Axis, 1 then Right, 2 Left,
   '                      -2 below and -1 above the Axis)
   ' Rast - Draw Raster (0 no, x yes at a distance of 4-Points)
   ' Change the value direction: Exchange At and From 
   LOCAL Lower_Dim,Upper_Dim,Place,P!,There,K,Skip!,How_oft,St 'Local Variables
   LOCAL Place,Dist!,Part!,Part_Dim,Part,Lower!,Upper!,Partmax  'Local Variables
   LOCAL Help1,Help1!,Help2,Help3,Help4,Help5,Help6,Notice     'For acceleration
   Rast= ABS(Rast)                                             'Only positive Raster
   Dist!= ABS(Up!-Low!)                                        'Scaled Difference
   Up!=Up!+Dist!*1E-5                                          'Upper distance more
   Low!=Low!-Dist!*1E-5                                        'Lower until less
   Lower!=Low!:Upper!=Up!                                      'Scaled
   Lower_Dim= LOG(10, ABS(Lower!)+1E-5)                        'Dimension lower Border
   Upper_Dim= LOG(10, ABS(Upper!)+1E-5)                        'Dimension upper Border
   St= MAX(Upper_Dim,Lower_Dim)                                'Optimal Place number
   ' ---- Determining the maximum Place number
   Place= ABS(St)+2-2*(St<=1)-(Un!<0)                          'Mark Maximum Place number
   IF What>0 THEN                                              'y-Axis
     DRAW Where,From TO Where,At                               'draw y-Axis 
     Height= ABS(At-From)                                      'Pixel height of the Axis
     Partmax= INT(Height/22)                                   'max. number division
   ELSE                                                        'x-Axis
     DRAW From,Where TO At,Where                               'draw x-Axis
     Width= ABS(At-From)                                       'Pixel length of the Axis
     Partmax= INT(Width/10/Place)                               'max. number division
   ENDIF
   ' ---- Determination of the largest division (number value)
   Place=St                                                    'Allocation of the Places
   REPEAT 'With restriction values as long as ...
     Place=Place-1                                             '... lowered, At ...
     Skip!=10^Place                                            '... gradually OK.
     Upper!=( INT(Up!/Skip!))*(Skip!)                          'Set upper border underneath
     Lower!=( INT(Low!/Skip!)+1)*(Skip!                        'Set lower border above
   UNTIL ABS((Upper!-Lower!)/(Skip!))>Partmax                  'Fine line md. whenever as parting
   Part!=Skip!*10                                              'Variable size division
   Part_Dim= INT( LOG(10,Part!))                               'Dimension of the Parts
   Part=(Upper!-Lower!)/Part!                                  'whole part
   Notice=0                                                    'Mark variable for .25 division
   IF(Part*5)<=Partmax THEN Part!=Part!/5:Part=Part*5          'Scale parts too little
   IF(Part*2)<=Partmax THEN Part!=Part!/2:Part=Part*2          'Scale parts too little
   IF(Part*5)<=Partmax THEN Part!=Part!/5:Part=Part*5          'always too limited yet
   IF(Part*2)<=Partmax THEN Part!=Part!/2:Part=Part*2:Notice=1 '.25-division!
   ' ---- Determination of the fine division (Lines)
   Skip!=Part!/10
   Upper!=( INT(Up!/Skip!))*(Skip!)                            'Set upper border beneath 
   Lower!=( INT(Low!/Skip!)+1)*(Skip!)                         'Set lower border above
   Dist!=Upper!-Lower!                                         'Difference Scaled
   How_oft=Dist!/Skip!                                         '..new step number
   Before=Place+2                                              'Place in front of the Comma
   Border!=Skip!/10                                            'Limit definition
   Help1!= INT( LOG(10,Part!)+1D-8)                            'Help size
   After= MAX(0,-Help1!)+Notice                                'place after comma
   Help1!=(At-From)/(Up!-Low!)                                 '1st Help size for acceleration
   Help1=(1.5-What)*4                                          '2nd Help size for acceleration
   Help2=Rast*3* SGN(Here-Where)                               '3rd Help size for acceleration
   Help3=(1.5+What)*4                                          '4th Help size for acceleration
   Help4=10*(What=1):Help5=8*(What=2)                          '5th+6th Help size
   Help6=-24*(What=-2)+9*(What=-1)                             '7th Help size
   FOR P!=Lower! TO Upper!+Dist!*1E-5 STEP Skip!               'Loop
   P$=FN Change$(P!,Before,After)                              ' String image
     P$=FN Blanksgone$(P$)                                     'Blanks gone
     There=From+(P!-Low!)*Help1!                               'determine place(preserve place!)
     Pmodule!= ABS( INT((P!+Border!)/Part!)*Part!-P!)          'value decision variable
     IF What>0 THEN                                            'y-Axis
       DRAW Where,There TO Where+Help1,There                   'Drawing of the fine lines
       IF Pmodule!<Border! THEN                                'Place for Text
         DRAW Where,There TO Where+Help1*2.5,There             'Larger line
         TEXT Where-Help4+(1+ LEN(P$))*Help5,There+7,P$        'write number
         IF Rast>0 THEN
           FOR K=Where TO Here STEP Help2: DRAW K,There: NEXT K'Raster
         ENDIF
       ENDIF
     ELSE                                                      'x-Axis
       DRAW There,Where TO There,Where-Help3                   'Drawing the fine lines
       IF Pmodule!<Border! THEN                                'Place for Text
         DRAW There,Where TO There,Where-Help3*2.5             'Larger line
         TEXT There- LEN(P$)*4,Where+Help6,P$                  'Write number
         IF Rast>0 THEN
           FOR K=Where TO Here STEP Help2: DRAW There,K: NEXT K'Raster
         ENDIF
       ENDIF
     ENDIF
   NEXT P!
 RETURN
 ' ###################################
 ' # Removes Blanks before and after #
 ' ###################################
 DEF FN Blanksgone$(What$)
   LOCAL Front,Back                                     'Local Variables
   FOR Front=1 TO LEN(What$)                            '1st character unequal Blank
     IF MID$(What$,Front,1)<>" " THEN EXIT
   NEXT Front
   FOR Back= LEN(What$) TO 1 STEP -1                    'Last character unequal ' '
     IF MID$(What$,Back,1)<>" " THEN EXIT
   NEXT Back
   IF Front<1 THEN Front=1                              'Problem correction
   IF(Back-Front)<1 THEN Back=Front+1                   'Corrected with Problems
 RETURN MID$(What$,Front,Back-Front+1)                  'Return free blanks 
 ' ##########################################
 ' # String Images with Pre and Post-Place #
 ' ##########################################
 DEF FN Change$(Value!,Pre,Post)
   LOCAL Total,How$,Wxu$                                'Local Variables
   IF Post<0 THEN Post=0                                'After Minimum 0
   IF Pre<1 THEN Pre=1                                  'Before Minimum 1
   Total=Pre+Post+1+(Post=0)                            'Total length
   How$="#"*Pre                                         'Preset
   IF Post>0 THEN How$=How$+"."+"#"*Post                'set after
   USING How$                                           'So use it
   Wxu$= STR$(Value!)                                   'Allocate value 
   USING                                                'use normal again
 RETURN Wxu$                                            'and return Value ..
