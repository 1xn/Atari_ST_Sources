' Below the settings for GfA I always use. With my compiler it is
' ESSENTIAL to tell it to OPTION BASE 0 (arrays start with element
' zero). If I don't, the compiler I use (v3.5) will initiate (unlike
' my editor) at OPTION BASE 1, leaving me with a lot of bombs..
'
OPTION BASE 0     ! 1st element of array is number ZERO
DEFWRD "a-z"      ! all variables with no suffix are 2-byte signed WORDS
DEFLIST 4         ! show commands in CAPS, variables in lowercase
'
' routine below lets you use Tempus-Word editorfonts in your
' own programmes. It reads the data for each character into a
' GfA string array. In this example the building of the aray
' is NOT shown on screen, like with the other fontroutines.
'
FILESELECT #"Load TEMPUS-WORD font","\*.twf","",fsel$
IF AND(fsel$>"",RIGHT$(fsel$)<>"\")
  OPEN "i",#1,fsel$
  i%=LOF(#1)
  ERASE buffer%()
  DIM buffer%(((i%+3) DIV 4)-1)
  buf%=V:buffer%(0)
  BGET #1,buf%,i%
  CLOSE #1
  IF buffer%(0)=&HC5D69FC5      ! check fileformat
    @tempus_editorfont
    IF NOT cancel!
      @prop_spc                 ! create a space character
      @prop_text(10,40,"The quick brown fox jumps over the lazy dog.")
      '  PRINT @prop_len("The quick brown fox jumps over the lazy dog.")
      ~INP(2)
    ENDIF
  ELSE
    ALERT 1,"|This is no TWF-font.. ",1," Ok ",i%
  ENDIF
ENDIF
ERASE buffer%()
EDIT
'
PROCEDURE tempus_editorfont
  LOCAL prop_w,prop_h,y_offset,dummy,c
  '  testh1=PEEK(buf%+6)        ! not really sure; maximum height maybe?
  '  testh2=PEEK(buf%+7)
  CLR prop_hmax,c
  ERASE prop_ch$()
  ~FRE(0)
  DIM prop_ch$(255)
  '  PRINT AT(8,1);CHAR{buf%+8} ! name of font
  ADD buf%,30                   ! skip magic c5d69fc5
  FOR i%=32 TO 202              ! maximum is 170 characters
    prop_w=PEEK(buf%)           ! SIGNED BYTE
    INC buf%
    IF prop_w<255               ! or BTST(prop_w,7)
      INC c
      dummy=PEEK(buf%)
      y_offset=PEEK(buf%+1)
      prop_h=PEEK(buf%+2)
      ADD buf%,3
      prop_ch$(i%)=MKI$(prop_w)+MKI$(y_offset+prop_h)+MKI$(1)
      prop_ch$(i%)=prop_ch$(i%)+STRING$(2*SUCC(prop_h+y_offset),0)
      adr%=V:prop_ch$(i%)+6+y_offset*2
      IF BTST(dummy,7)
        FOR dummy=0 TO prop_h
          POKE adr%,PEEK(buf%)
          INC buf%
          ADD adr%,2
        NEXT dummy
      ELSE
        dummy=2*SUCC(prop_h)
        BMOVE buf%,adr%,dummy
        ADD buf%,dummy
      ENDIF
      prop_hmax=MAX(prop_hmax,prop_h+y_offset)
    ENDIF
  NEXT i%
  SWAP prop_ch$(32),prop_ch$(221)      ! swap position of paragraph char.
  cancel!=(c<1)                        ! no characters counted, so cancel..
RETURN
'
PROCEDURE prop_spc
  i%=LEN(prop_ch$(110))    ! create a space according to 'n'
  IF i%
    prop_ch$(32)=LEFT$(prop_ch$(110),6)+STRING$(i%-6,0)
  ELSE
    i%=LEN(prop_ch$(65))   ! or according to 'A'
    IF i%
      prop_ch$(32)=LEFT$(prop_ch$(65),6)+STRING$(i%-6,0)
    ENDIF
  ENDIF
RETURN
'
PROCEDURE prop_text(tx,ty,tekst$)       ! writes proportional string
  LOCAL a,c
  FOR c=0 TO LEN(tekst$)-1
    a=PEEK(V:tekst$+c)
    IF prop_ch$(a)>""
      PUT tx,ty,prop_ch$(a)
      ADD tx,SUCC(CARD{V:prop_ch$(a)})
    ENDIF
    EXIT IF tx>WORK_OUT(0)
  NEXT c
RETURN
'
FUNCTION prop_len(tekst$)               ! calculates width in pixels for string
  $F&
  LOCAL a,c,l
  FOR c=0 TO LEN(tekst$)-1
    a=PEEK(V:tekst$+c)
    IF prop_ch$(a)>""
      ADD l,SUCC(CARD{V:prop_ch$(a)})
    ENDIF
  NEXT c
  RETURN l
ENDFUNC
