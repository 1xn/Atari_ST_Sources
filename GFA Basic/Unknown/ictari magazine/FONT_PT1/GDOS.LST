' routine below loads a GEMDOS font file and puts the
' characters in seperate PUT-strings, ready for use in
' your own programs. In stead of creating a PUT-string
' for each character you could also 'blit-when-required'
' using a vro_cpyform call, but this will need more code.
' (with such code it will be possible to handle clipping
' better than with the PUT-command..)
' Anyway, it's just an example of how you COULD use
' GDOS-fonts.
'
' Below the settings for GfA I always use. With my compiler it is
' ESSENTIAL to tell it to OPTION BASE 0 (arrays start with element
' zero). If I don't, the compiler I use (v3.5) will initiate (unlike
' my editor) at OPTION BASE 1, leaving me with a lot of bombs..
'
OPTION BASE 0     ! 1st element of array is number ZERO
DEFWRD "a-z"      ! all variables with no suffix are 2-byte signed WORDS
DEFLIST 4         ! show commands in CAPS, variables in lowercase
'
' when bytes are swapped in INTEL-format you can use these:
'
DEFFN intelw(a%)=CARD(ROR&(CARD{a%},8))         ! the fastest way
DEFFN intell(a%)=SWAP(ROR&(CARD{a%+2},8)) OR CARD(ROR&(CARD{a%},8))
'
DIM mfdb(19),prop_ch$(255)      ! do not erase/dim arrays too often..
DO
  ERASE buffer%()
  FILESELECT #"Load GDOS-font","\*.fnt","",fsel$
  EXIT IF OR(fsel$="",RIGHT$(fsel$)="\")
  ~FRE(0)
  OPEN "i",#1,fsel$
  i%=LOF(#1)
  DIM buffer%(((i%+3) DIV 4)-1)
  BGET #1,V:buffer%(0),i%
  CLOSE #1
  FOR i%=0 TO 255       ! clear stringarray
    prop_ch$(i%)=""     ! arrayfill does not work..
  NEXT i%
  @font_ld(V:buffer%(0))
  CLS
  @prop_text(10,40,"The quick brown fox jumps over the lazy dog.")
  '  PRINT @prop_len("The quick brown fox jumps over the lazy dog.")
  ~INP(2)
LOOP
ERASE mfdb(),prop_ch$()
EDIT
'
PROCEDURE font_ld(font%)
  LOCAL chfirst,chlast,chh,adr_w%,adr_d%,motorola!
  motorola!=BTST(PEEK(font%+67),2)      ! flags
  '
  ' also watch flags at @intelw(font%+66)
  ' if BTST(flags,0) --> system font
  ' if BTST(flags,1) --> use horizontal table (@intell(font%+68))
  ' if BTST(flags,2) --> INTEL-format: byte_swap fontdata
  ' if BTST(flags,3) --> font is monospaced
  '
  '  PRINT AT(20,1);CHAR{font%+4}       ! fontname
  IF motorola!
    chfirst=MAX(CARD{font%+36},0)       ! 1st character
    chlast=MIN(CARD{font%+38},255)      ! last character
    adr_w%=font%+LONG{font%+72} ! offsettabel as from previous character
    adr_d%=font%+LONG{font%+76} ! fontdata
    chw=CARD{font%+80}          ! width totale blok in BYTES
    chh=CARD{font%+82}          ! height in lijnen
  ELSE
    chfirst=MAX(@intelw(font%+36),0)      ! 1st character
    chlast=MIN(@intelw(font%+38),255)     ! last character
    adr_w%=font%+@intell(font%+72) ! offsettabel as from prev character
    adr_d%=font%+@intell(font%+76) ! fontdata
    chw=@intelw(font%+80)          ! width total block in BYTES
    chh=@intelw(font%+82)          ! height in lines
  ENDIF
  LONG{V:mfdb(0)}=adr_d%        ! memory_form_definition_block
  mfdb(2)=chw*8                 ! width of total bitimage in pixels
  mfdb(3)=chh                   ! height for all characters inlines
  mfdb(4)=SUCC(chw) DIV 2       ! width in WORDS
  mfdb(5)=0
  mfdb(6)=1
  mfdb(7)=0
  mfdb(8)=0
  mfdb(9)=0
  LONG{V:mfdb(10)}=0            ! mfdb of DESTINATION (here: logical screen)
  IF DPEEK(LPEEK(GB+4)+20)>1    ! planes: if using color
    CONTRL(0)=121               ! vrt_cpyform()
    CONTRL(3)=3
    INTIN(0)=1                  ! modus (1-4 / 1=replace)
    INTIN(1)=1                  ! color of SET-bits  (1=black)
    INTIN(2)=0                  ! color of ZERO-bits (0=white)
  ELSE                          ! using monoscreen
    CONTRL(0)=109               ! vro_copyform
    CONTRL(3)=1
    INTIN(0)=3                  ! modus (0-15 / 3=replace)
  ENDIF
  CONTRL(1)=4
  LONG{CONTRL+14}=V:mfdb(0)
  LONG{CONTRL+18}=V:mfdb(10)
  PTSIN(1)=0                     ! y1 of SOURCE
  PTSIN(3)=PRED(chh)             ! y2
  PTSIN(4)=0                     ! x1 of DESTINATION
  PTSIN(5)=0                     ! y1
  PTSIN(6)=WORK_OUT(0)           ! x2
  PTSIN(7)=WORK_OUT(1)           ! y2
  ~FRE(0)
  IF motorola!
    FOR i%=chfirst TO chlast     ! all defined characters
      PTSIN(0)=CARD{adr_w%}      ! x1
      ADD adr_w%,2
      PTSIN(2)=CARD{adr_w%}      ! x2
      VDISYS                     ! do the BLIT
      GET 0,0,PRED(PTSIN(2)-PTSIN(0)),PRED(chh),prop_ch$(i%)
    NEXT i%
  ELSE
    FOR i%=chfirst TO chlast     ! all defined characters
      PTSIN(0)=@intelw(adr_w%)   ! x1
      ADD adr_w%,2
      PTSIN(2)=@intelw(adr_w%)   ! x2
      VDISYS                     ! do the BLIT
      GET 0,0,PRED(PTSIN(2)-PTSIN(0)),PRED(chh),prop_ch$(i%)
    NEXT i%
  ENDIF
RETURN
'
PROCEDURE prop_text(tx,ty,tekst$)       ! writes proportional string
  LOCAL a,c
  FOR c=0 TO LEN(tekst$)-1
    a=PEEK(V:tekst$+c)
    IF prop_ch$(a)>""
      PUT tx,ty,prop_ch$(a)
      ADD tx,SUCC(CARD{V:prop_ch$(a)})
    ENDIF
    EXIT IF tx>WORK_OUT(0)
  NEXT c
RETURN
'
FUNCTION prop_len(tekst$)               ! calculates width in pixels of string
  $F&
  LOCAL a,c,l
  FOR c=0 TO LEN(tekst$)-1
    a=PEEK(V:tekst$+c)
    IF prop_ch$(a)>""
      ADD l,SUCC(CARD{V:prop_ch$(a)})
    ENDIF
  NEXT c
  RETURN l
ENDFUNC
