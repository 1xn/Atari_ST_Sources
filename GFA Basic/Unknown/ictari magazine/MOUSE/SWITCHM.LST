' routine below is meant for completely shutting
' off the mouse-handler. This can come in handy
' while playing sound, or building a complex
' screen. In those cases HIDEM will ensure the
' mouse is invisible, but it will still take up
' processor-time. (you can actually hear it when
' the machine is playing sound and you move the
' mouse around a lot..)
' DO NOT forget to return the mouse to normal
' as soon as your program finishes !
' Parameter:  rodent& <0 -> inquire status only
'                     =0 -> turn it OFF
'                     >0 -> turn it ON
' Return:             -1 -> mouse WAS on
'                      0 -> mouse WAS off
'
CLR mold%                       ! mold% is a GLOBAL long integer
~@switchm(0)                    ! turn mouse OFF
PRINT "Mouse is OFF"
REPEAT
  MOUSE mx,my,mk                ! the MOUSE command does nothing here !
UNTIL OR(mk>0,INKEY$>"")
~@switchm(1)                    ! turn mouse back ON
PRINT "Mouse is ON"
REPEAT
  MOUSE mx,my,mk                ! now you can exit by clicking the mouse
UNTIL OR(mk>0,INKEY$>"")
EDIT
'
FUNCTION switchm(rodent)
  LOCAL mvec%,mnow!             ! rest is GLOBAL
  mvec%=XBIOS(34)+16            ! pointer to mousehandler
  mnow!=DPEEK(LPEEK(mvec%))<>&H4E75
  IF NOT (mold%>0)              ! 1st time function is called?
    INLINE mrts%,2
    DPOKE mrts%,&H4E75          ! RTS
    mold%=LPEEK(mvec%)          ! address of mouseroutine
  ENDIF
  IF rodent=0                   ! turn mouse OFF
    HIDEM
    SLPOKE mvec%,mrts%          ! mousroutine is 'rts'
  ELSE IF rodent>0              ! turn mouse ON
    SLPOKE mvec%,mold%          ! restore old routine
    SHOWM
  ENDIF
  RETURN mnow!                  ! return: PREVIOUS situation
ENDFUNC
