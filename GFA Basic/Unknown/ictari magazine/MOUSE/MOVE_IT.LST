' Below you will find routines to let you move
' something (in the example it's a sprite, but
' you can do other stuff) from one point to the
' next. Movement can be simply in a straight line,
' but also according to a bezier-curve, or round
' in a circle or ellips. Just play around with it,
' perhaps you can use these routines in one of
' your own programmes. (could be great for demo's)
'
' In this demo, the sprite will move towards the
' point you have clicked the mouse. A right-click
' exits.
'
scrw&=SUCC(WORK_OUT(0))
scrh&=SUCC(WORK_OUT(1))
@read_sprite                    ! read sprite
sx&=MOUSEX                      ! sx, sy, mx, my and mk are GLOBALS
sy&=MOUSEY
SPRITE sprt$,sx&,sy&
REPEAT
  MOUSE mx&,my&,mk&
  IF mk&=1
    @move_bezier(180,80,10,20,mx&,my&)
  ENDIF
UNTIL mk&>1
SPRITE sprt$                    ! sprite off
EDIT
'
PROCEDURE move_bezier(x1&,y1&,x2&,y2&,xe&,ye&)
  LOCAL d%,a#,b#,c#,t1#,t2#,t3#
  xs&=sx&                       ! startingpoint
  ys&=sy&                       ! startingpoint y
  ' x1 t/m y2 are the two 'magnetic' points
  t1#=ABS(xe&-xs&)
  t1#=t1#*t1#
  t2#=ABS(ye&-ys&)
  t2#=t2#*t2#
  d%=CINT(SQR(t1#+t2#))
  IF d%>1
    FOR i&=0 TO d%
      t1#=i&/d%
      t2#=t1#*t1#
      t3#=t1#*t2#
      a#=-t3#+3*(t2#-t1#)+1
      b#=3*(t3#-2*t2#+t1#)
      c#=3*(-t3#+t2#)
      sx&=CINT(a#*xs&+b#*x1&+c#*x2&+t3#*xe&)
      sy&=CINT(a#*ys&+b#*y1&+c#*y2&+t3#*ye&)
      SPRITE sprt$,sx&,sy&
    NEXT i&
  ENDIF
RETURN
'
PROCEDURE move_ellips(xmid&,ymid&,rx&,ry&)
  LOCAL draw!
  IF AND(rx&>0,ry&>0)                   ! rx=ry --> circel
    FOR i&=360 DOWNTO 1                 ! DOWNTO turns left/ TO turns right
      sx&=CINT(rx&*COSQ(i&))+xmid&      ! begin and endpoints at 3 o'clock
      sy&=CINT(ry&*SINQ(i&))+ymid&      ! top=270 / bottom=90
      draw!=AND(sx&>0,sx&<scrw&)        ! clip to screensize
      IF draw!
        draw!=AND(sy&>0,sy&<scrh&)
      ENDIF
      IF draw!
        SPRITE sprt$,sx&,sy&
      ELSE
        SPRITE sprt$                    ! off screenlimits: delete sprite
      ENDIF
      ' you can put in a short brake here
      ' if you think it's going too fast..
      ' PAUSE 0.1
    NEXT i&
  ENDIF
RETURN
'
PROCEDURE move_straight(xtarget&,ytarget&)  ! calculate straight line
  LOCAL d%,dx&,dy&,nx#,ny#              ! # variables are 8-byte FLOATS
  dx&=xtarget&-sx&
  dy&=ytarget&-sy&
  d%=CINT(SQR(dx&*dx&+dy&*dy&))         ! hypotenusa
  nx#=sx&                               ! CINT --> roundoff is correct
  ny#=sy&
  IF d%
    FOR i&=0 TO d%
      SPRITE sprt$,nx#,ny#
      ADD nx#,dx&/d%
      ADD ny#,dy&/d%
    NEXT i&
  ENDIF
  IF OR(nx#<>xtarget&,ny#<>ytarget&)
    SPRITE sprt$,xtarget&,ytarget&
  ENDIF
  sx&=xtarget&
  sy&=ytarget&
RETURN
'
PROCEDURE read_sprite
  LOCAL sprt%                   ! you can also read in the actual mouse
  RESTORE msprite               ! shape as a sprite directly from LineA
  CLR sprt$                     !       sprt$=SPACE$(74)
  FOR i&=0 TO 36                !       BMOVE L~A-856,V:sprt$,74
    READ sprt%                  ! 37 integerWORDS are 74 bytes
    sprt$=sprt$+MKI$(sprt%)     ! build sprite
  NEXT i&
RETURN
'
msprite:
DATA 1,1,1,0,1,61440,0,65024,24576,65280,23552,65408,19968
DATA 65472,18176,65504,17280,65520,16832,65528,16608,65532
DATA 16496,65532,18424,65532,20472,65532,24064,65280,31744
DATA 65024,14336,31744,12288,30720,0
