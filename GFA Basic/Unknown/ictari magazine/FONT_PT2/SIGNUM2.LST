' Below the settings for GfA I always use. With my compiler it is
' ESSENTIAL to tell it to OPTION BASE 0 (arrays start with element
' zero). If I don't, the compiler I use (v3.5) will initiate (unlike
' my editor) at OPTION BASE 1, leaving me with a lot of bombs..
'
OPTION BASE 0     ! 1st element of array is number ZERO
DEFWRD "a-z"      ! all variables with no suffix are 2-byte signed WORDS
DEFLIST 4         ! show commands in CAPS, variables in lowercase
'
' These routines read Signum2 fonts and convert them into a GfA
' PUT-string-array. array van 0 t/m 255). Because with Signum!,
' not all characters are equally large, the sizes of the character-
' boxes will be different. This CAN create problems in a program.
' If you want all characters the same height, like GDOS fonts,
' you should build in a routine that first calculates the maximum
' heigt and after that, draw the pixels in a pre-defined block.
' Routines below are just examples, they expect the screen used to
' be MONOCHROME. If you don't want that, use VRT_CPYFORM() in stead
' of PUT before GETting it into the stringarray.
' To do this, see routine GDOS.LST.
'
@signum_fontload
IF NOT cancel!
  CLS
  @prop_spc                ! create a space-character
  @prop_text(10,40,"The quick brown fox jumps over the lazy dog.")
  '  PRINT @prop_len("The quick brown fox jumps over the lazy dog.")
  ~INP(2)
ENDIF
EDIT
'
PROCEDURE signum_fontload
  CLR cancel!
  FILESELECT #"Load SIGNUM2 font","\*.*","",fsel$
  IF AND(fsel$>"",RIGHT$(fsel$)<>"\")
    ERASE buffer%()
    OPEN "i",#1,fsel$
    i%=LOF(#1)
    DIM buffer%(((i%+3) DIV 4)-1)
    buf%=V:buffer%(0)
    BGET #1,buf%,i%
    CLOSE #1
    IF buffer%(1)=CVL("0001")   ! check file-format
      SELECT buffer%(0)
      CASE "eset","fhl0"        ! for use on screens
        @sig_editorfont
      CASE "ps24","ps09","ls30" ! for use on printers
        @sig_printerfont
      ENDSELECT
    ELSE
      ALERT 1,"|This is no SIGNUM2 font.. ",1," Ok ",i%
      cancel!=TRUE
    ENDIF
  ENDIF
  ERASE buffer%()
  '                             Signum uses it's own character-order..
signum_order:
  DATA 123,125,8,13,6,4,2,3,7,1,9,14,15,12,91,93,92,64,16,17,18,19,20,21,22
  DATA 23,24,25,11,30,10,221,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
  DATA 49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,129,65,66,67,68,69,70,71
  DATA 72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,148,154,132
  DATA 94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112
  DATA 113,114,115,116,117,118,119,120,121,122,153,124,142,126,158
RETURN
'
PROCEDURE sig_editorfont
  LOCAL adr%,y_offset,prop_w,prop_h,a,c
  CLR chmaxw,chmaxh                 ! GLOBALS for biggest characterbox
  ERASE prop_ch$()
  DIM prop_ch$(255)
  RESTORE signum_order
  FOR i%=1 TO 127
    READ a                          ! Signum order is different from ascii..
    adr%=buf%+LPEEK(buf%+140+i%*4)  ! address
    y_offset=PEEK(652+adr%)         ! y offset
    prop_h=PEEK(653+adr%)           ! prop height
    prop_w=PEEK(654+adr%)           ! prop width
    IF AND(prop_w>0,prop_h>0)
      IF buffer%(0)=CVL("fhl0")     ! Headline font (*.FHL)
        MUL prop_w,8                ! utility for BIG Signum! characters
      ENDIF
      chmaxw=MAX(chmaxw,prop_w)
      chmaxh=MAX(chmaxh,prop_h+y_offset)
      INC c                         ! number of characters
      ~FRE(0)
      ADD adr%,656
      prop_ch$(a)=MKI$(PRED(prop_w))+MKI$(PRED(y_offset+prop_h))+MKI$(1)
      prop_w=2*((prop_w+15) DIV 16) ! width in bytes (even)
      MUL prop_h,prop_w
      MUL y_offset,prop_w
      prop_ch$(a)=prop_ch$(a)+STRING$(prop_h+y_offset,0)
      BMOVE adr%,V:prop_ch$(a)+6+y_offset,prop_h
      '      PUT 0,0,prop_ch$(a)
    ENDIF
  NEXT i%
  cancel!=(c<1)
RETURN
'
PROCEDURE prop_spc
  i%=LEN(prop_ch$(110))    ! create a space according to 'n'
  IF i%
    prop_ch$(32)=LEFT$(prop_ch$(110),6)+STRING$(i%-6,0)
  ELSE
    i%=LEN(prop_ch$(65))   ! or according to 'A'
    IF i%
      prop_ch$(32)=LEFT$(prop_ch$(65),6)+STRING$(i%-6,0)
    ENDIF
  ENDIF
RETURN
'
PROCEDURE sig_printerfont
  LOCAL a,c,prop_w,prop_h,w_byte,y_offset,adr%,adr2%,sig%
  i%=INSTR(fsel$,".")
  IF i%
    fsel$=LEFT$(fsel$,i%-1)+".E24"
  ELSE
    fsel$=fsel$+".E24"
  ENDIF
  IF EXIST(fsel$)
    ERASE sigedit%()
    OPEN "i",#1,fsel$
    i%=LOF(#1)
    DIM sigedit%(((i%+3) DIV 4)-1)    ! we need the editorfont to calculate
    sig%=V:sigedit%(0)                ! the proportional widths..
    BGET #1,sig%,i%
    CLOSE #1
    IF sigedit%(0)=CVL("eset")
      CLR chmaxw,chmaxh               ! GLOBALS for biggest characterbox
      DEFFILL 1,0
      ERASE prop_ch$()
      DIM prop_ch$(255)
      RESTORE signum_order
      FOR i%=1 TO 127
        READ a
        adr%=buf%+LPEEK(buf%+140+i%*4)
        y_offset=PEEK(652+adr%)
        prop_h=PEEK(653+adr%)
        w_byte=PEEK(654+adr%)          ! width in BYTES !!
        '
        prop_w=PEEK(sig%+654+LPEEK(sig%+140+i%*4))   ! PIXEL width
        '
        IF prop_h>0 AND prop_w>0
          ~FRE(0)
          prop_ch$(a)=MKI$(w_byte*8-1)+MKI$(prop_h-1)+MKI$(1)
          INC c
          ADD adr%,656
          j%=w_byte-ODD(w_byte)
          prop_ch$(a)=prop_ch$(a)+STRING$(prop_h*j%,0)
          adr2%=V:prop_ch$(a)+6
          IF ODD(w_byte)
            INC w_byte
            FOR j%=0 TO prop_h-1
              BMOVE adr%,adr2%,w_byte
              ADD adr%,PRED(w_byte)
              ADD adr2%,w_byte
            NEXT j%
          ELSE
            BMOVE adr%,adr2%,prop_h*w_byte
          ENDIF
          SELECT buffer%(0)             ! what resolution ?
          CASE "ps09"                   ! 9 pins
            MUL prop_w,3                ! max 240 dpi (240/90)=2.66666
          CASE "ps24"                   ! 24 pins
            MUL prop_w,4                ! max 360 dpi (360/90)=4
          CASE "ls30"                   ! laser/inktjet
            prop_w=prop_w*3.5           ! max 300 dpi (300/90)=3.33333
          ENDSELECT
          ADD prop_h,y_offset
          @vr_recfl(0,0,prop_w,prop_h)
          PUT 0,y_offset,prop_ch$(a)    ! or vro_cpyfm()
          GET 0,0,PRED(prop_w),PRED(prop_h),prop_ch$(a)
          chmaxw=MAX(chmaxw,prop_w)
          chmaxh=MAX(chmaxh,prop_h)
        ENDIF
      NEXT i%
    ELSE
      ALERT 1,"|Signum EDITOR font |(.E24) corrupted.. ",1," Ok ",i%
    ENDIF
  ELSE
    ALERT 1,"|Cannot find Signum |EDITOR font .. ",1," Ok ",i%
  ENDIF
  ERASE sigedit%()
  cancel!=(c<1)
RETURN
'
PROCEDURE prop_text(tx,ty,tekst$)       ! writes proportional string
  LOCAL a,c
  FOR c=0 TO LEN(tekst$)-1
    a=PEEK(V:tekst$+c)
    IF prop_ch$(a)>""
      PUT tx,ty,prop_ch$(a)
      ADD tx,SUCC(CARD{V:prop_ch$(a)})
    ENDIF
    EXIT IF tx>WORK_OUT(0)
  NEXT c
RETURN
'
FUNCTION prop_len(tekst$)               ! calculates width in pixels for string
  $F&
  LOCAL a,c,l
  FOR c=0 TO LEN(tekst$)-1
    a=PEEK(V:tekst$+c)
    IF prop_ch$(a)>""
      ADD l,SUCC(CARD{V:prop_ch$(a)})
    ENDIF
  NEXT c
  RETURN l
ENDFUNC
'
PROCEDURE vr_recfl(x1,y1,x2,y2)
  PTSIN(0)=x1
  PTSIN(1)=y1
  PTSIN(2)=x2
  PTSIN(3)=y2
  VDISYS 114,0,2             ! vr_recfl(): draw fast box without border
RETURN
