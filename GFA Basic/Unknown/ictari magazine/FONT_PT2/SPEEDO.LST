' Below the settings for GfA I always use. With my compiler it is
' ESSENTIAL to tell it to OPTION BASE 0 (arrays start with element
' zero). If I don't, the compiler I use (v3.5) will initiate (unlike
' my editor) at OPTION BASE 1, leaving me with a lot of bombs..
'
OPTION BASE 0     ! 1st element of array is number ZERO
DEFWRD "a-z"      ! all variables with no suffix are 2-byte signed WORDS
DEFLIST 4         ! show commands in CAPS, variables in lowercase
'
' Routines below let you use Gdos bitmap and outline fonts
' if FSM gdos, Speedo gdos, or better still NVDI is loaded.
' Feel free to use the VDI_FUNC.LST file to use more GDOS-functions.
' If no GDOS is loaded, you can still use BITMAP-fonts, using
' the routines in the GDOS.LST file.
'
SELECT @vq_gdosname(gdos$)      ! test if GDOS is present
CASE 0                          ! if so, what can it do..
  ALERT 1,"No Gdos loaded.. ",1," Ok ",i
  EDIT
CASE 1,2
  ALERT 1,gdos$+" loaded. |Only BITMAP fonts |available.",1," Ok ",i
DEFAULT
  ALERT 1,gdos$+" loaded. |All fonts available. ",1," Ok ",i
ENDSELECT
RESERVE 100000                  ! vectorfonts use a LOT
workstation=V~H                 ! get current vdi workstation or open new
scrw=SUCC(WORK_OUT(0))          ! for clipping
scrh=SUCC(WORK_OUT(1))
nfonts=VST_LOAD_FONTS(0)        ! how many fonts are installed?
IF nfonts=0
  ALERT 1,"No Gdos fonts |installed.. ",1," Ok ",i
ELSE
  FOR i=1 TO nfonts+1
    CLS
    ~@vst_font(0)                                   ! this goes in systemfont
    TEXT 0,scrh/2,"Font:"
    font_name$=@font_getname$(i,font_id,font_type)  ! --> id, name AND type
    '    font_id=VQT_NAME(i,font_name$)             ! --> only id and name
    ~@vst_font(font_id)                             ! or DEFTEXT 1,,,,font_id
    '    ~@vst_rotation(700)
    CLIP 0,0,scrw,scrh                              ! essential for vectorfonts
    pts_pica=@font_set_h(14,d,d,d,d)                ! set height in 1/72 inch
    '    ~@font_set_w(20,d,d,d,d)                   ! adjust width if you like
    @v_ftext(48,scrh/2,font_name$+", "+STR$(pts_pica)+" points")
    '    TEXT 48,scrh/2,font_name$                  ! TEXT (v_gtext) also works
    EXIT IF INP(2)=27                               ! but spacing has errors..
  NEXT i
ENDIF
CLIP OFF
~VST_UNLOAD_FONTS(0)
RESERVE
EDIT
'
> FUNCTION cookie_find(id$)       ! find a cookie
LOCAL c_ptr%,cname%,c_val%
c_ptr%=LPEEK(&H5A0)           ! start of cookie-jar
IF OR(c_ptr%=0,ODD(c_ptr%))
  RETURN 0                    ! error: cookiejar does not exist
ELSE
  REPEAT
    cname%=LPEEK(c_ptr%)
    c_val%=LPEEK(c_ptr%+4)
    EXIT IF cname%=0          ! jar ends here
    ADD c_ptr%,8
  UNTIL MKL$(cname%)=id$      ! wanted cookie found
  IF cname%
    RETURN c_val%             ! return its value
  ENDIF
  RETURN -1                   ! jar exists, but noo  such cookie
ENDIF
ENDFUNC
'
> FUNCTION vq_gdosname(VAR gdosname$)
' fills a string the name of the actual loaded GDOS. Whith NVDI,
' the string gdosname$ also contains the versionnumber (like "NVDI 4.11")
' the function returns with a value, expressing the gdos-capabilities:
' 0= no gdosfunctions
' 1= bitmapfonts and drivers                         ! simply GDOS/AMCGDOS
' 2= 1+ bezierfunctions, vst_error()                 ! FONT-GDOS
' 3= 2+ QMS/Imagen outline vector fonts and caching  ! FSM-GDOS
' 4= 3+ Bitstream Speedo vector fonts and fix31-data ! SPEEDO-GDOS and NVDI =>3
' 5= 4+ TryeType fonts                               ! NVDI =>4
'
LOCAL gdosvalue%,nvdi%
gdosvalue%=@vq_gdos                   ! test gdos; (better than GfA's GDOS?)
IF gdosvalue%<>-2
nvdi%=@cookie_find("NVDI")          ! test for NVDI
IF nvdi%>0
  nvdi%=VAL(HEX$(CARD{nvdi%}))      ! version
ELSE
  CLR nvdi%
ENDIF
SELECT gdosvalue%                   ! which gdos?
CASE "_FNT"
  gdosname$="FONT-GDOS"             ! FONTGDOS
  gdosvalue%=2
CASE "_FSM"
  gdosvalue%=@cookie_find("FSMC")   ! what type of vector font possible?
  IF gdosvalue%>0
    SELECT LONG{gdosvalue%}
    CASE "_FSM"                     ! only Imagen vector fonts
      gdosname$="FSM-GDOS"          ! FSMGDOS
      gdosvalue%=3
    CASE "_SPD"                     ! also Bitstream (speedo) fonts
      gdosname$="SPEEDO-GDOS"       ! SPEEDO GDOS
      gdosvalue%=4-(nvdi%=>400)     ! 4 of 5 (=also TrueType vector fonts)
    ENDSELECT
  ELSE
    gdosname$="FSM-GDOS"
    gdosvalue%=3
  ENDIF
DEFAULT                             ! GDOS 1.0, 1.1 of 1.2
  gdosname$="GDOS"
  gdosvalue%=1
ENDSELECT
IF nvdi%
  gdosname$="NVDI "+STR$(nvdi%/100)
ENDIF
RETURN gdosvalue%
ENDIF
CLR gdosname$
RETURN 0
ENDFUNC
'
> FUNCTION vq_gdos
' not a real vdi function.
' returns with a value, denoting the GDOS-version
' installed:  -2 --> no GDOS
'              n --> GDOS 1.0, 1.1 of 1.2
'         '_FNT' --> FONTGDOS
'         '_FSM' --> FSMGDOS or higher like SPEEDO or NVDI =>3
'                    now, also look for the 'FSMC'-cookie
'
LOCAL gdos%,gdos$
gdos$=MKI$(&H70FE)+MKI$(&H4E42)+MKI$(&H4E75)
gdos%=V:gdos$
RETURN C:gdos%()
ENDFUNC
'
> FUNCTION open_workstation(drive_id)
LOCAL vdihandle
IF drive_id<=10               ! screen ?
vdihandle=V_OPNVWK(BYTE(XBIOS(4))+2)
ELSE                          ! drive_id: 01-10=screen,  11-20=plotter
vdihandle=V_OPNWK(drive_id) !           21-30=printer, 31-40=metafile
ENDIF                         !           41-50=camera,  51-60=graphic tablet
IF vdihandle>0                !           61-70=memory,  71-80=??
V~H=vdihandle               !           81-90=??,      91-100=IMG
ENDIF
RETURN vdihandle              ! return workstation (0=error)
' if vdihandle>0, then in INTOUT and PTSOUT you'll find
' the complete WORK_OUT array for that driver:
'  xresolution=INTOUT(0)      ! width
'  yresolution=INTOUT(1)      ! height
'  xdpi=CINT(25400/INTOUT(3)) ! dots per inch horizontal, see vq_currentdpi()
'  ydpi=CINT(25400/INTOUT(4)) ! dots per inch vertical
' if you substitute V_OPNWK() by @v_opnwk(),
' this workout array will be filled in for you.
ENDFUNC
'
> FUNCTION close_workstation(drive_id)
V~H=workstation
IF drive_id>10                ! not screen ?
~V_CLSWK()
ELSE
~V_CLSVWK()
ENDIF
V~H=-1                        ! reset GfA workstation
RETURN V~H
ENDFUNC
'
> FUNCTION clear_workstation(drive_id)
V~H=workstation
IF drive_id>10                ! not screen ?
~V_CLRWK()                  ! performs a formfeed on the printer
' if you don't want it to formfeed, use @v_clear_disp_list
ELSE
CLS
ENDIF
V~H=-1                        ! reset GfA workstation
RETURN V~H
ENDFUNC
'
> FUNCTION print_workstation(drive_id)
' if you are printing to PRINTER (drive_id=21 ... 30)
' always check if the printer is ready first with something like:
LOCAL dummy
IF AND(drive_id>20,drive_id<31)       ! really PRINTER?
WHILE GEMDOS(&H11)=0                ! printer not ready?
ALERT 3,"|Your printer is |NOT responding.. ",1,"Again| Abort ",dummy
EXIT IF dummy>1
WEND
IF dummy>1                          ! 2 means abort function
RETURN 0
ENDIF
ENDIF
'
IF drive_id>10              ! NOT for screens !
V~H=workstation
~V_UPDWK()                ! build page in memory
V~H=workstation           ! keep resetting V~H..
~V_CLSWK()                ! and start printing
ENDIF
V~H=-1                      ! reset GfA workstation
RETURN V~H
ENDFUNC
'
> FUNCTION vst_font(f_index)        ! set font
CONTRL(0)=21                    ! vst_font()
CONTRL(1)=0                     ! you can also use DEFTEXT, 5th parameter
CONTRL(3)=1
CONTRL(6)=workstation
INTIN(0)=f_index
VDISYS
RETURN INTOUT(0)                ! returns index of set font
ENDFUNC
'
> FUNCTION vst_rotation(degrees)    ! set font-angle
CONTRL(0)=13                    ! vst_rotation()
CONTRL(1)=0                     ! you can also use DEFTEXT, 3rd parameter
CONTRL(3)=1                     ! only outline fonts can be set to any
CONTRL(6)=workstation           ! angle; bitmap fonts go in steps of 90ø
INTIN(0)=degrees                ! ~@vst_rotation(700) --> 70ø LEFT
VDISYS
RETURN INTOUT(0)                ! returns angle actually set
ENDFUNC
'
> FUNCTION font_getname$(fontindex,VAR fontid,fonttype)
CONTRL(0)=130
CONTRL(1)=0
CONTRL(3)=1
CONTRL(6)=workstation
INTIN(0)=fontindex
VDISYS                          ! vqt_name
fontid=INTOUT(0)
fonttype=INTOUT(33)             ! font_type: 0=BITMAP, 1=OUTLINE (vector)
RETURN @get_intout$(1,32)       ! read name from INTOUT, max. 32 characters
ENDFUNC
'
> PROCEDURE font_getwh(f_type,t$,VAR w,h) ! get width and height for string
IF f_type>0                           ! 1: OUTLINE (vector) font
CONTRL(0)=240                       ! vqt_f_extent()
ELSE
CONTRL(0)=116                       ! vqt_extent()
ENDIF
CONTRL(1)=0
CONTRL(3)=LEN(t$)
CONTRL(6)=workstation
@put_intin(0,t$)                      ! put string as words in INTIN
VDISYS
w=PTSOUT(2)-PTSOUT(0)
h=PTSOUT(5)-PTSOUT(1)
RETURN
'
> FUNCTION font_set_h(punten,VAR wchar,hchar,wcell,hcell)
IF font_type                    ! OUTLINE (vector) font?
CONTRL(0)=246                 ! vst_arbpt()
ELSE
CONTRL(0)=107                 ! vst_point()
ENDIF
CONTRL(1)=0
CONTRL(3)=1
CONTRL(6)=workstation
INTIN(0)=punten
VDISYS
wchar=PTSOUT(0)
hchar=PTSOUT(1)
wcell=PTSOUT(2)
wcell=PTSOUT(3)
RETURN INTOUT(0)
ENDFUNC
'
> FUNCTION font_set_w(punten,VAR wchar,hchar,wcell,hcell)
CONTRL(0)=252                   ! set point WIDTH for font
CONTRL(1)=0
CONTRL(3)=1
CONTRL(6)=workstation
INTIN(0)=punten
VDISYS                          ! vst_setsize()
wchar=PTSOUT(0)
hchar=PTSOUT(1)
wcell=PTSOUT(2)
wcell=PTSOUT(3)
RETURN INTOUT(0)
ENDFUNC
'
> PROCEDURE put_intin(index,t$)
LOCAL tel,tadr%
tadr%=V:t$
FOR tel=0 TO PRED(LEN(t$))
INTIN(tel+index)=BYTE{tadr%}          ! bytes from string become
INC tadr%                             ! words in INTIN-array
NEXT tel
RETURN
'
> FUNCTION get_intout$(index,mlengte)
LOCAL tel,t$
CLR t$
FOR tel=index TO PRED(index+mlengte)
EXIT IF INTOUT(tel)=0
t$=t$+CHR$(INTOUT(tel))
NEXT tel
RETURN t$
ENDFUNC
'
> PROCEDURE v_ftext(x,y,t$)
CONTRL(0)=241
CONTRL(1)=1
CONTRL(3)=LEN(t$)
CONTRL(6)=workstation
@put_intin(0,t$)                      ! put string as words in INTIN
PTSIN(0)=x
PTSIN(1)=y
VDISYS
RETURN
