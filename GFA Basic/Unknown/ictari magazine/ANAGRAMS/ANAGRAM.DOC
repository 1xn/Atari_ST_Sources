


                              EATING YOUR OWN TAIL
                                 or "Recursion"

        Recursive routines are  often  avoided  by  programmers for very
        good  reasons!  One  is  that   they   are  often  difficult  to
        understand, so that it  is  easy  to  make mistakes when writing
        them. Another is that they  tend  to be inefficient. Values have
        to be  preserved  "behind  the  scenes"  so  that  they  are not
        overwritten when the procedure  calls  itself.  Storage for them
        mounts up over a chain of such calls, even though you cannot see
        it doing so. The chain might become  so long that you use up all
        available memory! Such procedures often look compact, but you do
        not get something for nothing!

        Thus recursive procedures should not be used without considering
        the alternatives; sometimes, however,  it  may  be difficult, if
        not impossible, to find any alternative.

        Consider the problem of finding all  the anagrams on a string of
        letters input by the user,  whatever  the  length of the string.
        One's first thought is to  use  a  set  of nested loops. But the
        depth of nesting depends on  the  length  of the string! However
        deep one makes the nesting, the  user  can always input a string
        which needs deeper nesting! A recursive procedure gets over this
        difficulty.

        One solution is shown by the  listing "ANAGRAM1" (written in GFA
        Basic 3).  The  idea  is  that  one  starts  with  two  strings.
        The first is the one input by  the  user;  the other is an empty
        string. These are  used  as  arguments  to  the  procedure PERM.
        Within this procedure there are two main branches:

             (a)  If the first string  contains  only one character
                  or is empty, we  print  the  concatenation of the
                  two strings which  were  input  to the procedure,
                  and return to the point following the call of the
                  procedure. (One or  both  of  the  strings may of
                  course be empty).

             (b)  Otherwise we form two strings  to output from the
                  procedure. The second of  these  contains all the
                  characters in the second of the two strings which
                  were input to the procedure (possibly none), with
                  a character chosen  from  the  first input string
                  appended at  the  end.  The  first  output string
                  contains all  those  in  the  first  input string
                  except for the chosen character.  Note that we do
                  NOT alter the input  strings.  We  then use these
                  output  strings  as  arguments  to  the  selfsame
                  procedure (i.e. calling it from within itself).

                  On return  from  this  call,  we  choose  another
                  character from the first  input string instead of
                  the previously chosen  character,  and repeat the
                  process until they have  all  been  used. We then
                  return to the point following that from which the
                  procedure was called.

        Thus, when the  program  is  run,  the  procedure  is  called at
        successively deeper levels. At  each  level,  the  length of the
        first input string will be one  less  than at the next level up.
        At the deepest level,  branch  (a)  will  be executed, since the
        first input string will  by  this  time  have  been reduced to a
        single character; at all  other  levels,  it  will be branch (b)
        that is executed.

        At each level,  the  value  of  certain  variables  needs  to be
        preserved, so  as  not  to  be  overwritten  at  a  deeper level
        (despite the variable names being the  same). This is done auto-
        matically in GFA Basic 3  for  the  parameters of the procedure,
        provided that they are NOT  made  VAR  parameters, and for other
        variables by declaring them to be LOCAL.

        The user may  not  wish  to  see  any  more permutations, either
        because he has found the one  he  wants, or because they seem to
        be  endless  (even  with   only   8   letters  there  are  40320
        permutations!). If more than 20 permutations are generated, then
        20 are displayed at a time,  and  the user is then asked whether
        he wishes to continue or to  escape. A boolean variable "abort!"
        is set to TRUE if he wants  to  escape, or FALSE if not. This is
        done in branch (a), and as usual,  there is a return to the next
        level up.  At  this  level,  branch  (b)  will  be  executed; if
        "abort!" is TRUE, the choosing of another character and the call
        to a deeper level is skipped, and again there is simply a return
        to the next  level  up.  Eventually  we  shall  get  back to the
        topmost level and thence to the main program.


        ANAGRAM2
        --------

        Though ANAGRAM1 does the job,  it  is  not very satisfactory for
        real use. If the input string  contains  two or more of the same
        character, then some permutations will  be duplicates of others.
        For instance, it will permute the  three letters "A" in the word
        ANAGRAM  as  if  they   were   all   different!  By  eliminating
        duplicates, we can  reduce  greatly  the  number of permutations
        displayed. A further reduction can be  made by not permuting any
        characters whose positions we already know. The reduction can be
        quite drastic! All this is  implemented in ANAGRAM2. Even though
        the program is more than twice  as long, permutations seem to be
        displayed just as quickly!

        With this version, there is an error message if any character in
        the input string is non-alphabetic  or  a space; if so, you have
        to  input the string again!

        You also have to input  a  "mask"  string,  in which you put any
        known  characters  where   they   belong,   and  question  marks
        elsewhere. Your "mask" is  validated;  if it contains characters
        which are not in the "input"  string,  or if the two strings are
        not the same length, there is an  error message, and you have to
        input the mask again.

        The program converts both strings  to  capitals,  so it does not
        matter whether you enter  them  in  capitals  or not. This does,
        incidentally, eliminate permutations which  are duplicates apart
        from being in capital  or  small  letters.  Other duplicates are
        eliminated by sorting the input string into ascending order in a
        work string, so that in branch  (b)  we can select only the last
        of a group of identical characters.

        It also removes from the  work  string any alphabetic characters
        which are in  the  "mask"  string,  so  reducing  the  number of
        characters  to  be  permuted.  When   it   comes  to  display  a
        permutation, it forms  an  output  string  containing  the known
        characters, if any, in  their  due  positions,  and fills in the
        other characters from the  current  permutation  in the order in
        which they occur in it.

        Remember that  if  you  do  nothing  to  reduce  the  number  of
        permutations  (as  is  the  case   with  ANAGRAM1),  the  number
        increases alarmingly  with  the  number  of  characters  in  the
        string. It is in fact equal  to  factorial "n", where "n" is the
        number of characters in the string, e.g.:-

                Number of characters      Number of permutations
                --------------------      ----------------------
                          1                            1
                          2                            2
                          3                            6
                          4                           24
                          5                          120
                          6                          720
                          7                         5040
                          8                        40320
                          9                       362880
                         10                      3628800

        There can be an awful lot to  look through! If despite this, you
        insist on being able to input  more characters than will fit the
        width of the screen, you will  have  to  modify the parts of the
        programs which display the string and its permutations. However,
        well before you need to do this, you may well run out of memory!
        Good luck to all you crossword fanatics!
