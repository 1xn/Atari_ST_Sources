.he      \d                Program: ANAGRAM2                   Page #
.pl60
.lr6
.n3
.ll80
REM Program "Anagram2"
'
esc$=CHR$(27)
rtn$=CHR$(13)
dummy_char$=CHR$(63)
maxlines|=20
'
REPEAT
  CLS
  linesleft|=maxlines|
  abort!=FALSE
  '
  REPEAT
    INPUT "String";my_string$
    my_string$=UPPER$(my_string$)
    my_strlen%=LEN(my_string$)
    '
    FOR j%=1 TO my_strlen%
      this_char$=MID$(my_string$,j%,1)
      alpha!=this_char$>="A" AND this_char$<="Z"
      EXIT IF NOT alpha!
    NEXT j%
    '
    IF NOT alpha! THEN
      PRINT AT(1,3);"String not all alphabetic!"
      PRINT "Press a key."
      ~INP(2)
      CLS
    ENDIF
    '
  UNTIL alpha!
  '
  REPEAT
    PRINT AT(1,21);"For mask, enter:-"
    PRINT "  known characters where they belong,"
    PRINT "  ";dummy_char$;" elsewhere,"
    PRINT "  for exact length of the string."
    PRINT AT(3,2);
    INPUT "Mask";my_mask$
    my_mask$=UPPER$(my_mask$)
    my_masklen%=LEN(my_mask$)
    wkg_str$=my_string$
    wkg_strlen%=my_strlen%
    match_ok!=@match(my_mask$,dummy_char$,wkg_str$,wkg_strlen%)
    '
    IF NOT match_ok! THEN
      PRINT
      PRINT "Bad character in mask, or length wrong."
      PRINT "Press a key."
      ~INP(2)
      PRINT AT(1,2);CHR$(27)+"J";
    ENDIF
    '
  UNTIL match_ok!
  '
  CLS
  ERASE mask_arr$()
  '
  DIM mask_arr$(my_masklen%)
  FOR j%=1 TO my_masklen%
    mask_arr$(j%)=MID$(my_mask$,j%,1)
  NEXT j%
  '
  IF wkg_strlen%>1 THEN
    DIM temp_arr$(wkg_strlen%)
    '
    FOR j%=1 TO wkg_strlen%
      temp_arr$(j%)=MID$(wkg_str$,j%,1)
    NEXT j%
    '
    SSORT temp_arr$()
    '
    wkg_str$=""
    FOR j%=1 TO wkg_strlen%
      wkg_str$=wkg_str$+temp_arr$(j%)
    NEXT j%
    '
    ERASE temp_arr$()
  ENDIF
  '
  GOSUB perm(wkg_str$,"")
  '
  PRINT AT(1,23);"Press <Return> to restart. "
  PRINT "Press <Escape> to exit. "
  '
UNTIL @wotnext$=esc$
'
CLS
END
'
'
FUNCTION wotnext$
  LOCAL reply$
  '
  REPEAT
    reply$=INKEY$
  UNTIL (reply$=esc$ OR reply$=rtn$)
  '
  RETURN reply$
ENDFUNC
'
'
FUNCTION match(f_mask$,dummy_char$,VAR f_string$,f_strlen%)
  LOCAL mask_len%,k%,this_char$,posn%
  '
  mask_len%=LEN(f_mask$)
  '
  IF mask_len%<>f_strlen% THEN
    RETURN FALSE
  ENDIF
  '
  k%=1
  DO WHILE f_strlen%>0
    this_char$=MID$(f_mask$,k%,1)
    '
    IF this_char$<>dummy_char$ THEN
      posn%=INSTR(f_string$,this_char$)
      '
      IF posn%<1 THEN
        RETURN FALSE
      ENDIF
      '
      f_string$=@del_char$(f_string$,f_strlen%,posn%)
      DEC f_strlen%
    ENDIF
    '
    INC k%
    '
  LOOP UNTIL k%>mask_len%
  '
  RETURN TRUE
ENDFUNC
'
'
FUNCTION del_char$(f_string$,f_strlen%,posn%)
  LOCAL new_str$
  '
  new_str$=LEFT$(f_string$,posn%-1)
  new_str$=new_str$+RIGHT$(f_string$,f_strlen%-posn%)
  '
  RETURN new_str$
ENDFUNC
'
'
PROCEDURE perm(string_a.in$,string_b.in$)
  LOCAL string_a.out$,string_b.out$,strlen_a.in%,chosen$,i%
  LOCAL chars_permed$,char_pntr%,out_string$,j%
  '
  strlen_a.in%=LEN(string_a.in$)
  '
  IF strlen_a.in%<2 THEN
    chars_permed$=string_b.in$+string_a.in$
    char_pntr%=1
    out_string$=""
    '
    FOR j%=1 TO my_masklen%
      '
      IF mask_arr$(j%)=dummy_char$ THEN
        out_string$=out_string$+MID$(chars_permed$,char_pntr%,1)
        INC char_pntr%
      ELSE
        out_string$=out_string$+mask_arr$(j%)
      ENDIF
      '
    NEXT j%
    '
    PRINT out_string$
    DEC linesleft|
    '
    IF linesleft|<1 THEN
      PRINT AT(1,23);"Press <Return> to continue."
      PRINT "Press <Escape> to abort."
      abort!=(@wotnext$=esc$)
      CLS
      linesleft|=maxlines|
    ENDIF
    '
  ELSE
    i%=1
    '
    DO UNTIL abort!
      chosen$=MID$(string_a.in$,i%,1)
      '
      DO WHILE i%<strlen_a.in%
        duplicate!=(chosen$=MID$(string_a.in$,i%+1,1))
        '
        IF duplicate! THEN
          INC i%
        ENDIF
        '
      LOOP UNTIL NOT duplicate!
      '
      string_b.out$=string_b.in$+chosen$
      string_a.out$=@del_char$(string_a.in$,strlen_a.in%,i%)
      GOSUB perm(string_a.out$,string_b.out$)
      INC i%
      '
    LOOP UNTIL (i%>strlen_a.in%)
    '
  ENDIF
  '
RETURN
