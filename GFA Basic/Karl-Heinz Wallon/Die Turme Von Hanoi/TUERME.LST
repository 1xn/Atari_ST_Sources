' ------------------------------------------------------------------------------
' Name          : Die TÅrme von Hanoi
' Autor         : Karl-Heinz Wallon
' Sprache       : GFA-Basic 3.03
' Anfang        : 21.11.1988
' Ende          : 25.11.1988
' Bemerkung     : Denkspiel
' ------------------------------------------------------------------------------
'
DEFBYT "a-z"
hin$="Hallo und guten Tag|Dies ist das NEUE Spiel von ISE-Software es heist|"
hin$=hin$+"             Die TÅrme von Hanoi|geschrieben von : Karl-Heinz Wallon|"
hin$=hin$+"                  Leidenhofenerstr. 25|                  3557 Ebsdorfergrund 6|                  Tel.: 06424/4504"
hin$=hin$+"|  |Bitte eine Taste drÅcken !"
@hinweisbox(hin$)
~INP(2)
neustarten:
RESTORE spritedaten
CLS
@init
@mouse_init
@bildschirm
@aufbau
DO
  MOUSE mx&,my&,mk
  t$=INKEY$
  t$=UPPER$(t$)
  IF t$="N"
    ALERT 3,"Willst du das Programm|wirklich Neustarten ??",1," Ja | Nein ",a
    IF a=1
      GOTO neustarten
    ENDIF
  ENDIF
  IF t$="E"
    ALERT 1,"Programm wirklich und|wahrhaftig beenden ???",2," Ja | Nein ",a
    IF a=1
      EDIT
    ENDIF
  ENDIF
  IF t$="I"
    SGET bild$
    hin$="Die TÅrme von Hanoi| |Ω 11.1988 by ISE-Software (K-H Wallon / C. Hîrner)| |Bitte Taste drÅcken !"
    @hinweisbox(hin$)
    ~INP(2)
    hin$="Geschichte: Vor langer Zeit  gab es Vietnam eine Legende:|In einer Tempelstadt standen drei Podeste aus Kupfer, Silber|und Gold."
    hin$=hin$+"Auf dem Kupferpodest sind 100 Runde Steinplatten aufgeschichtet|die unterste hat den grîûten, die oberste den kleinsten "
    hin$=hin$+"Durchmesser!|Bitte Taste drÅcken!!"
    @hinweisbox(hin$)
    ~INP(2)
    hin$="Das Ende der Welt wird kommen wenn es jemand|gelingt die Platten nach folgenden Regeln|vom Kupfer auf das Goldpodest zu bringen!|"
    hin$=hin$+"1. Er darf immer nur einen Stein bewegen|2. Er darf nur den obersten Stein bewegen|"
    hin$=hin$+"3. Er darf das Silberpodest als zwischenlager nehmen|    jedoch keinen Stein zur Seite legen|"
    hin$=hin$+"4. Es darf nie ein grîûerer Stein auf einen kleineren |    gelegt werden!"
    @hinweisbox(hin$)
    ~INP(2)
    hin$="Da die Welt noch steht dÅrfte es noch niemand geschafft haben!|   |  |Also ran an die Podeste!|"
    hin$=hin$+"Bitte Taste drÅcken!"
    @hinweisbox(hin$)
    ~INP(2)
    CLS
    SPUT bild$
    CLR bild$
  ENDIF
  IF t$="S"
    ALERT 1,"Schwierigkeitsgrad einstellen:|        Bitte wÑhle|  |",2," eins | zwei | drei ",sgrad
    versuche%=2^anz+(60/sgrad)
    @anzeige
  ENDIF
  SELECT mx&
  CASE 0 TO 169
    IF flag<>1
      DEFMOUSE spr_a$
      flag=1
    ENDIF
  CASE 170 TO 325
    IF flag<>2
      DEFMOUSE spr_b$
      flag=2
    ENDIF
  CASE 326 TO 480
    IF flag<>3
      DEFMOUSE spr_c$
      flag=3
    ENDIF
  CASE 480 TO 640
    IF flag<>4
      DEFMOUSE 3
      flag=4
    ENDIF
  ENDSELECT
  IF mk=1 AND von!=FALSE
    von!=TRUE
    IF flag=1
      t$="A"
      PRINT AT(2,2);"Platte von "+t$+" nach ?"
      von=1
    ELSE IF flag=2
      t$="B"
      PRINT AT(2,2);"Platte von "+t$+" nach ?"
      von=2
    ELSE IF flag=3
      t$="C"
      PRINT AT(2,2);"Platte von "+t$+" nach ?"
      von=3
    ENDIF
  ENDIF
  IF mk=2 AND von!=TRUE
    von!=FALSE
    IF flag=1
      t$="A"
      PRINT AT(20,2);"Platte "+t$
      nach=1
    ELSE IF flag=2
      t$="B"
      PRINT AT(20,2);"Platte "+t$
      nach=2
    ELSE IF flag=3
      t$="C"
      PRINT AT(20,2);"Platte "+t$
      nach=3
    ENDIF
    @zulaessig
    IF gefunden!
      ALERT 1,"Toll Toll Toll Toll|Du hast es geschaft|        BRAVO",1," Spiel | Ende",a
      IF a=1
        RUN
      ENDIF
      IF a=2
        EDIT
      ENDIF
    ENDIF
  ENDIF
LOOP
EDIT
PROCEDURE init
  LOCAL anz$
  sgrad=1
  gversuche%=0
  fversuche=0
  anz=5
  anz$="5"
  REPEAT
    PRINT AT(2,2);"Anzahl der Platten eingeben : ";
    FORM INPUT 2 AS anz$
    anz=VAL(anz$)
  UNTIL anz>=3 AND anz<=20
  versuche%=2^anz+(60/sgrad)
  OPTION BASE 1
  ERASE platten(),orginal()
  DIM platten(3,2,anz),orginal(anz)
  FOR i=1 TO anz
    platten(1,1,i)=(anz+1)-i
    orginal(i)=(anz+1)-i
  NEXT i
  FOR i=1 TO anz
    platten(2,1,i)=10
  NEXT i
  FOR i=1 TO anz
    platten(3,1,i)=10
  NEXT i
  platten(1,2,1)=anz
  CLR b
  CLR c
  CLR fversuche
RETURN
> PROCEDURE bildschirm
  DEFFILL 1,2,4
  PBOX 0,0,500,400
  DEFFILL 0
  PBOX 5,5,495,395
  DEFTEXT 1,5,0,32
  DEFFILL 1,2,2
  GRAPHMODE 2
  PBOX 501,0,640,130
  TEXT 520,35,"TÅrme"
  TEXT 535,70,"von"
  TEXT 520,105,"Hanoi"
  DEFTEXT 1,4,0,6
  TEXT 505,128,"Ω by ISE-Software"
  @anzeige
  DEFLINE 1,6
  LINE 500,280,640,280
  DEFTEXT 1,0,0,16
  TEXT 505,300,"N -> Neustart  "
  TEXT 505,320,"E -> Ende      "
  TEXT 505,340,"S -> Schw.Grad"
  TEXT 505,360,"I -> Info"
  DEFTEXT 1,0,0,13
  DEFFILL 1,2,4
  PBOX 15,360,155,373
  TEXT 75,390,"A"
  DEFFILL 1,2,6
  PBOX 177,360,317,373
  TEXT 245,390,"B"
  DEFFILL 1,2,8
  PBOX 339,360,479,373
  TEXT 410,390,"C"
  DEFFILL 0
  DEFLINE 1,1
RETURN
> PROCEDURE mouse_init
  LOCAL hinten#,vorne#
  '
  ' Mouse-Daten in einen String umwandeln
  LET spr_a$=MKI$(0)+MKI$(0)+MKI$(1)
  LET spr_a$=spr_a$+MKI$(0)+MKI$(1)
  FOR i%=1 TO 16
    READ hinten#
    LET spr_a$=spr_a$+MKI$(hinten#)
  NEXT i%
  FOR i%=1 TO 16
    READ vorn#
    LET spr_a$=spr_a$+MKI$(vorn#)
  NEXT i%
  spritedaten:
  DATA 960,1056,2064,4104,9156,9828,9252,10212,8196,8196,10212,9252,9252,26214,16962,32382
  DATA 0,960,2016,4080,7224,6168,6168,6168,8184,8184,6168,6168,6168,6168,15420,0
  '
  ' Mouse-Daten in einen String umwandeln
  LET spr_b$=MKI$(0)+MKI$(0)+MKI$(1)
  LET spr_b$=spr_b$+MKI$(0)+MKI$(1)
  FOR i%=1 TO 16
    READ hinten#
    LET spr_b$=spr_b$+MKI$(hinten#)
  NEXT i%
  FOR i%=1 TO 16
    READ vorn#
    LET spr_b$=spr_b$+MKI$(vorn#)
  NEXT i%
  DATA 32764,16388,24578,10225,9241,9241,10225,8194,8194,10225,9241,9241,10225,24578,16388,32760
  DATA 0,16376,8188,6158,6150,6150,6158,8188,8188,6158,6150,6150,6158,8188,16376,0
  '
  ' Mouse-Daten in einen String umwandeln
  LET spr_c$=MKI$(0)+MKI$(0)+MKI$(1)
  LET spr_c$=spr_c$+MKI$(0)+MKI$(1)
  FOR i%=1 TO 16
    READ hinten#
    LET spr_c$=spr_c$+MKI$(hinten#)
  NEXT i%
  FOR i%=1 TO 16
    READ vorn#
    LET spr_c$=spr_c$+MKI$(vorn#)
  NEXT i%
  DATA 2032,2056,4100,9186,9746,9246,9216,9216,9216,9216,9246,9746,9186,4100,2056,2032
  DATA 0,2032,4088,7196,6156,6144,6144,6144,6144,6144,6144,6156,7196,4088,2032,0
RETURN
> PROCEDURE aufbau
  DEFFILL 1,2,8
  SELECT anz
  CASE  TO 10
    faktor=5
  CASE 11 TO 20
    faktor=4
  ENDSELECT
  @azent
  @bzent
  @czent
RETURN
> PROCEDURE azent
  LOCAL xp&,yp&,xp1&,anzahl,z
  yp&=350
  DEFFILL 0
  PBOX 8,8,169,356
  DEFFILL 1,2,8
  anzahl=platten(1,2,1)
  z=1
  REPEAT
    xp&=83-platten(1,1,z)*faktor
    xp1&=83+platten(1,1,z)*faktor
    PBOX xp&,yp&,xp1&,yp&+5
    INC z
    SUB yp&,7
  UNTIL z>anzahl
RETURN
> PROCEDURE bzent
  LOCAL xp&,yp&,xp1&,b,anzahl,z
  anzahl=platten(2,2,1)
  yp&=350
  DEFFILL 0
  PBOX 170,8,325,356
  IF anzahl>0
    DEFFILL 1,2,8
    z=1
    REPEAT
      xp&=253-platten(2,1,z)*faktor
      xp1&=253+platten(2,1,z)*faktor
      PBOX xp&,yp&,xp1&,yp&+5
      INC z
      SUB yp&,7
    UNTIL z>anzahl
  ENDIF
RETURN
> PROCEDURE czent
  LOCAL xp&,yp&,xp1&,anzahl,z
  anzahl=platten(3,2,1)
  yp&=350
  DEFFILL 0
  PBOX 326,8,480,356
  IF anzahl>0
    DEFFILL 1,2,8
    z=1
    REPEAT
      xp&=417-platten(3,1,z)*faktor
      xp1&=417+platten(3,1,z)*faktor
      PBOX xp&,yp&,xp1&,yp&+5
      INC z
      SUB yp&,7
    UNTIL z>anzahl
  ENDIF
RETURN
> PROCEDURE zulaessig
  PRINT AT(2,2);SPACE$(60)
  IF von=nach
    ALERT 3,"Du muût den Stein von|von einer Platte zur anderen|bewegen. Sonst geht das |nicht !!!",1,"gelernt",a
    INC fversuche
    GOTO nicht_zulaessig
  ENDIF
  vanz=platten(von,2,1)   ! anzahl der Platten von
  nanz=platten(nach,2,1)  ! anzahl der Platten nach
  IF vanz=0 AND nanz=0
    ALERT 3,"Eine Platte muû schon |verschoben werden!",1,"gelernt",a
    INC fversuche
    GOTO nicht_zulaessig
  ENDIF
  IF nanz=0
    nanz=1
  ENDIF
  gr=platten(von,1,vanz)
  ngr=platten(nach,1,nanz)
  IF platten(nach,2,1)=0  ! Ein kleiner Trick bei der ersten platte
    ngr=gr+1
  ENDIF
  IF gr>ngr
    ALERT 3,"Die untere Platte muû|grîûer sein als die welche|aufgelegt werden soll!!",1,"gelernt",a
    INC fversuche
    GOTO nicht_zulaessig
  ENDIF
  IF platten(nach,2,1)<1
    platten(nach,1,nanz)=platten(von,1,vanz)
    platten(von,1,vanz)=0
  ELSE
    platten(nach,1,nanz+1)=platten(von,1,vanz)
    platten(von,1,vanz)=0
  ENDIF
  INC platten(nach,2,1)
  DEC platten(von,2,1)
  @azent
  @bzent
  @czent
  INC gversuche%
  nicht_zulaessig:
  @anzeige
  @pruefen
RETURN
> PROCEDURE anzeige
  DEFFILL 0
  PBOX 503,150,635,250
  DEFTEXT 1,0,0,13
  GRAPHMODE 1
  TEXT 505,160,"Platten  : "+STR$(anz)
  TEXT 505,190,"ZÅge max : "+STR$(versuche%)
  TEXT 505,220,"ZÅge     : "+STR$(gversuche%)
  TEXT 505,240,"FehlzÅge : "+STR$(fversuche)
  TEXT 505,260,"Schw.Grad: "+STR$(sgrad)
  IF gversuche%>versuche%
    @game_over
  ENDIF
  IF fversuche=10
    @game_over
  ENDIF
RETURN
> PROCEDURE pruefen
  ERASE g!()
  DIM g!(anz)
  FOR i=1 TO anz
    IF platten(3,1,i)=orginal(i)
      g!(i)=TRUE
    ELSE
      g!(i)=FALSE
    ENDIF
  NEXT i
  gefunden!=TRUE
  FOR i=1 TO anz
    IF g!(i)=FALSE
      gefunden!=FALSE
    ENDIF
    EXIT IF gefunden!=FALSE
  NEXT i
RETURN
> PROCEDURE game_over
  LOCAL z&,xp&,yp&
  GRAPHMODE 2
  FOR i&=1 TO 500
    mu=RANDOM(24)
    br=RANDOM(50)
    hh=RANDOM(50)
    DEFFILL 1,2,mu
    xp&=RANDOM(630)
    yp&=RANDOM(390)
    PBOX xp&,yp&,xp&+br,yp&+hh
  NEXT i&
  GRAPHMODE 1
  ALERT 0,"                   |  G A M E  -  O V E R|     Spielende|             |",1,"Schade",a
  RUN
RETURN
> PROCEDURE hinweisbox(t$)
  OPTION BASE 0
  LOCAL zb%,zh%,trenn&,atrenn&,anz&,bbreit&,bhoch&,xpos&,ypos&,ende!
  DIM anz&(20),anz$(10)
  DEFFILL 1,2,4                      ! Hintergrund
  PBOX 0,0,639,399
  DEFTEXT 1,4,0,13                   ! Schrift
  VDISYS 38                          ! Achtung :
  zb%=DPEEK(PTSOUT+4)                ! ZeichenBreite und ZeichenHîhe stimmen nach diesem
  zh%=DPEEK(PTSOUT+6)                ! Aufruf beim Mega ST nicht
  ' FÅr Mega ST bei normaler Schrift:
  ' zb%=8
  ' zh%=16
  atrenn&=1
  CLR trenn&
  CLR anz&
  ende!=FALSE
  WHILE NOT ende!                    ! Aufteilen in einzelne Strings -- Trennung durch '|'
    trenn&=INSTR(t$,"|",atrenn&)       ! Trennzeichen suchen
    IF trenn&>atrenn&                  ! gefunden !
      anz$(anz&)=MID$(t$,atrenn&,trenn&-atrenn&) !String Åbernehmen
      anz&(anz&)=LEN(anz$(anz&))                !lÑnge des Strings ermitteln
      atrenn&=trenn&+1                         !nÑchste Suchposition
      INC anz&
    ELSE                             ! kein Trennzeichen da
      anz$(anz&)=MID$(t$,atrenn&)              ! Rest des Strings Åbergeben
      anz&(anz&)=LEN(anz$(anz&))
      ende!=TRUE
    ENDIF
  WEND
  SSORT anz&(-)                       ! lÑngenfeld Sortieren
  bbreit&=anz&(0)*zb%+40              ! Boxbreite berechenen
  bhoch&=(anz&+4)*zh%                 ! Boxhîhe berechenen
  xpos&=320-bbreit&/2                ! Box Zentrieren
  ypos&=200-bhoch&/2
  DEFFILL 1,0
  PBOX xpos&,ypos&,xpos&+bbreit&,ypos&+bhoch&
  BOX xpos&+3,ypos&+3,xpos&+bbreit&-3,ypos&+bhoch&-3
  BOX xpos&+4,ypos&+4,xpos&+bbreit&-4,ypos&+bhoch&-4
  FOR i=0 TO anz&
    TEXT xpos&+10,ypos&+((2+i)*zh%),anz$(i)
  NEXT i
  DEFTEXT 1,0,0,13                   ! Text auf Normal (falls geÑndert)
  ERASE anz&(),anz$()
  OPTION BASE 1
RETURN
