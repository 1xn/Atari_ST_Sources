     PROCEDURE initio.sprite1
       ' *** global :  SPRITE1$
       RESTORE pattern.sprite1
       @make.sprite(sprite1$)
       pattern.sprite1:
       ' *** x,y,mode(0=normal;1=XOR),mask-colour,sprite-colour
       DATA 0,0,0,0,1
       ' *** mask-pattern (1 = pixel on , 0 = pixel off)
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       ' *** sprite-pattern
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
       DATA 0000000000000000
     RETURN
     ' 
     PROCEDURE make.sprite(VAR s$)
       LOCAL x,y,mode,msk.color,spr.color,n,msk%,spr%,msk.pat$,spr.pat$
       LOCAL msk$,spr$,pat$
       CLR msk.pat$,spr.pat$,pat$
       READ x,y,mode,msk.color,spr.color
       FOR n=1 TO 16
         READ msk$
         msk%=VAL("&X"+msk$)
         msk.pat$=msk.pat$+MKI$(msk%)
      NEXT n
       FOR n=1 TO 16
         READ spr$
         spr%=VAL("&X"+spr$)
         spr.pat$=spr.pat$+MKI$(spr%)
       NEXT n
       FOR n=1 TO 16
         pat$=pat$+MID$(msk.pat$,n*2-1,2)+MID$(spr.pat$,n*2-1,2)
       NEXT n
       s$=MKI$(x)+MKI$(y)+MKI$(mode)+MKI$(color.index(msk.color))
       s$=s$+MKI$(color.index(spr.color))+pat$
     RETURN
The mask should be an exact copy of the sprite-pattern if you need a 
transparant sprite. Leave the mask empty (all '0') and the sprite will 
disappear behind objects on the screen. Fill the mask with '1' and the 
16x16 sprite will always remain visible. Switch mask- and sprite-colour in 
the first DATA-line to create a "reverse" sprite. Or use any VDI colour-
index that is available in the current resolution.

If you put a sprite on the screen, the background (16x16 pixels) is 
temporarily saved. Using more than one sprite simultaneously, it is 
essential you remove sprites in reverse order. This is necessary because a 
sprite could overlap another sprite. Removing the top sprite first ensures 
that the original background will reappear after removing the first 
sprite, e.g. :

     DO
       (...)
       SPRITE s2$        ! remove sprites...
       SPRITE s1$
       VSYNC             ! prevents blinking, but slows down
       SPRITE s1$,x1,y1  ! draw sprites...
       SPRITE s2$,x2,y2
       (...)
     LOOP