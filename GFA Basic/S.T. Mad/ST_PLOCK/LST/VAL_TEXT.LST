Umwandlung: Dezimalzahl -> 'Zahlwort'                     GFA-Routinen

Autor: [X]

'
GOSUB init_ziffernwoerter
'
zahl=567899512
GOSUB zahlen_in_text(zahl)
PRINT zahlstring$
'
PROCEDURE zahlen_in_text(zahl)
  zahlstring$=""
  ' Millionenteil umwandeln
  teil=zahl DIV 1000000
  suffix$=" Million"
  IF teil<>0
    ' Millionen vorhanden, also umwandeln
    GOSUB umwandlung(teil)
    zahlstring$=umwandlung$
    IF teil<>1
      ' sogar mehrere Millionen, also Mehrzahl
      suffix$=suffix$+"en"
    ELSE
      ' sonst aus 'ein' 'eine' machen
      zahlstring$=zahlstring$+"e"
    ENDIF
    zahlstring$=zahlstring$+suffix$+" "
  ENDIF
  ' jetzt den Tausenderteil
  zahl=zahl MOD 1000000
  teil=zahl DIV 1000
  suffix$="tausend"
  IF teil<>0
    ' Tausender vorhanden
    GOSUB umwandlung(teil)
    zahlstring$=zahlstring$+umwandlung$+suffix$
  ENDIF
  ' jetzt den Rest unter 1000
  zahl=zahl MOD 1000
  IF zahl<>0
    ' noch Zahlen umwandeln
    GOSUB umwandlung(zahl)
    zahlstring$=zahlstring$+umwandlung$
    IF (zahl MOD 100)=1
      ' aus 'einhundertein' mache 'einhunderteins'
      zahlstring$=zahlstring$+"s"
    ENDIF
  ENDIF
  IF zahlstring$=""
    ' Zahl war Null, also String belegen
    zahlstring$="null"
  ENDIF
RETURN
'
PROCEDURE umwandlung(teil)
  umwandlung$=""
  ' zuerst die Stellen isolieren
  hunderter=teil DIV 100
  zehner=(teil MOD 100) DIV 10
  einer=teil MOD 10
  ' Hunderter umwandeln
  IF hunderter<>0 THEN
    umwandlung$=ziffernwort$(hunderter)+"hundert"
  ENDIF
  ' Jetzt den Rest
  IF zehner=1 THEN
    ' Zahl zwischen 10 und 19 -> SonderfÑlle
    umwandlung$=umwandlung$+zahlwort$(einer)
  ELSE
    ' sonst Einer umwandeln
    IF einer<>0 THEN
      umwandlung$=umwandlung$+ziffernwort$(einer)
    ENDIF
    IF zehner>=2 THEN
      ' Falls Zehner vorhanden, auch diese umwandeln
      IF einer<>0 THEN
        ' aus 'zweizwanzig' wird 'zweiUNDzwanzig'
        umwandlung$=umwandlung$+"und"
      ENDIF
      umwandlung$=umwandlung$+zehnerwort$(zehner)
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE init_ziffernwoerter
  DIM ziffernwort$(9),zahlwort$(9),zehnerwort$(9)
  RESTORE ziffernwoerter
  FOR i=1 TO 9
    READ ziffernwort$(i)
  NEXT i
  RESTORE zahlwoerter
  FOR i=0 TO 9
    READ zahlwort$(i)
  NEXT i
  RESTORE zehnerwoerter
  FOR i=2 TO 9
    READ zehnerwort$(i)
  NEXT i
RETURN
ziffernwoerter:
DATA "ein","zwei","drei","vier","fÅnf"
DATA "sechs","sieben","acht","neun"
zahlwoerter:
DATA "zehn","elf","zwîlf","dreizehn","vierzehn"
DATA "fÅnfzehn","sechzehn","siebzehn","achtzehn","neunzehn"
zehnerwoerter:
DATA "zwanzig","dreiûig","vierzig","fÅnfzig"
DATA "sechzig","siebzig","achtzig","neunzig"
'

