' palette
' Before changing colours, you should always save the current palette. And
' do restore the old palette before the user exits the program. I hate
' programs that return to a pink or yellow desktop. You can store the
' palette either in an integer array or in a string, using XBIOS 7
' (Setcolor) :
> PROCEDURE save.palette
  LOCAL i
  ERASE old.palette%()
  DIM old.palette%(15)
  FOR i=0 TO 15
    old.palette%(i)=XBIOS(7,i,-1)
  NEXT i
RETURN
'
> PROCEDURE make.palette.string(VAR pal$)
  LOCAL n
  pal$=""
  FOR n=0 TO 15
    pal$=pal$+MKI$(XBIOS(7,n,-1))
  NEXT n
RETURN
' The string-method is compatible with Degas. Restore the old palette with
' the corresponding Procedures :
> PROCEDURE restore.palette
  LOCAL i
  FOR i=0 TO 15
    VOID XBIOS(7,i,old.palette%(i))
  NEXT i
RETURN
'
> PROCEDURE change.palette(pal.string$)
  VOID XBIOS(6,L:VARPTR(pal.string$))
RETURN
' You could also use the Standard Procedure Standard.low.colors or
' Standard.med.colors to restore the default palette. You can find these
' Procedures in the STANxxxx.LST-files.
' You can examine the rgb-value of a certain VDI colour-index with :
> PROCEDURE rgb.value(index,VAR rgb$)
  LOCAL col%
  col%=XBIOS(7,color.index(index),-1)
  rgb$=RIGHT$(HEX$(col%),3)
RETURN
' The Standard Array color.index() is used to convert the VDI colour-index.
' A completely new palette for Medium resolution can be installed with :
> PROCEDURE new.med.colors
  LOCAL n,r,g,b,col$
  RESTORE med.new.col.data
  FOR n=0 TO 3
    READ col$
    r=VAL(LEFT$(col$))
    g=VAL(MID$(col$,2,1))
    b=VAL(RIGHT$(col$))
    VSETCOLOR n,r,g,b
  NEXT n
  med.new.col.data
  DATA 000,000,000,000
RETURN
' You can show the current palette on the screen with the Procedure
' palette.box:
> PROCEDURE palette.box(x,y,h,w)
  ' *** left upper corner of rectangle at x,y
  ' *** rectangle-height h; width of one colour-box w
  LOCAL arect.fill,fill.adr%,i,x1,x2
  x2=x+16*w+2
  COLOR black
  BOX x,y,x2,y+h
  arect.fill=-1
  f%=V:arect.fill
  IF low.res!
    FOR i=0 TO 15
      x1=ADD(SUCC(x),MUL(i,w))
      ARECT x1,SUCC(y),ADD(x1,w),PRED(ADD(y,h)),color.index(i),0,f%,0
    NEXT i
  ELSE IF med.res!
    FOR i=0 TO 3
      x1=ADD(SUCC(x),MUL(i,w))
      ARECT x1,SUCC(y),ADD(x1,w),PRED(ADD(y,h)),color.index(i),0,f%,0
    NEXT i
  ENDIF
RETURN
' You can darken the screen by dimming all colours simultaneously with the
' Procedure Dim.colors :
> PROCEDURE dim.colors(reg1,reg2,val)
  ' *** dim colours from VDI colour-index reg1 to reg2 with val
  ' *** for val=1 colour 254 (rgb) will become 143
  LOCAL i,r,g,b
  FOR i=reg1 TO reg2
    @rgb.value(i,rgb$)
    r=MAX(PRED(VAL(LEFT$(rgb$))),0)
    g=MAX(PRED(VAL(MID$(rgb$,2,1))),0)
    b=MAX(PRED(VAL(RIGHT$(rgb$))),0)
    VSETCOLOR i,r,g,b
  NEXT i
RETURN
' Nothing is impossible in GFA-Basic, even colour-cycling is easy with
' EVERY in the Procedure Color.cycle :
> PROCEDURE color.cycle(reg1,reg2,time)
  ' *** cycles colours from VDI colour-index reg1 to reg2
  ' *** global :  COLOR.CYCLE!  COL.REG1  COL.REG2
  IF NOT color.cycle!
    col.reg1=reg1
    col.reg2=reg2
    color.cycle!=TRUE
    EVERY time GOSUB cycle.once
  ELSE
    color.cycle!=FALSE
    EVERY STOP
  ENDIF
RETURN
'
> PROCEDURE cycle.once
  LOCAL col1%,col2%
  col1%=XBIOS(7,color.index(col.reg2),-1)
  FOR reg=col.reg1 TO PRED(col.reg2)
    col2%=XBIOS(7,color.index(reg),-1)
    ~XBIOS(7,color.index(reg),col1%)
    SWAP col1%,col2%
  NEXT reg
  ~XBIOS(7,color.index(col.reg2),col1%)
RETURN
