' ****************************************************
' *                                                  *' *           D‚compactage de fichier IMG            *' *                                                  *' *      Le F‚roce Lapin  / PARX Software 1992       *' *                                                  *' ****************************************************'' Ce source utilise la routine assembleur DECOMPAC.BIN 
' et la fonction VDI VRO_CPYFM pour recopier l'image 
' sur l'‚cran, ce qui lui permet d'afficher une image 
' de n'importe quelle taille sur l'‚cran, que celui-ci 
' soit petit ou grand!' Attention la seule partie interessante concerne 
' la lecture de l'en-tˆte et le d‚compactage, 
' le reste manque ‚videment de tests etc...''' Chargement de la routine assembleurdc_img$=SPACE$(294)BLOAD "A:\DECOMPAC.BIN",V:dc_img$'' Structures MFDBDIM mfdb1&(9)       ! premiŠre structure MFDB 
DIM mfdb2&(9)       ! seconde structure MFDB
'
RESERVE 200000
'
' Dimensions de l'‚cran
' Au prix ou sont les pixels, autant tous les utiliser...
~WIND_GET(0,5,x_desk&,y_desk&,w_desk&,h_desk&) 
'
DO
  FILESELECT "A:\*.IMG","",nom$
  IF nom$="" OR EXIST(nom$)=FALSE
    END
  ENDIF
  '
  OPEN "i",#1,nom$
  taille1%=LOF(#1)
  buffer%=GEMDOS(72,L:taille1%)
  BGET #1,buffer%,taille1%
  CLOSE #1
  '
  ' Etudions l'en-tˆte...
  en_tete&=WORD{buffer%+2}*2  ! taille en-tˆte en octets 
  ' L'adresse source pour le d‚compactage est juste apr‚s l'en-tˆte.
  ' Ne pas se fier au fait que 'g‚n‚ralement' celle-ci fait 8 mots!!!
  adr_source%=buffer%+en_tete&
  plan&=WORD{buffer%+4}         ! nombre de plans de l'image 
  pattern&=WORD{buffer%+6}      ! nbr d'octets du Pattern_run 
  largeur&=WORD{buffer%+12}     ! largeur en pixels 
  hauteur&=WORD{buffer%+14}     ! hauteur en lignes 
  '
  IF 2^plan&=WORK_OUT(13) ! si le nbr de couleurs image=couleurs ‚cran
    @decompactage
  ELSE
    ~FORM_ALERT(1,"[1][Pas le mˆme nombre de plans|pour l'image et l'‚cran!][OK]")
  ENDIF
  '
LOOP
'
PROCEDURE decompactage  '  ' Pr‚paration de la destination. Prudence!  ' Le buffer destination doit en effet avoir une largeur   ' en pixels multiple de 16. Pour ‚viter l'erreur,   ' la routine demande cette largeur en mots.  '  ' Si vous voulez travailler … l'‚cran...  ' C'est cependant d‚conseill‚ puisqu'une image IMG peut   ' d‚passer les dimensions de l'‚cran, le d‚compactage   ' ‚crasera alors la zone m‚moire situ‚e apr‚s celui-ci.  ' adr_destination%=XBIOS(2)     ! adresse de d‚compactage   ' largeur_dest&=(w_desk&/16)*plan&  ! largeur de l'‚cran (EN MOTS!!!)  '  largeur_dest&=largeur& DIV 16            ! largeur d'un plan en mots  IF (largeur& MOD 16)<>0                  ! si c'est pas juste    largeur_dest&=largeur_dest&+1          ! on rajoute 1 mot  ENDIF  largeur_dest&=largeur_dest&*plan&        ! largeur d'une ligne en mots  taille2%=(largeur_dest&*hauteur&)*2      ! remis en octets...  adr_destination%=GEMDOS(72,L:taille2%)   ! r‚servation de la zone m‚moire  '  ' PRINT "Nb de plans=";plan&  ' PRINT "Longueur du pattern run=";pattern&  ' PRINT "Largeur de l'image=";largeur&  ' PRINT "Hauteur de l'image=";hauteur&  ' PRINT "Largeur destination (en W)=";largeur_dest&  ' ~INP(2)  '  dc_img%=V:dc_img$  ~C:dc_img%(L:adr_source%,L:adr_destination%,plan&,pattern&,largeur&,hauteur&,largeur_dest&)  '  ' L'image ‚tant d‚compact‚e, recopions l… … l'‚cran   @affichage  ~INP(2)  CLS  ~GEMDOS(73,L:buffer%)  ~GEMDOS(73,L:adr_destination%)RETURN'PROCEDURE affichage  '  ' Nous utilisons la fonction vro_cpy du VDI et pas rc_copy   ' ni bitblt car il semble que ces fonctions ne soient pas   ' tr‚s fiables lorsque l'on veut copier des zones de   ' coordonn‚es sup‚rieures … celles de l'‚cran   ' (cas d'un ‚cran virtuel de 2000*2000 par exemple)   '  mfdb1&(0)=WORD(SWAP(adr_destination%))    ! poids fort de l'adresse  mfdb1&(1)=WORD(adr_destination%)          ! poids faible de l'adresse  mfdb1&(2)=largeur&              ! largeur en pixels   mfdb1&(3)=hauteur&              ! hauteur en pixels   mfdb1&(4)=largeur_dest&/plan&   ! largeur d'un plan en mots   mfdb1&(5)=0                     ! format standard   mfdb1&(6)=plan&                 ! nombre de plans   mfdb1&(7)=0                     ! r‚serv‚  mfdb1&(8)=0                     ! r‚serv‚  mfdb1&(9)=0                     ! r‚serv‚  '  ' Remplissons la seconde structure, qui va d‚finir l'‚cran.  ' L…, c'est beaucoup plus simple, puisque si l'adresse de la   ' zone est nulle, le VDI sait que nous parlons de l'‚cran,   ' et se d‚brouille pour le g‚rer comme il se doit!  mfdb2&(0)=0     ! poids fort de l'adresse nul   mfdb2&(1)=0     ! idem poids faible, nous parlons donc de l'‚cran.  mfdb2&(2)=0     ! le reste ne sera mˆme pas lu par le VDI!!!  mfdb2&(3)=0  mfdb2&(4)=0  mfdb2&(5)=0  mfdb2&(6)=0  mfdb2&(7)=0  mfdb2&(8)=0  mfdb2&(9)=0  '  ' Appel de la fonction vro_cpyfm du VDI  CONTRL(0)=109  !opcode  CONTRL(1)=4    !nbr de couples d'‚l‚ments dans PTSIN   CONTRL(3)=1    ! nombre d'‚l‚ments dans INTIN   CONTRL(7)=WORD(SWAP(V:mfdb1&(0)))   ! adresse struture mfdb   CONTRL(8)=WORD(V:mfdb1&(0))         ! pour la source   CONTRL(9)=WORD(SWAP(V:mfdb2&(0)))   ! adresse structure mfdb   CONTRL(10)=WORD(V:mfdb2&(0))        ! pour la destination   '  INTIN(0)=3                          !op‚ration logique … effectuer  '  ' Coordonn‚es X,Y,X' et Y' source  PTSIN(0)=0  PTSIN(1)=0  PTSIN(2)=largeur&-1  PTSIN(3)=hauteur&-1  '  ' Coordonn‚es X,Y,X' et Y' destination  PTSIN(4)=x_desk&  PTSIN(5)=y_desk&  PTSIN(6)=x_desk&  PTSIN(7)=y_desk&  '  ' Appel au VDI  VDISYS  'RETURN