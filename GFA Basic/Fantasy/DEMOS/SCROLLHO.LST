$C+     !sauve tous les registres avant void c:
HIDEM
ON ERROR GOSUB fin
ON BREAK GOSUB fin
@sauve_palette
@ecran         !on met en place les diff‚rents ecrans
@load      !installe la fonction de scroll horizontal
@variables
' @charge_degas !on charge une image degas
@boite          !ou on execute la procedure boite
REM -------------------------------------------------
s%=e1%                           !adresse du bloc
h%=11                            !hauteur du bloc
l%=20                            !largeur du bloc
VOID XBIOS(5,L:e1%,L:e3%,W:-1)
DO
  FOR i%=1 TO 8                  !8 bandes
    GET 0,s%(i%),pas%(i%),s%(i%)+h%(i%)-1,a$
    VOID C:scroll%(L:sa%(i%),L:h%(i%),L:l%,L:-pas%(i%),L:0)
    PUT 319-pas%(i%),s%(i%),a$
  NEXT i%
  BMOVE e1%,e2%,17280
  VOID XBIOS(5,L:-1,L:e2%,W:-1)
  SWAP e2%,e3%
  EXIT IF MOUSEK OR LEN(INKEY$)
LOOP
@fin
REM --------------------------------------------------------------------------
PROCEDURE ecran
  mem_libre=FRE(0)
  RESERVE mem_libre-150000
  e1%=GEMDOS(72,L:32000)          !‚cran ou s'effectue le scroll
  e2l%=GEMDOS(72,L:32256)         !1er ‚cran physique
  e3l%=GEMDOS(72,L:32256)         !2em ‚cran physique
  e2%=(e2l% AND &HFFFF00)+256
  e3%=(e3l% AND &HFFFF00)+256
RETURN
REM ---------------------------------------------------------------------------
PROCEDURE fin
  SHOWM
  VOID XBIOS(6,L:VARPTR(palette$)) !r‚tabli palette
  VOID XBIOS(5,L:XBIOS(3),L:XBIOS(3),W:-1) !‚cran logique = ‚cran physique
  VOID GEMDOS(73,L:e1%)
  VOID GEMDOS(73,L:e2l%)
  VOID GEMDOS(73,L:e3l%)          !on libŠre la m‚moire
  VOID GEMDOS(73,L:scroll%)
  RESERVE mem_libre
  END                             !c'est fini
RETURN
REM ---------------------------------------------------------------------------
PROCEDURE charge_degas
  couleur$=STRING$(32," ")
  OPEN "i",#1,"a:\dessin.pi1"
  SEEK #1,2
  BGET #1,VARPTR(couleur$),32     !charge les couleurs
  VOID XBIOS(6,L:VARPTR(couleur$))
  SEEK #1,34
  BGET #1,e1%,32000               !charge l'image
  CLOSE #1
  BMOVE e1%,e2%,32000
  BMOVE e1%,e3%,32000
RETURN
REM ---------------------------------------------------------------------------
PROCEDURE load
  scroll%=GEMDOS(72,L:956)          !‚cran ou s'effectue le scroll
  RESTORE scroll
  i%=0
  DO
    READ code$
    EXIT IF code$="fin"
    code$="&H"+code$
    code%=VAL(code$)
    scroll$=scroll$+MKI$(code%)
    INC i%
  LOOP
  BMOVE VARPTR(scroll$),scroll%,956
  scroll:
  DATA 206F,0004,202F,0008,222F,000C,262F,0010
  DATA 282F,0014,2E01,E78F,4487,0687,0000,00A0
  DATA 43D0,45D0,47D0,2400,C4FC,00A0,9487,D5C2
  DATA 5380,5381,2401,2A00,0C43,0000,6700,01F4
  DATA 6C00,00F0,4483,0C43,0010,6700,00CC,0C43
  DATA 0008,6700,0082,6C00,0040,43E8,0008,2202
  DATA 2C10,3C19,E7AE,4846,30C6,2C10,3C19,E7AE
  DATA 4846,30C6,2C10,3C19,E7AE,4846,30C6,2C10
  DATA 3C19,E7AE,4846,30C6,51C9,FFD6,D1C7,D3C7
  DATA 51C8,FFCC,6000,019C,43E8,0008,4483,0683
  DATA 0000,0010,2202,2C10,3C19,E6AE,30C6,2C10
  DATA 3C19,E6AE,30C6,2C10,3C19,E6AE,30C6,2C10
  DATA 3C19,E6AE,30C6,51C9,FFDE,D1C7,D3C7,51C8
  DATA FFD4,6000,015E,2202,10A8,0001,1168,0008
  DATA 0001,1168,0003,0002,1168,000A,0003,1168
  DATA 0005,0004,1168,000C,0005,1168,0007,0006
  DATA 1168,000E,0007,41E8,0008,51C9,FFCC,D1C7
  DATA 51C8,FFC4,6000,011C,41E8,0008,2202,22D8
  DATA 22D8,51C9,FFFA,D1C7,D3C7,51C8,FFF0,6000
  DATA 0102,41D2,43D2,0C43,0010,6700,00E0,0C43
  DATA 0008,6700,0092,6C00,0040,41E8,FFF8,2202
  DATA 3C20,4846,3C21,E6AE,3286,3C20,4846,3C21
  DATA E6AE,3286,3C20,4846,3C21,E6AE,3286,3C20
  DATA 4846,3C21,E6AE,3286,51C9,FFD6,91C7,93C7
  DATA 51C8,FFCC,6000,00AC,41E8,FFF8,4483,0683
  DATA 0000,0010,3202,3C20,4846,3C21,E7AE,4846
  DATA 3286,3C20,4846,3C21,E7AE,4846,3286,3C20
  DATA 4846,3C21,E7AE,4846,3286,3C20,4846,3C21
  DATA E7AE,4846,3286,51C9,FFCE,91C7,93C7,51C8
  DATA FFC4,6000,005E,41E8,FFFF,2202,10A8,FFFF
  DATA 1168,FFF8,FFFF,1168,FFFD,FFFE,1168,FFF6
  DATA FFFD,1168,FFFB,FFFC,1168,FFF4,FFFB,1168
  DATA FFF9,FFFA,1168,FFF2,FFF9,41E8,FFF8,51C9
  DATA FFCC,91C7,51C8,FFC4,6000,0018,5381,2202
  DATA 2128,FFF4,2128,FFF4,51C9,FFF6,91C7,51C8
  DATA FFEE,23C7,0003,FAB2,2005,2202,0C44,0000
  DATA 6700,00E4,6F00,00B6,9044,41D3,43D3,2A04
  DATA CAFC,00A0,D1C5,0C41,0006,6200,0016,2202
  DATA 22D8,22D8,51C9,FFFA,D1C7,D3C7,51C8,FFF0
  DATA 4E75,5281,0801,0000,6700,0006,22D8,22D8
  DATA 0801,0001,6700,000A,22D8,22D8,22D8,22D8
  DATA 0801,0002,6700,000E,4CD8,0CFC,48D1,0CFC
  DATA 43E9,0020,0801,0003,6700,0018,4CD8,7CFC
  DATA 48D1,7CFC,4CD8,007C,48E9,007C,002C,43E9
  DATA 0040,0801,0004,6700,0022,4CD8,7CFC,48D1
  DATA 7CFC,4CD8,7CFC,48E9,7CFC,002C,4CD8,3CFC
  DATA 48E9,3CFC,0058,43E9,0080,D1F9,0003,FAB2
  DATA D3F9,0003,FAB2,51C8,FF7C,4E75,4484,41D2
  DATA 43D2,9044,2A04,CAFC,00A0,91C5,0C41,0006
  DATA 6200,0016,2202,2320,2320,51C9,FFFA,91C7
  DATA 93C7,51C8,FFF0,4E75,5281,0801,0000,6700
  DATA 0006,2320,2320,0801,0001,6700,000A,2320
  DATA 2320,2320,2320,0801,0002,6700,0010,4CE8
  DATA 0CFC,FFE0,48E1,3F30,41E8,FFE0,0801,0003
  DATA 6700,001A,4CE8,7CFC,FFD4,48E1,3F3E,4CE8
  DATA 007C,FFC0,48E1,3E00,41E8,FFC0,0801,0004
  DATA 6700,0024,4CE8,7CFC,FFD4,48E1,3F3E,4CE8
  DATA 7CFC,FFA8,48E1,3F3E,4CE8,3CFC,FF80,48E1
  DATA 3F3C,41E8,FF80,91F9,0003,FAB2,93F9,0003
  DATA FAB2,51C8,FF76,4E75,0000,0000
  DATA fin
RETURN
PROCEDURE variables
  DIM s%(8),sa%(i%),h%(8),pas%(8)
  FOR i%=1 TO 8
    s%=0
    FOR j%=1 TO i%
      ADD s%,(j%-1)*3
    NEXT j%
    s%(i%)=s%
    sa%(i%)=s%*160+e1%
    pas%(i%)=i%
    h%(i%)=i%*3
  NEXT i%
RETURN
PROCEDURE sauve_palette
  palette$=SPACE$(32)
  FOR i%=0 TO 30 STEP 2
    DPOKE VARPTR(palette$)+i%,DPEEK(&HFF8240+i%)
  NEXT i%
RETURN
PROCEDURE boite
  VOID XBIOS(5,L:e3%,L:-1,W:-1)
  CLS
  VOID XBIOS(5,L:e2%,L:-1,W:-1)
  CLS
  VOID XBIOS(5,L:e1%,L:-1,W:-1)
  CLS
  s%=0
  h%=3
  FOR j%=1 TO 8
    FOR i%=0 TO 4
      DEFFILL RANDOM(14)+1,2,RANDOM(24)
      PRBOX i%*64,s%,(i%+1)*64-1,s%+h%-1
    NEXT i%
    ADD s%,h%
    ADD h%,3
  NEXT j%
RETURN
