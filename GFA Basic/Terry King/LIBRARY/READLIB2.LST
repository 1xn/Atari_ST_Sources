'
' Library reader - @1995 Terry King
'
' This version uses an array to grab the memory for the library. This method
' is particularly for use in programs where compatibility with other programs
' isn't needed (ie, games) as this program will grab all available memory
' when run.
'
' @load_library("a:\pictures.lib")
' @load_by_num(3,XBIOS(2))            ! Load file by number
' @load_by_name("FOO.PI1",XBIOS(2))   ! Load file by name
'
> PROCEDURE load_by_num(n&,address%)
  LOCAL nfiles&,size%,offset%,start%
  IF lib%>0
    '
    ' Read the number of files, size and offset from the header.
    '
    nfiles&=WORD{lib%+4}
    size%=LONG{lib%+18+MUL(n&,20)}
    offset%=LONG{lib%+22+MUL(n&,20)}
    '
    ' Calculate the start address of data after the header info and transfer
    ' the data to the destination address.
    '
    start%=lib%+6+MUL(nfiles&,20)
    BMOVE start%+offset%,address%,size%
  ELSE
    OPEN "R",#1,lib$
    RELSEEK #1,4
    nfiles&=INP&(#1)
    tmp$=SPACE$(MUL(20,nfiles&))
    BGET #1,V:tmp$,MUL(20,nfiles&)
    size%=LONG{V:tmp$+12+MUL(n&,20)}
    offset%=LONG{V:tmp$+16+MUL(n&,20)}
    RELSEEK #1,offset%
    BGET #1,address%,size%
    CLOSE #1
    CLR tmp$
  ENDIF
RETURN
> PROCEDURE load_by_name(n$,address%)
  LOCAL nfiles&,dot&,size%,offset%,start%,header$,file$
  '
  ' Must make filename into 12 character length, so pad out the filename
  ' with spaces if necessary.
  '
  dot&=INSTR(n$,".")
  IF dot&=0
    file$=n$
    file$=file$+SPACE$(8-LEN(file$))+".   "
  ELSE
    file$=LEFT$(n$,dot&-1)
    file$=file$+SPACE$(8-LEN(file$))
    file$=file$+MID$(n$,dot&,LEN(n$)+1-dot&)
    file$=file$+SPACE$(12-LEN(file$))
  ENDIF
  '
  ' If the library is in memory then read the file from there, otherwise
  ' the library needs to be loaded.
  '
  IF lib%>0
    '
    ' Copy the header into a string so that the string search commands can be
    ' used to locate filename.
    '
    nfiles&=WORD{lib%+4}
    header$=SPACE$(MUL(nfiles&,20))
    BMOVE lib%+6,V:header$,MUL(nfiles&,20)
    pos&=INSTR(header$,file$)
    '
    ' If the filename was found then get the size and offset and copy the
    ' block of data to the destination address.
    '
    IF pos&>0
      size%=LONG{V:header$+pos&+11}
      offset%=LONG{V:header$+pos&+15}
      start%=lib%+6+MUL(nfiles&,20)
      BMOVE start%+offset%,address%,size%
    ENDIF
  ELSE
    '
    ' Read from library file.
    '
    OPEN "R",#1,lib$                    ! Open random access
    RELSEEK #1,4                        ! Skip header
    nfiles&=INP&(#1)                    ! Read number of files
    header$=SPACE$(MUL(20,nfiles&))     ! Read descriptor info
    BGET #1,V:header$,MUL(20,nfiles&)
    pos&=INSTR(header$,file$)           ! Find filename
    IF pos&>0
      size%=LONG{V:header$+pos&+11}
      offset%=LONG{V:header$+pos&+15}
      RELSEEK #1,offset%                ! Move within file to offset
      BGET #1,address%,size%            ! Read to memory address
    ENDIF
  ENDIF
  '
  ' Clear the strings to save a few bytes of memory.
  '
  CLR header$
  CLR file$
RETURN
> PROCEDURE load_library(lib$)
  IF EXIST(lib$)
    OPEN "I",#1,lib$
    lib_size%=LOF(#1)
    '
    ' See if there is enough memory to dimension array.
    '
    IF FRE(0)<lib_size%
      lib%=0                    ! Not enough free memory
    ELSE
      DIM lib|(lib_size%)       ! Allocate memory
      lib%=V:lib|(0)
      '
      ' Read the data.
      '
      BGET #1,lib%,lib_size%
      CLOSE #1
    ENDIF
  ENDIF
RETURN
