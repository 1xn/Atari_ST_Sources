'
' Library reader - @1995 Terry King
'
' This version uses MALLOC to allocate memory. As you expand the code you will
' need to increase the RESERVE value otherwise you will run out of memory,
' this includes code, arrays, strings, INLINE code and GET strings that the
' program may use.
'
RESERVE 16384
' @load_library("a:\pictures.lib")
' @load_by_num(3,XBIOS(2))            ! Load file by number
' @load_by_name("FOO.PI1",XBIOS(2))   ! Load file by name
'
' Don't forget to release the malloc'ed memory.
'
IF lib%>0
  ~MFREE(lib%)
ENDIF
RESERVE
'
> PROCEDURE load_by_num(n&,address%)
  LOCAL nfiles&,size%,offset%,start%
  '
  ' If the library is in memory then read the data direct from memory.
  '
  IF lib%>0
    '
    ' Read the number of files, size and offset from the header.
    '
    nfiles&=WORD{lib%+4}
    size%=LONG{lib%+18+MUL(n&,20)}
    offset%=LONG{lib%+22+MUL(n&,20)}
    '
    ' Calculate the start address of data after the header info and transfer
    ' the data to the destination address.
    '
    start%=lib%+6+MUL(nfiles&,20)
    BMOVE start%+offset%,address%,size%
  ELSE
    '
    ' The library is on disk so we'll need to open the file.
    '
    OPEN "R",#1,lib$                    ! Random access file
    RELSEEK #1,4                        ! Skip header
    nfiles&=INP&(#1)                    ! Read number of files
    tmp$=SPACE$(MUL(20,nfiles&))        ! Space for descriptors
    BGET #1,V:tmp$,MUL(20,nfiles&)      ! Read descriptors
    size%=LONG{V:tmp$+12+MUL(n&,20)}    ! Get size of file
    offset%=LONG{V:tmp$+16+MUL(n&,20)}  ! Get offset within library
    RELSEEK #1,offset%                  ! Move to file within library
    BGET #1,address%,size%              ! Read it in
    CLOSE #1                            ! Close the file
    CLR tmp$                            ! Clear a few bytes
  ENDIF
RETURN
> PROCEDURE load_by_name(n$,address%)
  LOCAL nfiles&,dot&,size%,offset%,start%,header$,file$
  '
  ' Must make filename into 12 character length, so pad out the filename
  ' with spaces if necessary.
  '
  dot&=INSTR(n$,".")
  IF dot&=0
    file$=n$
    file$=file$+SPACE$(8-LEN(file$))+".   "
  ELSE
    file$=LEFT$(n$,dot&-1)
    file$=file$+SPACE$(8-LEN(file$))
    file$=file$+MID$(n$,dot&,LEN(n$)+1-dot&)
    file$=file$+SPACE$(12-LEN(file$))
  ENDIF
  IF lib%>0
    '
    ' Copy the header into a string so that the string search commands can be
    ' used to locate filename.
    '
    nfiles&=WORD{lib%+4}
    header$=SPACE$(MUL(nfiles&,20))
    BMOVE lib%+6,V:header$,MUL(nfiles&,20)
    pos&=INSTR(header$,file$)
    '
    ' If the filename was found then get the size and offset and copy the
    ' block of data to the destination address.
    '
    IF pos&>0
      size%=LONG{V:header$+pos&+11}
      offset%=LONG{V:header$+pos&+15}
      start%=lib%+6+MUL(nfiles&,20)
      BMOVE start%+offset%,address%,size%
    ENDIF
  ELSE
    OPEN "R",#1,lib$
    RELSEEK #1,4
    nfiles&=INP&(#1)
    header$=SPACE$(MUL(20,nfiles&))
    BGET #1,V:header$,MUL(20,nfiles&)
    pos&=INSTR(header$,file$)
    '
    ' If the filename was found then get the size and offset and copy the
    ' block of data to the destination address.
    '
    IF pos&>0
      size%=LONG{V:header$+pos&+11}
      offset%=LONG{V:header$+pos&+15}
      RELSEEK #1,offset%
      BGET #1,address%,size%
    ENDIF
  ENDIF
  '
  ' Clear the strings to save a few bytes of memory.
  '
  CLR header$
  CLR file$
RETURN
> PROCEDURE load_library(l$)
  lib$=l$
  IF EXIST(lib$)
    OPEN "I",#1,lib$
    lib_size%=LOF(#1)
    '
    ' Malloc the required library size.
    '
    lib%=MALLOC(lib_size%)
    '
    IF lib%>0
      '
      ' Read the data.
      '
      BGET #1,lib%,lib_size%
    ENDIF
    CLOSE #1
    '
  ENDIF
RETURN
