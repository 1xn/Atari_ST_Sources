'
' ----------------------------------------------
'       Berechnung mathematischer Terme
' ----------------------------------------------
'                         13.5.1990 by R.Wisser
'
' Benutzung :
'
'              calc_init
'              ...
'              new_function("2*4-x+3...")
'              ...
'              PRINT FN functionvalue(x,error!)
'              IF error!
'                 PRINT "Error"
'              ENDIF
'              ...
'
'              print_function ! Function schreiben
'
PROCEDURE calc_init
  LOCAL i%
  '
  maxlength%=50
  DIM term_type%(maxlength%),term_value(maxlength%)
  DIM stack_type%(maxlength%),stack_value(maxlength%)
  DIM f_name$(20)
  DIM prioritaet%(20)
  term_length%=0
  f_zahl%=1
  f_plus%=2
  f_minus%=3
  f_mal%=4
  f_durch%=5
  f_hoch%=6
  f_klammer_auf%=7
  f_klammer_zu%=8
  f_x%=9
  f_sin%=10
  f_cos%=11
  FOR i%=0 TO 20
    f_name$(i%)="?"
    prioritaet%(i%)=-1
  NEXT i%
  prioritaet%(f_plus%)=1
  prioritaet%(f_minus%)=1
  prioritaet%(f_mal%)=2
  prioritaet%(f_durch%)=2
  prioritaet%(f_hoch%)=3
  prioritaet%(f_sin%)=4
  prioritaet%(f_cos%)=4
  prioritaet%(f_klammer_zu%)=-2
  f_name$(f_plus%)="+"
  f_name$(f_minus%)="-"
  f_name$(f_mal%)="*"
  f_name$(f_durch%)="/"
  f_name$(f_hoch%)="^"
  f_name$(f_klammer_auf%)="("
  f_name$(f_klammer_zu%)=")"
  f_name$(f_x%)="x"
  f_name$(f_sin%)="sin"
  f_name$(f_cos%)="cos"
RETURN
'
PROCEDURE push(t%,r)
  stack_type%(sp%)=t%
  stack_value(sp%)=r
  INC sp%
RETURN
PROCEDURE pull(VAR t%,r)
  DEC sp%
  IF sp%=0
    error!=TRUE
  ELSE
    t%=stack_type%(sp%)
    r=stack_value(sp%)
  ENDIF
RETURN
'
PROCEDURE calc_stack(knuepf%)
  LOCAL k%,i%,fertig!,t%,v1,v2,dummy
  '
  fertig!=FALSE
  WHILE sp%>2 AND (NOT error!) AND (NOT fertig!)
    IF stack_type%(sp%-1)<>f_zahl%
      fertig!=TRUE
    ELSE
      k%=stack_type%(sp%-2)
      SELECT k%
      CASE f_plus%
        IF prioritaet%(k%)>=prioritaet%(knuepf%)
          pull(t%,v1)
          pull(t%,dummy)
          IF sp%>1
            pull(t%,v2)
          ELSE
            push(f_zahl%,+v1)
            GOTO plus_done
          ENDIF
          IF t%<>f_zahl%
            push(t%,v2)
            push(f_zahl%,+v1)
          ELSE
            push(f_zahl%,v1+v2)
          ENDIF
          plus_done:
        ELSE
          fertig!=TRUE
        ENDIF
      CASE f_durch%
        IF prioritaet%(k%)>=prioritaet%(knuepf%)
          pull(t%,v1)
          pull(t%,dummy)
          pull(t%,v2)
          IF t%<>f_zahl%
            error!=TRUE
          ELSE
            IF v1=0
              error!=TRUE
            ELSE
              push(f_zahl%,v2/v1)
            ENDIF
          ENDIF
        ELSE
          fertig!=TRUE
        ENDIF
      CASE f_hoch%
        IF prioritaet%(k%)>=prioritaet%(knuepf%)
          pull(t%,v1)
          pull(t%,dummy)
          pull(t%,v2)
          IF t%<>f_zahl%
            error!=TRUE
          ELSE
            push(f_zahl%,v2^v1)
          ENDIF
        ELSE
          fertig!=TRUE
        ENDIF
      CASE f_sin%
        IF prioritaet%(k%)>=prioritaet%(knuepf%)
          pull(t%,v1)
          pull(t%,dummy)
          push(f_zahl%,SIN(v1))
        ELSE
          fertig!=TRUE
        ENDIF
      CASE f_cos%
        IF prioritaet%(k%)>=prioritaet%(knuepf%)
          pull(t%,v1)
          pull(t%,dummy)
          push(f_zahl%,COS(v1))
        ELSE
          fertig!=TRUE
        ENDIF
      CASE f_mal%
        IF prioritaet%(k%)>=prioritaet%(knuepf%)
          pull(t%,v1)
          pull(t%,dummy)
          pull(t%,v2)
          IF t%<>f_zahl%
            error!=TRUE
          ELSE
            push(f_zahl%,v2*v1)
          ENDIF
        ELSE
          fertig!=TRUE
        ENDIF
      CASE f_minus%
        IF prioritaet%(k%)>=prioritaet%(knuepf%)
          pull(t%,v1)
          pull(t%,dummy)
          IF sp%>1
            pull(t%,v2)
          ELSE
            push(f_zahl%,-v1)
            GOTO min_done
          ENDIF
          IF t%<>f_zahl%
            push(t%,v2)
            push(f_zahl%,-v1)
          ELSE
            push(f_zahl%,v2-v1)
          ENDIF
          min_done:
        ELSE
          fertig!=TRUE
        ENDIF
      CASE f_klammer_auf%
        fertig!=TRUE
      DEFAULT
        error!=TRUE
      ENDSELECT
    ENDIF
  WEND
RETURN
'
FUNCTION functionvalue(x,VAR error!)
  LOCAL i%,sp%,j%,knuepf%,v1,dummy
  '
  error!=FALSE
  IF term_length%=0
    error!=TRUE
    RETURN 0
  ELSE
    sp%=1
    FOR i%=1 TO term_length%
      IF term_type%(i%)=f_zahl% OR term_type%(i%)=f_klammer_auf% OR term_type%(i%)=f_x%
        IF term_type%(i%)=f_x%
          push(f_zahl%,x)
        ELSE
          push(term_type%(i%),term_value(i%))
        ENDIF
      ELSE
        IF term_type%(i%)=f_klammer_zu%
          calc_stack(f_klammer_zu%)
          IF sp%>2
            IF stack_type%(sp%-2)=f_klammer_auf%
              pull(t%,v1)
              pull(t%,dummy)
              push(f_zahl%,v1)
            ENDIF
          ENDIF
        ELSE
          j%=sp%-2
          knuepf%=0
          WHILE j%>=1
            IF stack_type%(j%)<>f_zahl% AND stack_type%(j%)<>f_klammer_auf%
              knuepf%=stack_type%(j%)
              j%=0
            ENDIF
            DEC j%
          WEND
          IF knuepf%>0 AND prioritaet%(knuepf%)>=prioritaet%(term_type%(i%))
            calc_stack(term_type%(i%))
          ENDIF
          push(term_type%(i%),term_value(i%))
        ENDIF
      ENDIF
      EXIT IF error!
    NEXT i%
    IF NOT error!
      calc_stack(f_klammer_zu%)
      IF sp%=2
        RETURN stack_value(1)
      ELSE
        error!=TRUE
      ENDIF
    ENDIF
  ENDIF
  RETURN 0
ENDFUNC
'
'
PROCEDURE print_function
  LOCAL i%
  '
  FOR i%=1 TO term_length%
    IF term_type%(i%)=f_zahl%
      PRINT term_value(i%);
    ELSE
      PRINT f_name$(term_type%(i%));
    ENDIF
  NEXT i%
RETURN
'
FUNCTION wert
  LOCAL c$,j%,w,fertig!
  '
  w=VAL(f$)
  j%=1
  WHILE i%<=l% AND NOT fertig!
    c$=MID$(f$,j%,1)
    fertig!=NOT (c$="." OR (c$<="9" AND c$>="0"))
    IF NOT fertig!
      INC i%
      INC j%
    ENDIF
  WEND
  RETURN w
ENDFUNC
'
PROCEDURE new_function(func$)
  LOCAL i%,l%,p%,t%,error!
  '
  FOR i%=1 TO LEN(func$)
    IF MID$(func$,i%,1)>="A" AND MID$(func$,i%,1)<="Z"
      MID$(func$,i%,1)=CHR$(ASC(MID$(func$,i%,1))+32)
    ENDIF
  NEXT i%
  error!=FALSE
  p%=1
  i%=1
  l%=LEN(func$)
  WHILE (NOT error!) AND i%<=l%
    WHILE MID$(func$,i%,1)=" "
      INC i%
    WEND
    f$=MID$(func$,i%,l%)
    IF LEFT$(f$,1)<="9" AND LEFT$(f$,1)>="0"
      term_type%(p%)=f_zahl%
      term_value(p%)=FN wert
      INC p%
    ELSE
      error!=TRUE
      FOR t%=f_plus% TO f_cos%
        IF LEFT$(f$,LEN(f_name$(t%)))=f_name$(t%)
          term_type%(p%)=t%
          INC p%
          error!=FALSE
          i%=i%+LEN(f_name$(t%))
          EXIT IF TRUE
        ENDIF
      NEXT t%
    ENDIF
  WEND
  term_length%=p%-1
RETURN
'
' -----------------------------------------
