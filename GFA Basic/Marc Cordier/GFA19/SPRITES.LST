' *************************************************
' **     Programme de simulation de sprites      **
' **     ----------------------------------      **
' **  R‚alis‚ le 31 mars 1993 par Marc CORDIER   **
' **    Pour START MICRO MAGAZINE (FC PRESS)     **
' *************************************************
'
' ** On r‚s‚rve toute la m‚moire
RESERVE
' ** On dimensionne tout nos tableaux
nombre_de_sprites%=1     ! Nombre de sprites du jeu
nombre_de_banques%=2     ! Nombre de banques de sprites
nombre_de_modules%=2     ! Nombre de modules pour cr‚er le d‚cor
'
DIM sprite$(nombre_de_banques%,8)        ! Tableau des banques de sprites
DIM masque$(nombre_de_banques%,8)        ! Tableau des banques de masques
DIM module$(nombre_de_modules%)          ! Tableau de la banque de modules
DIM old_x%(nombre_de_sprites%)           ! Tableau de sauvegarde pos. x
DIM old_y%(nombre_de_sprites%)           ! Tableau de sauvegarde pos. y
DIM sauve$(nombre_de_sprites%)           ! Tableau de sauvegarde du d‚cor
'
' ** On reduit la place r‚s‚rver
RESERVE 30000
'
' ** On cache la souris
HIDEM
'
' ** On r‚s‚rve la m‚moire pour...
palette%=MALLOC(32)     ! La palette de couleurs,
image%=MALLOC(32000)    ! et l'image des sprites.
'
@charge_pi1("A:SPRITES.PI1")     ! On charge l'image.
@setpalette(palette%)            ! On installe la palette.
'
' ** On copy ensuite l'image sur l'‚cran... ( adresse ‚cran = XBIOS(2) )
BMOVE image%,XBIOS(2),32000
' ** pour pouvoir y d‚couper
' ** sprites, masques et modules.
@coupe_image
' ** avec lesquels on cr‚e le d‚cor.
@cree_decor
'
' ** On initialise quelques variables...
old_x%(1)=-1        ! Nouveau sprite
image_sprite%=1     ! premiŠre image
pos_x%=160          ! position x de d‚part
pos_y%=96           ! position y de d‚part
'
' ***********************
' ** Boucle principale **
' ***********************
DO
  '
  ' ** On anime le sprite si le bouton de feu est appuy‚
  IF STRIG(1)
    IF image_sprite%<8
      INC image_sprite%
    ELSE
      image_sprite%=1
    ENDIF
  ENDIF
  '
  ' ** On test le joystick.
  @test_joystick
  '
  ' ** On attend le d‚but du balayage ‚cran
  VSYNC
  ' ** On attend encore un peu
  t%=TIMER
  WHILE TIMER<t%+3
  WEND
  '
  ' ** Enfin on  affiche le sprite
  @affiche_sprite(pos_x%,pos_y%,1,2,image_sprite%)
  '
  ' ** puis tant que personne n'appuit
  ' ** sur une touche, on boucle.
LOOP UNTIL INKEY$<>""
'
' **********************
' ** Fin du programme **
' **********************
'
' ** On libŠre la m‚moire r‚serv‚e avec MALLOC
VOID MFREE(palette%)
VOID MFREE(image%)
'
' ** On restaure la souris
SHOWM
' ** le fait de tester le bouton
' ** de la souris, la r‚initialise.
VOID MOUSEK
END
'
' ***************************************** PROCEDURES **
'
' ******************************
' * chargement d'une image PI1 *
' ******************************
PROCEDURE charge_pi1(nom$)
  OPEN "i",#3,nom$
  ' ** On saute les 2 octets de la r‚solution
  SEEK #3,2
  ' ** on charge les 32 octets de la palette
  BGET #3,palette%,32
  ' ** puis les 32000 octets de l'image.
  BGET #3,image%,32000
  CLOSE #3
RETURN
' ****************************************
' * Mise en place d'une nouvelle palette *
' ****************************************
PROCEDURE setpalette(adr%)
  ' ** On utilise ici la fonction 6 du XBIOS
  VOID XBIOS(6,L:adr%)
RETURN
' ************************
' *  D‚coupe de l'image  *
' ************************
PROCEDURE coupe_image
  FOR i%=0 TO 7
    ' ** On d‚coupe d'abord les sprites.
    ' ** X = 0. 16. 32. 48. 64...
    x%=(16*i%)
    '
    ' ** premiŠre ligne Y = 0
    GET x%,0,x%+15,15,sprite$(1,i%+1)
    ' ** deuxiŠme ligne Y = 16
    GET x%,16,x%+15,31,sprite$(2,i%+1)
    '
    ' ** On d‚coupe ensuite leurs masques
    ' ** X = 128. 144. 160. 176...
    x%=(16*i%)+(8*16)
    '
    GET x%,0,x%+15,15,masque$(1,i%+1)
    GET x%,16,x%+15,31,masque$(2,i%+1)
  NEXT i%
  '
  ' ** puis les 2 modules
  GET 256,0,271,15,module$(1)
  GET 272,0,288,15,module$(2)
RETURN
' **********************
' * affichage du decor *
' **********************
PROCEDURE cree_decor
  ' ** On se place au d‚but des DATA
  RESTORE decor1
  ' ** On boucle sur 12 lignes (192/16=12)
  FOR y%=0 TO 11*16 STEP 16
    ' ** Et sur 20 colonnes (320/16=20)
    FOR x%=0 TO 19*16 STEP 16
      ' ** On lit le num‚ro du module dans les data
      READ numero_module%
      ' ** Puis on l'affiche sur l'‚cran
      PUT x%,y%,module$(numero_module%)
    NEXT x%
  NEXT y%
decor1:
  DATA 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2
  DATA 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
RETURN
' ********************
' * Affichage sprite *
' ********************
PROCEDURE affiche_sprite(x%,y%,num%,bnk%,img%)
  ' ** x%,y% = coordon‚es d'affichage
  ' ** num% = num‚ro du sprite
  ' ** bnk% = num‚ro de la banque de sprites
  ' ** img% = num‚ro de l'image dans la banque
  '
  ' ** on restaure le d‚cor sous le sprite
  PUT old_x%(num%),old_y%(num%),sauve$(num%)
  '
  ' ** On sauvegarde le d‚cor sous le sprite.
  GET x%,y%,x%+15,y%+15,sauve$(num%)
  '
  ' ** On fait un trou dans le d‚cor avec
  ' ** le masque correspondant au sprite.
  PUT x%,y%,masque$(bnk%,img%),4
  '
  ' ** On pose notre sprite.
  PUT x%,y%,sprite$(bnk%,img%),7
  '
  ' ** Et pour finir on sauve les coordon‚es
  ' ** pour la prochaine fois, dans la table
  ' ** pr‚vu … cet effet
  old_x%(num%)=x%
  old_y%(num%)=y%
RETURN
' ******************************
' * Test de direction JOYSTICK *
' ******************************
PROCEDURE test_joystick
  '
  ' ** Suivant la valeur du JOYSTICK
  ' ** on ex‚cute la routine correspondante
  SELECT STICK(1)
  CASE 1
    @haut
  CASE 2
    @bas
  CASE 4
    @gauche
  CASE 8
    @droite
  CASE 9
    @haut
    @droite
  CASE 5
    @haut
    @gauche
  CASE 6
    @bas
    @gauche
  CASE 10
    @bas
    @droite
  ENDSELECT
RETURN
' *************************
' * deplacement du sprite *
' *************************
PROCEDURE haut
  ' ** Si on n'est pas d‚j…
  ' ** tout en haut...
  IF pos_y%>1
    ' ** on monte de 2 pixels
    pos_y%=pos_y%-2
  ENDIF
RETURN
PROCEDURE bas
  ' ** Si on n'est pas d‚j…
  ' ** tout en bas...
  IF pos_y%<175
    ' ** on descend de 2 pixels
    pos_y%=pos_y%+2
  ENDIF
RETURN
PROCEDURE droite
  ' ** Si on n'est pas d‚j…
  ' ** tout … droite...
  IF pos_x%<303
    ' ** d‚placement … droite.
    pos_x%=pos_x%+2
  ENDIF
RETURN
PROCEDURE gauche
  ' ** Si on n'est pas d‚j…
  ' ** tout … gauche...
  IF pos_x%>1
    ' ** d‚placement … gauche.
    pos_x%=pos_x%-2
  ENDIF
RETURN
