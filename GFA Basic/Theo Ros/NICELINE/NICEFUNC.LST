' ***************************************************************************
'
' NICELINE
'
' Niceline is a set of GfA functions and one INLINEd assembler routine
' to let you (or the user of your programs) decide how the divisor-lines
' in a menu bar have to be drawn. The functions all start with 'nice_'.
' Please see the NICELINE.GFA file for a demonstration.
'
' (c) Theo Ros for ICTARI       06/05/1997
'
' ***************************************************************************
' Niceline functions
' ***************************************************************************
'
> FUNCTION nice_init(tree%)
$F&
INLINE niceline%,306
LOCAL ncount
LONG{niceline%}=@vdi_paramblk ! pointer to vdi parameterblock
CARD{niceline%+4}=V~H         ! workstation
'
' the niceline-routine has global shapes and colors preset at:
' 1st line: &H5555, black     ! dotted lines
' 2nd line: &HAAAA, black
' Ofcourse, these settings are valid for a FRESH copy of NICELINE.INL
' Altering these values can best be done with functions
' nice_set_style() and nice_set_global_colors().
' my favorites: HIGH/MED rez: as preset (see above)
'                    LOW rez: solid lines (nice_set_style(1,1)
'                             colors dark/light
'
ERASE nline%()                ! delete niceline Applblk-array
~FRE(0)
ncount=@nice_count_lines(tree%)
IF ncount
  DIM nline%(PRED(ncount*2))
ENDIF
RETURN ncount
ENDFUNC
> FUNCTION nice_set_local_colors(tree%,obj,col1,col2)
' function sets the colors to use as LOCAL
' so these colors will be used for this object only
IF @nice_chk_object(tree%,obj)                   ! object IS a Niceline object?
col1=SHL&((col1 AND &HF),4) OR (col2 AND &HF)  ! combine colors into 1 byte
col1=SHL&(col1,8) OR BYTE(OB_STATE(tree%,obj)) ! merge with OB_STATE
OB_STATE(tree%,obj)=col1                       ! write new OB_STATE
RETURN TRUE
ENDIF
RETURN FALSE
ENDFUNC
> FUNCTION nice_get_local_colors(tree%,obj,VAR col1,col2)
' function returns the colors used as LOCAL for this object
CLR col1,col2
IF @nice_chk_object(tree%,obj)        ! object IS a Niceline object?
col1=SHR&(OB_STATE(tree%,obj),8)    ! get high_byte
col2=col1 AND &HF                   ! color for line 2 (low nibble)
col1=SHR&(col1,4) AND &HF           ! color for line 1 (high nibble)
RETURN TRUE
ENDIF
RETURN FALSE
ENDFUNC
> FUNCTION nice_set_global_colors(col1,col2)
' function sets the colors to use when drawing
' a niceline-object GLOBALLY. These colors will
' be used if the object has no LOCAL colors
' defined. (i.e. high_byte of OB_STATE = 0)
IF niceline%
BYTE{niceline%+10}=col1        ! kleur voor 1e lijn
BYTE{niceline%+11}=col2        ! kleur voor 2e lijn
RETURN TRUE
ENDIF
RETURN FALSE
ENDFUNC
> FUNCTION nice_get_global_colors(VAR col1,col2)
' function returns the colors used when drawing
' a niceline-object GLOBALLY. These colors will
' be used if the object has no LOCAL colors
' defined. (i.e. high_byte of OB_STATE = 0)
CLR col1,col2
IF niceline%
col1=BYTE{niceline%+10}               ! color for line 1
col2=BYTE{niceline%+11}               ! color for line 2
RETURN TRUE
ENDIF
RETURN FALSE
ENDFUNC
> FUNCTION nice_set_style(topline%,bottomline%)
' sets the GLOBALLY used shapes of the first and
' second niceline. Function nice_init() (called by
' procedure nice_on()) initialises these shapes to
' a grey pattern: 1st line=&H5555, 2nd line=&HAAAA
' which draws lines similar to some other programs
' you might have.
' With this function it is possible to set them to
' match any 16-bit pattern you like. (like DEFLINE)
' Setting one (or both) lines to shape 0 leaves
' unvisible line(s)
' It returns in one LONG value the combined former settings
$F%
LOCAL oldlines%
CLR oldlines%
IF niceline%
oldlines%=LONG{niceline%+6}
CARD{niceline%+6}=topline%
CARD{niceline%+8}=bottomline%
ENDIF
RETURN oldlines%
ENDFUNC
> FUNCTION nice_get_style(VAR topline%,bottomline%)
' returns the current shapes, used GLOBALLY
' as patterns to draw the nicelines
IF niceline%
topline%=CARD{niceline%+6}
bottomline%=CARD{niceline%+8}
RETURN LONG{niceline%+6}
ENDIF
RETURN FALSE
ENDFUNC
> FUNCTION nice_count_lines(tree%)
LOCAL child,count
CLR count
FOR child=1 TO @obj_get_last(tree%)
IF BYTE(OB_TYPE(tree%,child))=28          ! G_STRING
IF BTST(OB_STATE(tree%,child),3)        ! disabled?
IF BYTE{OB_SPEC(tree%,child)}=45      ! "-"
INC count
ENDIF
ENDIF
ENDIF
NEXT child
RETURN count
ENDFUNC
> FUNCTION nice_chk_object(tree%,obj)
' checks if obj& really IS a niceline_object
' if so, returnvalue is the objects OB_SPEC,
' if not, returnvalue will be 0
$F%
LOCAL obsp%
IF OB_TYPE(tree%,obj)=&H1C18  ! Xobtype= G_STRING, Obtype=G_PROGDEF?
obsp%=OB_SPEC(tree%,obj)
IF LONG{obsp%}=niceline%+12 ! points at Niceline routine?
RETURN obsp%
ENDIF
ENDIF
RETURN FALSE
ENDFUNC
> PROCEDURE nice_on(tree%)
' switches niceline drawing ON for a menu tree
LOCAL child,n
IF DIM?(nline%())=0                          ! need to (re) init?
~@nice_init(tree%)
ENDIF
IF DIM?(nline%())                            ! there ARE objects to do?
CLR n
FOR child=1 TO @obj_get_last(tree%)
IF BYTE(OB_TYPE(tree%,child))=28         ! G_STRING
IF BTST(OB_STATE(tree%,child),3)       ! disabled?
IF BYTE{OB_SPEC(tree%,child)}=45     ! "-"
OB_TYPE(tree%,child)=&H1C18        ! Xobtype=28, Obtype=24
nline%(n)=niceline%+12             ! address of drawing routine
nline%(n+1)=OB_SPEC(tree%,child)   ! preserve old OB_SPEC
OB_SPEC(tree%,child)=V:nline%(n)
ADD n,2                            ! next Applblk
ENDIF
ENDIF
ENDIF
NEXT child
ENDIF
RETURN
> PROCEDURE nice_off(tree%)
' switches niceline drawing OFF for a menu tree
' reinstalling the normal "-------" lines
LOCAL child,n
IF DIM?(nline%())                                 ! no nicelines present
CLR n
FOR child=1 TO @obj_get_last(tree%)
IF OB_TYPE(tree%,child)=&H1C18                ! Xobtype=28, Obtype=24?
IF LONG{OB_SPEC(tree%,child)}=niceline%+12  ! it IS an NICELINE object?
OB_TYPE(tree%,child)=28                   ! reset to G_STRING (28)
OB_SPEC(tree%,child)=nline%(n+1)          ! reset old OB_SPEC
ADD n,2                                   ! next Applblk
ENDIF
ENDIF
NEXT child
ERASE nline%()
ENDIF
RETURN
'
' ***************************************************************************
' subroutines, also used for other programmes
' ***************************************************************************
'
> FUNCTION vdi_paramblk
IF DIM?(vdipb%())<>5
ERASE vdipb%()
DIM vdipb%(4)
ENDIF
vdipb%(0)=CONTRL
vdipb%(1)=INTIN
vdipb%(2)=PTSIN
vdipb%(3)=INTOUT
vdipb%(4)=PTSOUT
RETURN V:vdipb%(0)   ! return address of vdi parameterblock
ENDFUNC
> FUNCTION obj_get_last(tree%)
' finds the last object in tree tree%.
' this does NOT have to be the same as OB_TAIL(tree%,0) !!
'
LOCAL lastob
CLR lastob
WHILE BTST(OB_FLAGS(tree%,lastob),5)=FALSE
' or use:  @obj_is_lastob(tree%,lastob)=FALSE
INC lastob
WEND
RETURN lastob
ENDFUNC
'
' ***************************************************************************
