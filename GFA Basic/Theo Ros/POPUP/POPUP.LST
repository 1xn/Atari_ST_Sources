' ***************************************************************************
' Popups in GfA Basic
' This listing holds routines to let you use popups in your programs.
' There are functions to use popups, stored in a resource file, but
' you can also build a popup 'on the fly', much like GfA's MENU mnu$()
' command. As usual, a demo should show you how it all works.
'
' Theo Ros   05/07/1997
' ***************************************************************************
'
DEFLIST 4
DEFWRD "a-z"
OPTION BASE 0
'
RESERVE 10000
' to prevent GfA from clearing the screen on startup:
~WIND_SET(0,14,0,0,0,0)                                 ! restore desktop
~FORM_DIAL(3,0,0,0,0,0,0,WORK_OUT(0),WORK_OUT(1))       ! and draw it
@demo_load_popup        ! load from resource
' @demo_build_popup     ! or create 'on the fly'
RESERVE
EDIT
'
> PROCEDURE demo_build_popup
  LOCAL choice$
  REPEAT
    MOUSE mx,my,mk
    EXIT IF LEN(INKEY$)
  UNTIL mk
  '
  IF mk
    ERASE pop$()
    DIM pop$(30)
    RESTORE popup_test                  ! IMPORTANT !! set GfA data pointer
    FOR i=0 TO 30
      READ pop$(i)
      EXIT IF pop$(i)=""                ! EMPTY string marks end of list
    NEXT i
    poptree%=@popup_create(pop$())      ! returns address of popup objecttree
    ERASE pop$()
    '
    IF poptree%
      ' if you like, you can change the state of any object here
      ' for instance have one checked (the current setting)
      '
      OB_STATE(poptree%,3)=BSET(OB_STATE(poptree%,3),2)
      '
      @demo_popup_do(poptree%,0)
      ~MFREE(poptree%)                            ! kill popup
    ELSE
      ALERT 3,"|Could not create |Popup Objecttree... ",1," Ok ",i
    ENDIF
  ENDIF
  '
popup_test:
  DATA ---Popup demo in GfA----
  DATA   [first itemnumber
  DATA   [second item
  DATA ---disabled separator---
  DATA   [third selectable item
  DATA   [last itemnummer,
  ' ALWAYS end with a final comma (empty string) to mark end of the list
RETURN
> PROCEDURE demo_load_popup
  LOCAL rsc$,choice$,root
  ' load demo resource with only one tree
  ' containing four different popups.
  ' for demo, load and use resource the old way
  rsc$=CHR$(BYTE(GEMDOS(25))+65)+":"+DIR$(0)+"\POP_DEMO.RSC"
  REPEAT
    EXIT IF RSRC_LOAD(rsc$)
    FILESELECT #"Find POP_DEMO.RSC","\*.rsc","POP_DEMO.RSC",rsc$
    IF RIGHT$(rsc$)="\"   ! clicked 'Ok' on empty selection
      CLR rsc$
    ENDIF
  UNTIL rsc$=""
  IF rsc$>""
    ERASE popups()
    DIM popups(3)
    popups(0)=1    ! rootobjectnumbers for four
    popups(1)=8    ! popups in the demo resource
    popups(2)=13
    popups(3)=17
    ~RSRC_LOAD(rsc$)
    ~RSRC_GADDR(0,0,poptree%)
    DO
      REPEAT
        MOUSE mx,my,mk          ! wait for mouseclick
        EXIT IF LEN(INKEY$)     ! exit demo with keypress
      UNTIL mk
      EXIT IF mk=0              ! cancel demo with keypress
      root=popups(RAND(4))      ! demo toggles popups randomly
      '
      ' if you like, you can change the state of any object here
      ' for instance have one checked (the current setting)
      '
      OB_STATE(poptree%,3)=BSET(OB_STATE(poptree%,3),2)
      '
      @demo_popup_do(poptree%,root)
      '
    LOOP
    ERASE popups()
    ~RSRC_FREE()                                  ! kill resource
  ENDIF
RETURN
> PROCEDURE demo_popup_do(poptree%,poproot)
  LOCAL choice$
  ~@popup_unselect(poptree%,poproot)               ! just to make sure..
  @popup_draw(poptree%,poproot,mx,my,hot$)
  i=@popup_handle(poptree%,poproot,hot$,TRUE,TRUE) ! returns objectnumber
  ~@popup_undraw(poptree%,poproot)
  ' after this, it is likely (i>0) that one of the
  ' items OB_STATE has the selected bit on. If you're
  ' planning on using this popup again, use obj_unselect()
  ' to clear it, or popup_unselect(), which resets all of the
  ' items OB_STATE words to NOT_SELECTED, like this demo does.
  IF i>0                                    ! -1=cancelled, 0=disabled
    choice$="|Your choice was |objectnumber "+STR$(i)
    ' text can be found with ~@obj_get_text(poptree%,i,item$)
    ' or use popup_item$(poptree%,i) to have the string without
    ' spaces and without the hotkey character '['.
    choice$=choice$+"|®"+@popup_item$(poptree%,i)+"¯ "
    ALERT 1,choice$,1," Ok ",i
  ELSE
    ALERT 1,"|Popup cancelled !|No choice was made. ",1," Ok ",i
  ENDIF
RETURN
'
' ***************************************************************************
' Popup functions
' ***************************************************************************
'
> PROCEDURE popup_draw(ptree%,rootobj,popx,popy,VAR hotkey$)
  ' Draws a popup tree at starting point popx& and popy&
  ' If the popup should disappear from the screen, this
  ' function will adjust the coordinates.
  ' Be sure that IF the root object for the popup has
  ' a parentobject, its x and y coordinates are 0,0.
  ' Popup_draw() 'saves' the background using FORM_DIAL
  ' After popup_handle(), you should have the background
  ' restored with popup_undraw(). If you don't want to
  ' save and restore the background this way, you could
  ' consider using GET and PUT, or RC_COPY to your programs
  ' second screen, or buffer it in a piece of MALLOCED
  ' memory with VRO_CPYFM(). In this case you could even
  ' consider using GEM's own menu- and alertbuffer..
  ' (get the address of this buffer with WIND_GET(17)).
  ' Popup_draw() will also draw underlined 'hotkeys' if
  ' stated in the G_STRINGs by a preceeding '[' character.
  ' After drawing, the variable hotkey$ will hold the
  ' underlined characters. Use this string when calling
  ' popup_handle().
  '
  LOCAL item,hot,xtxt,ytxt,popw,poph,pop$,hot$
  ~WIND_UPDATE(1)
  popw=OB_W(ptree%,rootobj)
  poph=OB_H(ptree%,rootobj)
  popx=MAX(0,MIN(popx,WORK_OUT(0)-SUCC(popw)))
  popy=MAX(0,MIN(popy,WORK_OUT(1)-SUCC(poph)))
  OB_X(ptree%,rootobj)=popx
  OB_Y(ptree%,rootobj)=popy
  ~FORM_DIAL(0,0,0,0,0,popx-1,popy-1,popw+2,poph+2)
  '
  ' opening a new virtual screen, lets you make (font)
  ' settings without interfering with the main program
  ' it will also reset text output to use standard font
  ' and size. If you don't, calculate standard fontsize
  ' by calling GRAF_HANDLE(charw,charh,d,d). Size for
  ' DEFTEXT will be CINT(charh/90*72)
  '
  V~H=V_OPNVWK(XBIOS(4)+2)              ! open new workstation (screen)
  INTIN(0)=0                            ! vst_alignment(): LEFT/TOP
  INTIN(1)=5
  VDISYS 39,2,0
  DEFTEXT ,8                            ! set underlined mode for hotkeys
  CLR hotkey$
  ~OBJC_DRAW(poptree%,rootobj,0,0,0,0,0)
  GRAPHMODE 2
  FOR item=OB_HEAD(ptree%,rootobj) TO OB_TAIL(ptree%,rootobj)
    IF @obj_is_hidden(ptree%,item)      ! hidden objects don't count
      hotkey$=hotkey$+CHR$(27)
    ELSE
      ~@obj_get_text(ptree%,item,pop$)
      hot=INSTR(pop$,"[")               ! find hotkey
      IF hot
        hot$=RIGHT$(pop$,LEN(pop$)-hot)
        pop$=LEFT$(pop$,hot-1)
        hotkey$=hotkey$+UPPER$(LEFT$(hot$,1))
        ~@obj_set_text(ptree%,item,pop$+hot$)           ! text without "["
        ~OBJC_DRAW(ptree%,item,0,popx,popy,popw,poph)   ! draw it like this
        ~@obj_set_text(ptree%,item,pop$+"["+hot$)       ! restore full text
        IF NOT @obj_is_disabled(ptree%,item)
          xtxt=popx+OB_X(ptree%,item)+8*(hot-1)
          ytxt=popy+OB_Y(ptree%,item)
          TEXT xtxt,ytxt,LEFT$(hot$,1)        ! draw underlined char
        ENDIF
      ELSE                              ! no hotkey in this item
        hotkey$=hotkey$+CHR$(27)        ! enter non-zero dummy character
        ~OBJC_DRAW(ptree%,item,0,popx,popy,popw,poph)
      ENDIF                             ! best use [Esc] = Cancel for this
    ENDIF
  NEXT item
  IF hotkey$=STRING$(LEN(hotkey$),27)   ! only escape characters?
    CLR hotkey$                         ! just aswell use an empty string then
  ENDIF
  ~V_CLSVWK()                           ! close workstation (screen)
  V~H=-1                                ! reset VDI handle to current (GfA)
  ~WIND_UPDATE(0)                       ! resume normal program
RETURN
> FUNCTION popup_create(VAR poptxt$())
' builds a popup objecttree in memory.
' ALWAYS first set the GfA data pointer to the
' appropriate data with 'RESTORE label'.
' the function returns the address of the objecttree
' needed for OBJC_DRAW() and MFREE().
' If returnvalue is 0, no memory was found to create
' the popup, so popup_draw() and popup_handle()
' cannot be called.
' --> poptxt$() a string array holding the various items
'               like with GfA's MENU mnu$().
'               an EMPTY string denotes the end of the list
$F%
LOCAL p$,pd,pn,pw,chw,chh,pstrings%,ptree%
CLR pn,pw,pstrings%,ptree%
WHILE poptxt$(pn)>""                  ! EMPTY string marks end of list
  pd=LEN(poptxt$(pn))
  pw=MAX(pw,pd)
  ADD pstrings%,SUCC(pd)
  INC pn
WEND
IF pn
  ptree%=MALLOC(24+24*pn+pstrings%)   ! room for objects + strings
  IF ptree%>0                         ! adapted version of tree_create()
    ~GRAF_HANDLE(chw,chh,pd,pd)       ! get standard char dimensions
    pstrings%=ptree%+24+24*pn
    MUL pw,chw
    OB_NEXT(ptree%,0)=-1
    OB_HEAD(ptree%,0)=-1
    OB_TAIL(ptree%,0)=-1
    OB_TYPE(ptree%,0)=20              ! G-BOX for root object
    OB_FLAGS(ptree%,0)=0
    OB_STATE(ptree%,0)=&X100000       ! shadowed
    OB_SPEC(ptree%,0)=&HFF1000        ! white, border black 1 pixel
    OB_X(ptree%,0)=0
    OB_Y(ptree%,0)=0
    OB_W(ptree%,0)=pw
    OB_H(ptree%,0)=pn*chh
    FOR pd=1 TO pn
      p$=poptxt$(PRED(pd))
      OB_NEXT(ptree%,pd)=-1
      OB_HEAD(ptree%,pd)=-1
      OB_TAIL(ptree%,pd)=-1
      OB_TYPE(ptree%,pd)=28           ! G_STRING
      IF LEFT$(TRIM$(p$))="-"         ! strings like '---Demo Popup---'
        OB_FLAGS(ptree%,pd)=0         ! are set to be disabled (grey text)
        OB_STATE(ptree%,pd)=&X1000    ! and non_selectable
      ELSE
        OB_FLAGS(ptree%,pd)=1
        OB_STATE(ptree%,pd)=0
      ENDIF
      CHAR{pstrings%}=p$
      OB_SPEC(ptree%,pd)=pstrings%
      ADD pstrings%,SUCC(LEN(p$))     ! LEN(p$)+1 for NULL byte
      OB_X(ptree%,pd)=0
      OB_Y(ptree%,pd)=PRED(pd)*chh
      OB_W(ptree%,pd)=pw
      OB_H(ptree%,pd)=chh
      ~OBJC_ADD(ptree%,0,pd)
    NEXT pd
    OB_FLAGS(ptree%,PRED(pd))=&X100000        ! lastob
  ENDIF
ENDIF
ERASE poptxt$()
RETURN ptree%
ENDFUNC
> FUNCTION popup_unselect(ptree%,rootobj)
' function clears the SELECTED state
' for each item in the popup.
LOCAL item
FOR item=OB_HEAD(ptree%,rootobj) TO OB_TAIL(ptree%,rootobj)
~@obj_unselect(ptree%,item)
NEXT item
RETURN PRED(item)
ENDFUNC
> FUNCTION popup_undraw(ptree%,rootobj)
' function restores the screen using FORM_DIAL
LOCAL popx,popy,popw,poph
~OBJC_OFFSET(ptree%,rootobj,popx,popy)
popw=OB_W(ptree%,rootobj)
poph=OB_H(ptree%,rootobj)
RETURN FORM_DIAL(3,0,0,0,0,popx-1,popy-1,popw+2,poph+2)
ENDFUNC
> FUNCTION popup_handle(ptree%,rootobj,hotkey$,skip!,flash!)
' handles the popuptree, either created on the fly
' with function popup_create() or read from a
' resource file.
' Pressing [Esc] or [Undo] will abort the popup.
' Mouse action is taken when the mousebutton
' changes; therefore, people used to MAC-menu's
' can also hold down the button while moving
' through the options. Then, on button release
' the item is selected.
' --> ptree%   objecttree for popup
'     rootobj  parentobject (G_BOX) for popup
'     hotkey$  select in popup by pressing this key
'     skip!    if TRUE, keyboard select with arrows UP and
'              DOWN will jump over any disabled item.
'              ** MAKE SURE AT LEAST ONE ITEM IS NOT DISABLED !! **
'     flash!   if TRUE, flash chosen item, else just exit
' <-- -1 : no selection, clicked OUTSIDE popup
'      0 : no selection, clicked on a DISABLED line
'     >0 : selected objectnumber
'
$F&
LOCAL choice,previous,first,last,mnow,mx,my,mk,oldx,oldy,key%
~WIND_UPDATE(3)
first=OB_HEAD(ptree%,rootobj)
last=OB_TAIL(ptree%,rootobj)
hotkey$=UPPER$(hotkey$)
CLR previous
oldx=-1
oldy=-1
~EVNT_TIMER(100)              ! wait for possible mousebutton change
mnow=MOUSEK                   ! react on change of this value
DO
MOUSE mx,my,mk
KEYTEST key%                ! or:key%=GEMDOS(6,255)
IF key%
SELECT BYTE(SWAP(key%))   ! scancode
CASE &H1C,&H72            ! return/enter
mk=-1                   ! impossible, but non_zero mousekey
CASE 1,&H61               ! escape/Undo
choice=-1
mk=-1
CASE &H48                 ! UP
choice=previous-1
IF choice<first
  choice=last
ENDIF
IF skip!                ! skip over disabled items?
  WHILE @obj_is_disabled(ptree%,choice)
    DEC choice
    IF choice<first
      choice=last
    ENDIF
  WEND
ENDIF
CASE &H50                 ! DOWN
choice=MAX(first,previous+1)
IF choice>last
  choice=first
ENDIF
IF skip!                ! skip over disabled items?
  WHILE @obj_is_disabled(ptree%,choice)
    INC choice
    IF choice>last
      choice=first
    ENDIF
  WEND
ENDIF
DEFAULT
key%=INSTR(hotkey$,UPPER$(CHR$(BYTE(key%))))+rootobj
IF AND(key%=>first,key%<=last)
  choice=key%
  mk=-1
ENDIF
ENDSELECT
ELSE IF OR(mk<>mnow,OR(oldx<>mx,oldy<>my))  ! mouse moved?
choice=OBJC_FIND(ptree%,rootobj,9,mx,my)  ! or button changed?
oldx=mx
oldy=my
ENDIF
IF choice>-1
IF choice<>previous
IF @obj_is_selected(ptree%,previous)
  ~@obj_chg_select(ptree%,previous,0,0,0,0)
ENDIF
IF NOT @obj_is_disabled(ptree%,choice)
  ~@obj_chg_select(ptree%,choice,0,0,0,0)
ENDIF
previous=choice
ENDIF
ELSE IF previous
IF @obj_is_selected(ptree%,previous)
~@obj_chg_select(ptree%,previous,0,0,0,0)
ENDIF
CLR previous
ENDIF
LOOP UNTIL mk<>mnow                           ! until mouse button changes
IF choice>-1                                  ! made a choice?
IF @obj_is_disabled(ptree%,choice)          ! sorry, item disabled..
CLR choice
ELSE IF flash!
FOR first=0 TO 5
~@obj_chg_select(ptree%,choice,0,0,0,0)
~EVNT_TIMER(70)
NEXT first
ENDIF
ENDIF
~WIND_UPDATE(2)
REPEAT                ! clear mouse and keybuffers
UNTIL EVNT_MULTI(&X100011,257,3,0,0,0,0,0,0,0,0,0,0,0,0,50)=32
RETURN choice
ENDFUNC
> FUNCTION popup_item$(ptree%,obj)
' returns the text of a popup item
' WITHOUT the hotkey character '['
LOCAL itxt$,hotchar
IF @obj_get_text(ptree%,obj,itxt$)
hotchar=INSTR(itxt$,"[")
IF hotchar
itxt$=LEFT$(itxt$,hotchar-1)+RIGHT$(itxt$,LEN(itxt$)-hotchar)
ENDIF
RETURN TRIM$(itxt$)
ENDIF
RETURN ""
ENDFUNC
'
' ***************************************************************************
' Object functions from the OBJ_FUNC.LST binding used by popup functions
' ***************************************************************************
'
DEFFN obj_is_selected(tree%,obj)=BTST(OB_STATE(tree%,obj),0)
DEFFN obj_is_disabled(tree%,obj)=BTST(OB_STATE(tree%,obj),3)
DEFFN obj_is_hidden(tree%,obj)=BTST(OB_FLAGS(tree%,obj),7)
> FUNCTION obj_chg_select(tree%,obj,clipx,clipy,clipw,cliph)
' toggles the selected-status of obj&
' AND redraws.
'
LOCAL newstat
newstat=BCHG(OB_STATE(tree%,obj),0)
RETURN OBJC_CHANGE(tree%,obj,0,clipx,clipy,clipw,cliph,newstat,1)
ENDFUNC
> FUNCTION obj_unselect(tree%,obj)
' set status for obj& to NOT SELECTED
' you need to redraw after this with:
' ~OBJC_DRAW(tree%,obj,99,clipx,clipy,clipw,cliph)
'
LOCAL obstat
obstat=BCLR(OB_STATE(tree%,obj),0)
OB_STATE(tree%,obj)=obstat
' or: RETURN @obj_bset_state(tree%,obj,0)
RETURN obstat
ENDFUNC
> FUNCTION obj_get_text(tree%,obj,VAR t$)
' reads in the text for obj&
'
LOCAL adr%
CLR t$
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 26,28,32         ! type G_BUTTON, G_STRING of G_TITLE
t$=CHAR{OB_SPEC(tree%,obj)}
CASE 21,22,29,30      ! tedinfo
t$=CHAR{LONG{OB_SPEC(tree%,obj)}}
CASE 31               ! G_ICON
t$=CHAR{LONG{OB_SPEC(tree%,obj)}+8}
CASE 33               ! G_CICON
adr%=LONG{OB_SPEC(tree%,obj)+8}
IF LONG{adr%}
t$=STRING$(13,0)
BMOVE adr%,V:t$,12
t$=CHAR{V:t$}
ELSE IF LONG{adr%+4}=CVL("XTXT")
t$=CHAR{LONG{adr%+8}}
ENDIF
ENDSELECT
RETURN (t$>"")
ENDFUNC
> FUNCTION obj_set_text(tree%,obj,t$)
' function overwrites text in obj& with t$
' NEVER (no, never) set t$ to hold a text LONGER
' than the text the object was intended for !
' a safer way is to not update the text itself,
' but only the pointer to this text, using
' obj_set_textadr()
'
LOCAL adr%,fixadr%
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 26,28,32         ! type G_BUTTON, G_STRING of G_TITLE
CHAR{OB_SPEC(tree%,obj)}=t$
RETURN TRUE
CASE 21,22,29,30      ! tedinfo
CHAR{LONG{OB_SPEC(tree%,obj)}}=t$
RETURN TRUE
CASE 31               ! G_ICON
CHAR{LONG{OB_SPEC(tree%,obj)}+8}=t$
RETURN TRUE
CASE 33               ! G_CICON
adr%=LONG{OB_SPEC(tree%,obj)+8}
IF LEN(t$)<13
t$=LEFT$(t$+STRING$(12,0),12)
BMOVE V:t$,adr%,12
ELSE                ! need to relocate it, so create fixed address
fixadr%=MALLOC(SUCC(LEN(t$)))
IF fixadr%
CHAR{fixadr%}=t$
LONG{adr%}=0
LONG{adr%+4}=CVL("XTXT")
LONG{adr%+8}=fixadr%
RETURN fixadr%  ! keep this value, so you can MFREE it again,
ENDIF             ! or do ~MFREE(@obj_get_textadr(tree%,obj))
ENDIF
DEFAULT
RETURN FALSE
ENDSELECT
RETURN TRUE
ENDFUNC
