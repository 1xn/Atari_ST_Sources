' **************************************************************************
' PROCEDURE balloon() lets you display a small (help)
' textballoon like system enhancement BubbleGEM does.
' BubbleGEM ofcourse has the great disadvantage, that
' the user must have loaded it into his system (AUTO)
' If not, your program will not be able to display
' anything. Furthermore BubbleGEM only seems to work
' for systems using MultiTOS, MINT or whatever.
'
' If you want your program to work on EVERY machine,
' it's best to do the drawing yourself.
' Procedure balloon() lets you display a maximum of
' 10 lines, displayed in the font(size) currently set.
' It expects 4 parameters:
' bx& and by&: point of origin for the balloon
' btext$     : balloontext, lines separated by "|" character
' btime%     : minimum displaytime in milliseconds
'              if <=0, the function will use the default
'              time of 50 milliseconds
'
' The function tries to keep the entire balloon visible
' on the screen, but calling it with text that is too
' large or an extremely large fontsize will have part
' of the balloon disappear off the screen.
' This version of balloon() uses GET and PUT to save the
' original part of the screen, covered by the textballoon,
' but this is not the safest way, since it uses the program's
' internal memory (FRE(0)). If your program has an extra screen
' allocated for saving and restoring, better use RC_COPY() or
' create your own GET/PUT with VDI function vro_cpyfm().
' You could also decide not to buffer the background at all,
' but use FORM_DIAL() before and after drawing, to have AES
' send a redraw message.
'
' Theo Ros   11/06/1997
'
' **************************************************************************
'
test$="THIS IS A TESTBALLOON| "
test$=test$+"|In here you can write user info on"
test$=test$+"|an object or anything you like."
test$=test$+"|It is recommended you display help"
test$=test$+"|like this when the user RIGHT-clicks"
test$=test$+"|on one of the objects in your program.| "
test$=test$+"|You can have up to 10 lines of text"
test$=test$+"|displayed in a balloon."
DEFTEXT ,,,6            ! set fontsize (here 8x8)
'
@balloon(MOUSEX,MOUSEY,test$,0)
EDIT
'
> PROCEDURE balloon(bx,by,btext$,btime%)
  LOCAL bw,bh,bd,btx,bty,chw,chh
  ~WIND_UPDATE(3)                       ! halt menu's
  IF btext$>""
    VDISYS 38                           ! get current character size
    chw=PTSOUT(2)
    chh=PTSOUT(3)
    ERASE xballoon(),yballoon(),bline$()
    DIM xballoon(13),yballoon(13),bline$(9)
    CLR bw,bh
    WHILE btext$>""
      bd=INSTR(btext$,"|")
      IF bd
        bline$(bh)=LEFT$(btext$,bd-1)
        btext$=RIGHT$(btext$,LEN(btext$)-bd)
      ELSE
        bline$(bh)=btext$
        CLR btext$
      ENDIF
      bw=MAX(bw,LEN(bline$(bh)))
      INC bh
      EXIT IF bh>9                      ! max. 10 lines
    WEND
    bh=bh*chh+16
    bw=bw*chw+16
    IF bx+bw>WORK_OUT(0)                ! put balloon LEFT of origin point,
      bx=ABS(bx)-bw                     ! to make it fit on the screen
      xballoon(0)=bx+bw
      xballoon(1)=xballoon(0)-12
    ELSE
      xballoon(0)=bx
      xballoon(1)=xballoon(0)+8
    ENDIF
    xballoon(2)=xballoon(1)
    xballoon(3)=bx+2
    xballoon(4)=bx
    xballoon(5)=bx
    xballoon(6)=xballoon(3)
    xballoon(7)=bx+bw-2
    xballoon(8)=bx+bw
    xballoon(9)=xballoon(8)
    xballoon(10)=xballoon(7)
    xballoon(11)=xballoon(2)+4
    xballoon(12)=xballoon(11)
    xballoon(13)=xballoon(0)
    yballoon(0)=by
    IF by-bh<2                          ! put balloon BELOW point of origin
      yballoon(1)=by+4                  ! to make it fit on the screen
      yballoon(2)=yballoon(1)+4
      yballoon(4)=yballoon(2)+2
      yballoon(5)=by+bh-2
      yballoon(6)=by+bh
      bty=by+8                          ! preset text Y coordinate
    ELSE
      yballoon(1)=by-4
      yballoon(2)=yballoon(1)-4
      yballoon(4)=yballoon(2)-2
      yballoon(5)=by-bh+2
      yballoon(6)=by-bh
      SUB by,bh
      bty=by                            ! preset text Y coordinate
    ENDIF
    yballoon(3)=yballoon(2)
    yballoon(7)=yballoon(6)
    yballoon(8)=yballoon(5)
    yballoon(9)=yballoon(4)
    yballoon(10)=yballoon(3)
    yballoon(11)=yballoon(10)
    yballoon(12)=yballoon(1)
    yballoon(13)=yballoon(0)
    GET bx,by,bx+bw+1,by+bh+1,btext$    ! save screen
    GRAPHMODE 1
    BOUNDARY 1
    DEFLINE 1,1,0,0
    DEFFILL 1,1                         ! create shadow
    POLYFILL 14,xballoon(),yballoon() OFFSET 1,1
    DEFFILL 1,0                         ! draw balloon
    POLYFILL 14,xballoon(),yballoon()
    btx=bx+chw                          ! prepare text coordinates
    ADD bty,chh+2                       ! final adjust text Y
    FOR bd=0 TO 9
      EXIT IF bline$(bd)=""
      TEXT btx,bty,bline$(bd)
      ADD bty,chh
    NEXT bd
    ERASE xballoon(),yballoon(),bline$()
    IF btime%<=0                        ! wait until a minimum display-
      btime%=50                         ! time has passed.
    ENDIF
    REPEAT                              ! clears keybuffer aswell
    UNTIL EVNT_MULTI(&X100011,257,3,0,0,0,0,0,0,0,0,0,0,0,0,btime%)=32
    REPEAT                              ! now wait for keypress or mouseclick
    UNTIL EVNT_MULTI(&X11,257,3,0,0,0,0,0,0,0,0,0,0,0,0,0)
    PUT bx,by,btext$                    ! restore screen
    REPEAT                              ! clear keybuffer before exiting
    UNTIL EVNT_MULTI(&X100011,257,3,0,0,0,0,0,0,0,0,0,0,0,0,50)=32
  ENDIF
  ~WIND_UPDATE(2)                       ! resume normal mouse-action
RETURN
