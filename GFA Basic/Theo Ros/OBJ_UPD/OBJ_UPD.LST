' Unfortunately, there were errors in some of the
' functions in OBJ_FUNC.LST on Ictari disk #44.
' Function obj_set_boxinfo() did not set the
' correct bits, so the object didn't not come
' out as you would expect. (must have dozed off,
' because the functions counterpart obj_get_boxinfo()
' was allright..)
' Furthermore, since I did the XRSC stuff, I have
' learned more about color-icons and how they are
' built into a resource file. Please find a few
' renewed functions that will work with the way
' XRSC fixes color icons.
'
' Anyway, here's an update to set things right.
' Also, please find 6 more new functions which
' can come in usefull. Especially for those of
' you using the obj_create() and/or tree_create()
' functions, I've put in the function obj_set_last().
' (you knew ofcourse that it is VITAL for any
' object tree to have a LASTOB object !!)
'
' Enjoy,
'
' Theo Ros
'
' this function was COMPLETELY wrong..
> FUNCTION obj_set_boxinfo(tree%,obj,fcol,fpat,mode,ccol,bcol,bwidth,char)
' sets drawing-attributes for a BOXINFO structure
' return: TRUE  --> set
'         FALSE --> wrong type
'
LOCAL boxinfo%
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 20,25,27
  boxinfo%=BYTE(char)
  boxinfo%=SHL(boxinfo%,8) OR BYTE(bwidth)
  boxinfo%=SWAP(boxinfo%)
  boxinfo%=OR(boxinfo%,SHL((bcol AND &X1111),12))
  boxinfo%=OR(boxinfo%,SHL((ccol AND &X1111),8))
  boxinfo%=OR(boxinfo%,SHL((mode AND 1),7))
  boxinfo%=OR(boxinfo%,SHL((fpat AND &X111),4))
  boxinfo%=OR(boxinfo%,(fcol AND &X1111))
  OB_SPEC(tree%,obj)=boxinfo%
  RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
'
' new obj_... functions
> FUNCTION obj_set_last(tree%,obj)
' function sets obj& to be the last in the object-tree
' use this after building an object (or tree) from
' scratch: tree%=@obj_create(type,x,y,w,h)
'           ~@obj_set_last(tree%,0)
'
'       or tree%=@tree_create(nchilds)
'          ~@obj_set_last(tree%,nchilds)
'
' or update function obj_create() with:
'    OB_FLAGS(newobj%,0)=&X100000  (insert line before RETURN newobj%)
' and function tree_create() with:
'    OB_FLAGS(newtree%,PRED(child))=&X100000 (insert before ENDIF)
'
LOCAL flags
flags=OB_FLAGS(tree%,obj)
OB_FLAGS(tree%,obj)=BSET(flags,5)     ! set LASTOB
RETURN flags
ENDFUNC
> FUNCTION obj_center(tree%,obj,cx,cy,cw,ch)
' centers object (tree%,obj&) within rectangle
' cx&,cy&,cw&,ch&
' returnvalue is the former OB_X and OB_Y of the
' object. [ x&=CARD(SWAP(old_obxy%))  ...  y&=CARD(old_obxy%) ]
$F%
LOCAL old_obxy%
old_obxy%=LONG{OB_ADR(tree%,obj)}
' or use:  old_obxy%=SHL(OB_X(tree%,obj),16) OR OB_Y(tree%,obj)
'
IF AND(cw=0,ch=0)       ! 0,0 --> rest of screen
cw=SUCC(WORK_OUT(0))-cx
ch=SUCC(WORK_OUT(0))-cy
ENDIF
OB_X(tree%,obj)=cx+(cw-OB_W(tree%,obj))\2
OB_Y(tree%,obj)=cy+(ch-OB_H(tree%,obj))\2
RETURN old_obxy%
ENDFUNC
'
' new ICON related functions
> FUNCTION obj_get_iconcolors(tree%,obj,VAR mcol,icol)
' get icon colors for mask (mcol) and foreground (icol)
LOCAL cols
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 31,33                    ! G_ICON, G_CICON
cols=BYTE{OB_SPEC(tree%,obj)+12}
mcol=(cols AND &HF)
icol=(SHR&(cols,4) AND &HF)
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_iconcolors(tree%,obj,mcol,icol)
' set icon colors for mask (mcol) and foreground (icol)
LOCAL cols
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 31,33                    ! G_ICON, G_CICON
cols=SHL&((icol AND &HF),4) OR (mcol AND &HF)
BYTE{OB_SPEC(tree%,obj)+12}=cols
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
'
' new tree_... functions
> FUNCTION tree_search(tree%,obstart,type)
' function looks for a certain object with
' OB_TYPE=type& from startposition obstart&
' return: -1 --> not found, otherwise objectnumber
'
LOCAL obindex
obindex=-1
REPEAT
IF OB_TYPE(tree%,obstart)=type
obindex=obstart
ENDIF
EXIT IF BTST(OB_FLAGS(tree%,obstart),5)     ! until last object
INC obstart
UNTIL obindex>-1
RETURN obindex
ENDFUNC
> FUNCTION tree_count(tree%,obstart,type)
' returns the number of objects in an objecttree
' from startposition obstart&.
' type&: -1 --> count ALL objects left
'        otherwise, only count objects with OB_TYPE=type&
LOCAL obcount
CLR obcount
IF type<0
WHILE BTST(OB_FLAGS(tree%,obstart),5)=0     ! while not last object
INC obcount
INC obstart
WEND
ELSE
WHILE BTST(OB_FLAGS(tree%,obstart),5)=0     ! while not last object
IF OB_TYPE(tree%,obstart)=type
INC obcount
ENDIF
INC obstart
WEND
ENDIF
RETURN obcount
ENDFUNC
'
' updated obj_... functions, to work with G_CICONS
> FUNCTION obj_set_text(tree%,obj,t$)
' function overwrites text in obj& with t$
' NEVER (no, never) set t$ to hold a text LONGER
' than the text the object was intended for !
' a safer way is to not update the text itself,
' but only the pointer to this text, using
' obj_set_textadr()
'
LOCAL adr%,fixadr%
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 26,28,32         ! type G_BUTTON, G_STRING of G_TITLE
CHAR{OB_SPEC(tree%,obj)}=t$
RETURN TRUE
CASE 21,22,29,30      ! tedinfo
CHAR{LONG{OB_SPEC(tree%,obj)}}=t$
RETURN TRUE
CASE 31               ! G_ICON
CHAR{LONG{OB_SPEC(tree%,obj)}+8}=t$
RETURN TRUE
CASE 33               ! G_CICON
adr%=LONG{OB_SPEC(tree%,obj)+8}
IF LEN(t$)<13
t$=LEFT$(t$+STRING$(12,0),12)
BMOVE V:t$,adr%,12
ELSE                ! need to relocate it, so create fixed address
fixadr%=MALLOC(SUCC(LEN(t$)))
IF fixadr%
CHAR{fixadr%}=t$
LONG{adr%}=0
LONG{adr%+4}=CVL("XTXT")
LONG{adr%+8}=fixadr%
RETURN fixadr%  ! keep this value, so you can MFREE it again,
ENDIF             ! or do ~MFREE(@obj_get_textadr(tree%,obj))
ENDIF
DEFAULT
RETURN FALSE
ENDSELECT
RETURN TRUE
ENDFUNC
> FUNCTION obj_get_text(tree%,obj,VAR t$)
' reads in the text for obj&
'
LOCAL adr%
CLR t$
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 26,28,32         ! type G_BUTTON, G_STRING of G_TITLE
t$=CHAR{OB_SPEC(tree%,obj)}
CASE 21,22,29,30      ! tedinfo
t$=CHAR{LONG{OB_SPEC(tree%,obj)}}
CASE 31               ! G_ICON
t$=CHAR{LONG{OB_SPEC(tree%,obj)}+8}
CASE 33               ! G_CICON
adr%=LONG{OB_SPEC(tree%,obj)+8}
IF LONG{adr%}
t$=STRING$(13,0)
BMOVE adr%,V:t$,12
t$=CHAR{V:t$}
ELSE IF LONG{adr%+4}=CVL("XTXT")
t$=CHAR{LONG{adr%+8}}
ENDIF
ENDSELECT
RETURN (t$>"")
ENDFUNC
> FUNCTION obj_get_textadr(tree%,obj)
' returns the address of the text in obj&
'
$F%
LOCAL adr%
CLR adr%
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 26,28,32         ! type G_BUTTON, G_STRING of G_TITLE
adr%=OB_SPEC(tree%,obj)
CASE 21,22,29,30      ! tedinfo
adr%=LONG{OB_SPEC(tree%,obj)}
CASE 31               ! G_ICON
adr%=LONG{OB_SPEC(tree%,obj)+8}
CASE 33               ! G_CICON
adr%=LONG{OB_SPEC(tree%,obj)+8}
IF LONG{adr%}=0     ! relocated text, XRSC-method
IF LONG{adr%+4}=CVL("XTXT")
adr%=LONG{adr%+8}
ENDIF
ENDIF
ENDSELECT
RETURN adr%
ENDFUNC
> FUNCTION obj_set_textadr(tree%,obj,txt%)
' function rewrites the pointer to text in obj&
' The original string will be left alone, and
' therefore this function is safer than obj_set_text()
' Do not set parameter txt% to be a pointer to a
' string, because they tend to move in memory.
' use a numeric array (or MALLOC-ed memory) and
' CHAR{} the text into there
' (text is C-string: null terminated)
'
$F%
LOCAL adr%
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 26,28,32         ! type G_BUTTON, G_STRING of G_TITLE
OB_SPEC(tree%,obj)=txt%
CASE 21,22,29,30      ! tedinfo
LONG{OB_SPEC(tree%,obj)}=txt%
CASE 31               ! G_ICON
LONG{OB_SPEC(tree%,obj)+8}=txt%
CASE 33               ! G_CICON, using XRSC-method
adr%=LONG{OB_SPEC(tree%,obj)+8}
LONG{adr%}=0
LONG{adr%+4}=CVL("XTXT")
LONG{adr%+8}=txt%
DEFAULT
RETURN FALSE
ENDSELECT
RETURN TRUE
ENDFUNC
> FUNCTION obj_get_bitxywh(tree%,obj,VAR x,y,w,h)
' read width and height of a bitblk
' x and y are offsets, relative to the objects OB_X and OB_Y
'
LOCAL adr%,obtype
obtype=BYTE(OB_TYPE(tree%,obj))
SELECT obtype
CASE 23                   ! G_IMAGE
adr%=OB_SPEC(tree%,obj)
x=CARD{adr%+8}
y=CARD{adr%+10}
w=CARD{adr%+4}*8        ! bi_wb (bytes --> pixels)
h=CARD{adr%+6}          ! bi_hl
RETURN TRUE
CASE 31,33                ! G_ICON,G_CICON
adr%=OB_SPEC(tree%,obj)
x=CARD{adr%+18}
y=CARD{adr%+20}
w=CARD{adr%+22}         ! ib_wicon
h=CARD{adr%+24}         ! ib_hicon
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_bitxywh(tree%,obj,x,y,w,h)
' set the width and height for a bitblk
' if parameter x&, y&, w&, or h& <0, nothing is set
'
LOCAL adr%,obtype
obtype=BYTE(OB_TYPE(tree%,obj))
SELECT obtype
CASE 23                   ! G_IMAGE
adr%=OB_SPEC(tree%,obj)
IF x>-1
CARD{adr%+8}=x
ENDIF
IF y>-1
CARD{adr%+10}=y
ENDIF
IF w>-1
CARD{adr%+4}=((w+15)\16)*2      ! bi_wb (pixels --> bytes)
ENDIF
IF h>-1
CARD{adr%+6}=h        ! bi_hl
ENDIF
RETURN TRUE
CASE 31,33                ! G_ICON,G_CICON
adr%=OB_SPEC(tree%,obj)
IF x>-1
CARD{adr%+18}=x
ENDIF
IF y>-1
CARD{adr%+20}=y
ENDIF
IF w>-1
CARD{adr%+22}=w       ! ib_wicon
ENDIF
IF h>-1
CARD{adr%+24}=h       ! ib_hicon
ENDIF
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_get_iconchar(tree%,obj)
' reads in the character for an icon (66='B')
'
$F&
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 31,33                    ! G_ICON, G_CICON
RETURN BYTE{OB_SPEC(tree%,obj)+13}
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_iconchar(tree%,obj,ch)
' sets the character for an icon (ch=65 --> 'A')
'
$F&
LOCAL oldchar
CLR oldchar
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 31,33                    ! G_ICON
oldchar=BYTE{OB_SPEC(tree%,obj)+13}
BYTE{OB_SPEC(tree%,obj)+13}=BYTE(ch)
ENDSELECT
RETURN oldchar
ENDFUNC
> FUNCTION obj_get_iconxychar(tree%,obj,VAR xchar,ychar)
' reads in the position of the iconcharacter,
' relative to its parent (the image)
'
LOCAL adr%
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 31,33                    ! G_ICON, G_CICON
adr%=OB_SPEC(tree%,obj)
xchar=CARD{adr%+14}
ychar=CARD{adr%+16}
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_iconxychar(tree%,obj,xchar,ychar)
' sets the position of the iconcharacter,
' relative to its parent (the image)
'
LOCAL adr%
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 31,33                    ! G_ICON, G_CICON
adr%=OB_SPEC(tree%,obj)
CARD{adr%+14}=xchar
CARD{adr%+16}=ychar
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
