' ***************************************************************************
' Object functions
' usually manipulating objects keeps you constantly browsing
' through the GfA manual or Atari Compendium to find out if
' your functions use the proper pointers.
' to help you, here's a collection of routines.
'
' Theo Ros  04-03-1997
' ***************************************************************************
'
' Inquiry functions
'
DEFFN obj_is_state(tree%,obj,bit)=BTST(OB_STATE(tree%,obj),bit)
DEFFN obj_is_selected(tree%,obj)=BTST(OB_STATE(tree%,obj),0)
DEFFN obj_is_crossed(tree%,obj)=BTST(OB_STATE(tree%,obj),1)
DEFFN obj_is_checked(tree%,obj)=BTST(OB_STATE(tree%,obj),2)
DEFFN obj_is_disabled(tree%,obj)=BTST(OB_STATE(tree%,obj),3)
DEFFN obj_is_outlined(tree%,obj)=BTST(OB_STATE(tree%,obj),4)
DEFFN obj_is_shadowed(tree%,obj)=BTST(OB_STATE(tree%,obj),5)
'
DEFFN obj_is_flags(tree%,obj,bit)=BTST(OB_FLAGS(tree%,obj),bit)
DEFFN obj_is_selectable(tree%,obj)=BTST(OB_FLAGS(tree%,obj),0)
DEFFN obj_is_default(tree%,obj)=BTST(OB_FLAGS(tree%,obj),1)
DEFFN obj_is_exit(tree%,obj)=BTST(OB_FLAGS(tree%,obj),2)
DEFFN obj_is_editable(tree%,obj)=BTST(OB_FLAGS(tree%,obj),3)
DEFFN obj_is_radio(tree%,obj)=BTST(OB_FLAGS(tree%,obj),4)
DEFFN obj_is_lastob(tree%,obj)=BTST(OB_FLAGS(tree%,obj),5)
DEFFN obj_is_touchexit(tree%,obj)=BTST(OB_FLAGS(tree%,obj),6)
DEFFN obj_is_hidden(tree%,obj)=BTST(OB_FLAGS(tree%,obj),7)
'
' Setting the Editable Object cursor
'
DEFFN obj_edit_curon(tr%,ob,VAR pos)=OBJC_EDIT(tr%,ob,0,pos,1,pos)
DEFFN obj_edit_curoff(tr%,ob,VAR pos)=OBJC_EDIT(tr%,ob,0,pos,3,pos)
DEFFN obj_edit_addtxt(tr%,ob,ch,VAR pos)=OBJC_EDIT(tr%,ob,ch,pos,2,pos)
'
' Using OB_TYPE (also extended types)
'
DEFFN obj_get_type(tree%,obj)=BYTE(OB_TYPE(tree%,obj))
DEFFN obj_get_xtype(tree%,obj)=BYTE(SHR&(OB_TYPE(tree%,obj),8))
> FUNCTION obj_set_type(tree%,obj,type)
LOCAL obtype%
obtype%=OB_TYPE(tree%,obj) AND &HFF00
obtype%=OR(obtype%,BYTE(type))
OB_TYPE(tree%,obj)=obtype%
RETURN obtype%
ENDFUNC
> FUNCTION obj_set_xtype(tree%,obj,xtype)
LOCAL obtype%
obtype%=SHL&(BYTE(xtype),8) OR BYTE(OB_TYPE(tree%,obj))
OB_TYPE(tree%,obj)=obtype%
RETURN obtype%
ENDFUNC
'
' Object hierarchy
'
> FUNCTION obj_get_last(tree%)
' finds the last object in tree tree%.
' this does NOT have to be the same as OB_TAIL(tree%,0) !!
'
LOCAL lastob
CLR lastob
WHILE BTST(OB_FLAGS(tree%,lastob),5)=FALSE
' or use:  @obj_is_lastob(tree%,lastob)=FALSE
INC lastob
WEND
RETURN lastob
ENDFUNC
> FUNCTION obj_get_parent(tree%,obj)
' finds the parent-object for obj&
'
LOCAL this,parent,next
IF obj>0
this=obj
REPEAT
next=OB_NEXT(tree%,this)
IF next<obj
parent=next+1
ENDIF
INC this
UNTIL parent
RETURN PRED(parent)
ENDIF
RETURN 0
ENDFUNC
'
' Flags and states
'
> FUNCTION obj_bclr_flags(tree%,obj,bit)
' clears ONE bit in OB_FLAGS for obj&
'
LOCAL obflag
obflag=BCLR(OB_FLAGS(tree%,obj),bit)
OB_FLAGS(tree%,obj)=obflag
RETURN obflag
ENDFUNC
> FUNCTION obj_bset_flags(tree%,obj,bit)
' sets ONE bit in OB_FLAGS for obj&
'
LOCAL obflag
obflag=BSET(OB_FLAGS(tree%,obj),bit)
OB_FLAGS(tree%,obj)=obflag
RETURN obflag
ENDFUNC
> FUNCTION obj_merge_flags(tree%,obj,value)
' sets more than one bit in OB_FLAGS for obj&
'
LOCAL obflag
obflag=OR(OB_FLAGS(tree%,obj),value)
OB_FLAGS(tree%,obj)=obflag
RETURN obflag
ENDFUNC
> FUNCTION obj_mask_flags(tree%,obj,value)
' clears more than one bit in OB_FLAGS for obj&
'
LOCAL obflag
obflag=AND(OB_FLAGS(tree%,obj),value)
OB_FLAGS(tree%,obj)=obflag
RETURN obflag
ENDFUNC
> FUNCTION obj_get_default(tree%,obj)
' returns the number of the default-object
' in tree 'tree%'. the search starts from object 'obj'
' this function uses obj_get_last()
'
LOCAL obdefault,oblast
CLR obdefault
oblast=@obj_get_last(tree%)
WHILE oblast=>obj
IF BTST(OB_FLAGS(tree%,obj),1)
obdefault=obj
ENDIF
EXIT IF obdefault
INC obj
WEND
RETURN obdefault
ENDFUNC
> FUNCTION obj_set_default(tree%,obj)
' function sets 'obj' to be the default-object
' usually this is also an EXIT-object.
' (there may be only ONE defaultobject in a tree..)
'
LOCAL newflags
newflags=BSET(OB_FLAGS(tree%,obj),1)
OB_FLAGS(tree%,obj)=newflags
RETURN newflags
ENDFUNC
'
> FUNCTION obj_bclr_state(tree%,obj,bit)
' clears ONE bit in OB_STATE for obj&
'
LOCAL obstate
obstate=BCLR(OB_STATE(tree%,obj),bit)
OB_STATE(tree%,obj)=obstate
RETURN obstate
ENDFUNC
> FUNCTION obj_bset_state(tree%,obj,bit)
' sets ONE bit in OB_STATE for obj&
'
LOCAL obstate
obstate=BSET(OB_STATE(tree%,obj),bit)
OB_STATE(tree%,obj)=obstate
RETURN obstate
ENDFUNC
> FUNCTION obj_merge_state(tree%,obj,value)
' sets more than one bit in OB_STATE for obj&
'
LOCAL obstate
obstate=OR(OB_STATE(tree%,obj),value)
OB_STATE(tree%,obj)=obstate
RETURN obstate
ENDFUNC
> FUNCTION obj_mask_state(tree%,obj,value)
' clears more than one bit in OB_STATE for obj&
'
LOCAL obstate
obstate=AND(OB_STATE(tree%,obj),value)
OB_STATE(tree%,obj)=obstate
RETURN obstate
ENDFUNC
> FUNCTION obj_chg_select(tree%,obj,clipx,clipy,clipw,cliph)
' toggles the selected-status of obj&
' AND redraws.
'
LOCAL newstat
newstat=BCHG(OB_STATE(tree%,obj),0)
RETURN OBJC_CHANGE(tree%,obj,0,clipx,clipy,clipw,cliph,newstat,1)
ENDFUNC
> FUNCTION obj_chg_and_draw(tree%,obj,clipx,clipy,clipw,cliph,newstat)
' updates OB_STATE of obj& to newstat& AND redraws
'
RETURN OBJC_CHANGE(tree%,obj,0,clipx,clipy,clipw,cliph,newstat,1)
ENDFUNC
> FUNCTION obj_chg_not_draw(tree%,obj,newstat)
' updates OB_STATE of obj& to newstat&, DOES NOT redraw
'
RETURN OBJC_CHANGE(tree%,obj,0,0,0,0,0,newstat,0)
ENDFUNC
> FUNCTION obj_enable(tree%,obj)
' make an object selectable and NOT disabled (grey)
' you need to redraw after this with:
' ~OBJC_DRAW(tree%,obj,99,clipx,clipy,clipw,cliph)
'
OB_STATE(tree%,obj)=BSET(OB_STATE(tree%,obj),3)
OB_FLAGS(tree%,obj)=BSET(OB_FLAGS(tree%,obj),0)
' or: ~@obj_bset_state(tree%,obj,3)
'     ~@obj_bset_flags(tree%,obj,0)
RETURN TRUE
ENDFUNC
> FUNCTION obj_disable(tree%,obj)
' makes an object NON-selectable and disabled (grey)
' you need to redraw after this with:
' ~OBJC_DRAW(tree%,obj,99,clipx,clipy,clipw,cliph)
'
OB_STATE(tree%,obj)=BCLR(OB_STATE(tree%,obj),3)
OB_FLAGS(tree%,obj)=BCLR(OB_FLAGS(tree%,obj),0)
' or: ~@obj_bclr_state(tree%,obj,3)
'     ~@obj_bclr_flags(tree%,obj,0)
RETURN FALSE
ENDFUNC
> FUNCTION obj_select(tree%,obj)
' set status for obj& to SELECTED
' you need to redraw after this with:
' ~OBJC_DRAW(tree%,obj,99,clipx,clipy,clipw,cliph)
'
LOCAL obstat
obstat=BSET(OB_STATE(tree%,obj),0)
OB_STATE(tree%,obj)=obstat
' or: RETURN @obj_bset_state(tree%,obj,0)
RETURN obstat
ENDFUNC
> FUNCTION obj_unselect(tree%,obj)
' set status for obj& to NOT SELECTED
' you need to redraw after this with:
' ~OBJC_DRAW(tree%,obj,99,clipx,clipy,clipw,cliph)
'
LOCAL obstat
obstat=BCLR(OB_STATE(tree%,obj),0)
OB_STATE(tree%,obj)=obstat
' or: RETURN @obj_bset_state(tree%,obj,0)
RETURN obstat
ENDFUNC
> FUNCTION obj_hide(tree%,obj)
' set status for obj& (and all its children) to HIDDEN
' you need to redraw after this with:
'   parentobject=@obj_get_parent(tree%,obj)
'   ~OBJC_DRAW(tree%,parentobject,99,clipx,clipy,clipw,cliph)
'
OB_FLAGS(tree%,obj)=BSET(OB_FLAGS(tree%,obj),7)
' or: ~@obj_bset_flags(tree%,obj,7)
RETURN FALSE
ENDFUNC
> FUNCTION obj_unhide(tree%,obj)
' set status for obj& to VISIBLE
' you need to redraw after this with:
' ~OBJC_DRAW(tree%,obj,99,clipx,clipy,clipw,cliph)
'
OB_FLAGS(tree%,obj)=BCLR(OB_FLAGS(tree%,obj),7)
' or: ~@obj_bclr_flags(tree%,obj,7)
RETURN FALSE
ENDFUNC
'
' Objects with text
'
> FUNCTION obj_set_text(tree%,obj,t$)
' function overwrites text in obj& with t$
' NEVER (no, never) set t$ to hold a text LONGER
' than the text the object was intended for !
' a safer way is to not update the text itself,
' but only the pointer to this text, using
' obj_set_textadr()
'
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 26,28,32         ! type G_BUTTON, G_STRING of G_TITLE
CHAR{OB_SPEC(tree%,obj)}=t$
RETURN TRUE
CASE 21,22,29,30      ! tedinfo
CHAR{LONG{OB_SPEC(tree%,obj)}}=t$
RETURN TRUE
CASE 31               ! G_ICON
CHAR{LONG{OB_SPEC(tree%,obj)}+8}=t$
RETURN TRUE
CASE 33               ! G_CICON
CHAR{LONG{LONG{OB_SPEC(tree%,obj)}}+8}=t$
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_get_text(tree%,obj,VAR t$)
' reads in the text for obj&
'
CLR t$
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 26,28,32         ! type G_BUTTON, G_STRING of G_TITLE
t$=CHAR{OB_SPEC(tree%,obj)}
CASE 21,22,29,30      ! tedinfo
t$=CHAR{LONG{OB_SPEC(tree%,obj)}}
CASE 31               ! G_ICON
t$=CHAR{LONG{OB_SPEC(tree%,obj)}+8}
CASE 33               ! G_CICON
t$=CHAR{LONG{LONG{OB_SPEC(tree%,obj)}}+8}
ENDSELECT
RETURN (t$>"")
ENDFUNC
> FUNCTION obj_get_textadr(tree%,obj)
' returns the address of the text in obj&
'
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 26,28,32         ! type G_BUTTON, G_STRING of G_TITLE
RETURN OB_SPEC(tree%,obj)
CASE 21,22,29,30      ! tedinfo
RETURN LONG{OB_SPEC(tree%,obj)}
CASE 31               ! G_ICON
RETURN LONG{OB_SPEC(tree%,obj)+8}
CASE 33               ! G_CICON
RETURN LONG{LONG{OB_SPEC(tree%,obj)}+8}
ENDSELECT
ENDFUNC
> FUNCTION obj_set_textadr(tree%,obj,txt%)
' function rewrites the pointer to text in obj&
' The original string will be left alone, and
' therefore this function is safer than obj_set_text()
' Do not set parameter txt% to be a pointer to a
' string, because they tend to move in memory.
' use a numeric array (or MALLOC-ed memory) and
' CHAR{} the text into there
' (text is C-string: null terminated)
'
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 26,28,32         ! type G_BUTTON, G_STRING of G_TITLE
OB_SPEC(tree%,obj)=txt%
RETURN TRUE
CASE 21,22,29,30      ! tedinfo
LONG{OB_SPEC(tree%,obj)}=txt%
CASE 31               ! G_ICON
LONG{OB_SPEC(tree%,obj)+8}=txt%
CASE 33               ! G_CICON
LONG{LONG{OB_SPEC(tree%,obj)}+8}=txt%
ENDSELECT
RETURN FALSE
ENDFUNC
'
' Size
'
> FUNCTION obj_get_coords(tree%,obj,VAR obx,oby,obw,obh)
' returns screen coordinates of obj&
'
~OBJC_OFFSET(tree%,obj,obx,oby)         ! scherm xy
obw=OB_W(tree%,obj)
obh=OB_H(tree%,obj)
RETURN TRUE
ENDFUNC
> FUNCTION obj_get_xywh(tree%,obj,VAR obx,oby,obw,obh)
' returns coordinates, relative to parent of obj&
'
obx=OB_X(tree%,obj)
oby=OB_Y(tree%,obj)
obw=OB_W(tree%,obj)
obh=OB_H(tree%,obj)
RETURN TRUE
ENDFUNC
> FUNCTION obj_set_xywh(tree%,obj,obx,oby,obw,obh)
' setting the coordinates
' use -1 for obx,oby,obw or obh to NOT change
'
IF obx>-1
OB_X(tree%,obj)=obx
ENDIF
IF oby>-1
OB_Y(tree%,obj)=oby
ENDIF
IF obw>-1
OB_W(tree%,obj)=obw
ENDIF
IF obh>-1
OB_H(tree%,obj)=obh
ENDIF
RETURN TRUE
ENDFUNC
> FUNCTION obj_add_xywh(tree%,obj,obx,oby,obw,obh)
' update coordinates for an object after it has been moved
'
IF obx
OB_X(tree%,obj)=ADD(OB_X(tree%,obj),obx)
ENDIF
IF oby
OB_Y(tree%,obj)=ADD(OB_Y(tree%,obj),oby)
ENDIF
IF obw
OB_W(tree%,obj)=ADD(OB_W(tree%,obj),obw)
ENDIF
IF obh
OB_H(tree%,obj)=ADD(OB_H(tree%,obj),obh)
ENDIF
RETURN TRUE
ENDFUNC
'
' Tedinfo
'
> FUNCTION obj_get_tedinfo(tree%,obj)
' returns the address of a TEDINFO-structuur
$F%
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 21,22,29,30             ! type G_TEXT,G_BOXTEXT,G_FTEXT,G_FBOXTEXT
RETURN OB_SPEC(tree%,obj)  ! pointer to tedinfo
ENDSELECT
RETURN 0
ENDFUNC
> FUNCTION obj_get_tedtext(tree%,obj,VAR txt$)
' returns TEXT-string of a tedinfo structure
'
CLR txt$
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 21,22,29,30
txt$=CHAR{OB_SPEC(tree%,obj)}
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_get_tedmask(tree%,obj,VAR mask$)
' returns MASK (default-) string
' of a tedinfo structure (usually like '____')
'
CLR mask$
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 21,22,29,30
mask$=CHAR{OB_SPEC(tree%,obj)+4}      ! or: @obj_get_tedinfo()
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_get_tedvalid(tree%,obj,VAR valid$)
' returns string of permitted characters for
' tedinfo structure (like '9999' for numbers only)
'
CLR valid$
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 21,22,29,30
valid$=CHAR{OB_SPEC(tree%,obj)+8}
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_get_tedattr(tree%,obj,VAR tfont,tjust,bcolor,bwidth)
' reads in drawing-attributes from a TEDINFO structure
' return: TRUE  --> parameters validg
'         FALSE --> wrong type
'
LOCAL adr%
CLR tfont,tjust,bcolor,bwidth
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 21,22,29,30
adr%=OB_SPEC(tree%,obj)   ! pointer to tedinfo
tfont=CARD{adr%+12}       ! 3=standard, 5=small font
tjust=CARD{adr%+16}       ! 0=text left, 1=right, 2=centered
bcolor=CARD{adr%+18} AND &HF    ! color of edge 0-15
bwidth=CARD{adr%+22}    ! border: 1 ... 127   --> thickness INSIDE
'                                 128 ... 255 --> thickness OUTSIDE
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_tedattr(tree%,obj,tfont,tjust,bcolor,bwidth)
' sets drawing-attributes for a TEDINFO structure
' return: TRUE  --> set
'         FALSE --> wrong type
'
LOCAL adr%
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 21,22,29,30
adr%=OB_SPEC(tree%,obj)
IF tfont<>5             ! small font
tfont=3
ENDIF
CARD{adr%+12}=tfont     ! 3=standard, 5=small font
tjust=MAX(MIN(tjust,2),0)
CARD{adr%+16}=tjust
CARD{adr%+18}=bcolor AND &HF
CARD{adr%+22}=bwidth
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_tedtext(tree%,obj,txt$)
' sets the default text for editable object
' the length is set bij using the MASK-string, so
' if you want to build it from scratch ALWAYS set
' MASK-string first. (obj_set_tedmask())
'
LOCAL adr%,mask$,ed
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 21,22,29,30
adr%=OB_SPEC(tree%,obj)
mask$=CHAR{adr%+4}        ! read MASK-string
ed=INSTR(mask$,"_")       ! to determine length
IF ed
ed=LEN(mask$)-PRED(ed)
txt$=LEFT$(txt$,ed)
CHAR{adr%}=txt$
CARD{adr%+24}=ed
RETURN TRUE
ELSE
RETURN FALSE
ENDIF
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_tedmask(tree%,obj,mask$)
' sets the default mask for editable object
' the length of mask$ also determines the maximum
' length for user-input.
' ie. 'Type: ___ x ___' lets the user fill in 2 sets of
' 3 characters.
'
LOCAL adr%
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 21,22,29,30
adr%=OB_SPEC(tree%,obj)
CARD{adr%+26}=LEN(mask$)+1  ! INCLUDING null-byte !
CHAR{adr%+4}=mask$
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_tedvalid(tree%,obj,valid$)
' sets permitted characters of editable field.
' ie. 'NNN' for just numbers, caps or spaces
'
LOCAL adr%,mask$,ed
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 21,22,29,30
adr%=OB_SPEC(tree%,obj)
mask$=CHAR{adr%+4}        ! read MASK-string
ed=INSTR(mask$,"_")       ! to determine length
IF ed
ed=LEN(mask$)-PRED(ed)
WHILE LEN(valid$)<ed
valid$=valid$+valid$
WEND
CHAR{adr%+8}=LEFT$(valid$,ed)
RETURN TRUE
ELSE
RETURN FALSE
ENDIF
ENDSELECT
RETURN FALSE
ENDFUNC
'
' Boxinfo
'
> FUNCTION obj_get_boxinfo(tree%,obj,VAR fcol,fpat,mode,ccol,bcol,bwidth,char)
' reads in drawing-attributes from a BOXINFO structure
' return: TRUE  --> parameters valid
'         FALSE --> wrong type
'
LOCAL boxinfo%
CLR tfont,tjust,bcolor,bwidth
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 20,25,27             ! van het juiste type?
boxinfo%=OB_SPEC(tree%,obj)
fcol=(boxinfo% AND &X1111)         ! color fillpattern 0-15
fpat=(SHR(boxinfo%,4) AND &X111)   ! fillpattern 0-7
mode=(SHR(boxinfo%,7) AND 1)       ! modus 0=opaque, 1=transparent
ccol=(SHR(boxinfo%,8) AND &X1111)  ! character color 0-15
bcol=(SHR(boxinfo%,12) AND &X1111) ! color box border 0-15
boxinfo%=SWAP(boxinfo%)
bwidth=BYTE(boxinfo%)              ! border 1-127   thickness INSIDE
'                                           128-255 thickness OUTSIDE
char=BYTE(SHR(boxinfo%,8))         ! character for G_BOXCHAR
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_boxinfo(tree%,obj,fcol,fpat,mode,ccol,bcol,bwidth,char)
' sets drawing-attributes for a BOXINFO structure
' return: TRUE  --> set
'         FALSE --> wrong type
'
LOCAL boxinfo%
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 20,25,27
boxinfo%=BYTE(char)
boxinfo%=SHL(boxinfo%,8) OR BYTE(bwidth)
boxinfo%=SWAP(boxinfo%)
boxinfo%=OR(boxinfo%,SHL((bcol AND &X111),15))
boxinfo%=OR(boxinfo%,SHL((ccol AND &X1111),11))
boxinfo%=OR(boxinfo%,SHL((mode AND 1),7))
boxinfo%=OR(boxinfo%,SHL((fpat AND &X111),6))
boxinfo%=OR(boxinfo%,(fcol AND &X1111))
OB_SPEC(tree%,obj)=boxinfo%
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_clear_border(tree%,obj)
' this function removes the border of an object.
' usually the root-object for a dialog you wish to
' draw inside a window. The returnvalue is needed
' to redraw the object in its original state.
'
LOCAL border,contour
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 20,25,27                         ! type G_BOX, G_IBOX en G_BOXCHAR
' read 12 bits:
'
border=(SHR(OB_SPEC(tree%,obj),12) AND &HFFF)
' mask them away --> no more border
OB_SPEC(tree%,obj)=OB_SPEC(tree%,obj) AND &H75800FFF
' read outline or shadow
contour=SHR(OB_STATE(tree%,obj),4) AND &X11
IF contour
border=OR(border,SHL(contour,13))  ! --> outline bit 12, shadow bit 13
' switch bits 4 en 5 in OB_STATE off
OB_STATE(tree%,obj)=AND(OB_STATE(tree%,obj),&HFFCF)
ENDIF
RETURN border
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_reset_border(tree%,obj,border)
' this function restores the border of an object,
' previously removed with obj_clear_border()
'
LOCAL contour
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 20,25,27             ! type G_BOX, G_IBOX en G_BOXCHAR
contour=SHR(border,13) AND &X11 ! outline and shadow
IF contour
' restore outline / shadow
OB_STATE(tree%,obj)=OR(OB_STATE(tree%,obj),SHL(contour,4))
ENDIF
' read 12 bits borderinfo:
border=(border AND &HFFF)
' reset these bits
OB_SPEC(tree%,obj)=OR(OB_SPEC(tree%,obj),SHL(border,12))
RETURN border
ENDSELECT
RETURN FALSE
ENDFUNC
'
' Bitblk (G_IMAGE, G_ICON, G_CICON)
'
> FUNCTION obj_get_bitxywh(tree%,obj,VAR x,y,w,h)
' read with and height of a bitblk
'
LOCAL adr%,obtype
obtype=BYTE(OB_TYPE(tree%,obj))
SELECT obtype
CASE 23                   ! G_IMAGE
adr%=OB_SPEC(tree%,obj)
x=CARD{adr%+8}
y=CARD{adr%+10}
w=CARD{adr%+4}*8        ! bi_wb (bytes --> pixels)
h=CARD{adr%+6}          ! bi_hl
RETURN TRUE
CASE 31,33                ! G_ICON,G_CICON
adr%=OB_SPEC(tree%,obj)
IF obtype=33
adr%=LONG{adr%}
ENDIF
x=CARD{adr%+18}
y=CARD{adr%+20}
w=CARD{adr%+22}         ! ib_wicon
h=CARD{adr%+24}         ! ib_hicon
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_bitxywh(tree%,obj,x,y,w,h)
' set the width and height for a bitblk
' if parameter x&, y&, w&, or h& <0, nothing is set
'
LOCAL adr%,obtype
obtype=BYTE(OB_TYPE(tree%,obj))
SELECT obtype
CASE 23                   ! G_IMAGE
adr%=OB_SPEC(tree%,obj)
IF x>-1
CARD{adr%+8}=x
ENDIF
IF y>-1
CARD{adr%+10}=y
ENDIF
IF w>-1
CARD{adr%+4}=((w+15)\16)*2      ! bi_wb (pixels --> bytes)
ENDIF
IF h>-1
CARD{adr%+6}=h        ! bi_hl
ENDIF
RETURN TRUE
CASE 31,33                ! G_ICON,G_CICON
adr%=OB_SPEC(tree%,obj)
IF obtype=33
adr%=LONG{adr%}
ENDIF
IF x>-1
CARD{adr%+18}=x
ENDIF
IF y>-1
CARD{adr%+20}=y
ENDIF
IF w>-1
CARD{adr%+22}=w       ! ib_wicon
ENDIF
IF h>-1
CARD{adr%+24}=h       ! ib_hicon
ENDIF
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_image(tree%,obj,img%)
' have an object of type G_IMAGE point to another bitblk
'
$F%
LOCAL oldimg%
IF BYTE(OB_TYPE(tree%,obj))=23        ! G_IMAGE
oldimg%=LONG{OB_SPEC(tree%,obj)}
LONG{OB_SPEC(tree%,obj)}=img%
RETURN oldimg%
ENDIF
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_imagecolor(tree%,obj,icol)
' set the color for set bits in the bitblk
'
$F&
LOCAL adr%,oldcol
IF BYTE(OB_TYPE(tree%,obj))=23        ! G_IMAGE
adr%=OB_SPEC(tree%,obj)
oldcol=CARD{adr%+12}
CARD{adr%+12}=MAX(0,MIN(15,icol))
RETURN oldcol
ENDIF
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_iconmask(tree%,obj,img%)
' have an object of type G_ICON point to another bitblk
' mask is drawn for background
'
$F%
LOCAL oldimg%
IF BYTE(OB_TYPE(tree%,obj))=31        ! G_ICON
oldimg%=LONG{OB_SPEC(tree%,obj)}
LONG{OB_SPEC(tree%,obj)}=img%
RETURN oldimg%
ENDIF
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_icondata(tree%,obj,img%)
' have an object of type G_ICON point to another bitblk
' data is drawn for foreground
'
$F%
LOCAL oldimg%
IF BYTE(OB_TYPE(tree%,obj))=31        ! G_ICON
oldimg%=LONG{OB_SPEC(tree%,obj)+4}
LONG{OB_SPEC(tree%,obj)+4}=img%
RETURN oldimg%
ENDIF
RETURN FALSE
ENDFUNC
'
' Icon
'
> FUNCTION obj_get_iconchar(tree%,obj)
' reads in the character for an icon (66='B')
'
$F&
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 31                       ! G_ICON
RETURN BYTE(CARD{OB_SPEC(tree%,obj)+12})
CASE 33                       ! G_CICON
RETURN BYTE(CARD{LONG{OB_SPEC(tree%,obj)}+12})
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_iconchar(tree%,obj,ch)
' sets the character for an icon (ch=65 --> 'A')
'
$F&
LOCAL oldchar
CLR oldchar
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 31                       ! G_ICON
oldchar=CARD{OB_SPEC(tree%,obj)+12}
CARD{OB_SPEC(tree%,obj)+12}=BYTE(ch)
CASE 33                       ! G_CICON
oldchar=CARD{LONG{OB_SPEC(tree%,obj)}+12}
CARD{LONG{OB_SPEC(tree%,obj)}+12}=BYTE(ch)
ENDSELECT
RETURN BYTE(oldchar)
ENDFUNC
> FUNCTION obj_get_iconxychar(tree%,obj,VAR xchar,ychar)
' reads in the position of the iconcharacter,
' relative to its parent (the image)
'
LOCAL adr%
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 31                       ! G_ICON
adr%=OB_SPEC(tree%,obj)
xchar=CARD{adr%+14}
ychar=CARD{adr%+16}
RETURN TRUE
CASE 33                       ! G_CICON
adr%=LONG{OB_SPEC(tree%,obj)}
xchar=CARD{adr%+14}
ychar=CARD{adr%+16}
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
> FUNCTION obj_set_iconxychar(tree%,obj,xchar,ychar)
' sets the position of the iconcharacter,
' relative to its parent (the image)
'
LOCAL adr%
SELECT BYTE(OB_TYPE(tree%,obj))
CASE 31                       ! G_ICON
adr%=OB_SPEC(tree%,obj)
CARD{adr%+14}=xchar
CARD{adr%+16}=ychar
RETURN TRUE
CASE 33                       ! G_CICON
adr%=LONG{OB_SPEC(tree%,obj)}
CARD{adr%+14}=xchar
CARD{adr%+16}=ychar
RETURN TRUE
ENDSELECT
RETURN FALSE
ENDFUNC
'
' Building objects
'
> FUNCTION tree_create(nchilds)
' claim memory and create a new tree with nchilds&
' children. use functions above to give these
' some meaning...
'
$F%
LOCAL newtree%,child
newtree%=MALLOC(24+24*nchilds)
IF newtree%
OB_NEXT(newtree%,0)=-1
OB_HEAD(newtree%,0)=-1
OB_TAIL(newtree%,0)=-1
OB_TYPE(newtree%,0)=25              ! usually a G-IBOX for root object
OB_FLAGS(newtree%,0)=0
OB_STATE(newtree%,0)=0
OB_SPEC(newtree%,0)=0
OB_X(newtree%,0)=0
OB_Y(newtree%,0)=0
OB_W(newtree%,0)=SUCC(WORK_OUT(0))
OB_H(newtree%,0)=SUCC(WORK_OUT(1))
FOR child=1 TO nchilds
OB_NEXT(newtree%,child)=-1
OB_HEAD(newtree%,child)=-1
OB_TAIL(newtree%,child)=-1
OB_TYPE(newtree%,child)=20        ! for now all G-BOX for children
OB_FLAGS(newtree%,child)=0
OB_STATE(newtree%,child)=0
OB_SPEC(newtree%,child)=0
OB_X(newtree%,child)=0
OB_Y(newtree%,child)=0
OB_W(newtree%,child)=0
OB_H(newtree%,child)=0
~OBJC_ADD(newtree%,0,child)
NEXT child
ENDIF
RETURN newtree%
ENDFUNC
> FUNCTION obj_create(type,x,y,w,h)
' claims memory for a new object (24 bytes)
'
$F%
LOCAL newobj%
newobj%=MALLOC(24)
IF newobj%>0
OB_NEXT(newobj%,0)=-1
OB_HEAD(newobj%,0)=-1
OB_TAIL(newobj%,0)=-1
OB_TYPE(newobj%,0)=type
OB_X(newobj%,0)=x
OB_Y(newobj%,0)=y
OB_W(newobj%,0)=w
OB_H(newobj%,0)=h
ENDIF
RETURN newobj%
ENDFUNC
> FUNCTION obj_copy(tree%,obj)
' copies an object to a new location
' the function returns the address of
' this location, so you can MFREE()
' it when you're finished.
'
$F%
LOCAL cpyobj%
cpyobj%=MALLOC(24)
IF cpyobj%>0
BMOVE obj_adr(tree%,obj),cpyobj%,24
ENDIF
RETURN cpyobj%
ENDFUNC
> FUNCTION obj_swap(tree%,obj1,obj2)
' exchange two objects in a tree
'
LOCAL obsave$
obsave$=SPACE$(24)
BMOVE OB_ADR(tree%,obj1),V:obsave$,24
BMOVE OB_ADR(tree%,obj2),OB_ADR(tree%,obj1),24
BMOVE V:obsave$,OB_ADR(tree%,obj2),24
RETURN TRUE
ENDFUNC
'
' Some useful definitions
'
' tree_is_menu() test if a tree is a dialog (FALSE) or a menu (TRUE)
DEFFN tree_is_menu(tree%)=AND(OB_TAIL(tree%,0)>3,OB_TYPE(tree%,4)=32)
' str_is_alert() test if a string is a FORM_ALERT (TRUE) or not (FALSE)
DEFFN str_is_alert(s$)=AND(AND(LEFT$(s$)="[",MID$(s$,3,2)="]["),RIGHT$(s$)="]")
'
' Conversion routines
'
> FUNCTION img_str2obj(tree%,obj,capt$)
' function reads a picture from a MONOCHROME
' GET/PUT string into an object of type 23 (G_IMAGE)
' (in fact its a combination of functions
' obj_set_image(), obj_set_bitxywh() and obj_set_imagecolor()
' tree% objecttree in which the image needs to be inserted
'       if tree%=0, the function tree_create() is called
'       and an objecttree is made:
'           parent=G_IBOX, (only) child=G_IMAGE
' obj   objectnumber inside the tree
' capt$ GET/PUT string
'
$F%
LOCAL adr%,buf%,imgw,imgh,imgc
adr%=V:capt$
imgw=SUCC(CARD{str%})
imgh=SUCC(CARD{str%+2})
imgc=CARD{str%+4}
IF imgc=1                     ! monochrome?
IF tree%=0                  ! create a tree first?
tree%=@tree_create(1)
obj=1
ENDIF
OB_TYPE(tree%,obj)=23       ! G_IMAGE
imgw=((imgw+15)\16)*2       ! pixels to bytes
buf%=MALLOC(imgw*imgh)      ! get buffer (not string !!)
IF buf%>0
BMOVE V:capt$+6,buf%,imgw*imgh
adr%=OB_SPEC(tree%,obj)
LONG{adr%}=buf%           !             ~> obj_set_image()
CARD{adr%+4}=imgw         ! BYTE width  ~> obj_set_bitxywh()
CARD{adr%+6}=imgh         ! PIXEL height
LONG{adr%+8}=0            ! x=0, y=0
CARD{adr%+12}=1           ! color       ~> obj_set_imagecolor()
RETURN tree%              ! don't forget: ~MFREE(LONG{OB_SPEC(tree%,1)})
ENDIF                       !               use img_free_obj()
ENDIF
RETURN FALSE
ENDFUNC
> FUNCTION img_obj2str(tree%,obj,VAR capt$)
' reads the image from an G_IMAGE object into a
' MONOCHROME GET/PUT string.
'
$F%
LOCAL adr%,imgw,imgh,imglen
CLR capt$
IF BYTE(OB_TYPE(tree%,obj))=23        ! G_IMAGE ?
adr%=OB_SPEC(tree%,obj)
imgw=CARD{adr%+4}                   ! BYTE width !!
imgh=CARD{adr%+6}
imglen=imgw*imgh
IF FRE(0)>imglen+6
capt$=MKI$(PRED(imgw*8))+MKI$(PRED(imgh))+MKI$(1)+SPACE$(imglen)
BMOVE LONG{adr%},V:capt$+6,imglen ! get picture to PUT somewhere
RETURN TRUE
ENDIF
ENDIF
RETURN FALSE
ENDFUNC
> FUNCTION img_free_obj(tree%,obj)
' function frees memory, previously claimed
' with function img_str2obj()
' TRUE  --> Ok
' FALSE --> error (wrong object)
'
IF BYTE(OB_TYPE(tree%,obj))=23
RETURN (MFREE(LONG{OB_SPEC(tree%,obj)})=0)
ENDIF
RETURN FALSE
ENDFUNC
