CLEAR
ON BREAK GOSUB reset
ON ERROR GOSUB reset
'                           ****************
'                           *              *
'                           *   MANIBROT   *
'                           *    v 1.03    *
'                           *              *
'                           ****************
'
'                             John Phillips
'               Copyright   EasyPill Software   August 1990
'
GOSUB init
'
DO
  ON MENU 100
LOOP
'
' ******************************************************************************
'
> PROCEDURE init
  '
  '   No need to RESERVE memory as we are using all we can get
  '
  ON MENU GOSUB handle                ! Menu handling
  '
  DIM table(15)                       ! Iteration count to colour conversion
  '
  DIM orig_pal&(15)                     ! Original palette
  FOR n%=0 TO 15
    orig_pal&(n%)=XBIOS(7,n%,-1) MOD 4096        ! Save it
  NEXT n%
  '
  orig_drive$=CHR$(65+GEMDOS(25))+":"            ! Get drive
  '
  orig_dir$=DIR$(0)                              ! Get directory
  '
  DIM c_screen$(0),buffer$(0),clip$(0)
  DIM col&(1000),rescale&(179,179)
  '
  SGET c_screen$(0)                             ! Initialise strings
  SGET buffer$(0)                               ! to max size
  '
  '                        Globals for FSEL routines
  '                        ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
  DIM file_list$(128),file_sort_name$(128),file_sort_type$(128)
  DIM place_name%(128),place_type%(128)
  '
  path$=orig_drive$+orig_dir$+"\*.SCR"
  '
  sort$="T"
  '
  f$=CHR$(17)+CHR$(17)+CHR$(0)+CHR$(0)+CHR$(68)+CHR$(68)+CHR$(0)+CHR$(0)
  f$=STRING$(4,f$)                                   ! Fill definition
  '
  '                                 Inits
  '                                 ÿÿÿÿÿ
  '
  DEFMOUSE 0
  DEFLINE 0
  DEFFILL 0,1,0
  DEFTEXT 1,0,0,6
  '
  CLS
  '
  DIM bascol&(15)                            ! VDI/video shifter conversion
  '
  RESTORE bascol
  FOR n%=0 TO 15
    READ bascol&(n%)
  NEXT n%
  '
  DIM log(15)                                ! Look up table for log values
  '
  RESTORE log
  FOR n%=0 TO 15
    READ log(n%)
  NEXT n%
  '
  DIM menu$(70)                      ! Menu items
  '
  RESTORE mnu
  FOR n%=0 TO 70
    READ menu$(n%)
    EXIT IF menu$(n%)="END"
  NEXT n%
  menu$(n%)=""
  '
  DIM pal&(15),opal&(15)               ! Working palettes
  '
  BMOVE V:orig_pal&(0),V:pal&(0),32    ! Transfer current palette
  '
  ~XBIOS(6,L:VARPTR(pal&(0)))
  VSYNC
  '
  info$="|MANIBROT  v1.03|ÿÿÿÿÿÿÿÿ       ||  "+CHR$(189)+" EasyPill Software 1990  |||a FREEWARE program|"
  '
  GET 182,11,309,190,pal$               ! Initialise
  GET 182,11,309,190,upal$
  '
  GET 0,0,19,14,ind_dev$
  GET 0,0,59,16,inv_side$
  GET 0,0,59,17,inv_ob$
  '
  dev%=1                             ! Drive number for Format routine
  side%=1                            ! Number of sides-1
  '
  xmin=-2                            ! Initial x origin
  ymin=-2                            ! Initial y origin
  size=4                             ! Initial frame size
  k%=250                             ! Initial resolution
  ok%=250                            ! Copy of above
  log_lin=2                          ! Scale type 1=single step  2=log   3=lin
  olog=2                             ! Copy of above
  auto=TRUE                          ! Auto rescale
  tm%=1                              ! PUT transfer mode
  ntm%=3                             ! Alternate PUT mode
  bounce%=FALSE                      ! Animation control
  blank%=FALSE                       ! Screen blanked out
  '
  ~FRE(0)                            ! Garbage collection
  '
  GOSUB initialize_menu
  '
  BOX 0,10,181,191
  '
  BOX 184,14,318,40
  BOX 185,15,317,39
  BOX 187,17,315,37
  '
  sfile$=""                          ! Current filename
  '
  PRINT AT(24,7);"Xmin ";USING "+#.#########",xmin
  PRINT AT(24,9);"Ymin ";USING "+#.#########",ymin
  PRINT AT(24,11);"Size  ";USING "#.#########",size
  '
  GOSUB set_res
  GOSUB set_col_scale(k%)
  '
  mfr%=FRE(0)-35000                 ! Memory available for animation screens
  '
  IF mfr%>0
    mfr%=(mfr% DIV 18000)
    GOSUB sfbox("||"+STR$(mfr%)+" Animation screens||available||","",0,1,1,junk%)
    DIM ani$(mfr%)
    GET 1,11,180,190,ani$(0)
    ani%=TRUE
  ELSE
    mfr%=0
    GOSUB sfbox("|Not enough memory||to animate||","",0,1,1,junk%)
    ani%=FALSE
  ENDIF
  '
  SHOWM
  ' ----------------------------------------------------------------------------
  '
bascol:
  '
  DATA 0,2,3,6,4,7,5,8,9,10,11,14,12,15,13,1
  '
  ' ----------------------------------------------------------------------------
  '
log:
  '
  DATA 0,0.005,0.01,0.02,0.03,0.05,0.07,0.1,0.14,0.19,0.24,0.30,0.36,0.48,0.7,1
  '
  ' ----------------------------------------------------------------------------
  '
mnu:
  '
  DATA Desk
  DATA   Info
  DATA -------------------
  DATA   1,2,3,4,5,6
  DATA ""
  '
  DATA File
  DATA   New folder
  DATA -------------
  DATA   Load
  DATA   Save
  DATA -------------
  DATA   Delete
  DATA -------------
  DATA   Format
  DATA -------------
  DATA   Quit
  DATA ""
  '
  DATA Work
  DATA   Draw
  DATA   Preview
  DATA   Zoom
  DATA --------------
  DATA   New Co-ords
  DATA --------------
  DATA   Low      50
  DATA   Medium  250
  DATA   High    999
  DATA --------------
  DATA   Set  50-999
  DATA ""
  DATA Colour
  DATA   Palette
  DATA ------------
  DATA   Single
  DATA   Log
  DATA   Linear
  DATA ------------
  DATA   Auto
  DATA   Rescale
  DATA ------------
  DATA   Recontour
  DATA ""
  DATA Animate
  DATA   Frames
  DATA -----------
  DATA   Frost
  DATA   Fire
  DATA -----------
  DATA   Bounce
  DATA -----------
  DATA   Save MAN
  DATA "","",""
  DATA END
  '
RETURN
> PROCEDURE initialize_menu
  '
  MENU menu$()      ! Set up menu
  '
  res%=30           ! Menu check number for 250 res.
  '
  MENU 30,1         ! 'Medium  250' check mark
  MENU 39,1         ! 'Log' check mark
  MENU 42,1         ! 'Auto' check mark
  '
  MENU 3,2          ! Turn off Desk Acc's. Although GFA makes use of the AES for
  MENU 4,2          ! its Menu functions, it is not fully compatible. If you
  MENU 5,2          ! need trouble free access to DA's then you will have to
  MENU 6,2          ! write your own Menu handling routines instesd of using
  MENU 7,2          ! the built in functions, making sure that everything is
  MENU 8,2          ! properly GEM'ed. (Not as difficult as it sounds).
  '
  MENU 14,2         ! Save      Disabled
  MENU 25,2         ! Zoom
  MENU 42,2         ! Auto
  MENU 43,2         ! Rescale
  MENU 45,2         ! Recontour
  MENU 48,2         ! Frames
  MENU 50,2         ! Frost
  MENU 51,2         ! Fire
  MENU 53,2         ! Bounce
  MENU 55,2         ! Save .MAN file
  '
  tm%=1             ! Transfer mode
  '
  screen%=FALSE     ! Something has been draw/loaded flag
  '
RETURN
> PROCEDURE reset
  '
  MENU KILL                                      ! Release control of menus
  '
  CLS
  '
  CLOSE                                          ! Close all files
  '
  ~GEMDOS(14,ASC(orig_drive$)-65)                ! Reset drive
  '
  ~GEMDOS(59,L:V:orig_dir$)                      ! Reset path
  '
  ~XBIOS(6,L:V:orig_pal&(0))                     ! Put back palette
  VSYNC                                          ! Let it register
  '
  EDIT                                           ! Back to editor
  '
RETURN
'
> PROCEDURE handle
  '
  MENU OFF
  '
  SELECT MENU(0)
    '
  CASE 1
    GOSUB sfbox(info$,"",0,1,0,junk%)
  CASE 11
    GOSUB new_folder
  CASE 13
    GOSUB load
  CASE 14
    GOSUB save
  CASE 16
    GOSUB delete
  CASE 18
    GOSUB pre_format
  CASE 20
    '
    GOSUB sfbox("QUIT PROGRAM|ÿÿÿÿÿÿÿÿÿÿÿÿ","Quit|Cancel",1,1,1,qut%)
    DEC qut%
    IF qut%
      GOSUB reset                    ! Clean exit
    ENDIF
    '
  CASE 23                            ! Draw screen
    '
    GOSUB sfbox("|DRAW|ÿÿÿÿ||Any previous work|will be lost|||","O.K|Cancel",1,1,0,do%)
    DEC do%
    '
    IF do%
      '
      u=1
      '
      IF ok%<>k%
        GOSUB set_res
        GOSUB set_col_scale(k%)
      ENDIF
      '
      GOSUB main_loop
      '
      MENU 14,3
      MENU 25,3
      MENU 42,3
      MENU 43,3
      MENU 45,3
      MENU 50,2
      MENU 51,2
      MENU 53,2
      '
      IF ani%
        MENU 48,3
        MENU 55,3
      ENDIF
      '
      screen%=TRUE
      zrd%=FALSE
      preview%=FALSE
      ani_done%=FALSE
      nani%=0
      '
    ENDIF
    '
  CASE 24
    '
    GOSUB sfbox("|PREVIEW|ÿÿÿÿÿÿÿ||Any previous work|will be lost|||","O.K|Cancel",1,1,0,do%)
    DEC do%
    '
    IF do%
      '
      u=5
      '
      IF ok%<>k%
        GOSUB set_res
        GOSUB set_col_scale(k%)
      ENDIF
      '
      GOSUB preview
      '
      MENU 25,3
      MENU 42,3
      MENU 43,3
      MENU 45,3
      MENU 48,2
      MENU 50,2
      MENU 51,2
      MENU 53,2
      MENU 55,2
      '
      screen%=TRUE
      zrd%=FALSE
      preview%=TRUE
      ani_done%=FALSE
      nani%=0
      '
    ENDIF
    '
  CASE 25
    '
    GOSUB zoom
    '
  CASE 27
    '
    GOSUB enter
    '
  CASE 29
    '
    GOSUB radio(res%)
    k%=50
    '
    GOSUB set_res
    GOSUB set_col_scale(k%)
    IF screen% AND auto AND ok%<>k%
      GOSUB rescale
      ok%=k%
    ENDIF
    '
  CASE 30
    '
    GOSUB radio(res%)
    k%=250
    '
    GOSUB set_res
    GOSUB set_col_scale(k%)
    IF screen% AND auto AND ok%<>k%
      GOSUB rescale
      ok%=k%
    ENDIF
    '
  CASE 31
    '
    GOSUB radio(res%)
    k%=999
    '
    GOSUB set_res
    GOSUB set_col_scale(k%)
    IF screen% AND auto AND ok%<>k%
      GOSUB rescale
      ok%=k%
    ENDIF
    '
  CASE 33
    '
    GOSUB manual
    GOSUB radio(res%)
    '
    GOSUB set_res
    GOSUB set_col_scale(k%)
    IF screen% AND auto AND ok%<>k%
      GOSUB rescale
      ok%=k%
    ENDIF
    '
  CASE 36
    '
    GOSUB palette
    '
  CASE 38
    '
    log_lin=1
    MENU 38,1
    MENU 39,0
    MENU 40,0
    '
    GOSUB set_res
    GOSUB set_col_scale(k%)
    '
    IF screen% AND auto AND olog<>1
      GOSUB rescale
      olog=1
    ENDIF
    '
  CASE 39
    '
    log_lin=2
    MENU 38,0
    MENU 39,1
    MENU 40,0
    '
    GOSUB set_res
    GOSUB set_col_scale(k%)
    '
    IF screen% AND auto AND olog<>2
      GOSUB rescale
      olog=2
    ENDIF
    '
  CASE 40
    '
    log_lin=3
    MENU 38,0
    MENU 39,0
    MENU 40,1
    '
    GOSUB set_res
    GOSUB set_col_scale(k%)
    '
    IF screen% AND auto AND olog<>3
      GOSUB rescale
      olog=3
    ENDIF
    '
  CASE 42
    '
    IF auto
      auto=FALSE
      MENU 42,0
    ELSE
      auto=TRUE
      MENU 42,1
      ok%=9999
      olog=9999
    ENDIF
    '
  CASE 43
    '
    GOSUB rescale
    '
  CASE 45
    '
    GOSUB recont
    zrd%=FALSE
    '
  CASE 48
    '
    GOSUB frames
    MENU 50,3
    MENU 51,3
    MENU 53,3
    zrd%=FALSE
    '
  CASE 50
    '
    tm%=1
    ntm%=13
    '
    GOSUB stend
    GOSUB animate
    zrd%=FALSE
    '
  CASE 51
    '
    tm%=3
    ntm%=3
    '
    GOSUB stend
    GOSUB animate
    zrd%=FALSE
    '
  CASE 53
    '
    IF bounce%=TRUE
      MENU 53,0
      bounce%=FALSE
    ELSE
      MENU 53,1
      bounce%=TRUE
    ENDIF
    '
  CASE 55
    '
    GOSUB save_man
    '
  ENDSELECT
  '
RETURN
> PROCEDURE radio(VAR check%)
  MENU check%,0                             ! Un-check old item
  check%=MENU(0)
  MENU check%,1                             ! Check new item
RETURN
'
' ******************************************************************************
'
> PROCEDURE main_loop
  '
  PRINT AT(24,15);"                 "
  PRINT AT(24,17);" Any key to stop "
  PRINT AT(24,19);"  at end of row  "
  PRINT AT(24,21);"                 "
  '
  HIDEM
  DEFFILL 0
  PBOX 1,11,180,190
  '
  ARRAYFILL rescale&(),k%                     ! Fill with max value
  '
  ymax=ymin+size
  h=size/180
  v=size/180
  finished%=FALSE
  '
  FOR q=0 TO 179
    '
    IF GEMDOS(11)
      GOSUB sfbox("||SCREEN PAUSED|ÿÿÿÿÿÿÿÿÿÿÿÿÿ||","Exit|Continue",1,1,0,finished%)
      DEC finished%
      WHILE GEMDOS(11)
        ~GEMDOS(7)
      WEND
    ENDIF
    '
    EXIT IF finished%
    '
    s=ymax-(q*v)
    '
    FOR p=0 TO 179
      '
      i%=-1
      r=xmin+(p*h)
      x=0
      y=0
      x1=0
      y1=0
      '
      DO WHILE i%<k%
        INC i%
        t=x1-y1+r
        y=2*x*y+s
        x=t
        x1=x*x
        y1=y*y
      LOOP UNTIL x1+y1>=4
      '
      rescale&(p,q)=i%
      PSET p+1,q+11,col&(i%)
      '
    NEXT p
  NEXT q
  '
  PRINT AT(24,17);"                "
  PRINT AT(24,19);"                "
  COLOR 1
  '
RETURN
> PROCEDURE preview
  '
  PRINT AT(24,15);"                 "
  PRINT AT(24,17);" Any key to stop "
  PRINT AT(24,19);"  at end of row  "
  PRINT AT(24,21);"                 "
  '
  HIDEM
  DEFFILL 0
  PBOX 1,11,180,190
  '
  ARRAYFILL rescale&(),k%
  '
  ymax=ymin+size
  h=size/180
  v=size/180
  finished%=FALSE
  '
  FOR q=0 TO 179 STEP 5
    '
    IF GEMDOS(11)
      GOSUB sfbox("||SCREEN PAUSED|ÿÿÿÿÿÿÿÿÿÿÿÿÿ||","Exit|Continue",1,1,0,finished%)
      DEC finished%
      WHILE GEMDOS(11)
        ~GEMDOS(7)
      WEND
    ENDIF
    '
    EXIT IF finished%
    '
    s=ymax-(q*v)
    '
    FOR p=0 TO 179 STEP 5
      '
      r=xmin+(p*h)
      x=0
      y=0
      i%=-1
      x1=0
      y1=0
      '
      DO WHILE i%<k%
        INC i%
        t=x1-y1+r
        y=2*x*y+s
        x=t
        x1=x*x
        y1=y*y
      LOOP UNTIL x1+y1>=4
      '
      rescale&(p,q)=i%
      '
      DEFFILL bascol&(col&(i%))
      PBOX p+1,q+11,p+5,q+15
      '
    NEXT p
  NEXT q
  '
  PRINT AT(24,17);"                "
  PRINT AT(24,19);"                "
  '
  DEFFILL 0
  COLOR 1
  '
RETURN
'
> PROCEDURE zoom
  '
  IF blank%
    GOSUB rescale
    blank%=FALSE
  ENDIF
  '
  PRINT AT(24,15);" L Mouse      Dec";
  PRINT AT(24,17);" R Mouse      Inc";
  PRINT AT(24,19);" < ANY >      Set";
  PRINT AT(24,21);" < ESC >   Cancel";
  '
  HIDEM
  GRAPHMODE 3
  '
  IF zrd%=FALSE
    minx=xmin
    miny=ymin
    msize=size
    h=size/180
    v=size/180
    hs=18
    ls=18
    lmx=MOUSEX
    lmy=MOUSEY
    DRAW lmx-ls,lmy-ls TO lmx-ls,lmy-ls
    BOX lmx-ls,lmy-ls,lmx+ls-1,lmy+ls-1
  ELSE
    xmin=minx
    ymin=miny
    size=msize
    PRINT AT(24,7);"Xmin ";USING "+#.########",xmin
    PRINT AT(24,9);"Ymin ";USING "+#.########",ymin
    PRINT AT(24,11);"Size  ";USING "#.########",size
    SETMOUSE lmx,lmy,0
  ENDIF
  '
  REPEAT
    MOUSE mx,my,mk
    IF mk=1
      DEC hs
      IF hs<2
        hs=2
      ENDIF
    ENDIF
    IF mk=2
      INC hs
      IF hs>90
        hs=90
      ENDIF
    ENDIF
    IF mx-hs<=1
      mx=1+hs
    ENDIF
    IF mx+hs-1>=180
      mx=181-hs
    ENDIF
    IF my-hs<=11
      my=11+hs
    ENDIF
    IF my+hs-1>=190
      my=191-hs
    ENDIF
    IF lmx<>mx OR lmy<>my OR ls<>hs
      DRAW lmx-ls,lmy-ls TO lmx-ls,lmy-ls
      BOX lmx-ls,lmy-ls,lmx+ls-1,lmy+ls-1
      DRAW mx-hs,my-hs TO mx-hs,my-hs
      BOX mx-hs,my-hs,mx+hs-1,my+hs-1
      ls=hs
      lmx=mx
      lmy=my
    ENDIF
    size=msize*hs/90
    xmin=minx+((mx-hs-1)*h)
    ymin=miny+((180-(my-11+hs))*v)
    PRINT AT(24,7);"Xmin ";USING "+#.########",xmin
    PRINT AT(24,9);"Ymin ";USING "+#.########",ymin
    PRINT AT(24,11);"Size  ";USING "#.########",size
    g%=0
    IF GEMDOS(11)
      g%=GEMDOS(7) MOD 256
    ENDIF
  UNTIL g%
  '
  IF g%=27                                  ! Escape key
    xmin=minx
    ymin=miny
    size=msize
    DRAW mx-hs,my-hs TO mx-hs,my-hs
    BOX mx-hs,my-hs,mx+hs-1,my+hs-1
    PRINT AT(24,7);"Xmin ";USING "+#.########",xmin
    PRINT AT(24,9);"Ymin ";USING "+#.########",ymin
    PRINT AT(24,11);"Size  ";USING "#.########",size
    zrd%=FALSE
  ELSE                                     ! Any other key
    zrd%=TRUE
  ENDIF
  '
  g%=0
  '
  GRAPHMODE 1
  '
  PRINT AT(24,15);"                 "
  PRINT AT(24,17);"                 "
  PRINT AT(24,19);"                 "
  PRINT AT(24,21);"                 "
  '
RETURN
> PROCEDURE manual
  '
  PRINT AT(24,15);"                 ";
  PRINT AT(24,17);"                 ";
  PRINT AT(24,19);"                 ";
  PRINT AT(24,21);"                 ";
  '
  WHILE GEMDOS(11)
    ~GEMDOS(7)
  WEND
  '
  kk$=STR$(k%)
  PRINT AT(25,20);"<RET>=old value"
  '
  REPEAT
    PRINT AT(30,13);"   "
    PRINT AT(24,13);"Res. ";
    k$=""
    FORM INPUT 3,k$
    PRINT AT(27,16);"             "
    PRINT AT(27,18);"             "
    IF k$=""
      k$=kk$
    ENDIF
    k%=VAL(k$)
    IF k%<50 OR k%>999
      PRINT AT(27,16);"Out of range"
      PRINT AT(27,18);" 50 to 999  "
    ENDIF
  UNTIL k%>49 AND k%<1000
  '
  PRINT AT(25,20);"                "
  '
RETURN
> PROCEDURE enter
  '
  PRINT AT(24,15);"                 ";
  PRINT AT(24,17);"                 ";
  PRINT AT(24,19);"                 ";
  PRINT AT(24,21);"                 ";
  '
  WHILE GEMDOS(11)
    ~GEMDOS(7)
  WEND
  '
  ox=xmin
  oy=ymin
  os=size
  '
  PRINT AT(25,20);"<RET>=old value"
  '
  REPEAT
    '
    PRINT AT(29,7);"            "
    PRINT AT(29,7);
    k$=""
    GOSUB input(7)
    PRINT AT(24,16);"                 "
    PRINT AT(24,18);"                 "
    IF k$=""
      k$=STR$(ox)
    ENDIF
    xmin=VAL(k$)
    IF xmin<-2 OR xmin>=2
      PRINT AT(27,16);"Out of range"
      PRINT AT(27,18);"  -2 to +2  "
    ENDIF
    '
  UNTIL xmin>=-2 AND xmin<2
  '
  PRINT AT(24,7);"Xmin ";USING "+#.#########",xmin
  '
  REPEAT
    '
    PRINT AT(29,9);"            "
    PRINT AT(29,9);
    k$=""
    GOSUB input(9)
    PRINT AT(24,16);"                 "
    PRINT AT(24,18);"                 "
    IF k$=""
      k$=STR$(oy)
    ENDIF
    ymin=VAL(k$)
    IF ymin<-2 OR ymin>=2
      PRINT AT(27,16);"Out of range"
      PRINT AT(27,18);"  -2 to +2  "
    ENDIF
    '
  UNTIL ymin>=-2 AND ymin<2
  '
  PRINT AT(24,9);"Ymin ";USING "+#.#########",ymin
  '
  REPEAT
    '
    PRINT AT(29,11);"            "
    PRINT AT(29,11);
    k$=""
    GOSUB input(11)
    PRINT AT(24,16);"                 "
    PRINT AT(24,18);"                 "
    IF k$=""
      k$=STR$(os)
    ENDIF
    size=VAL(k$)
    IF size<=0 OR size>2-xmin OR size>2-ymin
      PRINT AT(27,16);"Out of range"
      nco$=STR$(INT(MIN(ABS(2-xmin),ABS(2-ymin))*10000000000)/10000000000)
      PRINT AT(33-(LEN(nco$)+5)/2,18);"0 to "+nco$
    ENDIF
    '
  UNTIL size>0 AND size<=2-xmin AND size<=2-ymin
  '
  PRINT AT(24,11);"Size  ";USING "#.#########",size
  PRINT AT(25,20);"                "
  '
RETURN
> PROCEDURE input(y)
  '
  HIDEM
  '
  GET 0,0,8,8,cur$
  ccp%=1
  finished%=FALSE
  PUT 216+8*ccp%,8*y-9,cur$,10
  occp%=ccp%
  '
  REPEAT
    '
    IF GEMDOS(11)
      '
      g%=GEMDOS(7) AND &HFFFFFF
      '
      IF (SHR(g%,16) AND &HFF)=75
        DEC ccp%
      ELSE IF (SHR(g%,16) AND &HFF)=77
        INC ccp%
        ccp%=MIN(ccp%,LEN(k$)+1)
      ENDIF
      '
      g%=g% MOD 256
      '
      SELECT g%
        '
      CASE 43,45                                   ! + -
        IF ccp%=1
          IF LEFT$(k$)="+" OR LEFT$(k$)="-"
            k$=MID$(k$,2)
          ENDIF
          k$=CHR$(g%)+k$
          INC ccp%
        ENDIF
      CASE 46                                      ! .
        IF INSTR(k$,".")=0
          k$=LEFT$(k$,ccp%-1)+"."+MID$(k$,ccp%)
          INC ccp%
        ENDIF
      CASE 48 TO 57                                ! 0 to 9
        k$=LEFT$(k$,ccp%-1)+CHR$(g%)+MID$(k$,ccp%)
        INC ccp%
      CASE 8                                       ! Backspace
        IF ccp%<>1
          k$=LEFT$(k$,ccp%-2)+MID$(k$,ccp%)
          DEC ccp%
        ENDIF
      CASE 127                                     ! Delete
        k$=LEFT$(k$,ccp%-1)+MID$(k$,ccp%+1)
      CASE 27                                      ! Escape
        k$=""
        ccp%=1
      CASE 13                                      ! Return
        finished%=TRUE
        '
      ENDSELECT
      '
      ccp%=MIN(ccp%,12)
      ccp%=MAX(ccp%,1)
      '
      k$=LEFT$(k$,12)
      '
      PUT 216+8*occp%,8*y-9,cur$,10
      PRINT AT(29,y);k$+SPACE$(12-LEN(k$))
      PUT 216+8*ccp%,8*y-9,cur$,10
      '
      occp%=ccp%
      '
    ENDIF
    '
  UNTIL finished%
  '
  PUT 216+8*ccp%,8*y-9,cur$,10
  '
  SHOWM
  '
RETURN
'
> PROCEDURE set_res
  '
  PRINT AT(24,15);"                 "
  PRINT AT(24,17);"                 "
  PRINT AT(24,19);"                 "
  PRINT AT(24,21);"                 "
  '
  MENU 29,0
  MENU 30,0
  MENU 31,0
  MENU 33,0
  '
  SELECT k%
  CASE 50
    MENU 29,1
  CASE 250
    MENU 30,1
  CASE 999
    MENU 31,1
  DEFAULT
    MENU 33,1
  ENDSELECT
  '
  PRINT AT(24,13);"Res. ";USING "###",k%
  PRINT AT(32,13);"  "
  '
  MENU 38,0
  MENU 39,0
  MENU 40,0
  '
  SELECT log_lin
  CASE 1
    PRINT AT(34,13);" Single"
    MENU 38,1
  CASE 2
    PRINT AT(34,13);"    Log"
    MENU 39,1
  CASE 3
    PRINT AT(34,13);"    Lin"
    MENU 40,1
  ENDSELECT
  '
  l_val%=0
  h_val%=k%
  '
RETURN
> PROCEDURE set_col_scale(sc%)
  '
  DEFFILL 0
  '
  PBOX 188,18,314,36
  '
  DEC sc%
  '
  ARRAYFILL col&(),15
  '
  col&(0)=0
  '
  IF log_lin=1
    FOR n%=0 TO sc%
      col&(n%+1)=(n% MOD 14)+1
    NEXT n%
    '
    x=189
    DO
      FOR n%=1 TO 14
        COLOR bascol&(n%)
        DRAW x,18 TO x,36
        INC x
        EXIT IF x>313
      NEXT n%
      EXIT IF x>313
    LOOP
    COLOR 1
  ELSE IF log_lin=2
    '
    m=LOG(15)
    '
    FOR n%=1 TO 15
      table(16-n%)=sc%-(sc%*LOG(n%))/m
    NEXT n%
    table(0)=0
    '
    xst%=188
    n%=1
    w%=1
    '
    REPEAT
      WHILE n%<=table(w%)
        col&(n%)=w%-1
        INC n%
      WEND
      xen%=188+(n%-1)*125/sc%
      DEFFILL bascol&(col&(n%-1))
      PBOX xst%+1,18,MIN(314,xen%),36
      xst%=xen%
      INC w%
    UNTIL w%=16
    '
    PBOX xst%+1,18,313,36
    '
  ELSE IF log_lin=3
    '
    FOR n%=1 TO 14
      table(n%)=(n%*sc%)/14
    NEXT n%
    table(0)=0
    '
    xst%=188
    n%=1
    w%=1
    '
    REPEAT
      WHILE n%<=table(w%-1)
        col&(n%)=w%-1
        INC n%
      WEND
      xen%=188+(n%-1)*125/sc%
      DEFFILL bascol&(col&(n%-1))
      PBOX xst%+1,18,MIN(314,xen%),36
      xst%=xen%
      INC w%
    UNTIL w%=16
    '
    PBOX xst%+1,18,313,36
    '
  ENDIF
  '
  BOX 187,17,314,37
  '
  FOR m%=h_val% TO 999
    col&(m%)=15
  NEXT m%
  '
  DEFFILL 0
  '
  new_scale%=FALSE
  '
RETURN
> PROCEDURE rescale
  HIDEM
  '
  GOSUB set_res
  '
  IF new_scale%
    GOSUB set_col_scale(k%)
    new_scale%=FALSE
  ENDIF
  '
  IF preview%
    PRINT AT(24,15);"     Rescale "
    FOR n%=0 TO 179 STEP 5
      FOR m%=0 TO 179 STEP 5
        DEFFILL bascol&(col&(rescale&(m%,n%)))
        PBOX m%+1,n%+11,m%+5,n%+15
      NEXT m%
    NEXT n%
  ELSE
    FOR n%=0 TO 179
      IF n% MOD 72=0
        PRINT AT(24,15);"     Rescale "
      ELSE IF n% MOD 36=0
        PRINT AT(24,15);"              "
      ENDIF
      FOR m%=0 TO 179
        PSET m%+1,n%+11,col&(rescale&(m%,n%))
      NEXT m%
    NEXT n%
  ENDIF
  '
  PRINT AT(24,15);"              "
  zrd%=FALSE
  '
  SHOWM
RETURN
> PROCEDURE recont
  HIDEM
  '
  PRINT AT(24,13);"Recontour"
  '
  IF log_lin=1
    PRINT AT(34,13);" Single"
  ELSE IF log_lin=2
    PRINT AT(34,13);"    Log"
  ELSE IF log_lin=3
    PRINT AT(34,13);"    Lin"
  ENDIF
  '
  h_val%=0
  l_val%=1000
  '
  IF preview%
    u=5
  ELSE
    u=1
  ENDIF
  '
  PRINT AT(24,15);"    Recontour "
  '
  FOR n%=0 TO 179 STEP u
    IF preview%=FALSE
      IF n% MOD 48=0
        PRINT AT(24,15);"    Recontour "
      ELSE IF n% MOD 24=0
        PRINT AT(24,15);"              "
      ENDIF
    ENDIF
    FOR m%=0 TO 179 STEP u
      l_val%=MIN(rescale&(m%,n%),l_val%)
      h_val%=MAX(rescale&(m%,n%),h_val%)
    NEXT m%
  NEXT n%
  '
  range%=h_val%-l_val%+1
  '
  hlr$="    "
  '
  IF range%
    '
    GOSUB set_col_scale(range%-1)
    '
    RSET hlr$=STR$(h_val%)
    PRINT AT(24,17);" High value  ";hlr$
    RSET hlr$=STR$(l_val%)
    PRINT AT(24,19);" Low value   ";hlr$
    RSET hlr$=STR$(range%)
    PRINT AT(24,21);" Range       ";hlr$
    '
    IF preview%
      FOR n%=0 TO 179 STEP 5
        FOR m%=0 TO 179 STEP 5
          DEFFILL bascol&(col&(rescale&(m%,n%)-l_val%+1))
          PBOX m%+1,n%+11,m%+5,n%+15
        NEXT m%
      NEXT n%
    ELSE
      FOR n%=0 TO 179
        FOR m%=0 TO 179
          PSET m%+1,n%+11,col&(rescale&(m%,n%)-l_val%+1)
        NEXT m%
      NEXT n%
    ENDIF
    '
  ELSE
    FOR n%=0 TO 2
      PRINT AT(24,15);"   Range zero  "
      PAUSE 20
      PRINT AT(24,15);"               "
      PAUSE 10
    NEXT n%
  ENDIF
  '
  PRINT AT(24,15);"               "
  '
  ok%=9999
  olog=9999
  new_scale%=TRUE
  '
  SHOWM
RETURN
'
> PROCEDURE frames
  '
  doani%=TRUE
  IF ani_done%
    GOSUB sfbox("||GET FRAMES|ÿÿÿÿÿÿÿÿÿÿ||","O.K|Cancel",1,1,0,doani%)
    DEC doani%
  ENDIF
  '
  IF doani%
    '
    HIDEM
    '
    PRINT AT(24,15);"                 ";
    PRINT AT(24,17);"                 ";
    PRINT AT(24,19);"                 ";
    PRINT AT(24,21);"                 ";
    '
    finished%=FALSE
    '
    PRINT AT(24,13);"Frame            ";
    '
    WHILE GEMDOS(11)
      ~GEMDOS(7)
    WEND
    '
    IF nani%=0
      '
      aa%=1
      '
      frame_h_val%=0
      frame_l_val%=1000
      '
      FOR n%=0 TO 179
        IF n% MOD 80=0
          PRINT AT(24,15);"     Animate    ";
        ELSE IF n% MOD 40=0
          PRINT AT(24,15);"                ";
        ENDIF
        FOR m%=0 TO 179
          frame_l_val%=MIN(rescale&(m%,n%),frame_l_val%)
          frame_h_val%=MAX(rescale&(m%,n%),frame_h_val%)
        NEXT m%
      NEXT n%
      '
      frame_range%=frame_h_val%-frame_l_val%+1
      '
      PRINT AT(30,13);"1          ";
      PRINT AT(24,15);"   Range   "+STR$(frame_range%);
      '
      IF frame_l_val%
        '
        FOR n%=11 TO 190
          DRAW 1,n% TO 180,n%
          PAUSE 1
        NEXT n%
        '
        GET 1,11,180,190,ani$(0)
        '
        aa%=0
        INC nani%
        '
      ENDIF
      '
      ll%=MIN(frame_range%-1,mfr%-1)
      '
    ENDIF
    '
    PRINT AT(24,15);"   Range   "+STR$(frame_range%);
    PRINT AT(24,18);" Any key to stop ";
    PRINT AT(24,20);" at end of frame ";
    '
    an$="   "
    '
    buffer$(0)=STRING$(32255,CHR$(0))
    scr%=V:buffer$(0)+255 AND &HFFFF00
    '
    FOR m%=nani% TO ll%
      '
      IF GEMDOS(11)
        GOSUB sfbox("||GET FRAMES|ÿÿÿÿÿÿÿÿÿÿ||","Finish|Continue",1,1,0,finished%)
        DEC finished%
        WHILE GEMDOS(11)
          ~GEMDOS(7)
        WEND
        '
        buffer$(0)=STRING$(32255,CHR$(0))
        scr%=V:buffer$(0)+255 AND &HFFFF00
        '
      ENDIF
      '
      EXIT IF finished%
      '
      LSET an$=STR$(m%+1)
      PRINT AT(30,13);an$
      '
      ARRAYFILL col&(),15
      n%=frame_l_val%+m%+aa%-2
      col&(frame_l_val%+m%+aa%-1)=(n% MOD 14)+1
      col&(0)=0
      col&(frame_h_val%)=15
      '
      ~XBIOS(5,L:scr%,L:-1,W:-1)
      BMOVE XBIOS(2),XBIOS(3),32000
      '
      PUT 1,11,ani$(0),15
      '
      BMOVE XBIOS(3),XBIOS(2),32000
      ~XBIOS(5,L:XBIOS(2),L:-1,W:-1)
      '
      FOR n%=0 TO 179
        FOR l%=0 TO 179
          PSET l%+1,n%+11,col&(rescale&(l%,n%))
        NEXT l%
      NEXT n%
      '
      GET 1,11,180,190,ani$(m%)
      '
    NEXT m%
    '
    nani%=m%
    '
    ani_done%=TRUE
    '
    PRINT AT(24,13);"Frame            ";
    PRINT AT(24,15);"                 ";
    PRINT AT(24,18);"                 ";
    PRINT AT(24,20);"                 ";
    '
    IF bounce%=TRUE
      MENU 53,0
      bounce%=FALSE
    ENDIF
    '
    tm%=1
    ntm%=13
    '
    anstart%=1
    anend%=nani%
    '
    GOSUB animate
    '
  ENDIF
  '
RETURN
> PROCEDURE stend
  '
  WHILE GEMDOS(11)
    ~GEMDOS(7)
  WEND
  '
  SGET c_screen$(0)
  '
  PBOX 83,51,257,148
  BOX 83,51,257,148
  BOX 86,54,254,145
  BOX 87,55,253,144
  DEFTEXT 1,0,0,4
  TEXT 241,141,"d"
  TEXT 245,141,"b"
  TEXT 243,136," "
  DEFTEXT 1,0,0,6
  '
  PRINT AT(14,10);"Start frame :";
  gs$="<RETURN>=1"
  TEXT 168-(4*LEN(gs$)),96,gs$
  '
  REPEAT
    PRINT AT(27,10);"   "
    PRINT AT(27,10);
    k$=""
    FORM INPUT 3 AS k$
    IF k$=""
      k$="1"
      PRINT AT(27,10);k$
    ENDIF
    anstart%=INT(VAL(k$))
    IF anstart%<1 OR anstart%>nani%
      TEXT 104,96,"  Out of range  "
      gs$="1 to "+STR$(nani%)
      TEXT 168-(4*LEN(gs$)),112,gs$
    ENDIF
  UNTIL anstart%>0 AND anstart%<=nani%
  '
  TEXT 100,96,"                 "
  TEXT 100,112,"                 "
  '
  PRINT AT(14,12);"End frame   :";
  gs$="<RETURN>="+STR$(nani%)
  TEXT 168-(4*LEN(gs$)),112,gs$
  '
  REPEAT
    '
    PRINT AT(27,12);"   "
    PRINT AT(27,12);
    k$=""
    FORM INPUT 3 AS k$
    IF k$=""
      k$=STR$(nani%)
      PRINT AT(27,12);k$
    ENDIF
    '
    anend%=INT(ABS(VAL(k$)))
    '
    IF anend%<anstart% OR anend%>nani%
      TEXT 104,112,"  Out of range  "
      gs$=STR$(anstart%)+" to "+STR$(nani%)
      TEXT 168-(4*LEN(gs$)),128,gs$
    ENDIF
    '
  UNTIL anend%>=anstart% AND anend%<=nani%
  '
  TEXT 100,112,"               "
  TEXT 100,128,"               "
  '
  SPUT c_screen$(0)
  '
RETURN
> PROCEDURE animate
  '
  HIDEM
  '
  PRINT AT(24,15);"                 ";
  PRINT AT(24,17);"                 ";
  PRINT AT(24,19);"                 ";
  PRINT AT(24,21);"                 ";
  '
  DEC anstart%
  DEC anend%
  '
  PRINT AT(24,13);"Frame            ";
  PRINT AT(24,17);" Any key to stop ";
  PRINT AT(24,19);"  at end of run  ";
  '
  buffer$(0)=STRING$(32255,CHR$(0))
  scr%=V:buffer$(0)+255 AND &HFFFF00
  ~XBIOS(5,L:scr%,L:-1,W:-1)
  BMOVE XBIOS(2),XBIOS(3),32000
  '
  n%=anstart%-1
  fini%=FALSE
  finished%=FALSE
  '
  PUT 1,11,ani$(0),15
  '
  IF bounce%
    '
    REPEAT
      DO
        INC n%
        EXIT IF n%=anend%+1
        PUT 1,11,ani$(n%),tm%
        LSET an$=STR$(n%+1)
        PRINT AT(30,13);an$
        ~XBIOS(5,L:XBIOS(2),L:XBIOS(3),W:-1)
        BMOVE XBIOS(2),XBIOS(3),32000
      LOOP
      DO
        DEC n%
        EXIT IF n%=anstart%-1
        PUT 1,11,ani$(n%),ntm%
        LSET an$=STR$(n%+1)
        PRINT AT(30,13);an$
        ~XBIOS(5,L:XBIOS(2),L:XBIOS(3),W:-1)
        BMOVE XBIOS(2),XBIOS(3),32000
      LOOP
    UNTIL GEMDOS(11)
    '
  ELSE
    '
    REPEAT
      '
      WHILE GEMDOS(11)=0
        fini%=FALSE
        finished%=FALSE
        '
        INC n%
        PUT 1,11,ani$(n%),tm%
        LSET an$=STR$(n%+1)
        PRINT AT(30,13);an$
        ~XBIOS(5,L:XBIOS(2),L:XBIOS(3),W:-1)
        BMOVE XBIOS(2),XBIOS(3),32000
        '
        IF n%=anend%
          n%=anstart%-1
          '
          PRINT AT(25,17);"L Mouse     Run";
          PRINT AT(25,19);"R Mouse    Exit";
          ~XBIOS(5,L:XBIOS(2),L:XBIOS(3),W:-1)
          BMOVE XBIOS(2),XBIOS(3),32000
          '
          REPEAT
          UNTIL MOUSEK=0
          '
          REPEAT
            MOUSE mx,my,mk
            IF mk=1
              fini%=TRUE
              PUT 1,11,ani$(0),15
            ENDIF
            IF mk=2
              fini%=TRUE
              finished%=TRUE
            ENDIF
          UNTIL mk=1 OR finished%
          '
          WHILE GEMDOS(11)
            ~GEMDOS(7)
          WEND
        ENDIF
        '
        EXIT IF fini%
        EXIT IF finished%
        '
      WEND
      '
      IF NOT fini%
        '
        PRINT AT(25,17);"L Mouse     Run";
        PRINT AT(25,19);"R Mouse    Exit";
        ~XBIOS(5,L:XBIOS(2),L:XBIOS(3),W:-1)
        VSYNC
        BMOVE XBIOS(2),XBIOS(3),32000
        REPEAT
        UNTIL MOUSEK=0
        REPEAT
          MOUSE mx,my,mk
        UNTIL mk=1 OR mk=2
        IF mk=2
          finished%=TRUE
        ENDIF
        WHILE GEMDOS(11)
          ~GEMDOS(7)
        WEND
        '
      ENDIF
      '
      IF NOT finished%
        PRINT AT(24,17);" Any key to stop ";
        PRINT AT(24,19);"  at end of run  ";
        ~XBIOS(5,L:XBIOS(2),L:XBIOS(3),W:-1)
        BMOVE XBIOS(2),XBIOS(3),32000
        fini%=FALSE
      ENDIF
      '
    UNTIL finished%
    '
  ENDIF
  '
  WHILE GEMDOS(11)
    ~GEMDOS(7)
  WEND
  '
  scr%=MAX(XBIOS(2),XBIOS(3))
  '
  ~XBIOS(5,L:scr%,L:scr%,W:-1)
  '
  PRINT AT(24,15);"                ";
  PRINT AT(24,17);"                ";
  PRINT AT(24,19);"                ";
  '
  buffer$(0)=""
  '
  ok%=9999
  olog=9999
  new_scale%=TRUE
  '
  blank%=TRUE                          ! Screen blanked out
  '
  SHOWM
  '
RETURN
'
' ******************************************************************************
'
> PROCEDURE check_save(am%)
  '
  REPEAT
    '
    DEFMOUSE 2
    '
    gsave%=TRUE
    sgave%=TRUE
    '
    IF ASC(path$)<67                         ! Only floppies
      IF DFREE(ASC(path$)-64)<am%
        sgave%=FALSE
        GOSUB sfbox("Not enough room||on this disk","Retry|Cancel",1,1,1,gsave%)
        DEC gsave%
      ENDIF
    ENDIF
    '
  UNTIL gsave%=FALSE OR (gsave%=TRUE AND sgave%=TRUE)
  '
RETURN
> PROCEDURE filename(u$,v$)
  '
  PBOX 192,170,319,199
  '
  TEXT 256-(LEN(u$)*4),177,u$
  '
  TEXT 256-(LEN(v$)*4),189,v$
  '
RETURN
> PROCEDURE new_folder
  '
  PRINT AT(24,15);"                 ";
  PRINT AT(24,17);"                 ";
  PRINT AT(24,19);"                 ";
  PRINT AT(24,21);"                 ";
  '
  old_sfile$=sfile$
  sfile$=""
  old_path$=path$
  path$=LEFT$(path$,RINSTR(path$,"\"))+"*.*"
  '
  GOSUB fsel("NEW FOLDER",sort$,path$,sfile$)
  '
  IF LEN(sfile$)
    '
    p$=LEFT$(path$,RINSTR(path$,"\"))+sfile$+CHR$(0)
    DEFMOUSE 2
    IF FSFIRST(p$,16)=0
      IF BYTE{BASEPAGE+149} AND 16
        GOSUB sfbox("The FOLDER||"+CHR$(7)+" "+sfile$+"||  already exists  |at this level","",0,1,1,junk%)
      ELSE
        GOSUB sfbox("NEW FOLDER|ÿÿÿÿÿÿÿÿÿÿ||"+sfile$+"|already exists as a|FILE at this level||Creating a folder|with this name|would|DELETE the file","",2,1,1,junk%)
      ENDIF
      '
    ELSE
      '
      GOSUB filename("NEW FOLDER",sfile$)
      DEFMOUSE 2
      MKDIR p$
      DEFMOUSE 0
      GOSUB filename(SPACE$(15),SPACE$(15))
      '
    ENDIF
    '
    DEFMOUSE 0
    '
  ENDIF
  '
  sfile$=old_sfile$
  IF LEFT$(path$)=LEFT$(old_path$)
    MID$(old_path$,1,1)=LEFT$(path$)
  ENDIF
  path$=old_path$
  '
RETURN
> PROCEDURE load
  '
  PRINT AT(24,15);"                 ";
  PRINT AT(24,17);"                 ";
  PRINT AT(24,19);"                 ";
  PRINT AT(24,21);"                 ";
  '
  old_sfile$=sfile$
  path$=LEFT$(path$,RINSTR(path$,"\"))+"*.SCR"
  '
  GOSUB fsel("LOAD SCREEN",sort$,path$,sfile$)
  '
  IF LEN(sfile$)
    p$=LEFT$(path$,RINSTR(path$,"\"))+sfile$+CHR$(0)
    DEFMOUSE 2
    IF FSFIRST(p$,16)=0
      IF BYTE{BASEPAGE+149} AND 16
        GOSUB sfbox("|LOAD SCREEN|ÿÿÿÿÿÿÿÿÿÿÿ||  FOLDER not FILE  |","",0,1,1,junk%)
      ELSE
        failed%=FALSE
        IF RIGHT$(sfile$,4)=".SCR"
          GOSUB load_it
          IF NOT failed%
            p$=LEFT$(path$,RINSTR(path$,"\"))+LEFT$(sfile$,INSTR(sfile$,"."))+"MAN"+CHR$(0)
            IF EXIST(p$)
              GOSUB sfbox("|LOAD DATA|ÿÿÿÿÿÿÿÿÿ||Load DATA file||"+LEFT$(sfile$,INSTR(sfile$,"."))+"MAN||","Yes| No ",1,1,1,junk%)
              DEFMOUSE 2
              DEC junk%
              IF junk%
                GOSUB filename("LOADING",LEFT$(sfile$,INSTR(sfile$,"."))+"MAN")
                BLOAD p$,V:rescale&(0,0)
                GOSUB filename(SPACE$(15),sfile$)
                MENU 14,3
                MENU 25,3
                MENU 42,3
                MENU 43,3
                MENU 45,3
                MENU 50,2
                MENU 51,2
                MENU 53,2
                IF ani%
                  MENU 48,3
                  MENU 55,3
                ENDIF
                screen%=TRUE
                preview%=FALSE
                ani_done%=FALSE
                nani%=0
              ENDIF
            ELSE
              GOSUB sfbox("|LOAD DATA|ÿÿÿÿÿÿÿÿÿ||No DATA file||available||","",0,1,1,junk%)
            ENDIF
          ENDIF
        ELSE
          GOSUB sfbox("|LOAD SCREEN|ÿÿÿÿÿÿÿÿÿÿÿ||Unsupported file type||Must be .SCR||","",0,1,1,junk%)
        ENDIF
      ENDIF
    ELSE
      GOSUB sfbox("|LOAD SCREEN|ÿÿÿÿÿÿÿÿÿÿÿ||  File not found  ||","",0,1,1,junk%)
    ENDIF
    DEFMOUSE 0
  ELSE
    sfile$=old_sfile$
  ENDIF
  '
RETURN
> PROCEDURE load_it
  '
  HIDEM
  '
  minx=xmin
  miny=ymin
  msize=size
  mk%=k%
  mlog_lin=log_lin
  '
  clip$(0)=SPACE$(17500)
  clip_num$=SPACE$(256)
  '
  GOSUB filename("LOADING",sfile$)
  '
  p$=LEFT$(path$,RINSTR(path$,"\"))+sfile$+CHR$(0)
  '
  BLOAD p$,V:clip_num$
  '
  mark%=ASC(MID$(clip_num$,1,1))
  xmin=VAL(MID$(clip_num$,7,mark%))
  mark1%=ASC(MID$(clip_num$,2,1))
  ymin=VAL(MID$(clip_num$,mark%+7,mark1%))
  mark2%=ASC(MID$(clip_num$,3,1))
  size=VAL(MID$(clip_num$,mark%+mark1%+7,mark2%))
  k%=ASC(MID$(clip_num$,4,1))*256+ASC(MID$(clip_num$,5,1))
  log_lin=ASC(MID$(clip_num$,6,1))
  '
  sfileb$=LEFT$(sfile$,LEN(sfile$)-4)+".BL1"
  '
  p$=LEFT$(path$,RINSTR(path$,"\"))+sfileb$+CHR$(0)
  '
  IF NOT EXIST(p$)
    '
    failed%=TRUE
    '
    FOR n%=0 TO 4
      GOSUB filename(SPACE$(15),SPACE$(15))
      GOSUB filename("LOADING","FAILED")
      PAUSE 20
      GOSUB filename(SPACE$(15),SPACE$(15))
      PAUSE 10
    NEXT n%
    '
    xmin=minx
    ymin=miny
    size=msize
    k%=mk%
    log_lin=mlog_lin
    GOSUB filename(SPACE$(15),old_sfile$)
    sfile$=""
    '
  ELSE
    '
    GOSUB filename("LOADING",sfileb$)
    '
    BLOAD p$,V:clip$(0)                                ! IFF format
    '
    FOR n%=1 TO 46 STEP 3
      pal&((n%-1) DIV 3)=(ASC(MID$(clip$(0),n%+48,1))*8)+(ASC(MID$(clip$(0),n%+49,1))/2)+(ASC(MID$(clip$(0),n%+50,1))/32)
    NEXT n%
    '
    DEFMOUSE 2
    '
    hcw%=CVI(MID$(clip$(0),21,2))
    hch%=CVI(MID$(clip$(0),23,2))
    '
    hcw16%=(hcw% DIV 16)-(hcw% MOD 16>0)
    '
    hcw2%=hcw16%*8
    hcw8%=hcw16%*2
    '
    DEC hcw%
    DEC hch%
    '
    dat_len%=CVI(MID$(clip$(0),103,2))
    '
    clip$(0)=MID$(clip$(0),105,dat_len%)
    '
    clip_header$=MKI$(hcw%)+MKI$(hch%)+MKI$(4)
    '
    FOR n%=1 TO dat_len% STEP hcw2%
      '
      buffer$=MID$(clip$(0),n%,hcw2%)
      buffer1$=""
      buffer2$=""
      '
      FOR m%=1 TO hcw8% STEP 2
        buffer1$=MID$(buffer$,m%,2)+MID$(buffer$,m%+hcw8%,2)+MID$(buffer$,m%+(hcw8%*2),2)+MID$(buffer$,m%+(hcw8%*3),2)
        buffer2$=buffer2$+buffer1$
      NEXT m%
      '
      MID$(clip$(0),n%,hcw2%)=buffer2$
      '
    NEXT n%
    '
    clip$(0)=clip_header$+clip$(0)
    '
    GOSUB filename(SPACE$(15),sfile$)
    '
    buffer$(0)=STRING$(32256,CHR$(0))
    scr%=V:buffer$(0)+256 AND &HFFFF00
    ~XBIOS(5,L:scr%,L:-1,W:-1)
    BMOVE XBIOS(2),scr%,32000
    '
    ~XBIOS(6,L:VARPTR(pal&(0)))
    VSYNC
    PUT 1,11,clip$(0)
    '
    BMOVE XBIOS(3),XBIOS(2),32000
    ~XBIOS(5,L:XBIOS(2),L:-1,W:-1)
    buffer$(0)=""
    clip$(0)=""
    '
    MENU 14,3
    MENU 25,3
    MENU 42,2
    MENU 43,2
    MENU 45,2
    MENU 48,2
    MENU 50,2
    MENU 51,2
    MENU 53,2
    MENU 55,2
    '
    zrd%=FALSE
    '
    screen%=FALSE
    '
    blank%=FALSE                       ! Screen blanked out
    '
  ENDIF
  '
  PRINT AT(24,7);"Xmin ";USING "+#.#########",xmin
  PRINT AT(24,9);"Ymin ";USING "+#.#########",ymin
  PRINT AT(24,11);"Size  ";USING "#.#########",size
  ok%=k%
  olog=log_lin
  new_scale%=FALSE
  '
  GOSUB set_res
  GOSUB set_col_scale(k%)
  '
RETURN
> PROCEDURE save
  '
  PRINT AT(24,15);"                 ";
  PRINT AT(24,17);"                 ";
  PRINT AT(24,19);"                 ";
  PRINT AT(24,21);"                 ";
  '
  old_path$=path$
  old_sfile$=sfile$
  sfile$=""
  path$=LEFT$(path$,RINSTR(path$,"\"))+"*.SCR"
  '
  GOSUB fsel("SAVE SCREEN",sort$,path$,sfile$)
  IF INSTR(sfile$,".")=0
    sfile$=""
  ENDIF
  IF LEN(sfile$)
    rgt$=RIGHT$(sfile$,4)
    IF rgt$<>".SCR"
      GOSUB sfbox("|SAVE SCREEN|ÿÿÿÿÿÿÿÿÿÿÿ||Unsupported file type||Must be .SCR||","",0,1,1,gosave%)
    ELSE
      p$=LEFT$(path$,RINSTR(path$,"\"))+sfile$+CHR$(0)
      DEFMOUSE 2
      IF EXIST(p$)
        gsave%=TRUE
      ELSE
        GOSUB check_save(19000)
      ENDIF
      IF gsave%
        GOSUB filename("SAVING",sfile$)
        GOSUB save_it
        GOSUB filename(SPACE$(15),sfile$)
      ENDIF
    ENDIF
  ELSE
    sfile$=old_sfile$
  ENDIF
  IF LEFT$(path$)<>LEFT$(old_path$)
    MID$(old_path$,1,1)=LEFT$(path$)
  ENDIF
  path$=old_path$
  DEFMOUSE 0
RETURN
> PROCEDURE save_it
  '
  clip1%=LEN(STR$(xmin))
  clip2%=LEN(STR$(ymin))
  clip3%=LEN(STR$(size))
  clip4%=k%
  clip5%=log_lin
  '
  clip_tail$=CHR$(clip1%)+CHR$(clip2%)+CHR$(clip3%)
  clip_tail$=clip_tail$+CHR$(clip4% DIV 256)+CHR$(clip4% MOD 256)
  clip_tail$=clip_tail$+CHR$(clip5%)
  clip_tail$=clip_tail$+STR$(xmin)+STR$(ymin)+STR$(size)
  '
  p$=LEFT$(path$,RINSTR(path$,"\"))+sfile$+CHR$(0)
  '
  OPEN "O",#1,p$
  '
  BPUT #1,V:clip_tail$,LEN(clip_tail$)
  '
  CLOSE #1
  '
  GET 1,11,180,190,clip$(0)
  '
  DEFMOUSE 2
  '
  scw%=180
  sch%=180
  '
  clip_header$=STRING$(104,CHR$(0))
  '
  MID$(clip_header$,1,4)="FORM"
  MID$(clip_header$,9,8)="ILBMBMHD"
  MID$(clip_header$,41,4)="CMAP"
  MID$(clip_header$,97,4)="BODY"
  MID$(clip_header$,20,1)=CHR$(20)
  MID$(clip_header$,29,1)=CHR$(4)
  MID$(clip_header$,35,1)=CHR$(10)
  MID$(clip_header$,36,1)=CHR$(11)
  MID$(clip_header$,48,1)=CHR$(48)
  MID$(clip_header$,7,2)=MKI$(LEN(clip$(0))+90)
  MID$(clip_header$,21,2)=MKI$(scw%)
  MID$(clip_header$,23,2)=MKI$(sch%)
  MID$(clip_header$,37,2)=MKI$(scw%)
  MID$(clip_header$,39,2)=MKI$(sch%)
  MID$(clip_header$,103,2)=MKI$(LEN(clip$(0))-6)
  '
  FOR n%=0 TO 15
    scpal$=""
    scpal&=pal&(n%)
    scpal$=scpal$+CHR$(((scpal& AND &HF00) DIV 256)*32)
    scpal$=scpal$+CHR$(((scpal& AND &HF0) DIV 16)*32)
    scpal$=scpal$+CHR$((scpal& AND &HF)*32)
    MID$(clip_header$,(n%*3)+49,3)=scpal$
  NEXT n%
  '
  scw2%=((scw% DIV 16)-(scw% MOD 16>0))*8
  '
  sfileb$=LEFT$(sfile$,LEN(sfile$)-4)+".BL1"
  '
  GOSUB filename("SAVING",sfileb$)
  '
  p$=LEFT$(path$,RINSTR(path$,"\"))+sfileb$+CHR$(0)
  '
  OPEN "O",#1,p$
  '
  BPUT #1,V:clip_header$,LEN(clip_header$)
  '
  FOR n%=7 TO LEN(clip$(0)) STEP scw2%
    '
    buffer$=MID$(clip$(0),n%,scw2%)
    buffer1$=""
    buffer2$=""
    buffer3$=""
    buffer4$=""
    '
    FOR m%=1 TO scw2% STEP 8
      buffer1$=buffer1$+MID$(buffer$,m%,2)
      buffer2$=buffer2$+MID$(buffer$,m%+2,2)
      buffer3$=buffer3$+MID$(buffer$,m%+4,2)
      buffer4$=buffer4$+MID$(buffer$,m%+6,2)
    NEXT m%
    '
    buffer$=buffer1$+buffer2$+buffer3$+buffer4$
    '
    BPUT #1,V:buffer$,scw2%
    '
  NEXT n%
  '
  CLOSE #1
  '
  DEFMOUSE 0
  '
  clip$(0)=""
  '
RETURN
> PROCEDURE save_man
  '
  PRINT AT(24,15);"                 ";
  PRINT AT(24,17);"                 ";
  PRINT AT(24,19);"                 ";
  PRINT AT(24,21);"                 ";
  '
  old_sfile$=sfile$
  old_path$=path$
  '
  IF INSTR(sfile$,".")=0
    sfile$="."
  ENDIF
  '
  sfile$=LEFT$(sfile$,INSTR(sfile$,"."))+"MAN"
  path$=LEFT$(path$,RINSTR(path$,"\"))+"*.MAN"
  '
  GOSUB fsel("SAVE DATA",sort$,path$,sfile$)
  '
  IF LEN(sfile$)
    '
    rgt$=RIGHT$(sfile$,4)
    '
    IF rgt$<>".MAN"
      GOSUB sfbox("|SAVE DATA|ÿÿÿÿÿÿÿÿÿ||Unsupported file type||Must be .MAN||","",0,1,1,gosave%)
    ELSE
      p$=LEFT$(path$,RINSTR(path$,"\"))+sfile$+CHR$(0)
      IF EXIST(p$)
        gsave%=TRUE
      ELSE
        GOSUB check_save(64800)
      ENDIF
      IF gsave%
        DEFMOUSE 2
        GOSUB filename("SAVING",sfile$)
        BSAVE p$,V:rescale&(0,0),64800
        GOSUB filename(SPACE$(15),old_sfile$)
      ENDIF
    ENDIF
  ENDIF
  '
  sfile$=old_sfile$
  path$=old_path$
  '
  DEFMOUSE 0
  '
RETURN
> PROCEDURE delete
  PRINT AT(24,15);"                 ";
  PRINT AT(24,17);"                 ";
  PRINT AT(24,19);"                 ";
  PRINT AT(24,21);"                 ";
  '
  old_sfile$=sfile$
  sfile$=""
  old_path$=path$
  path$=LEFT$(path$,RINSTR(path$,"\"))+"*.*"
  '
  GOSUB fsel("DELETE FILE",sort$,path$,sfile$)
  IF LEN(sfile$)
    p$=LEFT$(path$,RINSTR(path$,"\"))+sfile$+CHR$(0)
    DEFMOUSE 2
    IF FSFIRST(p$,16)=0
      IF BYTE{BASEPAGE+149} AND 16
        GOSUB sfbox("DELETE FILE|ÿÿÿÿÿÿÿÿÿÿÿ||"+CHR$(7)+" "+sfile$+"||  FOLDER not FILE  |","",0,1,1,junk%)
        go%=FALSE
      ELSE
        GOSUB sfbox("DELETE FILE|ÿÿÿÿÿÿÿÿÿÿÿ||"+sfile$+"|","O.K|Cancel",1,1,1,go%)
        DEC go%
      ENDIF
      IF go%
        GOSUB filename("DELETE FILE",sfile$)
        DEFMOUSE 2
        KILL p$
        DEFMOUSE 0
        GOSUB filename(SPACE$(15),old_sfile$)
      ENDIF
    ELSE
      GOSUB sfbox("DELETE FILE|ÿÿÿÿÿÿÿÿÿÿÿ||  File not found  |","",0,1,1,junk%)
    ENDIF
    DEFMOUSE 0
  ENDIF
  sfile$=old_sfile$
  IF LEFT$(path$)<>LEFT$(old_path$)
    MID$(old_path$,1,1)=LEFT$(path$)
  ENDIF
  path$=old_path$
RETURN
> PROCEDURE load_pal
  '
  old_sfile$=sfile$
  IF LEN(sfile$)
    sfile$=LEFT$(sfile$,INSTR(sfile$,"."))+"BL1"
  ENDIF
  old_path$=path$
  path$=LEFT$(path$,RINSTR(path$,"\"))+"*.PAL"
  '
  GOSUB fsel("LOAD PALETTE",sort$,path$,sfile$)
  '
  IF LEN(sfile$)
    p$=LEFT$(path$,RINSTR(path$,"\"))+sfile$+CHR$(0)
    DEFMOUSE 2
    IF FSFIRST(p$,16)=0
      IF BYTE{BASEPAGE+149} AND 16
        GOSUB sfbox("|LOAD PALETTE|ÿÿÿÿÿÿÿÿÿÿÿÿ||  FOLDER not FILE  |","",0,1,1,junk%)
      ELSE
        IF RIGHT$(sfile$,4)=".BL1" OR RIGHT$(sfile$,4)=".PAL"
          GOSUB load_it_pal
        ELSE
          GOSUB sfbox("|LOAD PALETTE|ÿÿÿÿÿÿÿÿÿÿÿÿ||Unsupported file type||Must be .BL1 or .PAL||","",0,1,1,junk%)
        ENDIF
      ENDIF
    ELSE
      GOSUB sfbox("|LOAD PALETTE|ÿÿÿÿÿÿÿÿÿÿÿÿ||  File not found  ||","",0,1,1,junk%)
    ENDIF
    DEFMOUSE 0
  ENDIF
  '
  sfile$=old_sfile$
  IF LEFT$(path$)<>LEFT$(old_path$)
    MID$(old_path$,1,1)=LEFT$(path$)
  ENDIF
  path$=old_path$
  '
RETURN
> PROCEDURE load_it_pal
  '
  IF RIGHT$(sfile$,4)=".PAL"
    '
    BLOAD p$,V:pal&(0)
    '
  ELSE IF RIGHT$(sfile$,4)=".BL1"
    '
    clip_pal$=SPACE$(256)
    '
    OPEN "I",#1,p$
    '
    BGET #1,V:clip_pal$,256
    '
    FOR n%=1 TO 46 STEP 3
      pal&((n%-1) DIV 3)=(ASC(MID$(clip_pal$,n%+48,1))*8)+(ASC(MID$(clip_pal$,n%+49,1))/2)+(ASC(MID$(clip_pal$,n%+50,1))/32)
    NEXT n%
    '
    CLOSE #1
    '
  ENDIF
  '
  ~XBIOS(6,L:V:pal&(0))
  VSYNC
  '
RETURN
> PROCEDURE save_pal
  old_sfile$=sfile$
  old_path$=path$
  path$=LEFT$(path$,RINSTR(path$,"\"))+"*.PAL"
  '
  MID$(sfile$,INSTR(sfile$,"."),4)=".PAL"
  '
  GOSUB fsel("SAVE PALETTE",sort$,path$,sfile$)
  IF LEN(sfile$)
    '
    IF RIGHT$(sfile$,4)<>".PAL"
      GOSUB sfbox("|SAVE PALETTE|ÿÿÿÿÿÿÿÿÿÿÿÿ||Unsupported file type||Must be .PAL||","",0,1,1,gosave%)
    ELSE
      '
      p$=LEFT$(path$,RINSTR(path$,"\"))+sfile$+CHR$(0)
      DEFMOUSE 2
      GOSUB check_save(1000)
      IF gsave%
        '
        BSAVE p$,V:pal&(0),32
        '
      ENDIF
    ENDIF
  ENDIF
  '
  sfile$=old_sfile$
  IF LEFT$(path$)=LEFT$(old_path$)
    MID$(old_path$,1,1)=LEFT$(path$)
  ENDIF
  path$=old_path$
  DEFMOUSE 0
  '
RETURN
'
> PROCEDURE pre_format
  '
  nfmt%=FALSE
  '
  GET 78,46,248,155,format$
  '
  PBOX 78,46,248,155
  '
  BOX 80,48,246,153
  BOX 82,50,244,62
  BOX 82,64,244,116
  BOX 82,118,244,151
  '
  TEXT 119,59,"FORMAT DISK"
  '
  buffer$(0)=STRING$(32255,CHR$(0))
  scr%=V:buffer$(0)+255 AND &HFFFF00
  ~XBIOS(5,L:scr%,L:-1,W:-1)
  BMOVE XBIOS(2),XBIOS(3),32000
  '
  GRAPHMODE 2
  '
  BOX 168,70,189,86
  BOX 170,72,187,84
  BOX 208,70,229,86
  BOX 210,72,227,84
  '
  COLOR 0
  BOX 169,71,188,85
  BOX 209,71,228,85
  COLOR 1
  '
  PBOX 171,73,186,83
  PBOX 211,73,226,83
  '
  TEXT 104,81,"Drive"
  TEXT 175,81,"A    B"
  '
  BOX 96,92,157,110
  BOX 98,94,155,108
  BOX 168,92,229,110
  BOX 170,94,227,108
  '
  COLOR 0
  BOX 97,93,156,109
  BOX 169,93,228,109
  COLOR 1
  '
  PBOX 99,95,154,107
  PBOX 171,95,226,107
  '
  TEXT 103,104,"Single"
  TEXT 175,104,"Double"
  '
  BOX 96,124,157,143
  BOX 98,126,155,141
  BOX 168,124,229,143
  BOX 170,126,227,141
  '
  COLOR 0
  BOX 97,125,156,142
  BOX 169,125,228,142
  COLOR 1
  '
  PBOX 99,127,154,140
  PBOX 171,127,226,140
  '
  TEXT 103,136,"Format"
  TEXT 175,136,"Cancel"
  '
  PUT 169+(dev%*40),71,ind_dev$,10
  PUT 97+(side%*72),93,inv_side$,10
  '
  SETMOUSE 200,150
  '
  BMOVE XBIOS(3),XBIOS(2),32000
  ~XBIOS(5,L:XBIOS(2),L:-1,W:-1)
  buffer$(0)=""
  '
  GRAPHMODE 1
  SHOWM
  '
  REPEAT
    MOUSE mx,my,mk
    IF mk=1
      IF mx>170 AND mx<187 AND my>72 AND my<84
        IF dev%=1
          dev%=0
          VSYNC
          PUT 209,71,ind_dev$,10
          VSYNC
          PUT 169,71,ind_dev$,10
        ENDIF
        '
      ELSE IF mx>210 AND mx<227 AND my>72 AND my<84
        IF dev%=0
          dev%=1
          VSYNC
          PUT 169,71,ind_dev$,10
          VSYNC
          PUT 209,71,ind_dev$,10
        ENDIF
        '
      ELSE IF mx>98 AND mx<155 AND my>94 AND my<108
        IF side%=1
          side%=0
          VSYNC
          PUT 169,93,inv_side$,10
          VSYNC
          PUT 97,93,inv_side$,10
        ENDIF
        '
      ELSE IF mx>170 AND mx<227 AND my>94 AND my<108
        IF side%=0
          side%=1
          VSYNC
          PUT 97,93,inv_side$,10
          VSYNC
          PUT 169,93,inv_side$,10
        ENDIF
        '
      ELSE IF mx>98 AND mx<155 AND my>126 AND my<141
        VSYNC
        PUT 97,125,inv_ob$,10
        REPEAT
        UNTIL MOUSEK=0
        '
        GOSUB format
        '
        nfmt%=TRUE
        '
      ELSE IF mx>170 AND mx<227 AND my>126 AND my<141
        VSYNC
        PUT 169,125,inv_ob$,10
        nfmt%=TRUE
        '
      ENDIF
    ELSE
      IF GEMDOS(11)
        IF GEMDOS(7) MOD 256=27
          nfmt%=TRUE
        ENDIF
      ENDIF
    ENDIF
  UNTIL nfmt%
  '
  REPEAT
    WHILE GEMDOS(11)
      ~GEMDOS(7)
    WEND
  UNTIL MOUSEK=0
  '
  GOSUB pfm
  SHOWM
  '
RETURN
> PROCEDURE format
  '
  GOSUB pfm
  '
  GOSUB sfbox("|FORMAT DISK|ÿÿÿÿÿÿÿÿÿÿÿ||Formatting will ERASE|all data on the disk|in Drive "+CHR$(65+dev%)+"||","O.K|Cancel",1,1,1,fmt%)
  DEC fmt%
  '
  IF fmt%
    '
    buffer$(0)=""
    '
    buffer$(0)=SPACE$(12000)
    buffer%=VARPTR(buffer$(0))
    '
    GRAPHMODE 2
    '
    PBOX 78,51,248,125
    '
    BOX 80,53,246,123
    BOX 82,55,244,67
    BOX 82,69,244,107
    BOX 82,109,244,121
    '
    TEXT 119,64,"FORMAT DISK"
    TEXT 88,84,"Drive :  "+CHR$(dev%+65)
    TEXT 88,99,"Track :  "
    '
    track%=79
    '
    f%=0
    '
    WHILE track%>-1
      '
      IF track%=0
        virgin%=0
      ELSE IF track%=1 AND side%=0
        virgin%=0
      ELSE
        virgin%=&HE5E5
      ENDIF
      '
      FOR sideno%=0 TO side%
        '
        f%=XBIOS(10,L:buffer%,L:0,W:dev%,W:9,W:track%,W:sideno%,W:1,L:&H87654321,W:virgin%)
        '
        IF f%<>0
          '
          GRAPHMODE 1
          IF f%=-13
            GOSUB sfbox("|FORMAT DISK|ÿÿÿÿÿÿÿÿÿÿÿ||Please remove||write protect|","Retry|Cancel",1,1,1,fmt%)
          ELSE IF f%=-6
            GOSUB sfbox("|FORMAT DISK|ÿÿÿÿÿÿÿÿÿÿÿ||Can't find Disk||Please check Drive "+CHR$(65+dev%)+"|","Retry|Cancel",1,1,1,fmt%)
          ELSE IF f%=-16
            GOSUB sfbox("|FORMAT DISK|ÿÿÿÿÿÿÿÿÿÿÿ||Bad sector||Format abandoned|","Cancel",0,1,1,fmt%)
            fmt%=1
          ELSE
            GOSUB sfbox("|FORMAT DISK|ÿÿÿÿÿÿÿÿÿÿÿ||Disk error||Please check Drive "+CHR$(65+dev%)+"|","Retry|Cancel",1,1,1,fmt%)
          ENDIF
          '
          DEC fmt%
          '
          IF fmt%<>0
            f%=0
          ENDIF
          '
          GRAPHMODE 2
          '
          INC track%
          '
        ENDIF
        '
        EXIT IF fmt%=0
        '
      NEXT sideno%
      '
      IF track%<80
        '
        GRAPHMODE 1
        TEXT 152,99,SPACE$(2-LEN(STR$(track%)))+STR$(track%)
        GRAPHMODE 2
        '
        DEFFILL 1,f$
        '
        PBOX 80+track%*2+3,110,80+track%*2+5,120
        DEFFILL 0,1,0
        '
      ENDIF
      '
      EXIT IF fmt%=0
      '
      DEC track%
      '
    WEND
    '
    IF f%
      '
      GOSUB pfm
      '
      GRAPHMODE 1
      GOSUB sfbox("|FORMAT DISK|ÿÿÿÿÿÿÿÿÿÿÿ||Format Error||Format abandoned|","",0,1,1,junk%)
      GRAPHMODE 2
      '
    ELSE
      '
      buffer$(0)=STRING$(12000,CHR$(0))
      buffer%=VARPTR(buffer$(0))
      '
      dtype%=side%+2
      '
      GOSUB boot_sector
      '
      f%=XBIOS(9,L:buffer%,L:0,W:dev%,W:1,W:0,W:0,W:9)
      '
      IF f%
        '
        GOSUB pfm
        '
        GRAPHMODE 1
        GOSUB sfbox("|FORMAT DISK|ÿÿÿÿÿÿÿÿÿÿÿ||Boot Sector Error||Format abandoned|","",0,1,1,junk%)
        GRAPHMODE 2
        '
      ELSE
        '
        bfree%=DFREE(dev%+1)
        '
        GOSUB pfm
        '
        GRAPHMODE 1
        GOSUB sfbox("|FORMAT DISK|ÿÿÿÿÿÿÿÿÿÿÿ||Format complete||"+STR$(bfree%)+"||bytes available","",0,1,1,junk%)
        GRAPHMODE 2
        '
      ENDIF
    ENDIF
    '
    GRAPHMODE 1
    buffer$(0)=""
    '
  ENDIF
  '
RETURN
> PROCEDURE boot_sector
  '
  buffer$(0)=STRING$(12000,CHR$(0))
  buffer%=VARPTR(buffer$(0))
  '
  sec%=720*SUCC(side%)                                 ! Total sectors
  '
  '             All WORDS are Intel format (low byte,high byte)
  '
  MID$(buffer$(0),1,1)=CHR$(&HE9)                ! MS DOS compatible
  MID$(buffer$(0),3.6)="NuForm"                  ! OEM field
  MID$(buffer$(0),12,2)=CHR$(0)+CHR$(2)          ! Bytes per sector (512)
  MID$(buffer$(0),14,1)=CHR$(2)                  ! Sectors per cluster
  MID$(buffer$(0),15,2)=CHR$(1)+CHR$(0)          ! Reserved sectors, just the boot sector
  MID$(buffer$(0),17,1)=CHR$(2)                  ! Number of FAT's
  MID$(buffer$(0),18,2)=CHR$(112)+CHR$(0)        ! Max directory entries
  MID$(buffer$(0),20,2)=CHR$(sec% MOD 256)+CHR$(sec% DIV 256)  ! Total sectors
  MID$(buffer$(0),22,1)=CHR$(&HF9)               ! Media type
  MID$(buffer$(0),23,2)=CHR$(5)+CHR$(0)          ! Sectors per FAT
  MID$(buffer$(0),25,2)=CHR$(9)+CHR$(0)          ! Sectors per track
  MID$(buffer$(0),27,2)=CHR$(SUCC(side%))+CHR$(0)     ! Sides to disk
  MID$(buffer$(0),29,2)=CHR$(0)+CHR$(0)          ! Hidden sectors
  '
  ~XBIOS(18,L:V:buffer$(0),L:2^24,W:dtype%,W:0)  ! Prototype sector
  '
RETURN
> PROCEDURE pfm
  '
  buffer$(0)=STRING$(32255,CHR$(0))
  scr%=V:buffer$(0)+255 AND &HFFFF00
  ~XBIOS(5,L:scr%,L:-1,W:-1)
  BMOVE XBIOS(2),XBIOS(3),32000
  '
  PUT 78,46,format$
  '
  BMOVE XBIOS(3),XBIOS(2),32000
  ~XBIOS(5,L:XBIOS(2),L:-1,W:-1)
  buffer$(0)=""
  '
RETURN
'
' ******************************************************************************
'
> PROCEDURE sfbox(c$,b$,ab%,al%,ms%,VAR bnum%)
  '
  LOCAL a%,b%,c%,g%,ln%,lw%,nlw%,lx%,ly%,bn%,bw%,nbw%,bx%,by%,x1%,y1%
  LOCAL height%,width%,obnum%,offset%,mask%,ret%,m%,n%,ns%
  '
  LOCAL mx,my,mk,omx,set
  '
  LOCAL a$,tx$,box$,boxab$
  '
  HIDEM
  DEFMOUSE 0
  '
  IF LEN(c$) OR LEN(b$)
    c$=c$+"|"
    b$=b$+"|"
    ns%=0
    FOR n%=1 TO LEN(c$)
      IF MID$(c$,n%,1)="|"
        nlw%=n%-ns%
        ns%=n%
        IF nlw%>lw%
          lw%=nlw%
        ENDIF
        INC ln%
      ENDIF
    NEXT n%
    IF c$="|"
      ln%=0
    ENDIF
    DEC lw%
    ns%=0
    FOR n%=1 TO LEN(b$)
      IF MID$(b$,n%,1)="|"
        nbw%=n%-ns%
        ns%=n%
        IF nbw%>bw%
          bw%=nbw%
        ENDIF
        INC bn%
      ENDIF
    NEXT n%
    IF b$="|"
      bn%=0
    ENDIF
    DEC bw%
    IF 27/8*bn%>ln%
      height%=27*bn%+24
    ELSE
      height%=8*ln%+36
    ENDIF
    width%=(lw%+bw%)*8+92
    IF ln%=0
      width%=width%-36
    ENDIF
    IF bn%=0
      width%=width%-28
    ENDIF
    INC width%
    x1%=160-(width%/2)
    y1%=100-(height%/2)
    DEFFILL 0
    GET x1%,y1%,x1%+width%,y1%+height%,buffer$(0)
    PBOX x1%,y1%,x1%+width%,y1%+height%
    BOX x1%,y1%,x1%+width%,y1%+height%
    BOX x1%+3,y1%+3,x1%+width%-3,y1%+height%-3
    BOX x1%+4,y1%+4,x1%+width%-4,y1%+height%-4
    DEFTEXT 1,0,0,4
    TEXT x1%+width%-16,y1%+height%-7,"d"
    TEXT x1%+width%-12,y1%+height%-7,"b"
    TEXT x1%+width%-14,y1%+height%-12," "
    DEFTEXT 1,0,0,6
    IF ln%
      lx%=x1%+32
      ly%=100-(ln%/2*8)+6
      FOR n%=0 TO ln%-1
        tx$=LEFT$(c$,INSTR(c$,"|")-1)
        c$=MID$(c$,INSTR(c$,"|")+1)
        offset%=(lw%-LEN(tx$))*al%*4
        TEXT lx%+offset%,ly%+(8*n%),tx$
      NEXT n%
      '
      REPEAT
        WHILE GEMDOS(11)
          ~GEMDOS(7)
        WEND
      UNTIL MOUSEK=0
      '
      IF bn%=0
        SHOWM
        REPEAT
        UNTIL MOUSEK=1 OR GEMDOS(11)
      ENDIF
      '
    ENDIF
    IF bn%
      bx%=x1%+width%-(bw%*8)-24
      by%=100-(bn%/2*27)+6
      IF ln%=0
        bx%=bx%-6
      ENDIF
      ' mask%=0
      FOR n%=0 TO bn%-1
        BOX bx%-4,by%+(27*n%),bx%+(bw%*8)+7,by%+(27*n%)+16
        BOX bx%-6,by%+(27*n%)-2,bx%+(bw%*8)+9,by%+(27*n%)+18
        DEFTEXT 1,0
        tx$=LEFT$(b$,INSTR(b$,"|")-1)
        b$=RIGHT$(b$,LEN(b$)-LEN(tx$)-1)
        offset%=(bw%-LEN(tx$))*4
        TEXT bx%+offset%+2,by%+(27*n%)+11,tx$
      NEXT n%
      BOX bx%-5,by%+(27*ab%)-1,bx%+(bw%*8)+8,by%+(27*ab%)+17
      obnum%=0
      set=0
      '
      SHOWM
      REPEAT
        MOUSE mx,my,mk
        IF mx>bx%-4 AND mx<bx%+(bw%*8)+7 AND my>by% AND my<by%+(27*bn%)-8 AND ((my-by%) MOD 27)<18
          IF set=0
            bnum%=(my-by%) DIV 27
            IF obnum%=ab%
              PUT bx%-5,by%+(27*obnum%)-1,boxab$
            ELSE
              PUT bx%-4,by%+(27*obnum%),box$
            ENDIF
            IF bnum%=ab%
              GET bx%-5,by%+(27*bnum%)-1,bx%+(bw%*8)+8,by%+(27*bnum%)+17,boxab$
              PUT bx%-5,by%+(27*bnum%)-1,boxab$,10
            ELSE
              GET bx%-4,by%+(27*bnum%),bx%+(bw%*8)+7,by%+(27*bnum%)+16,box$
              PUT bx%-4,by%+(27*bnum%),box$,10
            ENDIF
            obnum%=bnum%
            set=1
            ' ENDIF
          ENDIF
        ELSE
          IF set=1
            set=0
            IF obnum%=ab%
              PUT bx%-5,by%+(27*obnum%)-1,boxab$
            ELSE
              PUT bx%-4,by%+(27*obnum%),box$
            ENDIF
          ENDIF
          IF mk=1 AND mx<>omx
            PRINT AT(1,1);CHR$(7)
            omx=mx
          ENDIF
        ENDIF
        ret%=FALSE
        IF GEMDOS(11)
          g%=GEMDOS(7) MOD 256
          IF g%=13
            bnum%=ab%
            ret%=TRUE
          ENDIF
        ENDIF
        SHOWM
      UNTIL (mk=1 AND set=1) OR ret%
    ENDIF
    '
    REPEAT
      WHILE GEMDOS(11)
        ~GEMDOS(7)
      WEND
    UNTIL MOUSEK=0
    '
    a%=CVI(MID$(buffer$(0),1,2))
    b%=CVI(MID$(buffer$(0),3,2))
    c%=((a% DIV 16)+1)*8
    FOR n%=0 TO b%
      a$=LEFT$(buffer$(0),6)+MID$(buffer$(0),(c%*n%)+7,c%)
      MID$(a$,4)=CHR$(0)
      PUT x1%,y1%+n%,a$
    NEXT n%
    IF ms%
      SHOWM
    ELSE
      HIDEM
    ENDIF
  ENDIF
  '
  buffer$(0)=""
  a$=""
  '
RETURN
'
' ******************************************************************************
'
> PROCEDURE palette
  '
  IF blank%
    GOSUB rescale
    blank%=FALSE
  ENDIF
  '
  LOCAL bl%,blue%,cl%,cn%,gn%,green%,m%,n%,oblue%,ocl%,ogreen%,ored%,orw%
  LOCAL ovalue%,p%,rd%,red%,rw%,mouse_set%
  '
  LOCAL finish,mk,mx,my,op
  '
  DEFFILL 0
  '
  BMOVE V:pal&(0),V:opal&(0),32
  ovalue%=pal&(0)
  '
  GET 181,10,319,191,upal$
  '
  GOSUB palette_draw_box
  '
  red%=pal&(0) DIV 256
  green%=(pal&(0) MOD 256) DIV 16
  blue%=pal&(0) MOD 16
  '
  DEFTEXT 1,0,0,4
  BOX 210+(10*red%),53,220+(10*red%),68
  TEXT 213+(10*red%),63,red%
  BOX 210+(10*green%),68,220+(10*green%),83
  TEXT 213+(10*green%),78,green%
  BOX 210+(10*blue%),83,220+(10*blue%),98
  TEXT 213+(10*blue%),93,blue%
  DEFTEXT 1,0,0,6
  '
  ored%=red%
  ogreen%=green%
  oblue%=blue%
  '
  SHOWM
  '
  GOSUB palette_select
  '
  WHILE MOUSEK
  WEND
  '
  DEFMOUSE 0
  HIDEM
  '
RETURN
> PROCEDURE palette_draw_box
  PBOX 182,11,318,190
  BOX 181,10,319,191
  BOX 184,13,316,188
  BOX 185,14,315,187
  BOX 189,20,227,32         !
  BOX 232,20,270,32         !
  BOX 275,20,311,32         !
  BOX 199,37,242,49
  BOX 249,37,301,49
  BOX 196,53,304,98
  DRAW 196,68 TO 304,68
  DRAW 196,83 TO 304,83
  DRAW 210,53 TO 210,98
  DRAW 290,53 TO 290,98
  TEXT 193,29,"LOAD"
  TEXT 236,29,"SAVE"
  TEXT 277,29,"EXIT"
  TEXT 201,46,"RESET"
  TEXT 251,46,"CANCEL"
  FOR n%=0 TO 2
    DEFFILL bascol&(n%+1)
    PBOX 197,54+(15*n%),209,67+(15*n%)
    PBOX 291,54+(15*n%),303,67+(15*n%)
  NEXT n%
  DEFFILL 0
  BOX 196,103,219,122
  FOR m%=0 TO 3
    FOR n%=0 TO 3
      DEFFILL bascol&(4*m%+n%)
      PBOX 198+(28*n%),105+(20*m%),217+(28*n%),120+(20*m%)
    NEXT n%
  NEXT m%
  DEFFILL 0
  GET 181,10,319,191,pal$
RETURN
> PROCEDURE palette_select
  '
  REPEAT
    '
    MOUSE mx,my,mk
    '
    IF mk=1
      IF (mx>198 AND mx<219) OR (mx>226 AND mx<247) OR (mx>254 AND mx<275) OR (mx>282 AND mx<303)
        IF (my>105 AND my<120) OR (my>125 AND my<140) OR (my>145 AND my<160) OR (my>165 AND my<180)
          GOSUB palette_change_colour
          REPEAT
          UNTIL MOUSEK=0
        ENDIF
      ENDIF
      IF ((mx>196 AND mx<210) OR (mx>290 AND mx<304)) AND (my>53 AND my<98)
        GOSUB palette_set_colour
        PAUSE 8
      ENDIF
      IF mx>0 AND mx<181 AND my>10 AND my<191
        GOSUB palette_point
        REPEAT
        UNTIL MOUSEK=0
      ENDIF
      IF mx>198 AND mx<242 AND my>37 AND my<49
        GOSUB palette_default
        REPEAT
        UNTIL MOUSEK=0
      ENDIF
      IF mx>248 AND mx<300 AND my>37 AND my<49
        GOSUB palette_cancel
        REPEAT
        UNTIL MOUSEK=0
      ENDIF
      IF mx>189 AND mx<227 AND my>20 AND my<32
        GOSUB load_pal
        BMOVE V:pal&(0),V:opal&(0),32
        GOSUB palette_default
        REPEAT
        UNTIL MOUSEK=0
      ENDIF
      IF mx>232 AND mx<270 AND my>20 AND my<32
        GOSUB save_pal
        REPEAT
        UNTIL MOUSEK=0
      ENDIF
      IF mx>275 AND mx<311 AND my>20 AND my<32
        mk=2
      ENDIF
    ENDIF
    '
    IF GEMDOS(11)
      IF GEMDOS(7) MOD 256=27
        mk=2
      ENDIF
    ENDIF
    '
    IF mk=2
      '
      buffer$(0)=STRING$(32255,CHR$(0))
      scr%=V:buffer$(0)+255 AND &HFFFF00
      BMOVE XBIOS(2),scr%,32000
      ~XBIOS(5,L:scr%,L:-1,W:-1)
      '
      PUT 181,10,upal$
      '
      BMOVE scr%,XBIOS(2),32000
      ~XBIOS(5,L:XBIOS(2),L:-1,W:-1)
      buffer$(0)=""
      upal$=""
      '
      finish=TRUE
      SHOWM
      '
    ENDIF
    '
  UNTIL finish
  '
RETURN
> PROCEDURE palette_set_colour
  op=0
  rd%=red%
  gn%=green%
  bl%=blue%
  IF mx>196 AND mx<210
    op=-1
  ENDIF
  IF mx>290 AND mx<304
    op=1
  ENDIF
  IF my>53 AND my<68
    rd%=red%+op
    IF rd%>7
      rd%=7
    ENDIF
    IF rd%<0
      rd%=0
    ENDIF
  ENDIF
  IF my>68 AND my<83
    gn%=green%+op
    IF gn%>7
      gn%=7
    ENDIF
    IF gn%<0
      gn%=0
    ENDIF
  ENDIF
  IF my>83 AND my<98
    bl%=blue%+op
    IF bl%>7
      bl%=7
    ENDIF
    IF bl%<0
      bl%=0
    ENDIF
  ENDIF
  pal&(cn%)=(256*rd%)+(16*gn%)+bl%
  ~XBIOS(6,L:VARPTR(pal&(0)))
  VSYNC
  GOSUB palette_set_scale
RETURN
> PROCEDURE palette_set_scale
  GOSUB palette_get_colours
  DEFTEXT 1,0,0,4
  IF ored%<>red%
    PBOX 211,54,289,67
    BOX 210+(10*red%),53,220+(10*red%),68
    TEXT 213+(10*red%),63,red%
    ored%=red%
  ENDIF
  IF ogreen%<>green%
    PBOX 211,69,289,82
    BOX 210+(10*green%),68,220+(10*green%),83
    TEXT 213+(10*green%),78,green%
    ogreen%=green%
  ENDIF
  IF oblue%<>blue%
    PBOX 211,84,289,97
    BOX 210+(10*blue%),83,220+(10*blue%),98
    TEXT 213+(10*blue%),93,blue%
    oblue%=blue%
  ENDIF
  DEFTEXT 1,0,0,6
RETURN
> PROCEDURE palette_get_colours
  cn%=(4*rw%)+cl%
  red%=pal&(cn%) DIV 256
  green%=(pal&(cn%) MOD 256) DIV 16
  blue%=pal&(cn%) MOD 16
RETURN
> PROCEDURE palette_change_colour
  IF mx>198 AND mx<219
    cl%=0
  ENDIF
  IF mx>226 AND mx<247
    cl%=1
  ENDIF
  IF mx>254 AND mx<275
    cl%=2
  ENDIF
  IF mx>282 AND mx<303
    cl%=3
  ENDIF
  IF my>105 AND my<120
    rw%=0
  ENDIF
  IF my>125 AND my<140
    rw%=1
  ENDIF
  IF my>145 AND my<160
    rw%=2
  ENDIF
  IF my>165 AND my<180
    rw%=3
  ENDIF
  IF cl%<>ocl% OR rw%<>orw%
    GOSUB palette_change_patch
  ENDIF
  ocl%=cl%
  orw%=rw%
RETURN
> PROCEDURE palette_change_patch
  PBOX 196+(28*ocl%),103+(20*orw%),219+(28*ocl%),104+(20*orw%)
  PBOX 196+(28*ocl%),121+(20*orw%),219+(28*ocl%),122+(20*orw%)
  PBOX 196+(28*ocl%),105+(20*orw%),197+(28*ocl%),120+(20*orw%)
  PBOX 218+(28*ocl%),105+(20*orw%),219+(28*ocl%),120+(20*orw%)
  IF ocl%+orw%=0
    BOX 198,105,217,120
  ENDIF
  DEFFILL bascol&((4*rw%)+cl%)
  PBOX 196+(28*cl%),103+(20*rw%),219+(28*cl%),122+(20*rw%)
  DEFFILL 0
  IF cl%+rw%=0
    BOX 196,103,219,122
  ENDIF
  GOSUB palette_set_scale
  ovalue%=(red%*256)+(green%*16)+blue%
RETURN
> PROCEDURE palette_default
  ~XBIOS(6,L:VARPTR(opal&(0)))
  VSYNC
  cl%=0
  rw%=0
  IF PTST(198,105)
    GOSUB palette_change_patch
  ENDIF
  BMOVE V:opal&(0),V:pal&(0),32
  GOSUB palette_set_scale
  ovalue%=pal&(0)
  ocl%=0
  orw%=0
RETURN
> PROCEDURE palette_cancel
  cn%=(4*rw%)+cl%
  pal&(cn%)=ovalue%
  GOSUB palette_set_scale
  ~XBIOS(6,L:VARPTR(pal&(0)))
  VSYNC
RETURN
> PROCEDURE palette_point
  p%=PTST(mx,my)
  cl%=p% MOD 4
  rw%=p% DIV 4
  IF cl%<>ocl% OR rw%<>orw%
    GOSUB palette_change_patch
  ENDIF
  ocl%=cl%
  orw%=rw%
RETURN
'
' ******************************************************************************
'
'                                    FSEL
'
' ******************************************************************************
'
> PROCEDURE fsel(tlt$,VAR sort$,path$,sfile$)
  '
  LOCAL body$,connected_drive$,dd$,ddir$,ddrv$,dpad$
  LOCAL f$,file_spec$,fresize$,head$,indrv$,inext$,infre$,inverse$
  LOCAL old_file_spec$,old_path$,prpath$,prsfile$,sfend$
  LOCAL sfile_body$,sfile_tail$,sprsfile$,tail$,temp$
  '
  LOCAL ccp%,ccp_inc%,count%,cx_pos%,cy_pos%,d%,done_name%,done_type%
  LOCAL drive_box_number%,drive_box_origin%,end_block%,ext_box_number%
  LOCAL f%,fss%,fs_len%,i%,iput%,j%,k%,n%,new_ccp%,nlist%,no_more%
  LOCAL old_nlist%,old_start_list,scr%,slected%,start_block%,start_list%,tcp%
  '
  LOCAL block_len,displacement,go_left,go_right,mk,mx,my
  LOCAL newendmy,newstmy,oldendmy,oldstmy,one_bit
  '
  ' --------------------------------------------------------------------------
  '
  f$=CHR$(17)+CHR$(17)+CHR$(0)+CHR$(0)+CHR$(68)+CHR$(68)+CHR$(0)+CHR$(0)
  f$=STRING$(4,f$)                            ! Fill definition
  '
  SGET c_screen$(0)
  '
  CLS
  '
  SETCOLOR 0,7,7,7
  SETCOLOR 1,0
  SETCOLOR 2,4,7,7
  SETCOLOR 13,0
  '
  path$=UPPER$(path$)                         ! Drive letter + :\ + sub.dir1\..
  '                                           ! ..\ + file type + ext
  '
  sfile$=UPPER$(sfile$)                       ! Selected file   body . tail
  '
  GOSUB fsel_init
  GOSUB fsel_fsbox
  GOSUB fsel_do_files
  '
  GOSUB fsel_handle
  '
  PAUSE 5
  '
  ~XBIOS(6,L:VARPTR(pal&(0)))
  VSYNC
  '
  SPUT c_screen$(0)
  '
  REPEAT
  UNTIL MOUSEK=0
  '
  SHOWM
  '
RETURN
> PROCEDURE fsel_init
  '
  GET 0,0,9,7,infre$                        ! Free button
  GET 0,0,31,18,inext$                      ! Extention buttons
  GET 0,0,19,14,indrv$                      ! Drive buttons
  GET 0,0,122,7,inverse$                    ! File list
  '
  connected_drive$=""                       ! Holds connected drive letters
  FOR n%=0 TO 15
    IF BIOS(10) AND 2^n%
      connected_drive$=connected_drive$+CHR$(65+n%)     ! Convert to upper case
    ENDIF
    EXIT IF LEN(connected_drive$)>3                     ! Stop at 4
  NEXT n%
  '
  drive_box_origin%=207+(4-LEN(connected_drive$))*13    ! Origin for drive boxes
  '
  GOSUB fsel_sfile                                      ! Produce file parts
  '
  ccp%=LEN(sfend$)
  '
  IF ccp%<9
    ccp%=300+ccp%                           ! Produce cursor position
  ELSE
    ccp%=400+ccp%
  ENDIF
  '
  new_ccp%=ccp%
  old_file_spec$=""                         ! Reset flags
  '
  GOSUB fsel_path                           ! Produce path parts
  '
  old_path$=path$                           ! Reset flags
  '
  go_right=FALSE
  go_left=FALSE                             ! Flags
  slected%=FALSE
  '
RETURN
> PROCEDURE fsel_fsbox
  '
  buffer$(0)=STRING$(32255,CHR$(0))
  scr%=V:buffer$(0)+255 AND &HFFFF00
  ~XBIOS(5,L:scr%,L:-1,W:-1)
  '
  DEFFILL 3
  PBOX 0,0,7,7
  GET 0,0,7,7,incurs$
  DEFFILL 0
  PBOX 0,0,7,7
  '
  BOX 0,0,319,199
  BOX 2,19,317,197                       ! Draw outer boxes
  BOX 3,20,316,196
  '
  DEFTEXT 1,0,0,4
  TEXT 302,192,"d"
  TEXT 306,192,"b"                       ! EasyPill logo
  TEXT 304,187," "
  DEFTEXT 1,0,0,6
  '
  BOX 2,2,159,17                         ! File action
  TEXT 80-(4*LEN(tlt$)),13,tlt$
  '
  BOX 161,2,317,17
  TEXT 179,13,"Free"
  TEXT 217,14,":"                        ! Free disk space
  '
  BOX 300,5,311,14
  BOX 302,7,309,12                       ! Free space button
  '
  TEXT 20,36,"ITEM SELECTOR"
  TEXT 12,53,"Directory :"
  TEXT 212,86,"Selection :"
  '
  TEXT 12,66,prpath$+STRING$(37-LEN(prpath$),"_")   ! Path string as printed
  '
  TEXT 212,99,prsfile$                   ! File string as printed
  '
  GOSUB fsel_cursor
  '
  BOX 166,28,199,48
  BOX 168,30,197,46                      ! Extention box
  TEXT 171,41,"*.*"
  '
  FOR n%=0 TO LEN(connected_drive$)-1
    BOX drive_box_origin%+(n%*26)-1,30,drive_box_origin%+(n%*26)+20,46
    BOX drive_box_origin%+(n%*26)+1,32,drive_box_origin%+(n%*26)+18,44      ! Drive boxes
    TEXT drive_box_origin%+(n%*26)+6,41,MID$(connected_drive$,n%+1,1)
  NEXT n%
  '
  BOX 25,77,199,182                          ! Outer file list box
  '
  TEXT 31,86,CHR$(5)                         ! Previous folder symbol
  '
  BOX 25,77,199,89                           ! Update box
  DEFFILL 1,2,2
  PBOX 43,77,179,89                          ! Update box fill
  DEFFILL 0,1,0
  '
  TEXT 186,86,sort$                          ! Sort type
  '
  BOX 179,77,180,182
  BOX 179,102,199,168
  BOX 179,103,199,167                        ! Slider up/down boxes
  TEXT 186,98,CHR$(1)
  TEXT 186,178,CHR$(2)
  '
  BOX 225,122,285,140
  BOX 226,123,284,139
  BOX 227,124,283,138
  BOX 226,147,284,163                         ! Exit button boxes
  BOX 227,148,283,162
  TEXT 244,134,"O.K"
  TEXT 232,158,"Cancel"
  '
  '
  BMOVE scr%,XBIOS(2),32000
  ~XBIOS(5,L:XBIOS(2),L:-1,W:-1)
  buffer$(0)=""
  '
RETURN
' *********
> PROCEDURE fsel_handle
  '
  no_more%=FALSE
  '
  REPEAT
    MOUSE mx,my,mk
    '
    IF mk=1
      IF mx>7 AND mx<25 AND my>57 AND my<69
        new_ccp%=0
        GOSUB fsel_edit
        REPEAT
        UNTIL MOUSEK=0
        '
      ELSE IF mx>24 AND mx<(RINSTR(prpath$,".")*8)+8 AND my>57 AND my<69
        fss%=(mx-12) DIV 8
        new_ccp%=100+MAX(fss%,RINSTR(prpath$,"\"))
        GOSUB fsel_edit
        REPEAT
        UNTIL MOUSEK=0
        '
      ELSE IF mx>(RINSTR(prpath$,".")*8)+7 AND mx<312 AND my>57 AND my<69
        fss%=(mx-12) DIV 8
        new_ccp%=200+MIN(fss%,LEN(prpath$))
        GOSUB fsel_edit
        REPEAT
        UNTIL MOUSEK=0
        '
      ELSE IF mx>206 AND mx<284 AND my>90 AND my<102
        fss%=MAX(0,(mx-212) DIV 8)
        fss%=MIN(fss%,LEN(sfile_body$))
        new_ccp%=300+fss%
        GOSUB fsel_edit
        REPEAT
        UNTIL MOUSEK=0
        '
      ELSE IF mx>283 AND mx<312 AND my>90 AND my<102
        fss%=MAX(0,(mx-283) DIV 8)
        fss%=MIN(9+fss%,LEN(sfend$))
        new_ccp%=MAX(409,400+fss%)
        GOSUB fsel_edit
        REPEAT
        UNTIL MOUSEK=0
        '
      ELSE IF mx>43 AND mx<165 AND my>94 AND my<175
        GOSUB fsel_select
        REPEAT
        UNTIL MOUSEK=0
        '
      ELSE IF mx>167 AND mx<197 AND my>30 AND my<46
        GOSUB fsel_uni_extend
        REPEAT
        UNTIL MOUSEK=0
        '
      ELSE IF mx>drive_box_origin% AND mx<drive_box_origin%+(26*LEN(connected_drive$)) AND my>32 AND my<44
        IF (mx-drive_box_origin%) MOD 26<19
          GOSUB fsel_change_drive
        ENDIF
        REPEAT
        UNTIL MOUSEK=0
        '
      ELSE IF mx>25 AND mx<43 AND my>77 AND my<89
        GOSUB fsel_prev_folder
        REPEAT
        UNTIL MOUSEK=0
        '
      ELSE IF mx>43 AND mx<177 AND my>77 AND my<89
        GOSUB fsel_wipe_slate
        REPEAT
        UNTIL MOUSEK=0
        '
      ELSE IF mx>180 AND mx<199 AND my>77 AND my<89
        GOSUB fsel_toggle
        REPEAT
        UNTIL MOUSEK=0
        '
      ELSE IF mx>300 AND mx<311 AND my>5 AND my<14
        GOSUB fsel_freon
        REPEAT
        UNTIL MOUSEK=0
        '
      ELSE IF mx>180 AND mx<199 AND count%>10
        GOSUB fsel_slide_handle
        '
      ELSE IF mx>227 AND mx<283 AND my>123 AND my<139
        no_more%=TRUE
        '
      ELSE IF mx>227 AND mx<283 AND my>148 AND my<162
        sfile$=""
        no_more%=TRUE
        '
      ENDIF
    ENDIF
    '
    IF GEMDOS(11)
      GOSUB fsel_keyboard
    ENDIF
    '
    SHOWM
    '
  UNTIL no_more%
  '
  PAUSE 10
  '
RETURN
> PROCEDURE fsel_keyboard
  '
  i%=0
  '
  iput%=GEMDOS(7)
  '
  SELECT SHR(iput%,16) AND &HFF
    '
  CASE 1
    GOSUB fsel_escape
  CASE 72
    GOSUB fsel_up_arrow
  CASE 80
    GOSUB fsel_down_arrow
  CASE 75
    GOSUB fsel_left_arrow
  CASE 77
    GOSUB fsel_right_arrow
  CASE 28,114
    no_more%=TRUE
    '
  DEFAULT
    i%=iput% MOD 256
    IF i%>96 AND i%<123
      i%=i%-32
    ENDIF
    GOSUB fsel_edit
  ENDSELECT
  '
  WHILE GEMDOS(11)
    ~GEMDOS(7)
  WEND
  '
RETURN
' *********
> PROCEDURE fsel_do_files
  '
  IF file_spec$<>old_file_spec$
    GOSUB fsel_update_ext
  ENDIF
  '
  DEFMOUSE 2
  '
  ~FSETDTA(BASEPAGE+128)
  '
  temp$=LEFT$(path$,RINSTR(path$,"\"))+"*.*"+CHR$(0)     ! Test for disk
  f%=FSFIRST(temp$,-1)
  '
  count%=0
  '
  IF f%=0
    '
    head$=CHR$(7)+" "
    '
    f%=FSFIRST(temp$,16)                                  ! Including subdirs.
    '
    WHILE f%=0
      IF BYTE{BASEPAGE+149} AND 16                        ! Only if subdir.
        GOSUB fsel_extract_files
      ENDIF
      f%=FSNEXT()
    WEND
    '
    temp$=path$+CHR$(0)
    head$="  "
    '
    f%=FSFIRST(temp$,0)                        ! Except subdirs,disk title,
    WHILE f%=0                                 ! hidden files,etc.
      GOSUB fsel_extract_files
      f%=FSNEXT()
    WEND
    '
  ENDIF
  '
  FOR n%=count%+1 TO 10
    file_list$(n%)="  ________ ___"
    place_name%(n%)=n%
    place_type%(n%)=n%
  NEXT n%
  '
  done_name%=FALSE
  done_type%=FALSE
  '
  GOSUB fsel_sort
  GOSUB fsel_slide_set
  '
  i%=0
  DEFMOUSE 0
  '
RETURN
> PROCEDURE fsel_extract_files
  INC count%
  temp$=CHAR{BASEPAGE+158}
  IF temp$="." OR temp$=".."
    DEC count%
  ELSE
    i%=INSTR(temp$,".")
    j%=LEN(temp$)
    IF i%
      body$=LEFT$(temp$,i%-1)+SPACE$(10-i%)
      k%=j%-i%
      tail$=MID$(temp$,i%+1,k%)+SPACE$(3-k%)
    ELSE
      body$=temp$+SPACE$(9-j%)
      tail$="   "
    ENDIF
    file_list$(count%)=head$+body$+tail$
    file_sort_name$(count%)=file_list$(count%)
    file_sort_type$(count%)=head$+tail$+body$
    place_name%(count%)=count%
    place_type%(count%)=count%
  ENDIF
RETURN
> PROCEDURE fsel_update_ext
  '
  IF RIGHT$(file_spec$)="."
    temp$=" "+LEFT$(file_spec$,LEN(file_spec$)-1)+" "
  ELSE
    temp$=" "+file_spec$+" "
  ENDIF
  '
  BOUNDARY 0
  DEFFILL 1,2,2
  PBOX 44,78,110-4*LEN(temp$),88
  PBOX 110+4*LEN(temp$),78,178,88
  DEFFILL 0,1,0
  PBOX 110-4*LEN(temp$),78,110+4*LEN(temp$),88
  BOUNDARY 1
  TEXT 110-4*LEN(temp$),86,temp$
  '
  old_file_spec$=file_spec$
  '
RETURN
> PROCEDURE fsel_sort
  '
  IF sort$="N"
    IF NOT done_name%
      QSORT file_sort_name$(),count%+1,place_name%()
      done_name%=TRUE
    ENDIF
  ELSE
    IF NOT done_type%
      QSORT file_sort_type$(),count%+1,place_type%()
      done_type%=TRUE
    ENDIF
  ENDIF
  '
RETURN
' *********
> PROCEDURE fsel_inverse
  IF slected%
    IF sfile$<>dd$
      PUT 44,96+(8*nlist%),inverse$,10
      slected%=FALSE
    ENDIF
  ENDIF
RETURN
> PROCEDURE fsel_cursor
  IF ccp%<300
    cx_pos%=(ccp% MOD 100)*8+12
    cy_pos%=59
  ELSE
    cx_pos%=(ccp% MOD 100)*8+212
    cy_pos%=92
  ENDIF
  PUT cx_pos%,cy_pos%,incurs$,6
RETURN
> PROCEDURE fsel_edit
  IF new_ccp%<>ccp%
    GOSUB fsel_sfile
    GOSUB fsel_cursor
    IF LEN(sfend$)<9 AND new_ccp%>399
      TEXT 212,99,sprsfile$
    ENDIF
    IF new_ccp%<400
      TEXT 212,99,prsfile$
    ENDIF
    ccp%=new_ccp%
    GOSUB fsel_cursor
    IF ccp%<300 AND new_ccp%>299
      GOSUB fsel_path_reset
    ENDIF
  ELSE
    IF ccp%<300
      GOSUB fsel_path_handle
    ELSE
      GOSUB fsel_file_handle
    ENDIF
  ENDIF
RETURN
' *********
> PROCEDURE fsel_up_arrow
  IF ccp%>299
    new_ccp%=200+LEN(prpath$)
  ELSE
    new_ccp%=ccp%
  ENDIF
  GOSUB fsel_edit
RETURN
> PROCEDURE fsel_down_arrow
  IF ccp%<300
    IF LEN(sfend$)<9
      new_ccp%=300+LEN(sfile_body$)
    ELSE
      new_ccp%=400+LEN(sfend$)
    ENDIF
  ELSE
    new_ccp%=ccp%
  ENDIF
  GOSUB fsel_edit
RETURN
> PROCEDURE fsel_left_arrow
  new_ccp%=ccp%
  go_left=TRUE
  GOSUB fsel_edit
RETURN
> PROCEDURE fsel_right_arrow
  IF ccp%=0
    new_ccp%=200+RINSTR(prpath$,"\")
  ELSE
    new_ccp%=ccp%
    go_right=TRUE
  ENDIF
  GOSUB fsel_edit
RETURN
> PROCEDURE fsel_escape
  IF ccp%<300
    GOSUB fsel_cursor
    path$=LEFT$(path$,RINSTR(path$,"\"))+"."
    GOSUB fsel_path
    TEXT 12,66,prpath$+STRING$(37-LEN(prpath$),"_")
    ccp%=100+LEN(ddrv$+dpad$)
    GOSUB fsel_cursor
  ELSE
    GOSUB fsel_cursor
    sfile$=""
    GOSUB fsel_sfile
    TEXT 212,99,prsfile$
    ccp%=300
    GOSUB fsel_cursor
  ENDIF
  new_ccp%=ccp%
RETURN
' *********
> PROCEDURE fsel_path
  '
  ddrv$=LEFT$(path$,2)
  '
  ddir$=MID$(path$,3,RINSTR(path$,"\")-2)               ! Directory + "\"
  dpad$=ddir$
  '
  IF LEN(dpad$)>23
    dpad$=LEFT$(ddir$,RINSTR(path$,"\"))
    dpad$="\"+CHR$(4)+RIGHT$(dpad$,21)
  ENDIF
  '
  file_spec$=MID$(path$,RINSTR(path$,"\")+1)            ! File specification
  '
  prpath$=ddrv$+dpad$+file_spec$
  '
RETURN
> PROCEDURE fsel_path_handle
  IF ccp%
    GOSUB fsel_path_make
  ELSE IF INSTR(connected_drive$,UPPER$(CHR$(i%)))
    path$=UPPER$(CHR$(i%))+":\"+file_spec$
    GOSUB fsel_file_reset
    GOSUB fsel_path_reset
  ENDIF
  i%=0
RETURN
> PROCEDURE fsel_path_make
  '
  tcp%=(ccp% MOD 100)-LEN(ddrv$+dpad$)
  fs_len%=LEN(file_spec$)
  '
  IF i%=42 OR (i%>47 AND i%<58) OR i%=63 OR (i%>64 AND i%<91) OR i%=95 OR i%=156 OR i%=255
    '
    file_spec$=LEFT$(file_spec$,tcp%)+CHR$(i%)+MID$(file_spec$,tcp%+1)
    ccp_inc%=1
    '
    IF INSTR(file_spec$,"*")>0 AND INSTR(file_spec$,"*")<INSTR(file_spec$,".")-1
      file_spec$=LEFT$(file_spec$,INSTR(file_spec$,"*"))+MID$(file_spec$,INSTR(file_spec$,"."))
      IF tcp%>INSTR(file_spec$,"*")
        ccp_inc%=0
      ENDIF
    ENDIF
    '
    IF INSTR(file_spec$,"*",INSTR(file_spec$,"."))>0
      file_spec$=LEFT$(file_spec$,INSTR(file_spec$,"*",INSTR(file_spec$,".")))
      IF tcp%>INSTR(file_spec$,".") AND tcp%=RINSTR(file_spec$,"*")
        ccp_inc%=0
      ENDIF
    ENDIF
    '
    IF tcp%=INSTR(file_spec$,"*") AND tcp%<INSTR(file_spec$,".") AND INSTR(file_spec$,"*")<>0
      ccp_inc%=0
    ENDIF
    '
    IF INSTR(file_spec$,".")>9
      file_spec$=LEFT$(file_spec$,8)+MID$(file_spec$,INSTR(file_spec$,"."))
      IF tcp%=8
        ccp_inc%=0
      ENDIF
    ENDIF
    '
    IF LEN(file_spec$)-INSTR(file_spec$,".")>2
      file_spec$=LEFT$(file_spec$,INSTR(file_spec$,".")+3)
      IF tcp%=INSTR(file_spec$,".")+3
        ccp_inc%=0
      ENDIF
    ENDIF
    '
    fs_len%=MAX(0,fs_len%-LEN(file_spec$))
    GOSUB fsel_update_path(fs_len%,ccp_inc%)
    '
  ELSE IF i%=46 AND tcp%<INSTR(file_spec$,".")
    '
    file_spec$=LEFT$(file_spec$,tcp%)+MID$(file_spec$,INSTR(file_spec$,"."))
    fs_len%=MAX(0,fs_len%-LEN(file_spec$))
    GOSUB fsel_update_path(fs_len%,1)
    '
  ELSE IF i%=8 AND tcp%>0 AND tcp%<>INSTR(file_spec$,".")
    '
    file_spec$=LEFT$(file_spec$,tcp%-1)+MID$(file_spec$,tcp%+1)
    GOSUB fsel_update_path(1,-1)
    '
  ELSE IF i%=127 AND tcp%<LEN(file_spec$) AND tcp%<>INSTR(file_spec$,".")-1
    '
    file_spec$=LEFT$(file_spec$,tcp%)+MID$(file_spec$,tcp%+2)
    GOSUB fsel_update_path(1,0)
    '
  ELSE IF go_left AND tcp%>0
    '
    GOSUB fsel_cursor
    DEC ccp%
    GOSUB fsel_cursor
    '
  ELSE IF go_right AND tcp%<LEN(file_spec$)
    '
    GOSUB fsel_cursor
    INC ccp%
    GOSUB fsel_cursor
    '
  ENDIF
  '
  path$=ddrv$+ddir$+file_spec$
  GOSUB fsel_path
  '
  IF (ccp% MOD 100)<RINSTR(prpath$,".")
    ccp%=100+ccp% MOD 100
  ELSE
    ccp%=200+ccp% MOD 100
  ENDIF
  '
  new_ccp%=ccp%
  '
  go_left=FALSE
  go_right=FALSE
  '
RETURN
> PROCEDURE fsel_update_path(ul%,fs_inc%)
  GOSUB fsel_cursor
  TEXT 12+(LEN(ddrv$+dpad$)*8),66,file_spec$+STRING$(ul%,"_")
  ccp%=ccp%+fs_inc%
  GOSUB fsel_cursor
RETURN
> PROCEDURE fsel_path_reset
  IF old_path$<>path$ OR BIOS(9,ASC(path$)-65)
    GOSUB fsel_path
    TEXT 12,66,prpath$+STRING$(37-LEN(prpath$),"_")
    old_path$=path$
    GOSUB fsel_do_files
  ENDIF
RETURN
> PROCEDURE fsel_sfile
  d%=INSTR(sfile$,".")
  IF d%
    sfile_body$=LEFT$(sfile$,d%-1)
    sfile_tail$=MID$(sfile$,d%+1)
    sfend$=sfile_body$+SPACE$(8-LEN(sfile_body$))+"."+sfile_tail$
    prsfile$=sfend$+STRING$(12-LEN(sfend$),"_")
    sprsfile$=prsfile$
  ELSE
    sfile_body$=sfile$
    sfile_tail$=""
    sfend$=sfile_body$
    prsfile$=sfend$+STRING$(8-LEN(sfend$),"_")+".___"
    sprsfile$=sfend$+SPACE$(8-LEN(sfend$))+".___"
  ENDIF
  GOSUB fsel_inverse
RETURN
> PROCEDURE fsel_file_handle
  '
  tcp%=ccp% MOD 100
  '
  IF (i%>47 AND i%<58) OR (i%>64 AND i%<91) OR (i%>96 AND i%<123) OR i%=95 OR i%=156 OR i%=255
    '
    IF tcp%<8
      sfile_body$=LEFT$(sfile_body$,tcp%)+CHR$(i%)+MID$(sfile_body$,tcp%+1)
      sfile_body$=LEFT$(sfile_body$,8)
      INC tcp%
      '
    ELSE IF tcp%>8
      sfile_tail$=LEFT$(sfile_tail$,tcp%-9)+CHR$(i%)+MID$(sfile_tail$,tcp%-8)
      sfile_tail$=LEFT$(sfile_tail$,3)
      tcp%=MIN(tcp%+1,12)
      '
    ENDIF
    '
  ELSE IF i%=46 AND tcp%<9
    sfile_body$=LEFT$(sfile_body$,tcp%)
    tcp%=9
    '
  ELSE IF i%=8 AND tcp%>0
    IF tcp%<9
      sfile_body$=LEFT$(sfile_body$,tcp%-1)+MID$(sfile_body$,tcp%+1)
      DEC tcp%
      '
    ELSE IF tcp%>9
      sfile_tail$=LEFT$(sfile_tail$,tcp%-10)+MID$(sfile_tail$,tcp%-8)
      DEC tcp%
    ENDIF
    '
  ELSE IF i%=127 AND tcp%<LEN(sfend$)
    IF tcp%<8
      sfile_body$=LEFT$(sfile_body$,tcp%)+MID$(sfile_body$,tcp%+2)
    ELSE IF tcp%>8
      sfile_tail$=LEFT$(sfile_tail$,tcp%-9)+MID$(sfile_tail$,tcp%-7)
    ENDIF
    '
  ELSE IF go_left AND tcp%>0
    DEC tcp%
    IF tcp%>LEN(sfile_body$) AND tcp%<9
      tcp%=LEN(sfile_body$)
    ENDIF
    '
  ELSE IF go_right
    IF tcp%=LEN(sfile_body$)
      tcp%=9
    ELSE IF tcp%<>(9+LEN(sfile_tail$))
      INC tcp%
    ENDIF
  ENDIF
  '
  GOSUB fsel_file_finish
  '
  i%=0
RETURN
> PROCEDURE fsel_file_finish
  '
  sfile$=sfile_body$
  IF LEN(sfile_tail$)
    sfile$=sfile$+"."+sfile_tail$
  ENDIF
  '
  GOSUB fsel_sfile
  '
  GOSUB fsel_cursor
  IF tcp%>8
    ccp%=400+tcp%
    TEXT 212,99,sprsfile$
  ELSE
    ccp%=300+tcp%
    TEXT 212,99,prsfile$
  ENDIF
  GOSUB fsel_cursor
  '
  new_ccp%=ccp%
  '
  go_left=FALSE
  go_right=FALSE
  '
RETURN
> PROCEDURE fsel_file_reset
  GOSUB fsel_sfile
  IF LEN(sfend$)<9
    tcp%=300+LEN(sfend$)
  ELSE
    tcp%=400+LEN(sfend$)
  ENDIF
  IF ccp%<>tcp%
    GOSUB fsel_cursor
    IF tcp%<400
      GOSUB fsel_sfile
      TEXT 212,99,prsfile$
    ENDIF
    ccp%=tcp%
    GOSUB fsel_cursor
  ENDIF
  new_ccp%=ccp%
RETURN
' *********
> PROCEDURE fsel_freon
  '
  PUT 301,6,infre$,10                  ! On
  '
  DEFMOUSE 2
  '
  fresize$=STR$(DFREE(ASC(path$)-64))
  '
  TEXT 232,13,fresize$+SPACE$(8-LEN(fresize$))
  '
  DEFMOUSE 0
  '
  PUT 301,6,infre$,10                     ! Off
  '
RETURN
> PROCEDURE fsel_toggle
  IF sort$="T"
    sort$="N"
  ELSE
    sort$="T"
  ENDIF
  TEXT 186,86,sort$
  GOSUB fsel_inverse
  GOSUB fsel_file_reset
  IF old_path$<>path$ OR BIOS(9,ASC(path$)-65)
    GOSUB fsel_path
    TEXT 12,66,prpath$+STRING$(37-LEN(prpath$),"_")
    old_path$=path$
    GOSUB fsel_do_files
  ELSE
    GOSUB fsel_sort
    GOSUB fsel_slide_set
  ENDIF
RETURN
> PROCEDURE fsel_select
  old_nlist%=nlist%
  nlist%=(my-95) DIV 8
  IF PTST(56,96+(8*nlist%)+4)=0
    '
    IF slected%
      PUT 44,96+(8*old_nlist%),inverse$,10
    ENDIF
    PUT 44,96+(8*nlist%),inverse$,10
    slected%=TRUE
    '
    IF sort$="N"
      dd$=file_list$(place_name%(start_list%+nlist%))
    ELSE
      dd$=file_list$(place_type%(start_list%+nlist%))
    ENDIF
    MID$(dd$,11,1)="."
    '
    WHILE INSTR(dd$," ")
      dd$=LEFT$(dd$,INSTR(dd$," ")-1)+RIGHT$(dd$,LEN(dd$)-INSTR(dd$," "))
    WEND
    '
    IF dd$="________.___"
      dd$=""
    ENDIF
    '
    IF RIGHT$(dd$)="."
      dd$=LEFT$(dd$,LEN(dd$)-1)
    ENDIF
    '
    IF LEFT$(dd$)=CHR$(7)
      dd$=RIGHT$(dd$,LEN(dd$)-1)
      GOSUB fsel_next_folder
    ELSE
      IF sfile$<>dd$
        sfile$=dd$
        GOSUB fsel_sfile
        '
        GOSUB fsel_cursor
        '
        IF LEN(sfend$)<9
          ccp%=300+LEN(sfend$)
        ELSE
          ccp%=400+LEN(sfend$)
        ENDIF
        '
        TEXT 212,99,prsfile$
        GOSUB fsel_cursor
      ELSE
        GOSUB fsel_cursor
        TEXT 212,99,prsfile$
        GOSUB fsel_cursor
      ENDIF
      new_ccp%=ccp%
      IF old_path$<>path$
        GOSUB fsel_path
        TEXT 12,66,prpath$+STRING$(37-LEN(prpath$),"_")
        old_path$=path$
        GOSUB fsel_do_files
      ENDIF
    ENDIF
  ENDIF
  '
RETURN
> PROCEDURE fsel_change_drive
  drive_box_number%=(mx-drive_box_origin%) DIV 26
  path$=MID$(connected_drive$,drive_box_number%+1,1)+":\"+file_spec$
  PUT drive_box_origin%+(26*drive_box_number%),31,indrv$,10
  TEXT 232,13,SPACE$(8)                             ! Clear free space
  GOSUB fsel_inverse
  GOSUB fsel_file_reset
  GOSUB fsel_path_reset
  PAUSE 5
  PUT drive_box_origin%+(26*drive_box_number%),31,indrv$,10
RETURN
> PROCEDURE fsel_uni_extend
  '
  GOSUB fsel_inverse
  GOSUB fsel_file_reset
  old_path$=path$
  '
  PUT 167,29,inext$,10
  PAUSE 7
  PUT 167,29,inext$,10
  '
  old_path$=path$
  path$=LEFT$(path$,RINSTR(path$,"\"))+"*.*"
  GOSUB fsel_path_reset
  '
RETURN
> PROCEDURE fsel_next_folder
  path$=LEFT$(path$,RINSTR(path$,"\"))+dd$+"\"+file_spec$
  GOSUB fsel_inverse
  GOSUB fsel_file_reset
  GOSUB fsel_path_reset
RETURN
> PROCEDURE fsel_prev_folder
  TEXT 31,86,CHR$(7)
  path$=LEFT$(path$,RINSTR(path$,"\")-1)
  IF LEN(path$)>3
    path$=LEFT$(path$,RINSTR(path$,"\")-1)
  ENDIF
  path$=path$+"\"+file_spec$
  GOSUB fsel_inverse
  GOSUB fsel_file_reset
  GOSUB fsel_path_reset
  TEXT 31,86,CHR$(5)
RETURN
> PROCEDURE fsel_wipe_slate
  GOSUB fsel_inverse
  GOSUB fsel_file_reset
  IF old_path$<>path$
    GOSUB fsel_path
    TEXT 12,66,prpath$+STRING$(37-LEN(prpath$),"_")
    old_path$=path$
  ENDIF
  GOSUB fsel_do_files
RETURN
' *********
> PROCEDURE fsel_file_update
  '
  GOSUB fsel_slide_reset
  '
  PBOX 40,92,159,179
  '
  IF sort$="N"
    FOR n%=start_list% TO start_list%+9
      TEXT 44,102+(n%-start_list%)*8,MID$(file_list$(place_name%(n%)),1,2)
      TEXT 58,102+(n%-start_list%)*8,MID$(file_list$(place_name%(n%)),3)
    NEXT n%
  ELSE
    FOR n%=start_list% TO start_list%+9
      TEXT 44,102+(n%-start_list%)*8,MID$(file_list$(place_type%(n%)),1,2)
      TEXT 58,102+(n%-start_list%)*8,MID$(file_list$(place_type%(n%)),3)
    NEXT n%
  ENDIF
  '
RETURN
> PROCEDURE fsel_fast_update(move%)
  '
  GOSUB fsel_slide_reset
  '
  IF move%
    GET 40,95,170,166,temp$
    IF sort$="N"
      TEXT 44,102,MID$(file_list$(place_name%(start_list%)),1,2)
      TEXT 58,102,MID$(file_list$(place_name%(start_list%)),3)
    ELSE
      TEXT 44,102,MID$(file_list$(place_type%(start_list%)),1,2)
      TEXT 58,102,MID$(file_list$(place_type%(start_list%)),3)
    ENDIF
    PUT 40,103,temp$
  ELSE
    GET 40,103,170,174,temp$
    PUT 40,95,temp$
    IF sort$="N"
      TEXT 44,174,MID$(file_list$(place_name%(start_list%+9)),1,2)
      TEXT 58,174,MID$(file_list$(place_name%(start_list%+9)),3)
    ELSE
      TEXT 44,174,MID$(file_list$(place_type%(start_list%+9)),1,2)
      TEXT 58,174,MID$(file_list$(place_type%(start_list%+9)),3)
    ENDIF
  ENDIF
  '
  PAUSE 4
  '
RETURN
> PROCEDURE fsel_slide_reset
  '
  IF slected%
    PUT 44,96+(8*nlist%),inverse$,10
    slected%=FALSE
  ENDIF
  '
  BOX 180,103,199,167
  '
  start_block%=103+CINT((start_list%-1)*one_bit)
  end_block%=CINT(start_block%+block_len)
  '
  IF start_list%=1
    start_block%=103
    end_block%=CINT(start_block%+block_len)
  ENDIF
  IF start_list%=count%-9
    end_block%=167
    start_block%=CINT(end_block%-block_len)
  ENDIF
  '
  IF start_block%=103
    start_list%=1
  ENDIF
  IF end_block%=167
    start_list%=count%-9
  ENDIF
  '
  BOUNDARY 0
  DEFFILL 1,f$
  PBOX 181,104,198,MAX(104,start_block%-1)
  PBOX 181,MIN(166,end_block%+1),198,166
  DEFFILL 0,1,0
  PBOX 181,start_block%+1,198,end_block%-1
  BOUNDARY 1
  BOX 180,start_block%,199,end_block%
  '
RETURN
> PROCEDURE fsel_slide_set
  '
  IF slected%
    PUT 44,96+(8*nlist%),inverse$,10
    slected%=FALSE
  ENDIF
  start_list%=1
  start_block%=103
  '
  IF count%<11
    one_bit=0
    block_len=64
    end_block%=167
  ELSE
    one_bit=64/count%
    block_len=640/count%
    end_block%=start_block%+block_len
  ENDIF
  '
  BOUNDARY 0
  DEFFILL 1,f$
  PBOX 181,104,198,MAX(104,start_block%-1)
  PBOX 181,MIN(166,end_block%+1),198,166
  DEFFILL 0,1,0
  PBOX 181,start_block%+1,198,end_block%-1
  BOUNDARY 1
  BOX 180,start_block%,199,end_block%
  '
  PBOX 40,92,159,179
  '
  IF sort$="N"
    FOR n%=start_list% TO start_list%+9
      TEXT 44,102+(n%-start_list%)*8,MID$(file_list$(place_name%(n%)),1,2)
      TEXT 58,102+(n%-start_list%)*8,MID$(file_list$(place_name%(n%)),3)
    NEXT n%
  ELSE
    FOR n%=start_list% TO start_list%+9
      TEXT 44,102+(n%-start_list%)*8,MID$(file_list$(place_type%(n%)),1,2)
      TEXT 58,102+(n%-start_list%)*8,MID$(file_list$(place_type%(n%)),3)
    NEXT n%
  ENDIF
  '
RETURN
> PROCEDURE fsel_slide
  '
  DEFLINE -43690
  GRAPHMODE 3
  '
  old_start_list%=start_list%
  '
  displacement=MOUSEY-start_block%
  newstmy=start_block%
  newendmy=end_block%
  '
  BOX 180,newstmy,199,newendmy
  '
  WHILE MOUSEK=1
    oldstmy=newstmy
    oldendmy=newendmy
    newstmy=MOUSEY-displacement
    IF newstmy<103
      newstmy=103
    ENDIF
    newendmy=newstmy+block_len
    IF newendmy>167
      newendmy=167
      newstmy=167-block_len
    ENDIF
    IF oldstmy<>newstmy
      BOX 180,oldstmy,199,CINT(oldendmy)
      BOX 180,newstmy,199,CINT(newendmy)
    ENDIF
  WEND
  '
  GRAPHMODE 1
  DEFLINE 0
  '
  start_block%=newstmy
  end_block%=newendmy
  '
  start_list%=((start_block%-102)/one_bit)+1
  '
  IF start_list%<>old_start_list%
    GOSUB fsel_inverse
    GOSUB fsel_file_update
  ELSE
    GOSUB fsel_slide_reset
  ENDIF
  '
RETURN
> PROCEDURE fsel_slide_handle
  '
  IF my>start_block% AND my<end_block%
    GOSUB fsel_slide
    '
  ELSE IF my>89 AND my<102 AND start_list%<>1
    GOSUB fsel_slide_one_up
    '
  ELSE IF my>168 AND my<182 AND start_list%+9<>count%
    GOSUB fsel_slide_one_down
    '
  ELSE IF my>103 AND my<start_block%
    GOSUB fsel_slide_ten_up
    REPEAT
    UNTIL MOUSEK=0
    '
  ELSE IF my>end_block% AND my<167
    GOSUB fsel_slide_ten_down
    REPEAT
    UNTIL MOUSEK=0
  ENDIF
  '
RETURN
> PROCEDURE fsel_slide_one_up
  '
  start_list%=MAX((start_list%-1),1)
  start_block%=MAX((start_block%-one_bit),103)
  '
  IF start_list%=1
    start_block%=103
  ELSE
    start_block%=MAX(start_block%,104)
  ENDIF
  end_block%=start_block%+block_len
  '
  GOSUB fsel_inverse
  GOSUB fsel_fast_update(TRUE)
  '
RETURN
> PROCEDURE fsel_slide_one_down
  '
  start_list%=MIN((start_list%+1),count%-9)
  start_block%=MIN((start_block%+one_bit),167-block_len)
  '
  IF start_list%=count%-9
    start_block%=167-block_len
    end_block%=167
  ELSE
    end_block%=MIN(start_block%+block_len,166)
  ENDIF
  '
  GOSUB fsel_inverse
  GOSUB fsel_fast_update(FALSE)
  '
RETURN
> PROCEDURE fsel_slide_ten_up
  '
  start_list%=MAX((start_list%-10),1)
  start_block%=MAX((start_block%-block_len),103)
  '
  IF start_list%=1
    start_block%=103
  ENDIF
  end_block%=start_block%+block_len
  '
  GOSUB fsel_inverse
  GOSUB fsel_file_update
  '
RETURN
> PROCEDURE fsel_slide_ten_down
  '
  start_list%=MIN((start_list%+10),count%-9)
  start_block%=MIN((start_block%+block_len),167-block_len)
  '
  IF start_list%=count%-9
    start_block%=167-block_len
    end_block%=167
  ELSE
    end_block%=start_block%+block_len
  ENDIF
  '
  GOSUB fsel_inverse
  GOSUB fsel_file_update
  '
RETURN
' *********
