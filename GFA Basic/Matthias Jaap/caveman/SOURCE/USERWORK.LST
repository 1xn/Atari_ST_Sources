> FUNCTION f_open(a$)
$F%
'
' OPEN "I"
'
a$=a$+CHR$(0)
'
RETURN GEMDOS(61,L:V:a$,0)
ENDFUNC
> FUNCTION f_lof(fh&)
$F%
LOCAL pos%,lof%
'
' LOF(#1)
'
pos%=GEMDOS(66,L:0,fh&,1)                       ! LOC(#1)
lof%=GEMDOS(66,L:0,fh&,2)                       ! SEEK #1,LOF(#1)
'
~GEMDOS(66,L:pos%,fh&,0)                        ! SEEK #1,LOC(#1)
'
RETURN lof%
ENDFUNC
> FUNCTION f_create(a$)
$F%
'
' OPEN "O"
'
a$=a$+CHR$(0)
'
RETURN GEMDOS(60,L:V:a$,0)
ENDFUNC
> FUNCTION f_input$(fh&)
'
' Erstellt am 02.06.1996 von Holger Herzog
'
' Version 1.0
'
' Liest bis Dateiende oder bis zum nÑchsten CR+LF bzw. LF+CR aus der
' Datei fh&. In Anlehnung an Gregors 1-Byte-Variante, aber deutlich
' schneller.
'
'     fh&             ==> GEMDOS-Kennung der Datei
'     f_input$()      <== Gelesene Zeile
'
' Version 1.0         02.06.1996 Holger Herzog
'
LOCAL a$,b$,c$,neu$
LOCAL pos1&,pos2&,pos&
'
' LINE INPUT #1,a$
'
b$=CHR$(13)+CHR$(10)                ! Linefeed 1
c$=CHR$(10)+CHR$(13)                ! Linefeed 2
'
REPEAT
LET neu$=SPACE$(80)
LET neu$=LEFT$(neu$,GEMDOS(63,fh&,L:80,L:V:neu$))
LET a$=a$+neu$
LET pos1&=INSTR(a$,b$)
LET pos2&=INSTR(a$,c$)
IF pos1&=0
LET pos&=pos2&
ELSE IF pos2&=0
LET pos&=pos1&
ELSE
LET pos&=MIN(pos1&,pos2&)
ENDIF
UNTIL pos&<>0 OR LEN(neu$)=0
'
IF pos&>0
~GEMDOS(66,L:SUCC(SUB(pos&,LEN(a$))),fh&,1)
LET a$=LEFT$(a$,PRED(pos&))
ENDIF
'
RETURN a$
ENDFUNC
> FUNCTION f_println(fh&,a$)
$F%
'
' PRINT #1,a$
'
a$=a$+CHR$(13)+CHR$(10)
'
RETURN GEMDOS(64,fh&,L:LEN(a$),L:V:a$)
ENDFUNC
> FUNCTION load_dic(datei_name$)
f_handle&=@f_open(datei_name$)
IF f_handle&=-33
xm|=@alert_wind(1,5,"")
RETURN FALSE
ELSE IF f_handle&<0
RETURN FALSE
ENDIF
len_dic%=@f_lof(f_handle&)
dic_adr%=@mxalloc_global(len_dic%)
IF dic_adr%<=0
RETURN FALSE
ENDIF
~@f_bget(f_handle&,dic_adr%,len_dic%)
~@f_close(f_handle&)
RETURN TRUE
ENDFUNC
> PROCEDURE ersetzen
i%=0
cavetranslation_var$=cavesatz_var$
mydic_adr%=dic_adr%
LET ende%=ADD(mydic_adr%,len_dic%)-1
WHILE mydic_adr%<ende%
a$=@memory_line_read$(ende%,mydic_adr%)
wort1$=@teil$(a$)
cavetranslation_var$=@replace$(cavetranslation_var$,wort1$,a$)
WEND
@rsc_set_text(tree&,cavetranslation&,cavetranslation_var$)
@rsc_ob_reset(main&,cavetranslation&)
'                   cavetranslation&,cavetranslation_var$)
RETURN
> FUNCTION teil$(VAR a$)
LOCAL b$,a&
a&=INSTR(a$,",")
IF a&
b$=LEFT$(a$,PRED(a&))
a$=MID$(a$,SUCC(a&))
ELSE
b$=a$
a$=""
ENDIF
RETURN b$
ENDFUNC
> FUNCTION memory_line_read$(endadr%,VAR loc%)
'
' Liest bis Ende oder bis zum nÑchsten CR+LF bzw. LF+CR aus einem
' Speicherblock.
'
' Anm.: Die ZeilenlÑnge wird in dieser Version aus GeschwindigkeitsgrÅnden
'       auf 256 Bytes begrenzt. Bei Bedarf im Listing den Wert Ñndern.
'
'     endadr%             ==> Letzte Adresse des Blocks
'     loc%                <=> Leseposition (wird durch das Lesen mitgefÅhrt)
'     memory_line_read$() <== Gelesene Zeile
'
' Version 1.0         02.06.1996 Holger Herzog
' Version 1.1         29.06.1999 Matthias Jaap
'                     - CR oder LF markiert Zeilenende (fÅr Mac und Unix)
'
LOCAL return$,byte|,lf!
LOCAL len&,pos&,pos1&,pos2&
'
LET len&=MIN(908,SUB(endadr%,loc%))   ! Hier max. ZeilenlÑnge+2
LET return$=SPACE$(len&)
BMOVE loc%,V:return$,len&
'
pos3&=INSTR(return$,MKI$(&HA0D))
pos4&=INSTR(return$,MKI$(&HD0A))
IF pos3&=0 AND pos4&=0
pos1&=INSTR(return$,CHR$(14))
pos2&=INSTR(return$,CHR$(13))
inc&=1
ELSE
SWAP pos1&,pos3&
SWAP pos2&,pos4&
inc&=2
ENDIF
'
IF pos1&=0
IF pos2&<>0
LET len&=PRED(pos2&)
ADD loc%,inc&
ENDIF
ELSE IF pos2&=0
LET len&=PRED(pos1&)
ADD loc%,inc&
ELSE
LET len&=PRED(MIN(pos1&,pos2&))
ADD loc%,inc&
ENDIF
'
ADD loc%,len&
'
RETURN LEFT$(return$,len&)
'
ENDFUNC
> FUNCTION replace$(strng$,raus$,rein$)
LOCAL right$,len_dif&,pos&,beg&
len_dif&=LEN(rein$)-LEN(raus$)
'
pos&=INSTR(strng$,raus$)
WHILE pos&
'
right$=MID$(strng$,pos&+LEN(raus$))
IF LEN(strng$)+len_dif&<=32767
strng$=LEFT$(strng$,pos&-1)+rein$+right$
ENDIF
'
beg&=pos&+1+len_dif&
pos&=INSTR(beg&,strng$,raus$)
WEND
'
RETURN strng$
'
ENDFUNC
DEFFN f_close(fh&)=GEMDOS(62,fh&)
DEFFN f_bget(fh&,a%,l%)=GEMDOS(63,fh&,L:l%,L:a%)
' ------------------------------------------------------------------------
ENDFUNC
> PROCEDURE user_rsc_var_init
'
'  Hier mÅssen alle Status-Variablen korrekt vorbelegt werden.
'  Ebenso mÅssen die Arrays fÅr die Listboxen hier dimensioniert
'  und initialisiert werden.
'
'  Diese Prozedur wird einmal beim Programmstart durchlaufen.
'  Danach werden die entsprechenden Dialogobjekte nach
'  den hier getÑtigten Einstellungen eingerichtet.
'
'  Werden die Befehle DIM, LET und CLR benutzt, um die Werte zu
'  setzen, so erkennt faceVALUE dies beim Update. Nicht erkannte
'  Werte werden beim Update wieder eingefÅgt.
'
'    LET xxx_var&=5        => wird erkannt
'    xxx_var&=5            => wird nicht erkannt
'
'  Sollen einige Werte hier explizit NICHT gesetzt werden, so
'  kann die entsprechende Zeile mit REM auskommentiert werden:
'
'    REM LET xxx_var&=5    => wird erkannt
'    ' LET xxx_var&=5      => wird nicht erkannt
'
current_menubar&=mainmenu&      !in diese Variable den MenÅbaum-Index eintragen
' current_menubar&=-1
'
' snap_windows!=TRUE
quit_alert!=TRUE
'
LET cavesatz_var$=""                      ! max LÑnge: 30 - Baum: main&
LET cavetranslation_var$=""               ! max LÑnge: 30 - Baum: main&
LET wordhuman_var$=""                     ! max LÑnge: 30 - Baum: editdic&
DIM humanlst_arr$(6)                      ! bitte wÑhlen - Baum: editdic&
LET humanlst_ndx&=7                      ! Anzahl EintrÑge - Baum: editdic&
LET humanlst_var&=1                       ! ausgewÑhlte Option - Baum: editdic&
LET humanlst_scrl&=0                       ! Anfangs-Scrollposition
LET wordcave_var$=""                      ! max LÑnge: 30 - Baum: editdic&
LET cicon8_var!=FALSE                     ! TRUE/FALSE - Baum: icfyicon&
animate_background_alert!=FALSE
animate_sound_off!=FALSE
'
' ÍÍwsnippetÍÍ  - Wrinkle-Code: (dieses Flag nicht lîschen oder verÑndern)
' ÍÍwsnippetÍÍ  - Ende des Wrinkle-Codes: (dieses Flag nicht lîschen oder verÑndern)
'
RETURN
> PROCEDURE user_on_open
'
'
' ÍÍwsnippetÍÍ  - Wrinkle-Code: (dieses Flag nicht lîschen oder verÑndern)
@gemscriptcmd_init                                         !ÍÍFVW:GEMScriptCMDÍÍ
' ÍÍwsnippetÍÍ  - Ende des Wrinkle-Codes: (dieses Flag nicht lîschen oder verÑndern)
'
IF dummy!=FALSE
dummy!=TRUE
fehler!=@load_dic(program_path$+"caveman.dic")
ENDIF
RETURN
> PROCEDURE user_rsc_interact(index&,tree&,object&,mc&,sub_me&)
'
'  <index&> Index des Fensters in window_array&(index&,x)
'           Wenn das Objekt aus der MenÅzeile ist: <index&>=-1
'   <tree&> Index des Objektbaumes
' <object&> Index des selektierten Objektes (Åber Mausklick oder Shortcut)
'     <mc&> Anzahl der Mausklicks (1=normal oder Shortcut / 2=Doppelklick)
' <sub_me&> ausgewÑhlter MenÅeintrag in Popup-MenÅs
'
SELECT tree&
'
' ------------------------------------------------------------------------
'
CASE mainmenu&
SELECT object&
CASE caveabout&
~@win_open_dialog(2,about&,icfyicon&)
CASE opentransl&
~@win_open_dialog(2,main&,icfyicon&)
CASE newdic&
CASE caveopen&
CASE cavesave&
CASE caveedit&
CASE cavequit&
exit_program!=TRUE
CASE dosanddonts&
CASE whatsnew&
ENDSELECT
'
' ------------------------------------------------------------------------
'
CASE main&
SELECT object&
CASE translate&
@ersetzen
ENDSELECT
'
' ------------------------------------------------------------------------
'
CASE editdic&
SELECT object&
CASE humanlst&
LET humanlst_var&=@open_listbox_radio(index&,sub_me&,object&,humanlst_var&,humanlst_ndx&,humanlst_arr$(),humanlst_scrl&)
CASE caveset&
CASE cavenew&
CASE cavedel&
ENDSELECT
'
' ------------------------------------------------------------------------
'
CASE dos&
SELECT object&
CASE dosclose&
ENDSELECT
'
' ------------------------------------------------------------------------
'
CASE about&
SELECT object&
CASE aboutclose&
@win_close_dialog(about&)
ENDSELECT
'
' ------------------------------------------------------------------------
'
'
' ÍÍwsnippetÍÍ  - Wrinkle-Code: (dieses Flag nicht lîschen oder verÑndern)
' ÍÍwsnippetÍÍ  - Ende des Wrinkle-Codes: (dieses Flag nicht lîschen oder verÑndern)
'
'
CASE fvt_altr&
alert_result&=SUB(object&,7)
@win_close_dialog(fvt_altr&)
'
' ------------------------------------------------------------------------
'
ENDSELECT
RETURN
> PROCEDURE user_rsc_context_help(tree&)
'
' Von hier aus wird der ST-Guide aufgerufen. Bitte die Namen
' der entsprechenden Hilfeseiten eintragen:
'
SELECT tree&
' ÍÍwsnippetÍÍ  - Wrinkle-Code: (dieses Flag nicht lîschen oder verÑndern)
' ÍÍwsnippetÍÍ  - Ende des Wrinkle-Codes: (dieses Flag nicht lîschen oder verÑndern)
DEFAULT
@call_st_guide("CAVEMAN.hyp","")
ENDSELECT
RETURN
> FUNCTION user_rsc_bubble_help$(tree&,object&)
LOCAL help_str$
help_str$=""
'
' Hier kînnen die Texte fÅr die BubbleGEM-Hilfen eingetragen werden:
' help_str$="Mein Hilfetext"
'
' Beispiel:
' SELECT tree&
' CASE my_dialog&
'   SELECT object&
'   CASE my_object&
'     help_str$="Hier ist mein Beispiel-Hilfetext...!"
'   ENDSELECT
' ENDSELECT
'
'
SELECT tree&
CASE main&
SELECT object&
CASE cavesatz&
help_str$=""
CASE cavetranslation&
help_str$=""
CASE translate&
help_str$=""
ENDSELECT
'
' ----------------------------------------------------------------------------
CASE editdic&
SELECT object&
CASE wordhuman&
help_str$=""
CASE humanlst&
help_str$=""
CASE wordcave&
help_str$=""
CASE caveset&
help_str$=""
CASE cavenew&
help_str$=""
CASE cavedel&
help_str$=""
ENDSELECT
'
' ----------------------------------------------------------------------------
CASE dos&
SELECT object&
CASE dosclose&
help_str$=""
ENDSELECT
'
' ----------------------------------------------------------------------------
CASE icfyicon&
SELECT object&
CASE cicon8&
help_str$=""
ENDSELECT
'
' ----------------------------------------------------------------------------
CASE about&
SELECT object&
CASE aboutclose&
help_str$=""
ENDSELECT
'
' ----------------------------------------------------------------------------
'
' ÍÍwsnippetÍÍ  - Wrinkle-Code: (dieses Flag nicht lîschen oder verÑndern)
' ÍÍwsnippetÍÍ  - Ende des Wrinkle-Codes: (dieses Flag nicht lîschen oder verÑndern)
'
' ----------------------------------------------------------------------------
ENDSELECT
IF help_str$=""
help_str$="#FÅr dieses Objekt ist keine Kontext-Hilfe verfÅgbar." !***if no bubble help
ENDIF
RETURN help_str$
ENDFUNC
> PROCEDURE user_gem_messages(mx&,my&,ks&,m0&,m1&,m2&,m3&,m4&,m5&,m6&,m7&)
'
' Any message the faceVALUE engine do not understand, goes to this proc.
' Here, you are free to implement your own communication protocols, or
' to ignore unknown messages completly and leave it empty.
'
' <mx&> and <my&> are the mouse coordinates at the time of the message
' <ks&> is the keyboard state at the time of the message
' <m0&> to <m7&> are the actual words in the message
'
' ÍÍwsnippetÍÍ  - Wrinkle-Code: (dieses Flag nicht lîschen oder verÑndern)
@gemscriptcmd_messages(m0&,m1&,m2&,m3&,m4&,m5&,m6&,m7&)    !ÍÍFVW:GEMScriptCMDÍÍ
' ÍÍwsnippetÍÍ  - Ende des Wrinkle-Codes: (dieses Flag nicht lîschen oder verÑndern)
'
RETURN
> FUNCTION user_quit_ok
$F%
exit_program!=FALSE
IF acc!
RETURN TRUE
ELSE
'
' User wants to quit
' Return value: TRUE  to quit
'               FALSE to ignore
'
' If you want to use an alert, you may (should?:-) want to use
' a windowed alert...
'
' The rest of the code in this function should *NOT* be altered!
'
' ÍÍwsnippetÍÍ  - Wrinkle-Code: (dieses Flag nicht lîschen oder verÑndern)
' ÍÍwsnippetÍÍ  - Ende des Wrinkle-Codes: (dieses Flag nicht lîschen oder verÑndern)
'
RETURN TRUE
'
ENDIF
ENDFUNC
> PROCEDURE user_on_exit
'
' This procedure is called when you exit the program. If you need to
' release memory, restore the original desktop or do other
' "cleaning up" tasks, do it here.
'
' If run as an accessory, this procedure is called EVERY TIME
' THE ACCESSORY IS CLOSED. (Remember: An accessory is NEVER exited)
'
' ÍÍwsnippetÍÍ  - Wrinkle-Code: (dieses Flag nicht lîschen oder verÑndern)
@gemscriptcmd_exit                                         !ÍÍFVW:GEMScriptCMDÍÍ
' ÍÍwsnippetÍÍ  - Ende des Wrinkle-Codes: (dieses Flag nicht lîschen oder verÑndern)
'
IF dic_adr%>0 AND acc!=FALSE
~MFREE(dic_adr%)
ENDIF
RETURN
'
' ------------------------------------------------------------------------
' WRINKLE-Callback-Routinen: bei Bedarf ausfÅllen ...
'
> FUNCTION user_gemscriptcmd_command(cmd$)
$F%
' -----------------------------------------------------------------------------
' GEMScript  Command-Receive V1.0   Ω1998 by Holger Herzog
'
'
' This procedure is called, when a gemscript-command
' is received. The command is stored in cmd$ (Upper-Case!).
'
' You can get the first parameter by using:
'
'  par_exist!=@gemscriptcmd_par(par$)
'
' If there's no parameter, par_exist! will be FALSE.
' The value of the parameter will be stored in par$.
' Get the next par using the same call, untill the
' function returns FALSE.
'
' For some commands, the sender should additionaly return
' a string-value. You can set this value by calling
' the procedure @gemscriptcmd_return(string$).
'
' Set the return-value!
' RETURN 0   Command ok (executed)
' RETURN 2   Command failed (an error occuderd)
' RETURN 3   Command unknown
'
' Example:
'
IF cmd$="APPGETLONGNAME"
@gemscriptcmd_return(CHAR{faceval_sys%+2854})    ! get long AppName
RETURN 0
ELSE IF cmd$="QUIT"
LET exit_program!=TRUE
RETURN 0
'
ENDIF
'
' ÍÍwsnippetÍÍ
' ÍÍwsnippetÍÍ
'
RETURN 1      ! command unknown
ENDFUNC
