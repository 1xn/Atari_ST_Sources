> PROCEDURE user_on_open
'
' This procedure is called when the program is run, after the RSC is
' loaded and just before the main loop. You can open program windows,
' toolboxes etc. here, or  init things for your program like
' loading an *.INF or .DAT file.
'
' If run as an accessory, this procedure is called EVERY TIME
' THE ACCESSORY IS OPENED. If you need to do anything just ONCE,
' like disable menu-entries spesific to PROGRAM execution, set a global
' flag here to avoid doing things EVERY time the accessory is opened.
'
' êêwsnippetêê  - Wrinkle code: (don't change or delete this flag)
' êêwsnippetêê  - End of Wrinkle code: (don't change or delete this flag)
'
lustig&=@win_open_dialog(2,spass&,-1)
tree%=@xrsrc_gaddr(0,spass&)
r&=OBJC_OFFSET(tree%,yesbutton&,yesx&,yesy&)
@aes_rectangle_start(1,yesx&,yesy&,100,100)                         !call
r&=OBJC_OFFSET(tree%,nobutton&,x&,y&)
@aes_rectangle_start(2,x&,y&,100,100)                         !call
'  yes!=TRUE  !"Ja" ist links
RETURN
> PROCEDURE user_rsc_interact(index&,tree&,object&,mc&,sub_me&)
'
'  <index&> is the index of this window in window_array&(index&,x)
'           If the object tree is the normal menu bar, <index&>=-1
'   <tree&> is the object tree number
' <object&> is the object that was selected (clicked on OR shortcut)
'     <mc&> is the number of clicks (1=normal/2=double clicked/1 if shortcut)
' <sub_me&> is the chosen menuitem in a popup menu
'
SELECT tree&
'
' ------------------------------------------------------------------------
'
CASE spass&
SELECT object&
CASE urlaub&
exit_program!=TRUE
ENDSELECT
'
' ------------------------------------------------------------------------
'
'
' êêwsnippetêê  - Wrinkle code: (don't change or delete this flag)
' êêwsnippetêê  - End of Wrinkle code: (don't change or delete this flag)
'
ENDSELECT
RETURN
> PROCEDURE user_aes_rectangle_watch(num&,mode&)
'
' This procedure will be called, when a rectangle-event occures.
' Have a look into the docu who to start and stop rectangle-watch.
'
' num& is the number of the rectangle (1 or 2)
' mode& is 0 (mouse has left the rectangle)
' mode& is 1 (mouse has entered the rectangle)
'
' êêwsnippetêê  - Wrinkle code: (don't change or delete this flag)
' êêwsnippetêê  - End of Wrinkle code: (don't change or delete this flag)
'
IF mode&=1  !Ver„nderung nur bei Mauseintritt
IF num&=1   !AND yes!=TRUE
@rsc_ob_disable(spass&,yesbutton&,TRUE)
@rsc_ob_disable(spass&,nobutton&,FALSE)
ELSE
@rsc_ob_disable(spass&,nobutton&,TRUE)
@rsc_ob_disable(spass&,yesbutton&,FALSE)
ENDIF
index&=@win_get_index(lustig&)
@win_send_redraw(index&,-1,-1,-1,-1)
ENDIF
RETURN
> FUNCTION user_quit_ok
$F%
exit_program!=FALSE
IF acc!
RETURN TRUE
ELSE
'
' User wants to quit
' Return value: TRUE  to quit
'               FALSE to ignore
'
' The following SELECT-CASE-ENDSELECT structure is just an example.
' If you want to use an alert,  you may (should?:-) want to use
' a windowed alert...
'
' The rest of the code in this function should *NOT* be altered!
'
' êêwsnippetêê  - Wrinkle code: (don't change or delete this flag)
' êêwsnippetêê  - End of Wrinkle code: (don't change or delete this flag)
'
RETURN TRUE
'
ENDIF
ENDFUNC
> PROCEDURE win_place_tree(handle&)
LOCAL x&,y&,d&
LOCAL index&
~WIND_GET(handle&,4,x&,y&,d&,d&)
LET index&=@win_get_index(handle&)
OB_X(window_tree%(index&,0),0)=SUB(x&,window_array&(index&,15))
OB_Y(window_tree%(index&,0),0)=y&
tree%=@xrsrc_gaddr(0,spass&)
x&=yesx&
y&=yesy&
r&=OBJC_OFFSET(tree%,yesbutton&,yesx&,yesy&)
IF x&<>yesx& OR y&<>yesy&
'
@aes_rectangle_start(1,yesx&,yesy&,120,32)                   !call
r&=OBJC_OFFSET(tree%,nobutton&,x&,y&)
' ALERT 1,"move"+STR$(y&),1,"ok",xm|
@aes_rectangle_start(2,x&,y&,120,32)                         !call
ENDIF
RETURN
