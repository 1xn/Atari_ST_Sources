' MENUFIND.LST by Gair Shields 3/8/94.
'
' Using the functions shown below, it is possible to write software
' with keyboard shortcuts for the menu items, simply by placing the
' correct key in the resource menu.
' The procedure keyboard_event() receives keyboard information from
' evnt_multi() then calls menu_search() to find a matching keyboard
' shortcut in the menu tree. If it exists the function returns TRUE
' and the variables title& and item& are updated accordingly.
' menu_event() is then called and the keypress is treated as a menu
' event.
'
' The @menu_search() function relies on the menu tree being ordered
' correctly. If anyone can come up with a better routine which uses
' the OB_TAIL pointer, it would be much safer.
'
' ---------------------------------------______---------------------
' In your menu tree...                  | File |
' --------------------------------------|ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ|-------
'                                       |  New           ^N |
' CONTROL  = ^                          |  Open...       ^O |
' SHIFT    =                           |  Close         ^W |
' HELP     = [Help]                     |  Save          ^S |
' UNDO     = [Undo]                     |  Save As...   ^S |
' INSERT   = [Ins]                      |-------------------|
' CLR/HOME = [Clr]                      |  Quit          ^Q |
' DELETE   = [Del]                      |___________________|
' F1..F20  = F1..F10
' ------------------------------------------------------------------
'
' tree% = address of resource menu tree returned by rsrc_gaddr()
' All variables are LOCAL therefore these procedures can be merged
' straight into existing programs without messing anything up.
'
> PROCEDURE menu_event(tree%,title&,item&)
  SELECT item&
    '
    ' put your CASE statements here!
    '
  ENDSELECT
  ~MENU_TNORMAL(tree%,title&,1)
RETURN
> PROCEDURE keyboard_event(tree%,key&,kstate&)
  LOCAL scan&,obj&,k$,title&,item&,ktab%
  scan&=SHR&(key&,8)
  key&=key& AND &HFF
  SELECT scan&                  !Use scan code for Help,Undo and F1-F20
  CASE &H61
    k$="[Undo]"
  CASE &H62
    k$="[Help]"
  CASE &H47
    k$="[Clr]"
  CASE &H52
    k$="[Ins]"
  CASE &H3B TO &H44             !F1->F10
    k$="F"+STR$(scan&-&H3A)
  CASE &H54 TO &H5D
    k$="F"+STR$(scan&-&H53)     !F11->F20
  DEFAULT
    k$=""
  ENDSELECT
  IF key&=127                   !Use ASCII code for Delete key (special case)
    k$="[Del]"
  ENDIF
  '
  IF k$<>"" OR BTST(kstate&,2)  !Valid menu key has been pressed
    IF k$=""
      ktab%=XBIOS(16,L:-1,L:-1,L:-1)
      ktab%=LONG{ktab%+8}       !Upper case keyboard table
      k$=CHR$(BYTE{ktab%+scan&})
    ENDIF
    IF BTST(kstate&,2)          !CONTROL pressed
      k$="^"+k$
    ENDIF
    IF kstate& AND 3            !Left or Right Shift key
      k$=CHR$(1)+k$
    ENDIF
    IF @menu_search(tree%,10,k$,title&,item&)
      ~MENU_TNORMAL(tree%,title&,0)
      ~EVNT_TIMER(100)          !let the user see the menu title going black
      @menu_event(tree%,title&,item&)
    ENDIF
  ELSE
    '
    ' Normal keypresses handled here!
    '
  ENDIF
RETURN
FUNCTION menu_search(tree%,ntitles&,k$,VAR title&,item&)
  LOCAL t&,box&,next&,ob&,found!
  DIM titles&(ntitles&)         !Menu must have LESS than ntitles& titles
  CLR ob&,t&,box&,found!
  title&=-1
  WHILE ob&>-1 AND found!=FALSE
    SELECT OB_TYPE(tree%,ob&)
    CASE 20                     !G_BOX
      INC box&
    CASE 32                     !G_TITLE
      titles&(t&)=ob&
      INC t&
    CASE 28                     !G_STRING
      IF RINSTR(CHAR{OB_SPEC(tree%,ob&)},k$)
        item&=ob&
        found!=TRUE
      ENDIF
    ENDSELECT
    next&=OB_HEAD(tree%,ob&)    !follow HEAD pointer
    IF next&=-1
      next&=OB_NEXT(tree%,ob&)  !if HEAD is -1, follow NEXT
    ENDIF
    WHILE next&<ob& AND next&>-1  !Here is where I rely on the sort order of the
      next&=OB_NEXT(tree%,next&)  !object tree. Should really use the TAIL pointer.
    WEND
    ob&=next&
  WEND
  IF found! AND box&>1
    title&=titles&(box&-2)
  ENDIF
  ERASE titles&()
  RETURN (title&>-1)
ENDFUNC
