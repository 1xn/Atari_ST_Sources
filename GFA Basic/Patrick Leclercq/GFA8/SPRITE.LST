'
' ******************************************************
' *                                                    *
' * Cette routine de sprite est en 100% gfa ,elle peut *
' * etre utilis‚e dans tout vos programmes sans aucuns *
' * problŠmes si vous suivez les quelques conseils qui *
' * suivent .                                          *
' *                                                    *
' ******************************************************
'
' ATTENTION: lorsque que vous utilisez cette routine dans
' un de vos programmes vous ne devez pas poss‚der de variables
' s'appelant spy% ,spj% ,pos% ,banque% ,ecran% ,oldx% ,newx%
' sp% ,x% ,y% .En effet il y a des risques de plantage car ces
' variables sont utilis‚es dans cette routine .
'
' Pour appeler cette routine vous devez pr‚ciser la position
' d'affichage ( ex: 160 pour x et 100 pour y ) et le sprite
' que vous voulez afficher ( ex: balle% ) .Ensuite vous precisez
' si vous desirez de la transparence,et enfin vous attribuer un
' nombre … votre sprite ( compris entre 0 et 100 ) ,ce nombre
' vous permettra d'appeler la routine d'effacement ...Prenons un
' exemple ,une balle que l'on pose en 160 pour x ,et 100 pour y,
' on veut de la transparence ( donc  1 ),et 10 sera le nombre du
' sprite pour l'effacement, notre appel s'effectuera ainsi :
' @sprite(160,100,balle%,1,10)
'
' Enfin un dernier conseil :v‚rifier si vous avez charg‚
' votre sprite dans le INLINE pr‚vu … cet effet .Si ce n'est
' pas le cas voici la marche … suivre :positionner le curseur
' vert sur la ligne du programme contenant le INLINE ,appuyer
' sur la touche help du clavier ,ensuite appuyer sur la touche
' L pour loader ( c'est … dire charger en anglais ) et pr‚ciser
' le nom du sprite … charger .
'
'
'
' vous chargez ici votre sprite modifi‚ par 16_16.LST
'
DIM oldx%(100),newx%(100)     ! cette routine peut g‚rer 100 sprites en
'                             ! meme temps avec ‚ffacement
INLINE sprite%,5000
'
PROCEDURE efface(who%)
  '
  ' ***********************************************************
  ' *                                                         *
  ' * routine d'‚ffacement du sprite par rapport … l'ancienne *
  ' * position qui est contenue dans la variable oldx%        *
  ' *                                                         *
  ' ***********************************************************
  '
  '
  ' on additionne  … l'adresse de l'‚cran l'ancienne position
  ' du sprite ,on ‚vite ainsi une addition r‚p‚titive au sein
  ' de l'‚ffacement
  '
  ecran%=ADD(XBIOS(3),oldx%(who%))
  '
  ' notre sprite est haut de 16 lignes ,l'‚cran du ST ‚tant
  ' compos‚ de lignes contenant chacunes 160 octets nous
  ' avons donc 16*160 octets … poser
  '
  FOR i%=0 TO 2400 STEP 160
    '
    ' ecran% contient l'adresse ‚cran
    ' que l'on incr‚mente de 160 octets
    ' et pour tenir compte des plans
    ' on incr‚mente de 4 octets …
    ' chaque ligne .
    ' l'instruction LONG effectue le
    ' transfert de 4 octets en un seule fois
    ' ici on transfert 0 pour ‚ffacer
    '
    LONG{ecran%}=0
    LONG{ADD(ecran%,4)}=0
    LONG{ADD(ecran%,8)}=0
    LONG{ADD(ecran%,12)}=0
    '
    ADD ecran%,160
    '
  NEXT i%
  '
RETURN
'
PROCEDURE sprite(x%,y%,banque%,trans%,who%)
  '
  ' ces variables sont mises … z‚ro pour ‚viter
  ' tout plantage
  '
  spy%=0 ! y%
  spj%=0 ! dec
  pos%=0 ! pas de 8 octets
  pos%=MUL(DIV(x%,16),8)        ! on calcule le pas de huit octets
  spj%=MUL(INT(MOD(x%,16)),256) ! on d‚finit le d‚calage … afficher
  spy%=MUL(y%,160)              ! on multiplit y% par 160
  '
  sp%=ADD(banque%,spj%)               ! on additionne une fois pour toute
  ecran%=ADD(XBIOS(3),ADD(spy%,pos%)) ! pour ‚viter de perdre de la rapidit‚
  '
  ' on sauvegarde la position du sprite pour plus tard
  '
  newx%(who%)=ADD(pos%,spy%)
  '
  '
  ' *********************************************************
  ' *                                                       *
  ' *            routine d'affichage du sprite              *
  ' *    aprŠs l'‚ffacement il faut afficher le sprite      *
  ' * il est compos‚ de 240 octets en 4 plans on se deplace *
  ' *   donc par rapport au plan et par rapport … l'‚cran   *
  ' *                                                       *
  ' *********************************************************
  '
  IF trans%=1     ! si transparence
    FOR i%=0 TO 240 STEP 16
      '
      ' l'instruction OR plac‚e entre de LONG permet
      ' la superposition de 2 sprites sans que l'un
      ' ‚fface l'autre
      '
      LONG{ecran%}=LONG{sp%} OR LONG{ecran%}
      LONG{ADD(ecran%,4)}=LONG{ADD(sp%,4)} OR LONG{ADD(ecran%,4)}
      LONG{ADD(ecran%,8)}=LONG{ADD(sp%,8)} OR LONG{ADD(ecran%,8)}
      LONG{ADD(ecran%,12)}=LONG{ADD(sp%,12)} OR LONG{ADD(ecran%,12)}
      '
      ADD ecran%,160 ! on incr‚mente d'une ligne l'adresse ‚cran
      ADD sp%,16     ! on se d‚place dans la table cr‚e avec 16_16.LST
      '
    NEXT i%
  ELSE       ! si pas transparence
    FOR i%=0 TO 240 STEP 16
      '
      ' en enlevant le OR on perd l'effet de transparence
      ' mais on gagne en rapidit‚
      '
      LONG{ecran%}=LONG{sp%}
      LONG{ADD(ecran%,4)}=LONG{ADD(sp%,4)}
      LONG{ADD(ecran%,8)}=LONG{ADD(sp%,8)}
      LONG{ADD(ecran%,12)}=LONG{ADD(sp%,12)}
      '
      ADD ecran%,160
      ADD sp%,16
      '
    NEXT i%
  ENDIF
  '
  oldx%(who%)=newx%(who%)   ! on sauvegarde l'ancienne position du sprite pour l'‚ffacement
  '
RETURN
