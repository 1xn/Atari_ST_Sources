

 
 
                               Handbook 
 
                 Weller-TOOLS for GFA-Basic V3.0/V2.0 
 
                            V3.02 01/1990 
 
                             Weller-TOOLS 
                       Dipl.-Ing. Clemens Weller 
                      Adalbert-Stifter-Strasse 27 
                       7141 Steinheim a.d. Murr 
                       Telephone (07144) 20 80 27 
                            BTX 07144208027 
 
 
 
 
     The Weller-TOOLS for GFA-Basic are designed as a programming 
environment for GFA-Basic-Programs.So many programmers- hobbyists
and professionals - will be supported especially in debugging and
optimising of programs. 
 
     Finally all ATARI-USERS will profit by better programs, more  
success and joy at work with the ATARI ST computer. 
 
 
  
 
Table of Contents 
 
 
1. INTRODUCTION.................................................5 
 
1.1 EVERDAY STORIES.............................................5 
 
1.2 COMPUTER-Support Programss..................................7 
 
1.3   TOOLS FOR GFA-BASIC.......................................8 
1.3.1 Program-Shells,...........................................8 
1.3.2 Correlation-Analysis:.....................................8 
1.3.3 Outliner..................................................8 
1.3.4 Editors...................................................8 
1.3.5 Converter.................................................9 
1.3.6 OTHER HELP PROGRAMS.......................................9 
 
1.4 WELLER_TOOLS FOR GFA-BASIC AS A DEVELOPMENT ENVIRONMENT....10 
1.4.1 Performance..............................................10 
1.4.2 Cross-Reference-Analyser.................................10 
1.4.3 Flexible Program-shell...................................11 
1.4.4 Outliner.................................................11 
1.4.5 Universal Output Concept.................................11 
1.4.6 Easy to operate..........................................11 
1.4.7 General Features.........................................11 
1.4.8 Public-Domain- and Pro-Version...........................12 
1.4.9 Press-reflection.........................................12 
 
1.5 PROGRAMMING TIPS...........................................13 
 
 
2. INTRODUCTION................................................14 
 
2.1 INSTALLATION...............................................14 
 
2.2 SCREEN SETUP...............................................15 
 
 
3. REFERENCE-SECTION: Function Description.....................16 
 
3.1 WT_GFA.....................................................16 
 
3.2 File.......................................................17 
3.2.1 Load LST-File............................................17 
3.2.2 Output Devices...........................................18 
3.2.3 Screen options...........................................18 
3.2.4 Printer options..........................................19 
3.2.5 Printer-test.............................................19 
3.2.6 Quit.....................................................19 
 
3.3 SHELLS.....................................................20 
3.3.1 Program-Shell: General...................................20 
3.3.2 Configuration of the fixed GFA-Program-shell.............20 
3.3.3 The flexible Program-shell...............................22 
3.3.4 Desktop-Functions........................................23 
3.3.5 Memory Aspects...........................................23 
 
3.4 X-REF......................................................24 
3.4.1 Cross-Reference-Listing : General........................24 
3.4.2 Generate X-REF...........................................25 
3.4.3 Output X-REF.............................................26 
3.4.4 Example: Cross-Reference-Listing.........................27 
3.4.5 Shortcomings.............................................32 
3.4.6 Memory requirements of the X-REF-Function................32 
 
3.5 OUTLINE....................................................33 
3.5.1 Description of OUTLINE...................................33 
3.5.2 Start....................................................36 
3.5.3 Add Keywords.............................................36 
3.5.4 Remove Keywords..........................................36 
3.5.5 Load Keywords............................................36 
3.5.6 Save Keywords............................................36 
3.5.7 Consider Comments........................................36 
3.5.8 Consider Strings.........................................36 
3.5.9 Fold Procedures..........................................37 
3.5.10 List Procedures.........................................38 
3.5.11 List Modules............................................38 
3.5.12 List Single Line Functions..............................38 
3.5.13 List Other(1+ lines) Functions..........................38 
3.5.14 List Local Variables....................................38 
 
3.6   EXTRAS...................................................39 
3.6.1 Printer Listing..........................................39 
3.6.2 Number Listing...........................................40 
3.6.3 Line offset..............................................40 
3.6.4 Remove Comments..........................................40 
3.6.5 Statistics...............................................41 
3.6.6 Datamake.................................................42 
3.6.7 Release Memory...........................................43 
 
3.7 HELP.......................................................44 
3.7.1 Extra-help...............................................44 
3.7.2 Table of Contents........................................44 
3.7.3 Show Chapter.............................................44 
 
 
4. DISTRIBUTION CONCEPT OF WELLER-TOOLS FOR GFA-BASIC..........45 
 
 
5. EXTRAS......................................................46 
 
5.1 FILES NEEDED...............................................46 
 
5.2 FILE-FORMATS...............................................48 
5.2.1 WT_GFA.INF...............................................48 
5.2.2 WT_GFA.PIC...............................................48 
5.2.3 WT_GFA.HLP...............................................48 
5.2.4 WT_GFA.FSL...............................................49 
 
5.3 Printer-driver patches.....................................50 
 
5.4 CHANGES IN UPDATES.........................................51 
5.4.1 CHANGES V1.2 -> V1.42....................................51 
5.4.2 CHANGES V1.42-> V3.00....................................51 
5.4.3 Improvements not (yet) implemented.......................52 
5.4.4 Errors not yet corrected.................................53 
 
5.5 TITBITS: PROGRAMMIERWETTBEWERB.............................54 
 
5.6 UNIX-TOOLS for PROGRAM DEVELOPMENT.........................55 
5.6.1 Program-Checker 'lint'...................................55 
5.6.2 C-Pre-processor 'pp'.....................................55 
 
5.7 OVERALL PROGRAM-LAYOUT.....................................56 
 
5.8 OVERVIEW OF  OTHER PROGRAMS FOR GFA-BASIC..................57 
5.8.1 Analysers................................................57 
5.8.2 Mask- and Menu-Generators................................58 
5.8.3 Shells...................................................59 
5.8.4 Converter................................................59 
5.8.5 Other....................................................60 
 
5.9 THIS and THAT..............................................61 
5.9.1 Thanks to................................................61 
5.9.2 Ideas from other Programs................................61 
5.9.3 Program tips.............................................61 
5.9.4 Copyright, Public Domain.................................61 
 
5.10 USER-REPORT...............................................62 
 
 
 
 
1. INTRODUCTION 
 
 
 
1.1 EVERDAY STORIES 
 
 H.A. is a professional Programmer. Who uses many other languages 
as well as GFA-Basic.From time to time he also writes Public  
Domain Programs,admittedly brings in no cash,this is a fairly well  
known fact and widely recognized.Shortly after one of his programs
 ( Sagrotan V4.01 - is the talk here) appears on the Public Domain 
Market , currently already on the Telephone : 'Rushes the program  
out', to supply a regular USER.At the last minute H.A. has decided 
to make further small CHANGES to the Program,and in doing so makes
a teeny-weeny typing-error at a fairly sensitive area in the course
of this('opening a channel') . With the Cross-Reference-List or the 
 Outline-Function of the Weller-TOOLS for GFA-Basic he has at the   
very last minute found this typing-error. 
 
C.W.  in the meantime writes a well known program  ( this is   
1st XTRA  and is distributed with each 1st Word Plus  V3.15 ),it
has become longer and longer. By breaking through the 200 kB-mark  
the length of the Program-Source codes must rearrange the variables  
organisation.  With many global variables (about 500)  that it has  
accumulated and should now, where possible and sensibly,be defined  
as Local Variables or as parameters-passed.The Cross-Reference 
function of the Weller-TOOLS for GFA-Basic makes this work 
enormously easier.Therefore memory is also tidied up.Then only  
about 30 global variables will be required for important   
information needed and then used for this purpose. 
 
     P.S.  writes a well known  Public-Domain-Program-shell.  
unfortuneately this uses too much Memory, which shows when  
working with it ,and is a great Handicap .    C.W.  gives the  
Program Code to P.S. After three hours work with the Weller-TOOLS  
for GFA-Basic there remains yet,only half so many variables 
remaining (many were only defined once , however had never been   
used!), and the memory requirements were reduced by a third. 
 
     H.A.  and C.W.  in their time together write at about a  
25 kB  larger Program.   Each has their own tasks.  Once  
weekly the new altered procedures will be collected together  
(Actually:  Sub-programs).                 The variable  
names must agree with it,  and the procedures as well,    
expect the parameters-passed to be correctly called upon.  
Without the Weller-TOOLS for GFA-Basic it is likely that the
program would not have run correctly. 
 
 
 
1.2 COMPUTER-Support Programs 
 
 
It is likely you will also have your own 'EVERYDAY STORIES'.  
Won't you,once you have been actively revueing Programming  
work.  You will have established, that unfortuneately a large part  
of your time and energy will be consumed in finding errors. 
 
     Computer support TOOLS and Methods for the development  
of Software greatly reduces the time between the start of an idea
and realisation of the Programs.The management of ideas and the  
sketches of the Software-Designer, tests the plausibility of 
Algorithms and generates the Program-code at standard levels.It 
takes the routine work from the developer and creates free room   
for him to expand his creativity.You can plan and co-ordinate all 
of the uses of a Software-Project being involved with it. Such 
Systems for'Computer Aided Software Engineering' -in brief: 
 CASE-System  - have been until now,reserved for Unix-Systems and 
large computers only.  A short view of the important features of
 the CASE- Systems is given in the contribution: 
 
                 'The Tool-boxes are full 
  CASE accompanies the software through it's entire life cycle' 
 
in: c't-Special 4, iX-Multiuser-Multitasking-Magazine, 11/1988, S.  
98-102. 
 
     For the PC-range  these systems make little sense. For this,  
memory space and arithmetical listing would not be sufficient,   
decisive however is the Single-User-Conception of  'Personal'- 
Computers. 
 
     Nevertheless it gives support for PC-Programmers in the form 
of numerous Tools and Utilities,  the  most of which offer
entirely individual special functions. An overall view of these 
is provided by the 600 paged extensive  'Utility-Guidebook' by-
  Rossipaul-Publishers. 
 
 
 
1.3 TOOLS FOR GFA-BASIC 
 
     The GFA-Development system is supplied by PD Libraries with  
sparse development tools.   Simply the  Program Shell - MenuX
accompanies it.  A symbolic Debugger will be missing from it,  
even so,you will get further help programs such as Pretty-Lister  
and Cross-Reference-Analyser. 
 
All the same, the GFA-Development system is really inexpensive,so  
one should not entertain too great an epectation from it.Moreover, 
it spares the Interpreter much Development time and has to some  
extent ,some help with PROGRAM DEVELOPMENT  integrated  into it,
(Trace,  Dump, .l-Command). The execution in the Compiler-Handbook  
for the production of Assembly-Code could be set in this manner 
with a symbolic Debugger replaced. 
 
     For the most part,the GFA-Basic-Programmer will be able  
find some additional means of help through the Public Domain  
Market, that will support programming. These Tools currently  
fulfill an entirely different defined purpose,and so one can   
divide them into the following groups: 
 
 
1.3.1 Program-Shells, Shells: 
 
     This integrates the Interpreter,Compiler and Other Programs  
     in a comfortable to use User interface as does the Desktops. 
     'Turn-arounds', therefore the exchange time between   
     Interpreter,Compiler and compiler Program, has been reduced. 
 
 
1.3.2 Correlation-Analysis: Cross-Reference-Analyser: 
 
     The arranged Listing of the Variables, Procedures, Functions  
     and Labels makes the search for errors enormously easier. 
     Before all this it was very very difficult to find careless
     mistakes in very large programs,now it is easier. 
 
 
1.3.3 Outliner: 
 
     This shows only a SECTION of the Programs, e.g. only Proce- 
     dure-Definitions as in the GFA-Basic V3-Interpreter. 
 
 
1.3.4 Editors: 
 
     Editors for Dialogue-boxes,  Monitor-Mask and  Pull-Down- 
     Menus.  Particularly  in the 'Design-Phase' of  Programming,  
     these Programs will help.  With them , one can develop and 
     test user interfaces, and have the corresponding Program-code 
     generated, and then bind it into your own Programs.
 
     Text-Editors  are useful,  especially when one would like to 
     carry out possible CHANGES,  e.g.  cut-out sections from  
     multiple Listings and then paste them together. 
 
 
1.3.5 Converter: 
 
     Converter  from GW- or ST-Basic to GFA-Basic  or  vice-
     versa.  It  also gives a Converter from GFA-Basic V2  to  
     Omikron-Basic. 
 
 
1.3.6 OTHER HELP PROGRAMS: 
 
     Source-Code-Lister.   Structogram-Converter  generates and
     makes sourcecode from a Structogram. 
 
Example of this Help program with covering addresses are listed
in Chapter 5.8 . 
 
 
 
1.4 WELLER_TOOLS FOR GFA-BASIC AS A DEVELOPMENT ENVIRONMENT 
 
 
1.4.1 Performance 
 
     The Weller-TOOLS for GFA-Basic represent adevelopment- 
system,  which integrates the most important TOOLS : 
 
 
The special features: 
 
 
1.4.2 Cross-Reference-Analyser 
 
-    Output as Lines-reference or Procedures-REFERENCE, e.g.: 
 
     adr0%     f_load    271  273  277  295 
               f_check   731  732  737  745  747 
               f_clear  1211 1212 1219 
 
-    Automatically finds many Typing- and Careless mistakes, 
     e.g.: 
 
     adro%     fload     275 
     *** Error: adro% appears only once , Type-error? 
 
-    Differentiates  between local and global Variables and  
     parameters passed. 
 
-    Makes suggestions for improvement,when global Variables  
     could be defined locally, e.g.: 
 
     adr_nn%   f_check   735  736  741 
     *** Warning: adr_nn% appears only in 1 Procedure , evt.  
     local defined! 
 
 
1.4.3 Flexible Program-shell 
 
-    The exchange between Interpreter, Compiler, Editor,  
     Resource Construction Set and so on will be drastically 
     shortened in the built-in Shell,particularly when using a 
     Hard-disk or Ramdisk.
 
-    Other Menu-lists,  can be freely and completely configured     
     using Ascii-files. 
 
-    Text editors (e.g. Tempus) can be controlled with Command-  
     line strings and will automatically load the LST- and 
     Analyser files. 
 
-    The important Desktop-Functions are integrated:  Files  
     remove,   rename,  copy;  create folder;  free  
     space on Disk. 
 
 
1.4.4 Outliner 
 
-    Assisted Analysis of Program structures and finding  
     of logical Errors. 
 
-    Extended 'Fold-Functions' for Procedures, Functions and  
     Modules:  Procedures will also be displayed, which will be  
     recognizable at a glance, which other Procedure will be 
     called by it ('Who is Who in GFA-Basic'). 
 
-    Library for Keywords. 
 
 
1.4.5 Universal Output Concept 
 
-    All outputs selectable to Screen, Printer or File. 
 
-    High and medium Screen-resolutions supported.  Runs  
     also on large screen monitors. 
 
-    Character size and Page format adjustable. 
 
 
1.4.6 Easy to operate 
 
-    Extra-help-Mode for all Menu-items. 
 
-    Extensive Help texts (ca 107 kB) callable through the Table  
     of Contents.
 
 
1.4.7 General Features 
 
-    Very fast due to Programming of the Program Kernel functions  
     in Assembly-Code. 
 
-    Supporting of Program-Modules through Comment lines. 
 
-    Further Help-functions: 
 
     Printer-Listing :  Listings will be clearly hardcopied, and  
     admittedly so, that Program-Modules are separated, important  
     Lines will be emphasized in bold text,  and that if required 
     Page-changes can be inserted manually in the Program.
 
     Utilities like:  REM-Killer,  DATA-Make,  Lines  number,  
     Statistic-Functions. 
 
-    All features are usable for other languages,e.g. Pascal or 
     other BASIC-dialects,particularly Omikron-Basic,except the 
     Cross-reference function. 
 
 
1.4.8 Public-Domain- and Pro-Version 
 
     The Weller-TOOLS for GFA-Basic are produced in two Versions, 
these are only distinguished by the size of the programs to be  
analysed.                   The Public Domain-Version analyses  
Programs up to 100 kB,  which for the most uses,will be adequate.  
The extensive Handbook is illustrated with Images and has over   
60 pages as a 1st Word Plus-Document and is also contained as an   
Ascii-File on the Disk. See also Chapter 4. 
 
 
1.4.9 Press-reflection 
 
     Since the end of 1988 the Public-Domain-Market has contained  
Version  1.2  and the Pro-Versions 1.42 and 3.0 can be found in  
different Magazines as follows: 
 
Magazine             Issue    Page   Contribution 
 
Public Domain        3/89     56-57  Test report 
CHIP                 4/88     296    Test report 
PD-News              3        25-28  Product info 
GFA-Club-News        3/4 89   16-17  Product info 
Atari-Magazine       5/89     14-15  Product info 
ST-Vision            2/89     42     Product info 
Happy Computer       6/89     40-41  Product info 
GFA-Club-News        6/89     17     Product info 
 
 
 
1.5 PROGRAMMING TIPS 
 
     Every Programmer has their own style when writing Programs.  
Whoever would like to gain an insight into these techniques ,  
should absolutely read the informative and at the same time 
entertaining Interviews with some of the important Programmers 
in Susan Lammers Book : 
 
                   'Fascination Program' 
 
obtainable from Markt&Technic-Publishers . Each Chapter of this 
Book gives more Information to the masses than 'Larger Books' 
from different Publishers. 
 
     An exception to the rule, as you will see is the
ambitious GFA-Basic-Programmer Michael Koflers Book 
 
                'REFERENCE-Handbook GFA-Basic 3.0' 
 
from Sybex-Publishers,recommended .  At about 800 pages,one  
can find many important information details in it, for the 
removal of programmingjobs to be done or the finding out of  
errors,can have a crucial effect. 
 
When one no longer knows any more, one can also directly call
Frank Ostrowsky and his colleagues or workmates. 
In my experience one gets through mostly for the first and has  
a friendly and competent discussion with them. 
 
     Tools are TOOLS.  You can not replace the mind, you can
however inspire it well.  While you have until now not had
many thoughts about Variables,Structures and Optimising particu-
larly,you have perhaps at the moment therefore found the stimulus.
With the Weller-TOOLS for GFA-Basic you have in any case a  
powerful Tool available for this purpose. 
 
 
 
 
2. INTRODUCTION 
 
 
 
2.1 INSTALLATION 
 
 
              The program can be copied in any directory
              you like, optimally in the directory where GFA-  
              Basic is.For simplest installation it is sufficient 
              to copy only the .PRG file.
 
              It is also possible to copy also other files 
              which are loaded automatically at program start if 
              available.   These files are: 
 
 
 
 
 
WT_GFA.INF:    Path for MENUX, Interpreter, Compiler and Editor 
WT_GFA.FSL:    Paths of the programs in the flexible shell 
WT_GFA.HLP:    File with Help-texts 
WT_GFA.PIC:    File with Help-screen 
 
These Files will be described in detail in  Chapter 5.2 . 
 
     Integrated in the  Program  is a Printer-driver , which is
compatible with all Epson- and IBM-Printers (NEC,  Star, ...)  
functions.  For  exotic Printers all of the control codes can be  
defined with Patches .  See Chapter 5.3. A further possibility  
 for passing them to the Printer,  exists in the use of it by 
GFA-Basic Printer-drivers. 
 
     Aditionally a "\KEY"  directory can be declared, which the 
*.KEY-Files can be copied into and contained in.  The Outliner   
standard path then takes this folder into account. 
 
     When the Files are not copied to  
your Hard-disk , then you should not 
work with the Original disk, but make
 a copy and work with it. For a better 
visual effect you can make yourself a 
Disk-Label in a simple way for yourself.  
  On your Diskette,
there are three "PRINTME" -Files  
which through double clicking on from 
the Desktop , can be hardcopied..
The Files contain all the control  
codes for 9-Pin  printers in single 
density and in four-ply density , as
well as 24-Pin in three-ply density.
 
 
 
2.2 Screen Setup 
 
     The Screen Setup(something rearranged in the Image)is very  
simple:  The Menu-list takes one Window for use.  
What is seen is not particularly original, it should however  
be completely adequate for the intended purpose. The screen 
will be restored once again upon removal of the accessories.  
Accessories, that not only exist from a Dialogue box ,
but also it's own open window, should not be shifted.
 
     The set up of the Menu-list will be detailed in the next 
     Chapter with explanation of the functions . 
 
In the Title-line of the Windows , the current functions will  
be displayed.   All reports will appear here,e.g. when a File-
select-Box has been called, or with which key a process has been 
stopped, broken or can be carried on with. 
 
The Info-line contains some actual Parameter-settings. 
 
     On the Left is the Output Devices: 'S' for Screen (Screen),  
'P'  for Printer(Printer) and 'F' for File  (File).  When a  
connected Printer is ready to receive,there appears next to the  
'P'  a Tick,  beside it the Printer options. The activated  
Scroll-function will be indicated with a Bell-symbol . 
 
     If a file is loaded,the file-name,file-length,and number  
of lines will be indicated in the middle of the Info-line. 
 
  On the right,free memory space will be indicated. This is the  
value,  returned from  FRE(0) .  When a Cross-Reference has been 
generated,  this value will get steadily smaller, as the internal  
space fills up.  Before another Program starts to operate, this  
memory space will be given back to GEM , with that the program  
called may freely operate. 
 
     Almost all Text, which appears on the screen, can also be 
directed to a File or to the Printer. 
 
 
 
 
3. REFERENCE-SECTION: Function Description 
 
 
 
3.1 WT_GFA 
 
'Info' shows the following Information:If it is found in the same  
Path,from which the Weller-TOOLS for GFA-Basic has been started,  
the file named 'WT_GFA.PIC' ,  then this will be loaded  and now 
displayed upon start.  With a Mouse-click or through pressing any  
key,it will carry on. In an Alert-Box there will then be the - 
Version number, Date ,and additionally it is possible to access
the help text. 
 
     Under  'WT_GFA'  ,Accessories can be called.  The screen
will be restored again upon removal of the Accessories again. 
If an accessory and not a Dialogue box opens,  instead of a   
characteristic Window,  then this should not be shifted or other  
functions will be called and disrupted.  With the restoration-
function there is no complete 'Redraw'-Routine concealed, only 
a separate SGET/SPUT internally. 
 
 
 
3.2 File 
 
 
3.2.1 Load LST-File 
 
     With 'Load LST-File' , a file can be loaded in the working  
memory.  There appears a File-selector, which stores the Path ,  
of the last File to be loaded. 
 
     It is possible to load any text file,as it is not examined  
as to whether it was stored with the GFA Parameter  DEFLIST 0 ,   
nor is there any control over this.   With this then it is  
therefore possible, to load Files from other Computer languages  
or miscellaneous Files to be loaded. 
 
   The  maximum size of a file that it will be possible to load, 
will be displayed in the Title-line of the GEM-Windows . Should
this be overwritten, there appears an appropriate report.  
It is not possible to load only a SECTION of
 a (possibly very large) file.
 
     The file can then by most Text-editors,be completely loaded  
in and retained ,completely,  as usual,  in the  Memory  
(also when an external Program has been called). Through it the  
Program carries out the Kernel functions very quickly.The most,  
of the time critical Functions are programmed in Assembler.
    The  generation of a Cross-Reference of a 300 kB  size large  
file takes very little time! 
 
     Immediately through the loading process,the length of the  
lines will be calculated,and the Number of Definitions(Line-  
begins with 'P').The requirements for these values are needed by  
extremely large files also,and only take a fraction of a second. 
 
The loaded file will be retained in Memory, until such time as a  
 new one has been loaded or the Memory has been erased by using  
(see Chapter 3.6.7) 'Release Memory' . 
 
 
3.2.2 Output Devices 
 
     Here the output device is determined.   A Tick indicates  
which of the output devices has been selected.'File' and 'Printer'  
can not be selected at the same time , you  will have to select  
one and switch the other off.  The settings will also be displayed
in the Info-line. 
 
   The principle of the 'general Output Devices' will be apparent 
as will be seen through the whole Program.  For this reason it is  
e.g. possible,using  'Print Listing ' in a file to print it,  and  
this file,  will then contain all of the control characters, on an 
 MS-DOS or VMS-Computer using 'Copy'-Command on them there in 
order to print out the standing Printer format,is necessary.To put 
this another way : When a Listing is to be immediately hardcopied    
on a Printer,then the Printer must be chosen 
as the output device! 
 
 
3.2.3 Screen options 
 
     With this you can choose the size of the character display.  
Dependent on which Screen-resolution the Program was started in, 
sind  hier  13  points  (high  Resolution)  or  6  points  
(medium  Resolution) pre-installed.  With smaller characters,the 
viewable area is larger, particularly when using the Outline-
Function. The Program also runs with Bigscreen-monitors and uses
 the whole screen area with these.
 
 
     When  'Scrolling' is switched on (pre-settingg), then  
the screen runs through without stopping,  when a Screen-page  
is full of text.  With the Key-combinations <Control>  S  
and <Control> Q the Screen-output can be paused and respectively
continued. 
 
     By  switching off 'Scrolling' the Screen-output can be held  
at it every time, when the Screen-page is full(of text).  With  
any key press,the screen-output can then be continued to the next  
page. Here,also with the Key-combinations <Control>  S  and  
<Control> Q ,the screen-output can be paused and respectively 
continued again. 
 
     With simultaneous output to the Printer or File ,then the  
output as always can be carried out by scrolling. 
 
 
3.2.4 Printer options 
 
     With this the following Printer options can be set up  
(standard pre-set values are in brackets): Left Margin  (12),   
Right Margin (80),Length of Paper in inches (12),Form Feed (FF) 
at end of Printing (yes). 
 
     The Printer will be reset at the start or end of the printing 
process, to narrow type (17.2 CPI(Chars.per inch)) and small Lines
from- (8 lpi) it will be changed over, and finally the above
options set. After printing has finished, a Printerreset can   
again be selected.  The printer control codes can be adapted  
to exotic models.     (see Chapter  5.3). 
 
 
3.2.5 Printer-test 
 
   Printer-test executes a simple printer test : Some characters 
will be output, for it to recognize, whether the Margins and the 
line-spacings are set correctly . 
 
     Independantly of the Printer-test every time ,  before the  
printing can begin,  verification of the Printer's readiness to 
receive is carried out. When it is not, then the process (after  
switching on the Printer)will either continue or be aborted. 
During the printing process the Printer should not be switched
off for any longer than 30 seconds. 
 
 
3.2.6 Quit 
 
     'Quit' cancels the Program,  without asking beforehand. The  
safety test would then be intentionally omitted, then all results 
would be different than e.g.  are reproduceable with a Word-  
processing program.  'Mechanical' protection is however never-
theless given,then you must bring it back to this path,using the  
mouse, to reach this Menu entry . 
 
 
 
3.3 SHELLS 
 
 
3.3.1 Program-Shell: General 
 
     The Program shell supports the interactive co-operation with 
other Programs, particularly the Programs of the GFA-Basic- 
Development-systems.From this Shell it is also possible to change 
change programs by directly calling them.These are naturally set
in advance,so that programs are also naturally at your disposal:  
When you have only a single disk drive, you must copy all of the 
required programs to a disk ,  and before calling any of them,you  
must insert the corresponding disk.  Two disk drives makes working 
with them a bit more comfortable.  When you have sufficient memory
at your disposal, then you can place a Ramdisk wherever you like,  
and then call the programs from the Shell.The biggest comfort  
would be achieved through the use of a Hard-disk .  
Here the the loading times take place in a fraction of a second,
so fast is it in the new Program,that it could well be a component
of the Weller-TOOLS for GFA-Basic. 
 
 
3.3.2 Configuration of the fixed GFA-Program-shell 
 
The resident Shell will be configured by the 'WT_GFA.INF' file.  
The following file is enclosed with the Program : 
 
A:\MENUX.PRG        * In this file Path names and file names 
A:\GFABASIC.PRG     * are given for the resident Program- 
A:\GFABASI2.PRG     * Shell  V3.01. Sequence as follows: Menux, 
A:\GFA_BCOM.PRG     * Interpreter V3, Interpreter V2, Compi- 
A:\TEMPUS.PRG       * ler V2, Editor (e.g. Tempus ab V1.10). 
 
     Upon starting the Programs,this file will be loaded, if it 
is available.  It must therefore reside in the same Path ,to be   
found ,like the Program itself.  The loading process is quick to
display to the screen. It remains at liberty to enter other 
programs as to that which has been designated. 
 
The Text editor is particularly dealt with.These can be given
through a so-called 'Enviroment-String' : a loading instruction 
 
-    If no LST-File has been loaded , then no loading instructions  
     will transfer. 
 
-    Should an LST-File already have been loaded and as yet no 
     output file produced , then this file will be loaded from  
     the Editor. 
 
-    Shoul an output file be produced however, then both the
     LST-File as well as the output file will be loaded from  
     the Editor. 
 
     This automatic loading process functions only with  Text- 
Editors,  that selectively read the Enviroment-String .  That is
for example with Tempus from V1.10 and 1st Word Plus from  V2.02,
possible. 
 
     The Shell is very stable.  It will tolerate most crashes  
brought about by the programs called and returns  Programs 
characteristically to the Desktop again ,if it is not resolved  
from the program itself(old versions of 1st Word Plus and Tempus). 
 
 
3.3.3 The flexible Program-shell 
 
     With this flexible Program-shell ,you can call up to  100  
Programs directly from it.   To this end only the corresponding 
pre-defined Entry in the Menu-list can be selected.
 
     The Program-shell possesses it's own Menu-list, which can be  
made up by yourself quite freely.  With it as well,the entries in 
the Menu-list can be freely and particularly made up as possibly
Command strings also,  to utilize the many Programs.This Program-
Shellcan be configured through the file WT_GFA.FSL.
(See Chapter 5.2.4).  Each time it can also through the Menu-entry  
 'FSL-File load' use an other Configuration . 
 
     With  '->  Main-menu' you can again reach the Menu-list of  
the main programs.  Also in the flexible Program-shell,accessories
can be called. 
 
 
3.3.4 Desktop-Functions 
 
     The important Functions of the Desktop are  accessible 
     here.    One can : 
 
-    Start any Program 
-    Delete Files 
-    Rename Files 
-    Copy Files 
-    Create new Folders
-    Determine the free space on a drive. 
 
     Many other accessories will be unnecessary with it,such as  
quitting the program,respectively.With this, the graphical User
Interface of the Desktop will illustrate the actions of the    
references in the Title-line of the window. 
 
Example: Rename File 
 
     First you select with the File-selector,the File to input,it  
should then be changed.  Then it gives you with  HELP of the next  
File-selector the new Name in. With 'Cancel' the action can be  
broken off each time.  A shift through renaming is not possible.
 
     With 'Load Set-File ' any further configurations can be 
then reloaded. 
 
 
3.3.5 Memory Aspects 
 
     Before an external program is called, then it is possible 
to release memory not required at the moment by the Program and
give it back to GEM (RESERVE 0), so that the program called can 
be operated independantly. 
 
     Nevertheless it can happen, that there is not sufficient
memory, then the Program-code and the internal variables of the 
Programs will remain,  while the Program called upon runs, in the  
Memory obtained in the background.  Through this ,memory problems 
can occur.For this reason the function'Release Memory'is included.  
With this,some fields and variables in the Program will be erased.
 
 
3.4 X-REF 
 
 
3.4.1 Cross-Reference-Listing : General 
 
     The main support in the development of a program is the  
production of a meaningful Cross-Reference-List, in german: 
'Wechselbeziehungsliste'. This helps, both typing errors as
well as logical errors ,to be found very quickly. The language  
definitions of GFA-Basic in the Weller-TOOLS for GFA-Basic , 
are in my calculations , carried out, particularly the distinction  
between local and global Variables and parameters-passed. 
 
     In the Cross-Reference-Listing all Variables, Procedures 
and Marks(labels)will be listed. Variables will be to local  
and global variables as well as variables passed,differentiated.  
Obvious errors,  e.g.  the once only use of a variable , has   
been protocolled.  With global variables  suggestions will be  
presented to you,  e.g. when it should be considered , as to
whether the variable should be made local.  Many fold uses of  
names for different variable-types have been listed. 
 
With the HELP of this function you can particularly in extensive  
Programs,hide variables-trash and the usage of variables under 
memory space- and logical points of view can be optimised. 
 
     The first Cross-Reference-Listing for GFA-Basic was in the  
article  'Cross-REFERENCE-Listings in GFA-Basic' by H. Bauch,in   
the 'ST Computer' magazine No.  5/87 S. 36-46 . The accompanying  
text ends with the sentence: 'With X-REF the GFA-Basic-Programmer  
should be able to live with tracking down typing-errors, however 
by improvements in the documentation, it can be made easier.' 
 
 
3.4.2 Generate X-REF 
 
The process can be started with the Menu-entry 'Generate X-REF'. 
If no file has been loaded,then an Alert-Box to point this out 
will appear. 
 
     The Program-file under consideration must be an Ascii-File,  
stored from the Interpreter  with 'SAVE,A' as an LST-File, *.GFA
 and  *.BAS-Files  are not Ascii-Files. A simple way you can  
distinguish statements from names is that the program must  
have been saved with 'DEFLIST 0'.  This setting is the standard  
-setting from Version 2 of the  GFA-Basic-Interpreter.  
With it all Statements will be written Big   (PRINT,  WHILE...)  
and all Names small (File$,  pos%,...). It will not check as to  
whether the loaded file actually complies with this request.
 
  While producing a Cross-Reference-Listing ,a Protocol will
also be produced. The output will then be directed to the 
defined device in 'Output Devices'. For Protocol files,the   
proposed ending 'LOG' is suggested. 
 
     The Protocol is an Ascii-Text,which has not been formatted,  
under the 'Printer options',values are set.Because of this it  
can produce a Line longer than the maximum breadth it would be  
normally,and that an Editor accepts(1st Word Plus 150,Tempus 255
 Columns). 
  
 
Example: Protocol-File (*.LOG) 
 
X-REF Protocol on the 21.11.88 at 22:45 
------------------------------------ 
  23  0.4% pd 
  60  1.6% e_select 
 100  3.0% e_pars 
 123  3.5% e_statistics 
... 
 
1142 35.9  new_var_typ 
1149 36.1  test_error 
1195 37.3  xref_out_lines 
1212 37.8  xref_out_procs 
1311 40.7% xref_out_locals 
... 
 
 The generation of a Cross-Reference-Listing is hard analytical 
work.  The Weller-TOOLS for GFA-Basic work very quickly by  
using some assembly coded routines,  the program will be  e.g.
crunching a 300 kB size file and giving the result in three to   
five minutes. 
 
 
3.4.3 Output X-REF 
 
     The results of generating the Cross-Reference-Analysis will 
be held in memory, out of the way. First through 'Output X-REF'
it will be produced in a form,which is meaningful. The results  
can be output - in different ways - several times. 
 
     Variations result through the choice of different output- 
devices and of different parameters, through the choice of them,  
which all output should be, as well as two different Reference-  
Modes:  the Procedures-Reference and the Lines-Reference.
 
     With the Lines-Reference the names will be found through  
giving the Line-numbers, in this the occurences are listed. If  
a Name is in a Line several times, it will only be called once.  
This form of the Cross-Reference is the usual one, and for this  
it supplies for GFA-Basic a few ready Public-Domain-Programs. 
 
     The Line-numbers start as always from column 20.  If a  
Name is longer than 18 Symbols, then the Line-numbers start  
a Line lower. The Line-numbers have a maximum of 6 Decimal places, 
which means,that the upper limit stops at 999999 Lines. This gives
it more Line-numbers,as in it through the passed,maximum Printer-  
or Screen-width defined Lines, the following line numbers will
be broken up, that is to say, set in the next Line. 
 
     With the Procedures-Reference those additional procedures
will be listed,in them a Name (i.e.  a Variable,a Procedure,or  
a Label) occurs.  In a structured language like GFA-Basic  
this form is considerably more meaningful.  
At best you may recognize this with the detailed example on the 
following pages. 
 
     With this most Typing and miscellaneous careless errors will
be recognized and complained about by Weller-TOOLS for GFA-Basic.  
There, where optimisations are through the use of appropriate 
variables (Actually: to your liking), there will be an appropriate
suggestion proposed. 
 
 
3.4.4 Example: Cross-Reference-Listing 
 
The following List has subsequently been commented in italic 
text.  This handles some older examples in GFA-V2-Code.
 
Cross-Reference-Listing of: E:\WT_GFA\WT_110.LST 
Produced by X-REF of Weller-TOOLS for GFA-Basic 
on 21.11.1988 at 23:18:38 
================================================================= 
 
            File: E:\WT_GFA\WT_110.LST 
            Size: 101033 Byte 
Number of Lines     : 3254 
Number of Procedures: 113 
   1 Real-Variables 
   1 Real-Fields 
  41 Integer-Variables 
   3 Integer-Fields 
  32 String-Variables 
   9 String-Fields 
  22 Boolean-Variables 
   0 Boolean-Fields 
 102 Procedures 
  11 Procedures with parameters-passed 
   7 Labels 
 
1 Real-Variables 
------------------------------------ 
 
o...................xref_show_max_nam_num      996 
  *** Occurs in only one Procedure! Possibly define local! 
  *** Error: o  Occurs only once! Typing-error? 
 
Here it actually deals with a Typing-error.  Common error is the  
Digit 0.  The error never steps as a Runtime-Error ,on the 
following presentation:  FOR  i%=o to 5.  It will use 6 Bytes of  
memory space ,as well as when the variable 'o' has never  
been used.  MERGE-Files from Resource-Construction-Sets produce  
on their behalf,more Declarations, than will actually be needed. 
 
 
... 
 
41 Integer-Variables   (=41 * 4 Byte = 164 Byte) 
------------------------------------ 
 
adr%................e_select         87 
                    e_statistics     124  130  133  138 
                    statistics       177  185  208  233 
                    xref_make        573  627 
                    xref_proc_nam    671  675  698  701 
                    ol_filter        1556 1603 
                    rattle           1725 1745 
                    num_lines        1782 1796 
                    look_between     1974 1982 1988 1992 
                    remkill          2044 2064 
                    print_listing    2201 2222 2242 
                    head             2299 
                    line_input       2719 2721 2722 2723 
 
Soooo clear!  You can recognize exactly,where these variables  
occur overall.  The information of the corresponding Procedures  
is considerably informative with it, solely as Line-numbers. 
 
cnt_c%..............statistics       184  187  192 
  *** Occurs in only one Procedure ! Possibly define local! 
 
Here the advice will not be followed,as the Procedure statistics  
will have been called intermittently, values already to be 
calculated have not yet been,but should be calculated. 
 
... 
 
3 Integer-Fields 
------------------------------------ 
 
proc_start%().......xref_make        547  550  551 
                    xref_proc_nam    656 
                    xref_out_procs   1225 1243 
 
... 
 
32 String-Variables 
------------------------------------ 
 
e_ext$..............xref_clear      1487 
  *** Occurs only in one Procedure ! Possibly define local! 
  *** Error: e_ext$  Occurs only once! Typing-error? 
 
Actually,here was a variable left behind from earlier versions  
yet,which is no longer needed, and had inadvertently not been
removed. 
 
Info$...............Main-program     12   13 
                    xref_clear      1487 
                    init_vars       2488 2489 
                    Info            2799 2801 
 
So you will see from this,when a variable not only occurs in   
Procedures,but also in the Main-program. 
 
... 
 
9 String-Fields 
------------------------------------ 
 
bomb$().............bombs           2727 2728 2729 2733 2736 2739 
  *** Occurs only in one Procedure ! ERASE this Procedure? 
 
This report should help to avoid a terrible state of affairs, 
that fields,that are only temporarily needed (here:Sprites),will
no longer be erased . 
 
... 
 
22 Boolean-Variables 
------------------------------------ 
 
Comm_found!.........xref_remv_comm   762  767  771 
  *** Appears in only one Procedure ! Possibly define local! 
 
This was while the Program was not safe,whether this variable  
would also be needed externally yet (which evidently was not  
the case). Therefore set in the LOCAL-List . 
 
prt_ready!..........print_listing   2154 2157 2159 2161 
  *** Appears in only one Procedure ! Possibly define local! 
 
Ditto 
... 
 
 
102 Procedures without parameters-passed 
---------------------------------------- 
 
... 
xref_out............pd                39 
                    xref_out        1012 
 
xref_out_items......xref_out        1058 
                    xref_out_items  1083 
 
xref_out_locals.....xref_out        1061 
                    xref_out_locals 1311 
 
xref_out_multi......xref_out        1064 
                    xref_out_multi  1368 
 
xref_proc_nam.......xref_make        609  612   used twice 
                    xref_proc_nam    650        defined once 
 
xref_proc_ref.......pd                40 
                    xref_proc_ref   1445 
 
In larger Programs you have a better view, when Groups 
of Functions and Variables are named after fixed schematics  
(orthogonal Names structure, Hungarian  Notation,  ...).  
A couple of Procedures here are from the MODULE xref. The  
Local Variables here likewise start with 'xref_'. 
 
... 
 
11 Procedures with parameters-passed 
------------------------------------ 
 
test_error()........xref_out_items  1134 
                    test_error      1149 
 
away$().............xref_make        605 
                    xref_serch_nam   848 
                    test_error      1157 
                    xref_out_procs  1278 
                    xref_out_multi  1382 1387 1391 1393 1407 1412 
                    scrn_halt       2788 
 
Here there is an inadequacy in X-REF:  away$() is not a 
Procedure, instead a defined Function. This will be provisionally 
looked at as a Procedure. 
 
... 
 
7 Labels 
------------------------------------ 
 
bomb_data...........bombs           2730 
                                    3038 
Where is the Line 3038?  It is situated behind the last Procedure,  
namely there, where many other DATA's are also(even. 'DATA-Sec- 
tion'). There the DATA-Values,provided it is about a number  e.g.  
a Machine program, will not be considered, it will often be the
DATA from the algorithmical SECTION which will be taken out and  
placed at the program end. 
 
... 
 
* Procedures with local Variables and/or parameters passed: 
---------------------------------------------------------------- 
 
The Functions and Variables will be listed unsorted,therefore  
they are in the order,in which it occurs in the Program listing. 
 
pd..................pd_menu0% 
e_select............pos_nn%   d% 
e_pars..............pos_nn%   e_lw% 
statistics..........d%        pos_nn%   d$        t$        test$ 
a_File_Control....m$        bak%      pos_nn% 
f_del...............f_del$ 
f_copy..............f_copy_source$      f_copy_target$      f_copy 
_len% 
f_ren...............f_ren_source$       f_ren_target$ 
dir_make............dir_make$ 
d_free..............lw$ 
... 
bombs...............bomb_nn%  bomb_front%         bomb_rear% 
 
Again an Example of the Names given. 
 
Manyfold Uses of Names in Different Variable-types: 
--------------------------------------------------- 
 
    act_lw% for Integer-Variables 
and act_lw$ for String-Variables 
 
    gone% for Integer-Variables 
and gone$ for String-Variables 
 
    proc$ for String-Variables 
and proc$() for String-Fields 
 
    line$ for String-Variables 
and line$() for String-Fields 
 
Altogether 4 Multiple uses for Names 
 
With  HELP of this last List,you can likewise find Typing-errors.  
How often by mistake has a '%'  been forgotten or the '5' been  
accidentally pressed. 
 
 
3.4.5 Shortcomings 
 
     In GFA-Basic Local Variables are not only valid in these  
Procedures as local, you should have defined them in it,but also  
in all of these Procedures called by Procedures. There should be
no Programmers style better,that such Variables are not passed on
as Variables passed, this is however allowed in  GFA-Basic.  
With the Weller-TOOLS for GFA-Basic however, a Local variable  
within these Procedures only,will be looked at as local,and will
be defined in it as such. 
 
  VAR-Variables will be handled like Local Variables, however the  
value of global variables will be changed.  The X-REF-Function  
is not so intelligent, with Pointer-Operations (Call by Reference,  
that the VAR-Function represents) as to track them. The same is  
valid for the *-Pointer-Operators. 
 
     Generate X-REF: With memory shortage (ca. 45 kB) while 
generating a X-REF ,the program will crash.  This error has been 
observed once).  By using an ST with a 1 MB Memory can  
LST-programs up to about 400 kB be analysed. 
 
     X-REF  output:  Real-Numbers with Exponents will be   
interpreted as two variables (2.9E-9 -> 2.9E and 09.) 
 
 
3.4.6 Memory requirements of the X-REF-Function 
 
     In the Protocol will be the maximum Number of Variables,that 
WT_GFA can read,and can display.  Upon starting  X-REF this   
number will be dependant on free Memory as calculated in the
following way: 
 
     ' Maximum Number of different Variables per Variable type: 
     var_nam_max%=MIN(FRE(0)\1000,5460) 
 
     ' Maximum Number of local Variables per Procedure/Function: 
     loc_var_max%=MIN(255,var_nam_max%\10,65536\var_nam_max%) 
                          ^^^^^^^^^^^^^^^ 
 
     This has the advantage that altogether,about ten times as  
many Variables per Variable type can be defined,as can the   
maximum Local Variables (all types)in a Procedure be defined. 
In a Programmer's style, if there are very many Local variables  
(e.g.  > 35) per Procedure used,memory will not be efficiently 
divided up in WT_GFA . 
 
 
To improve matters and to make this possible,the upper limit ratio  
can be patched.  With a Disk-monitor you must find the place  
" LOCVAR=10 "  (more or less at the end of WT_GFA.PRG)and then  
alter it accordingly.  Values from  " LOCVAR=01 "  up to  
" LOCVAR=99 " are permissable. 
 
 
 
3.5 OUTLINE 
 
 
3.5.1 Description of OUTLINE 
 
     The controllable Outline-Function helps with the structuring  
of the Programs, while it also gives you a specific view of the  
Hierarchy of the Procedures, the use of the Basic-Commands as   
well as the change in the variables . 
 
     In a Keyword-List,the Keywords will be entered with it  
(or also only a fragment of it) ,for which the program will 
seek out from it.  In the Outline-List all Procedures 
will then be output with the corresponding (indented) Lines. 
  In it then e.g.  the wrong use of  RESERVE, GEMDOS(), 
HIMEM, FRE(0) and so on will be recognized. 
 
     The  Outline-Function can not find errors(in contrast to  X- 
REF) from it automatically.  Through the interpretation of an
extremely reduced part of the Programs will both the search for  
errors and the optimisation be enormously assisted. 
 
     Following are a couple of listed Lists, with them you can 
particularly  effectively search for errors.  
 (ATTENTION:  Spaces are valid as a normal character): 
 
OPEN,  CLOSE , PRN:, CON:, NAME, LOF(, SEEK, BLOAD, BSAVE, CHAIN,  
CHDIR,  CHDRIVE,  DIR,  DFREE,  FILES,  LOAD, LIST, MKDIR, RMDIR,  
SAVE, EOF, LOC, FIELD, GET, PUT, WRITE,  
 
FOR, NEXT, WHILE, WEND, REPEAT, UNTIL, DO, LOOP, EXIT IF 
 
     Naturally it can also have Variable names declared.  
With it you can e.g.  display all lines ,and a defined variable  
in it , these can be changed or used . 
 
     The List allows you with 'Add' and 'Remove'  to easily  
generate and respectively change, with 'Save' and 'Load',and then
write to a disk drive respectively,from those read in. 
 
     Standardly the Key concepts will not be sought in Comments 
and Strings .  Should you wish to do this,it can be done using 
 'Take into consideration'  and they will be declared. 
 
 
Example of an Outline-File 
 
     In the following example it should examine,whether the  
treatment of different In-/Output-Channels  has been 'cleanly' 
programmed. It allows e.g. not to happen, that a file should 
be opened,that is already open. The following file has been 
produced with the Outline-Function, after it the Runtime-Error
'File already open' appears. 
 
File: E:\WT_GFA\WT_107.LST 89529 Byte 
Keywords: 
OPEN  
CLOSE  
PRN: 
----------------------------------------------------------------- 
PROCEDURE e_pars 
  OPEN "I",#1,e_File$ 
  CLOSE #1 
PROCEDURE f_copy 
        OPEN "I",#1,f_copy_source$ 
        OPEN "O",#2,f_copy_target$ 
        CLOSE #1 
        CLOSE #2 
PROCEDURE exe_edit 
  IF a_File$<>"" AND a_File$<>"PRN:" 
PROCEDURE xref_out 
          OPEN "O",#2,a_File$ 
            CLOSE #2 
PROCEDURE ol 
          OPEN "O",#2,a_File$ 
          CLOSE #2 
PROCEDURE ol_load 
    OPEN "I",#1,ol_File$ 
    CLOSE #1 
PROCEDURE ol_save 
    OPEN "O",#2,ol_File$ 
    CLOSE #2 
PROCEDURE out_init 
    a_File$="PRN:" 
PROCEDURE init_exe 
    OPEN "I",#1,act_lw$+":"+act_Path$+"WT_GFA.INF" 
    CLOSE #1 
PROCEDURE i_gen 
      OPEN "O",#2,a_File$ 
      CLOSE #2 
 
     In it about 100 lines fully, a fairly long Procedure 
 'xref_out', an error has crept in to it: There will be an 
output channel opened and later closed again.  The 'CLOSE'  
is however further indented,so that here it cannot possibly be  
correct.  If between times 'IF-ENDIF'-structure has been used,  
then you can take it that the'CLOSE'has been wrongly positioned.  
Particularly  by extensive reworking of program sections,can this  
occur easily. It therefore recommends,that this program section 
be reviewed in the Interpreter once again. 
 
The other OPEN-CLOSE-Combinations are equally indented,  
so that here (likely) no errors are present. 
 
 
3.5.2 Start 
 
Here the Outline-Process is started. 
 
 
3.5.3 Add Keywords 
 
     With this new Keywords can be added in to the List.
With this the Keywords, must be input one after the other  
using <Return> to separate them.  A blank space ends the add.
 
 
3.5.4 Remove Keywords 
 
     Here Keywords can be removed from the List .  
The List appears with Numbers, with which the Keywords 
are related to.  Through input of the Number will the   
appropriate Keyword be erased. 
 
 
3.5.5 Load Keywords 
 
     Here a List with Keywords can be loaded.  
If a Folder "KEY" is available , then the File-selector  
will automatically be set to this List . 
 
 
3.5.6 Save Keywords 
 
Here the List with Keywords can be saved as an Ascii-File. 
 
 
3.5.7 Consider Comments 
 
Normally Comments are not considered.  E.G.. as in   
the Line 
 
PRINT sys_freely%        ! PRINT FRE(0) 
 
are not output, also when 'FRE(0)' is a Keyword.   
When 'Take comments into consideration' has been chosen,then  
this line will be output. 
 
 
3.5.8 Consider Strings 
 
Normally the contents of the Strings remain unconsidered.  
 E.G. the Line 
 
PRINT "HOW TO GET STARTED" 
 
will not be output,as well as when 'GET' is also a Keyword.When  
'Consider Strings' is selected, then this Line will be output.
 
 
3.5.9 Fold Procedures 
 
     In the Editor of Version 3 of the GFA-Basic-Interpreter  
there is already the'Fold Procedure' function.The function   
implemented here is similiar,it displays however,as chosen,in  
addition to Procedure-Definitions,also the Procedure-Call and
Program-Modules in. 
 
Example: Extract from a 'folded' LST-File 
 
File: E:\WT_GFA\WT_107.LST File: E:\WT_GFA\WT_107.LST 89529 Byte 
------------------------------------------------------------ 
' MODULE Main-program 
@init_all 
@menu_set 
PROCEDURE pd 
  @mount_Info("") 
  @menu_set 
------------------------------------------------------------ 
' MODULE File 
PROCEDURE e_select 
      @e_pars 
        @e_statistics 
PROCEDURE e_pars 
PROCEDURE e_statistics 
    @line_input 
 
... 
 
------------------------------------------------------------ 
' MODULE Printer 
PROCEDURE print_listing 
    @mount_Info("Print Listing (Cancel with ESC)") 
    @out_init 
        @prt_init 
          @head 
        @line_input 
        IF LEFT$(line$,4)="PROC" 
          IF LEFT$(line$,7)="' MODULE" 
            module$=MID$(line$,INSTR(line$,"MODULE")) 
            @foot 
            @head 
              @foot 
              @head 
        @print_line 
          @foot 
    @no_e_File 
PROCEDURE print_line 
PROCEDURE head 
PROCEDURE foot 
PROCEDURE prt_par 
PROCEDURE prt_test 
  @prt_init 
PROCEDURE out_init 
      @a_select 
PROCEDURE prt_init 
 
 
3.5.10 List Procedures 
 
With this,only the Procedure-Names will be listed. 
 
 
3.5.11 List Modules 
 
With this the lines in the defined Modules will be listed.  
Modules are not provided for in GFA-Basic , but in a special
extension of the Syntax in the Weller-TOOLS for GFA-Basic.  
 (see also  Chap.  3.6.1). Modules will,through Comments
in the following format,be defined: 
 
' MODULE modulename 
 
 
3.5.12 List Single Line Functions 
 
With this only the single line function names will be listed. 
 
 
3.5.13 List Other(1+ lines) Functions 
 
With this,only multiple line function names will be listed. 
 
 
3.5.14 List Local Variables 
 
With this,only the local variables will be listed.These will only  
be recognized though,when the two blank symbols before  'LOCAL'  
are also available(therefore should not be removed using 
REM-Killer).
 
 
 
3.6 Extras 
 
 
3.6.1 Printer Listing 
 
     The Printer Listing assists the use of Program-Modules 
and the use of Names through a 'more or less hungarian' code. 
Printers with broader Paper-rolls  (15  inch),will be supported.
A neat and precise formatting of the pages is obvious.
The page options can be freely adjusted.
 
   Important: The choice of the output devices and 'File' is also  
valid for the Printer Listing. Therefore when output should go to  
the Printer, then 'Printer' must be chosen as the output device! 
 
     The option 'Print in File' is particularly  helpful when you  
want to print the Listing.  If you have private-listings with  
about a hundred pages,at work or in the University (then at best  
you can put them aside-or use a Laser printer)to possibly print
them out, however there is no Atari ST there,then you can with an
MS DOS or VMS-Computer,using the 'Copy  File.prn  >PRN:'-Command,
print the listing using the standing printer output. There must  
simply be a suitable mechanical drive at your disposal,since the 
Disk format of the Atari ST does not considerably differ from  
other Computers. 
 
 
 
3.6.2 Number Listing 
 
     With this a Listing is numbered. The Formatting orientates 
itself automatically to the highest Line number,with this you 
should not set to many spaces to the left. 
 
 
3.6.3 Line offset 
 
     You can set with this, which Number the first Line should  
have.  In the V3-Interpreter the first Line has the Number  0,  
in Tempus and 1st Word Plus the Number is 1. Pre-installed is 0. 
 
 
3.6.4 Remove Comments 
 
     With this function we have come to the 'REM-Killer',  
with which,as already said,is all very fast. Outwith: 
 
     As desired,leading zeros to the left can be removed.
The length of the generated NOR-File('NO R'emarks) corresponds  
then approximately with the number of characters, that you have 
input when typing the listing. 
 
     In addition and as desired,Comment Lines, such as REM- or '- 
Lines,can be replaced with a '-character , with this the total 
number of lines altogether will not be changed. 
 
   Through these extended possibilities of the REM-Killer,before  
removing all leading zeros to the left, can LST-programs be often 
reduced to half of the file size. There are no incompatibilities  
which arise in the GFA-Basic-Interpreter as a result of this,when
using 'Merge'. 
 
 
3.6.5 Statistics 
 
     Behind this function you will find at present only a simple,
however,very fast numerator,that sifts through about 500 kB per
second.  These Assembly-Routine came from,like some of the    
Program sections in the Weller-TOOLS for GFA-Basic,from 
programming colleague Henrik Alt, Author of the Viruskiller
Sagrotan. 
 
With it e.g. the following Statistics will be produced: 
 
            File: E:\WT_GFA\WT_110.LST 
            Size: 101094 Byte 
    Number of Lines: 3256 
Number of Procedures: 111 
                 .. more details 
 
     How can can you ascertain so fast from an LST-File the   
number of procedures?  Entirely simple:  You search the first  
Procedure,and then count all occurences of the patterns $0A $50. 
All large 'P's will be counted, which are at the start of a line.
And this gives us as you know only 'PROCEDURE'. 
 
      Number of indented lines: 2701 
      Number of lines not indented: 555 
      Length of Programs without Procs: 333 
      Number of 'C:' (C-Calls): 12 
      Number of '##' (e.g. USINGS): 36 
      Number of '(#' (e.g. Channels): 9 
      Number of '()' (e.g. ERASE): 47 
Frequency of a character with particular significance: 
   32 $20   24352    The meaning of these numbers are shown
!  33 $21     567    in the border. 
"  34 $22    1917 
#  35 $23     186 
$  36 $24    1440 
%  37 $25    1317 
... 
=  61 $3D     808 
@  64 $40     270 
\  92 $5C      33 
 
 
 
3.6.6 Datamake 
 
     This luxury-Datamake generates the DATA lines of any file
together with the checksum and reading loop.
 
     With it the DATA-Format can be chosen, eight or sixteen
numbers per line,and also whether it should be printed with or
without leading zeros. 
 
     The checksum cs% will actually only then be needed,when  
the program should be published as a listing. Datamake naturally  
does not make any errors itself. 
 
     In DATA's there are found e.g.  Machine programs or Images.  
In particular the use of generated Strings should not be
entered here. 
 
 
Example: an Image in the Bit Image-File-Format, IMG-Image: 
 
SNAPSHOT.IMG: 
' 
DATA 1,8,1,2,174,174,60,C 
DATA 800C,C67E,6060,7EF8,7E,0,3800,800C 
DATA C67E,6060,7EFC,7E,0,3800,800C,C660 
DATA 6060,60CC,18,0,1800,800C,C660,6060 
DATA 60CC,18,3C3C,183E,800C,C67C,6060,7CCC 
DATA 7E18,7E7E,187E,800C,D67C,6060,7CFC,7E18 
DATA 6666,1860,800C,D660,6060,60F8,18,6666 
DATA 1870,800C,FE60,6060,60D8,18,6666,183C 
DATA 800C,FE60,6060,60CC,18,6666,180E,800C 
DATA EE60,6060,60CC,18,6666,1806,800C,C67E 
DATA 7E7E,7EC6,18,7E7E,3C7E,800C,827E,7E7E 
DATA 7EC6,18,3C3C,3C7C 
' 
RESTORE SNAPSHOT.IMG 
SNAPSHOT.IMG$=SPACE$(184) 
cs%=0 
FOR i%=0 TO 182 STEP 2 
  READ Value$ 
  Value%=VAL("&H"+Value$) 
  ADD cs%,Value% 
  cs%=cs% AND &HFFFF 
  DPOKE VARPTR(SNAPSHOT.IMG$)+i%,Value% 
NEXT i% 
IF cs%<>56920 
  PRINT "Error in DATA's by SNAPSHOT.IMG" 
  VOID INP(2) 
  EDIT 
ENDIF 
 
 
3.6.7 Release Memory 
 
     This function removes some internal variables and fields,  
so that Programs, which have been called from the Program-shell,  
have more memory at their disposal. 
 
     The most memory is required by the fields, it will be 
dimensioned during the production of a Cross-Reference-Listing.  
You will(amongst others)be able to recognize,that in the Info-line
free memory is displayed upon start of X-REF and has drastically
shrunk.  Should the Image  WT_GFA.PIC  and the HELP-File - 
WT_GFA.HLP have been loaded,likewise then they will with this
function be erased. 
 
 
 
3.7 HELP 
 
 
3.7.1 Extra-help 
 
     When Extra-help is switched on,  there appears through
clicking on a Menu entry, an Alert-Box with a short explanation of 
the function selected. 
 
 
3.7.2 Table of Contents 
 
     Displays the Table of Contents of the Help texts by Chapter
     numbers. 
 
 
3.7.3 Show Chapter 
 
     With this HELP-Function  you can call up part of these  
Handbooks and display them on the screen. 
 
     However the File WT_GFA.HLP must therefore be found upon 
starting the program, in the same directory as the Program.  
This file is with a special Symbol extended,  Ascii-File  
(see.  Chapter 5.2.3) and will be completely loaded to Memory.  
With 'Release Memory' this Help file can be removed from Memory.
 
 
 
 
4. Distribution Concept of WELLER-TOOLS for GFA-Basic 
 
     The Weller-TOOLS for GFA-Basic is supplied in a Public- 
Domain-Version and in a Pro-Version. With the Public-Domain- 
Version the only restriction is:  The size of the LST-files which 
are editable amount to a maximum 100 kB.  Apart from that,all
other functions are integrated,and naturally all results can 
also be hardcopied or saved.  With this you can optimise or
examine larger programs.  For professionals who write yet larger 
programs, they can allow DM 79,- 
-  for a version without the 100 kB-Restriction present.
 
     With the yield of Public-Domain-Programs it holds within its 
bounds(when it runs well,you could pay for a Hard-disk straight  
from it,  and this actually only because of building up straight
from these Public-Domain-Programs you have paid for),the Author  
would refrain from these double trackings with the kB-restriction. 
Restriction if this were so. 
 
     The Pro-Version costs DM 79,--  incl.  14%  VAT  plus  
Postage. This costs DM 5,-- by prepayment (Transfer,P-Cheque,  
Cash or Postal order),  DM 8,-- by Cash On Delivery (only  
Inland)respectively. DM 10,-- by foreign orders (prepaid).  
Updates of the Public-Domain-Version cost DM 10,-- plus postage. 
Delivery occurs with a receipt with proof of tax paid.
 With lands from the Eastern Block States (orders actually come
to me from there!) you must somehow arrange it differently,such  
as: (Compensation transaction). 
 
        account 1820 001    Raiffeisenbank Rot-Kocher e.G. 
                            Fichtenberg code 600 694 70
        or      296325-709  Postgiroamt Stuttgart, code 600 100 70

 
     From this you can reckon,that the first Program versions  
from V 3.02 will take a shorter time because of the improvements
made from USER-Reports(like with GFA-Interpreter and -Compiler).
For this reason Public-Domain-and the Pro-Versions updates will 
be given for DM 10,--.These updates can in advance,more or less 
'on call',be introduced. On completion it will then be sent to 
you automatically. The sending in of the 'USER-Reports' is 
naturally independant of an order. 
 
 
5. EXTRAS 
 
 
 
5.1 FILES NEEDED 
 
  The following Folder and Files belong to  FILES NEEDED  for  
Weller-TOOLS for GFA-Basic and are found in the Folder WT_GFA: 
 
WT_GFA.PRG     Program-file Pro-Version. 
  and/or 
WT_GFAPD.PRG   Program-file  Public-Domain-Version  with  100 kB- 
               Restriction. 
 
WT_GFA.INF     Ascii-File  with  Paths for the resident  GFA-Pro- 
               gram-shell. Will be automatically loaded. 
 
WT_GFA.FSL     Ascii-File  with  Paths for  flexible  Pro- 
               gram-shell. Will be automatically loaded. 
 
WT_GFA.HLP     HELP-File, which is automatically loaded. 
 
WT_GFA.PIC     Image-File, 32 kb Doodle Monochrome, which is
               automatically loaded. 
 
README.TXT     Ascii Text file with last minute information. 
 
WT_Info        Folder with the following Folders and Files: 
     WT_GFA.DOC     Handbook  with  64 Pages as Text file  for  
                    1st Word Plus. The page's formatting is for  
                    continuous paper with 12 inch Length set,  
                    It can however also with automatical single- 
                    sheet feed be hardcopied,when the Printer can  
                    print 66 Lines per single leaf page. 
                    Page format: 72 - 3 - 3 - 3 - 3 = 60. 
 
     \Images        Folder with 18 IMG-screens for WT_GFA.DOC: 
                    HELLO_WT.IMG,  1040ST.IMG,    SCHEMA3.IMG,  
                    1040SMAL.IMG,  GFA_ETT.IMG,   WINDOW3.IMG,  
                    L_WT_GFA.IMG,  L_File.IMG,   L_Shell.IMG,  
                    L_FDEMO.IMG,   L_FWTGFA.IMG,  L_FSHELL.IMG,  
                    L_XREF.IMG,    L_OUTLIN.IMG,  L_DIVERS.IMG,  
                    L_INFOS.IMG,   WT_PD.IMG,     WT_S.IMG. 
 
     WT_GFA.TXT     Handbook as an Ascii-File, unformatted, with
                    a maximum of 60 lines per page. A Left margin
                    is already in the text,with tabs set to 8 . 
                    Ascii-Text with Formfeeds CHR$(12). Can be  
                    loaded into a Text program and hardcopied 
                    with any Printer.
 
     REPORT.TXT     Blank 'USER-Report' as an Ascii-File 
 
     \DISK_ETT      Folder with the following Files: 
     WT_ETT.PRN     Disk label for 9-Pin printers for the  
                    direct hardcopy from the Desktop through
                    double-clicking on it.  
                    The Printer must have a Resolution of 80 DPI  
                    horizontal and 1/72 inch vertical. 
                    For 24-Pin FX-Emulator (FX_EMU.PRG) used. 
 
DEMO                Folder with informative DEMO-Files (GFA V2): 
     DEMO1.TXT      Cross-Reference-Listing 
     DEMO2.TXT      Outline-List 
     DEMO3.TXT      'Folded' List 
     DEMO4.TXT      Data-List 
 
KEY            Folder with example files for Keywords for  
               the Outliner: 
     CHANNEL.KEY   These Ascii-Files can also be written 
     MEMORY.KEY     with any Text editor. 
     STRUCTUR.KEY   Be cautious with blank spaces. 
     DISK.KEY 
     CASE_IF.KEY  With this you will quickly see,which IF - ELSE -  
                  ENDIF - Strukte in SELECT - CASE -  ENDSELECT  
                  or IF - ELSE IF - ENDIF can be converted.
 
WT_HD          Folder with Help programs,which are ideal for 
               hard-disk operations: 
     WT_SETUP.PRG   Setup-Program for Auto-exec(\AUTO directory). 
     WT_FF.PRG      Find File-Utility. Searches through all of 
                    Hard-Disk or Disk. 
     WT_FT.PRG      Find Text-Utility. Searches through all of 
                    Hard-Disk or Disk. 
     WT_TREE.PRG    Displays the hierarchy(directories, 
                    sub-directories,files,of the Hard-disk or
                    Disk ,graphically. 
     WT_DOUBL.PRG   Displays multiple existing Files,on Hard-drive 
                    or on a Disk. 
     README.TXT     Short-info for SETUP.PRG. 
     MULTI.ACC    Multi-Functions-Accessory  from  Henrik   Alt,  
                  ideal for Programmer and Hard-disk owners: 
                  (amongst others). MS-DOS-operates from  
                  drive A: or B:  with chosen MS-DOS-Format 360 kB  
                  or 720 kB,  Printer adjustment for Epson- and  
                  IBM-Printer (replaced e.g. PTESPON.PRG), Mouse- 
                  accelerator,Software-write-protection for any  
                  Partition of the Hard-disk and for Diskdrives,  
                  Coldstart, Warmstart and Park option for 
                  Hard-disks.
 
Smaller CHANGES possibly made, see also file README.TXT. 
 
 
 
5.2 FILE-FORMATS 
 
 
5.2.1 WT_GFA.INF 
 
This File is in Ascii-Format and can be edited by any Text Editor. 
Comments can be added after a  *-Sign. The File structure is   
distinct,in that the information must remain in the described 
lines.  

     Should the file not be found upon starting the program,
     then the internal Standard values will be set.  
     These comply with the following INF-File: 
 
A:\MENUX.PRG        * In this file are placed the Paths and 
A:\GFABASIC.PRG     * File names for the fixed Program- 
A:\GFABASIC.PRG     * Shell  V3.01. Sequence: Menux, 
A:\GFA_BCOM.PRG     * Interpreter V3, Interpreter V2, Compi- 
A:\TEMPUS.PRG       * ler V2, Editor (e.g. Tempus  V1.10) 
 
 
5.2.2 WT_GFA.PIC 
 
     This file involves an Image in the Screen-Format (32000  
Byte)  in  any Resolution.  The Image supplied will be in  
high resolution. 
 
 The Image will be immediately displayed after the program-start,  
and also in the DESK-Menu when Info is selected. 
 
     This File will automatically be loaded upon Program-start.
With time and memory to spare,you can also erase it or change
the name.  With a paint program,you can instead of the supplied  
Image,load in your own Image. 
 
     The 32 kB of memory, that this file fills,can be released  
again with 'Release Memory'. 
 
 
5.2.3 WT_GFA.HLP 
 
     This file contains the help text,it agrees essentially with  
the Handbook.  It consists of the Ascii-character from CHR$(32).
With it in the Program,no additional Index-Field for the Chapter 
will be needed,the Chapter heading will additionally be with  
CHR$(26)identified. The file can  e.g. with a Text editor like 
Tempus,be altered, not however with 1st Word Plus. 
 
     The about 107 kB of memory,that this file fills, can be  
released again with 'Release Memory' . 
 
 
5.2.4 WT_GFA.FSL 
 
     This file contains the definitions for the flexible program 
-shell.  It is compatible with an earlier version of the flexible
program-shell 'Flesh'.  The first line contains the reference  
for the file: "FSL".  In the second line is placed, how many Menus
that can be set down. Then following this the Title with the
number of entries for this Title, then after this the individual 
entries:  First the description in the Program-shell, then the  
complete file with Path, and finally a Command string  
(mostly blank).It allows a maximum of 100 Programs to be declared,  
with which GEM ,with sufficient Paths sets aside the buffer (for  
the Menu-list)it may be too small. 
 
"WT_GFA.FSL" 
5 
"Text+Graph.",13 
" 1st Word Plus V3.15","C:\WP3\Wordplus.PRG","" 
" 1st XTRA V1.02","D:\WP_ADI\1ST_XTRA.PRG","" 
" Tempus V2.05 ","D:\WP_ADI\TEMPUS.PRG","" 
"---------------------","","" 
" Signum 2 ","D:\SIGNUM\SIGNUM2.PRG","" 
" Install ","D:\SIGNUM\INSTAL.PRG","" 
" Print 9 ","D:\SIGNUM\SPRINT9.PRG","" 
" Print 24 ","D:\SIGNUM\SPRINT.PRG","" 
" DCS 9 ","F:\P9\DCS9N.PRG","" 
" DCS 24 ","F:\P24\DCS24N.PRG","" 
"---------------------","","" 
" Public Painter V0.47","F:\PPM\PPM.PRG","" 
" Picture Converter","F:\PPM\PCONVERT\PCONVERT.PRG","" 
"File/Calc",5 
" Adimens Exec V2.3 ","D:\WP_ADI\EXEC.PRG","" 
" Adi Talk V2.3","D:\WP_ADI\UTILS\ADITALK.TTP","FAKTURA.TLP" 
" Init V2.3","D:\WP_ADI\UTILS\INIT.PRG","" 
" Reorg ","D:\ADI\UTILS\REORG.TTP","" 
" EZ Calc ","F:\CALC\EZCALC.PRG","" 
"GFA-Basic ",6 
" Interpreter 2.02","E:\GFABASIC.PRG","" 
" Compiler 2.02","E:\GFA_BCOM.PRG","" 
" Interpreter 3.07","E:\GFA3\GFABASIC.PRG","" 
" Menu X ","E:\GFA3\MENUX.PRG","" 
" RCS 2.1 ","E:\UTILS\RSC\RCS2.PRG","" 
" WT-GFA 3.02 ","E:\WT_GFA\WT_GFA.PRG","" 
"Utilities",8 
" WT_FF: Find File 1.04","C:\DISKUTIL\WT_FF.PRG","" 
" WT_FT: Find Text 1.03","C:\DISKUTIL\WT_FT.PRG","" 
" WT_DOUBL: Find Doubles ","C:\DISKUTIL\WT_DOUBL.PRG","" 
" WT_TREE: Tree","C:\DISKUTIL\WT_TREE.PRG","" 
" Dust (Hippotamus)","C:\DISKUTIL\DUST.PRG","" 
" Sagrotan 4.15","E:\WT_PD.002\SAGROTAN\SAGROTAN.PRG","" 
" Disk Looker DL II","C:\DISKUTIL\DL_II\DLII.PRG","" 
" ARC-Shell 1.96","C:\ARC\ARCSHEL2.PRG","" 
"Games    ",5 
" Patience","A:\PATIENCE.PRG","" 
" Galerie","A:\GALERIE.PRG","" 
" Dame","A:\RNSSANCE.PRG","" 
" Backgammon ","A:\GAMMON.PRG","" 
" VAX-Games","A:\GFABASRO.PRG","" 
 
 
 
5.3 Printer-driver patches 
 
     With a Disk monitor,the internal printer driver in the file
WT_GFA.PRG, can be altered.With it you must only find the place
 'Printerreset' .  The Control characters are there in the 
 following bytes as plain Ascii-text: 
 
Control codes for the Printer: 
 
Printerreset:1B40______ 
_______8_lpi:1B30______ 
_Draft-Mode:1B7800____ 
_________USA:1B5200____ 
_Paperlength:1B43xx____ 
_Left_Margin:1B6Cxx____ 
Right_Margin:1B51xx____ 
____17.2_CPI:0F________ 
Upper_Margin:1B72xx____ 
Lower_Margin:1B4Exx____ 
 
     The values must only be overwritten with the appropriate  
Control sequences (see your Printer Handbook). With it there are
a maximum 5 bytes per Control sequence  possible.  Control 
sequences that contain variable parameters,must be entered with 
the characters 'xx' . The driver then sets the appropriate  
parameters.  Blank spaces(here overall view because of underline  
'_' marks) defines the end of the sequence,when this is shorter  
than 5 Control characters: 
 
 
 
5.4 CHANGES IN UPDATES 
 
 
5.4.1 CHANGES V1.2 -> V1.42 (Choice) 
 
-    Extension of a flexible Program-shell like Flesh. 
 
-    More Outline-Functions. 
 
 
5.4.2 CHANGES V1.42-> V3.0x (Choice) 
 
-    Adjustments to GFA-Basic V3.0: new Variable-types Byte and  
     Words, new language elements    (SELECT,    ....),    new  
     syntax possibilities (Gosub without open brackets).It can  
     still use GFA-Basic V2.0-Code also. 
 
-    Line-numbers up to 999999, Tab-Distance 6 characters
 
-    Memory information for variable-types 
 
-    Binding of MENUX in Program-shell.  MENUX has not been 
     integrated, with this you can do all that your MENUX program  
     can do(that is the reason you can use the source code
     for the Compiler V3 with it). 
 
-    With the program-shell value returned by the programs(in the  
     occurence of error the error number) is displayed. 
 
-    Printer-driver can be changed (patched). 
 
-    New 'Calendar program', new competition. 
 
-    Listing to the Printer: DEF FN and FUNCTION-Lines bold. 
 
-    Output of Atari's-own "ss"-Characters CHR$(158) as greek 
     CHR$(225),  with that no Peseta-output any longer on 
     'Non-Atari-Printers'. 
 
-    X-REF: In the Protocol,the maximum number of variables, the
     WT_GFA can read, is displayed. 
 
-    X-REF:The Memory requirements can be controlled with Patches.
 
-    Line numbering selectable from  0 (GFA V3) or  1  (Tempus,  
     1st Word Plus) 
 
WT_FT.PRG, WT_TREE.PRG and WT_DOUBL.PRG are new versions.  
 WT_TREE.PRG will be included with the HD-TOOLS-Series.  
Purpose:  Graphical display of the Index structure of a Hard- 
disk. 
 
 
5.4.3 Improvements not (yet) implemented 
 
-    Graphical display of a Procedures-Hierarchy Tree  
     (what's to be done about recursive Functions?) 
 
-    Keyboard control(makes little sense,that the program has  
     few interactions on demand). 
 
-    Output of the Cross-Reference-Listing equal to Make  
     (perhaps already in the next Update). 
 
-    Display from REM-Killer, for how many percent the files
     will be shortened by (Playing). 
 
-    Reports like 'Procedure has been called,are however not  
     available'. 
 
-    ERASE: Warning only, when actually no ERASE. 
 
-    Listing of all local definitions, however not used  
     variables (... are actually important). 
 
-    Switching to medium screen-resolution after starting in  
     low (how does that go?). 
 
-    X-REF as individual program for 520 kB-ST's (uninteresting). 
 
-    External Printer-driver (too many files, for it at the  
     moment patch-possibility.) 
 
-    Global variable types agreement ,  e.g.  DEFINT (perhaps  
     already in the next Update). 
 
 
5.4.4 Errors not yet corrected: 
 
X-REF:    Generate X-REF:  With shortage of memory(ca 45 kB) 
          during Generate X-REF,the program can crash(Error  
          has been observed once). 
 
X-REF:    X-REF  output:  Real-Numbers with Exponent  will be   
          indicated as two variables (2.9E-9 -> 2.9E and 09.) 
 
X-REF: In  GFA-Basic valid Local Variables not only in the  
          Procedure as local,will be defined in it,but also in  
          all of these Procedure calling Procedures.
          There is admittedly no better programmer style,that  
          such variables are not as passed-variables passed on,  
          however this is allowed in GFA-Basic. In WT_GFA  
          however a Local Variable will only be seen within the  
          Procedure as local ,it is defined in it. 
 
Sundry:  Print Listing: With Initialising CHR$(208) wrong. 
 
Sundry:  Print Listing: no Line change. 
 
Sonst.:   Error on output to a write-protected Disk. 
 
     Further errors please look at user-report REPORT.TXT - 
written report.These will be until 01.03.1990 concentrated on, 
after then the work is to be planned for V3.03. 
 
 
 
5.5 TITBITS: PROGRAMMER'S COMPETITION 
 
     In the course of the year the following  Calender-Routine  
arises,it exists out of only (1!)Line - here though,legibly  
formatted.   The program contains only a Command (PRINT) and  
yet some other(24)functions. The task existing with it, to output  
the result in plain-text and to manage with the restricted length
of a Program-line in the Interpreter.The results will be right to  
the Year 1752. 
 
 
INPUT "Day,Month,Year):",t%,m%,j% 
PRINT 
  MID$ ( 
        "Saturday   Sunday   Monday    Tuesday  Wednesday  Th 
         ursdayFriday", 
        1+10*( (   ( 13  * (1 + m% - 12 * (m% < 3))   \   5 ) 
                 + (  5  *          (j% + (m% < 3))   \   4 ) 
                 - (                (j% + (m% < 3))   \ 100 ) 
                 + (                (j% + (m% < 3))   \ 400 ) 
                 + t% 
               ) MOD 7 
             ), 
        10 
       ) 
 
     In Public-Domain-Version 1.2 a smaller competition was  
written.  Whoever shortens these lines further first,should  
freely  obtain the full version.The winner is Alfred Sieglhofer. 
 Quotation:  "The solution idea touched on it,that because of the 
'MODULO 7'-to arrange first time without harmful effect,  
7*((j%+(m%<3)\100)  was allowed to be added.Then this allows it  
both 'Century terms' put together." 
 
     Trivial simplifications,it merely brought about a reduction  
in the number of brackets,it could not have been considered,
by many Interpreter versions that the brackets were unnecessary.
   With Integer division "\" there are differences  e.g.  
between GFA V1 and GFA V2, sowie to anderen Basic-Dialekten. 
 
     The solution from Alfred Sieglhofer is now the new starting- 
situation for the Calender-Competition: 
 
INPUT " Date (Day,Month,Year):",t%,m%,j% 
PRINT " Weekday: "; 
  MID$ ( 
        "Saturday   Sunday   Monday    Tuesday  Wednesday  T 
         hursdayFriday", 
        1 + 10 * ( (   t%  
                     + 13 *  ( m% + 1 - 12 * (m% < 3))   \ 5 
                     +  5 *  (  j% + (m% < 3) )          \ 4 
                     + 25 *  ( (j% + (m% < 3) ) \ 100 )  \ 4 
                   ) MOD 7  
                 ), 
        10 
       ) 
 
     Whoever first sends in a shorter routine yet,in GFA-Basic,
will receive in recognition when it appears,an actual Pro-version 
of the Weller-TOOLS for GFA-Basic. 
 
 
 
5.6 UNIX-TOOLS for PROGRAM DEVELOPMENT 
 
Whoever programs under UNIX in C,  has a couple more programs to  
help them,than are implemented in the Weller-TOOLS for GFA-Basic.  
Whoever feels like it, can with the following help programs,  
program it for GFA-Basic: 
 
 
5.6.1 Program-Checker 'lint' 
 
Searches for: 
-    out of reach Commands 
-    unused Variables 
-    Variables, that are used before Initialisation. 
-    unused Functions 
-    Functions, in which the return value is not used 
-    logical printouts with constant results (e.g.: 
     (a OR NOT a) is as always TRUE 
-    Jump in loop body 
-    Type-Incompatibilities  (often allowed in GFA-Basic, 
     e.g.  a%=b!) 
-    non portable Constructs (?) 
 
 
5.6.2 C-Pre-processor 'pp' 
 
Makes the following: 
 
-    exchanges symbolical constants towards values out(see above) 
-    assess Constants printout, e.g. zmax constant 100  
     for the whole Program. Then valid is  b=zmax-1 -> b=99. 
-    removes Comments (made by the GFA-Compiler) 
-    substitutes symbolic Constants 
-    expanded Macros (?) 
-    it includes-Files in the Source 
-    controls conditional Compilation 
 
 
 
5.7 OVERALL PROGRAM-LAYOUT 
 
When you program also for a number of years yet,you will possibly
understand,for e.g.  CHANGES  to carry out,  or when other 
programmers must familiarize themselves with your program code,it 
is necessary,to meet the slightest deadline with program 
versions.An important information source (also for Co-worker) is,  
apart from detailed comments, the program events: 
 
****************************************************************** 
' 
'       Project: Weller-TOOLS for GFA-Basic 
' 
'  Description: Development system for GFA-Basic-Programs with: 
'                - Flexible, programmable Program-shell 
'                - Cross-Reference-Analyser,fully automatically 
'                  finds errors and makes improvement suggestions. 
'                - Outliner for Analysing the Program structure. 
'                - Many small Utilities (Lister, Rem-Killer, .) 
' 
'         Author: Dipl.-Ing. Clemens Weller 
'   Co-worker: Dipl.-Ing. (FH) Henrik Alt, Gaildorf: Assembler 
'                Dr. Wolfgang Brenner, Schwaebisch Hall: Beta- 
'                  Tester, Beratung 
' 
' Project start: 07.10.88 
'        Status: Released 01.01.90 V3.02, 23.12.89 V3.02 100 kB 
' 
'    CHANGES: 
'    ----------- 
' Version Date         Comments 
' V1.07   07.10.88     ! Putting the Utilities together in a Prog 
' V1.08   23.10.       ! Debugging 
' V1.09   05.11.,10.11.,21.11.  ! Harmonising, Integration of  
'                                 Handbooks 
' V1.1    21.11.,22.11.,23.11.  ! 1. Release Version 
' V1.2    10.12.       ! Adjusted for 4MB Memory ,PD Release 20kB 
' V1.21   17.01.89     ! Checksum introduced 
' V1.31   30.01.       ! DIM and ERASE altered because of error 
'                        when loading 
'                      ! OL (amongst others) Functions improved 
' V1.32   01.02.       ! MC-Routines in Real-Field -> faster  
'                        as in String 
' V1.34   03.02.       ! rm_kill faster and Error free 
' V1.35   04.02.       ! Speed optimisation of xref 
'                        (not ready) 
' V1.41   06.02.       ! Flexible Program-shell integrated 
' V1.42   09.02.       ! Extra-Help integrated,Released for sale 
' V2.00   06.07.89     ! Start of extensive improvements (e.g.  
'                        extra List) 
'         11.07.       ! 6-figure Line-numbers, Sprites left out 
' V2.01   29.07.       ! Menux  integrated in Shell  
' V2.02   04.08.       ! GRAPH-Functions V2->V3 
' V2.03   23.08.       ! More SELECT, Word, Byte, SUCC. Trace for 
'                        Developing. 
' V2.04   24.08.       ! xref causes fewer (none?) Errors  
'                        with GFA V3. 
'                      ! Local->Global Var. wg. Speed 
' V2.05   28.08.       ! EXEC creates Problems: CLOSEW 4 - 0 
'                        removed, then ok. 
' V2.06   29.08        ! Fileselect for TOS 1.4 extended, / -> \ 
' 
' and so on 
' **************************************************************** 
 
 
5.8 OVERVIEW OF  OTHER PROGRAMS FOR GFA-BASIC 
 
     This List contains some Tools for GFA-Basic.  It holds no
claim to correctness and completeness.  Supplementary to this,
suggestions and corrections are welcome. 
 
 
5.8.1 Analysers 
 
 
BASICREF, STAR-REF 
     Author:    Rainer Koch, Koelner Str. 156, 5210 Troisdorf 
     Magazine:    ST-Computer Nr. 111 
     Zweck:    Cross-Reference-Analyser;draws up Variables lists  
               and prints Listing with Line numbers .  Output to  
               File or Printer (Star NL-10);  incl. Sourcecode.
     Version:  2.1 from 23.10.87 
 
CROSSREF 
     Author:   H.Bauch, Details: Lothar Veitenhansl,Hoelgerstr.  
               12, 6100 Darmstadt, Tel. 06151/23720 
     Magazine:    Idea: Listing in ST-Computer 5/87 S. 36 
 
TRACEBAS 
     Source:    GFA-CLUB, Disk Nr. 22 
     Author:   Lothar Veitenhansl, Hoelgerstr. 12, 6100 Darmstadt,  
               Tel. 06151/23720 
     Purpose:  "The program was necessary,there I have developed
               a 180 Kb  GFA-Basic-Program ,in this errors of 
     variable-organisation,admittedly through the CROSSREF.PRG,
     were easy to discover,errors in the logical execution  
     however through circa. 400 Procedures were still to  
     be ascertained.  The normal  TRACE Function  (TRON)  gives  
     far too much Information out,  logical  Structure-Errors  
     are also not ascertained with it. It was therefore suggested,  
     a possibility be found,   before the deterioration of the  
     procedures  output.  Additionally to the necessary Con- 
     trol-calls GOSUB uprg(1=Start or  0=End, Sub program-name) 
     fits the program for the purpose of improved readability  
     of the listing of the subprogram-names as REM (!) on RETURN  
     to.These will no longer be erased! The TRACEBAS.PRG   
     produces a printer-or screen-list as a result,it then gives
     out the current subprg with the procedures called when 
     leaving the subprograms ,  (Printer  :  tracelst!=TRUE,   
     Screen :  tracecon!= TRUE),as well as the level of the Uprgs.  
     and the number of calls.  From this list it can directly and  
     fastly generate a Nassi-Shneiderman-Diagram ,  while you can 
     colourfully mark the Block.  Be cautious  when using the  
     TRACEBAS.PRG on Programs in which the Variables tracelst!,  
     tracecon!  or the Sub program PROCEDURE uprg() have been 
     used !!!"
 
STRUKTO 
     Author:    Peter Ubachs,Schlenkestr. 54, 4020 Castrop-Rauxel 
     Source:    for DM 5,-- Prepaid direct from Author 
 
 
5.8.2 Mask- and Menu-Generators 
 
KLIK-EDI  CLICK BOX CONSTRUCTION SET 
     Author:    Dietrich  Glasenapp,  Linzenicher Weg  38, D-5170  
               Juelich 12, Tel. 02461/8704 
     Source:    Direct from Author, 'Introductory price' DM 19,90 
     Function: "Program system for graphical organization of the  
               Monitor-User Interface of the Control-Menus for  
               technical-simple Applications." Editor is a SECTION  
               of the User programs,through this faster design
               and testing out is possible. 
     Report:   For GFA-Basic V3; Program set as LST-File (32 kB);  
               good comprehensible instructions in TXT-File  
               (51 kB);  home made procedure for management of
               Boxes under Mouse-control;no GEMVDI-functions.
 
BCS - Basic CONSTRUCTION SET 
     Author:    Black Ninija (no address known) 
     Function: Menus and Dialogue-boxes can be edited in the Prog,
               and saved as LST-Files and 'merged' into another  
               program.Home made procedures for the management of 
               Boxes under Mouse-control;   
               no GEMVDI-Functions. 
     Anm.:     Assists with the Programming of your own  Desk- 
               tops with GFA-Basic.  Through an installed Art-pro 
               gram,the Menus (Buttons and  embellishments)can be  
               displayed on the screen and Icons placed also.  
                         BCS  will then produce a runnable  GFA- 
               Basic-Program, that the Desktop set up and the  
               installed Buttons can interrogate. (M) 
 
TEXTER 
MEDITOR 
MSK-GEN 
 
MSK-Edit  Mask-Editor for GFA-Basic 
     Source:    ST-Computer Nr. 111 
     Function: "Generally, in Basic the Program  draws up and sets 
              input masks  , has problems with Print At()  
              and so on.This Program draws up input masks and then  
              transfers these as File.MSK  for further editing.  
              Transferred will be: Mask-size, Background-colour, 
              Title,  Input-texts,  Input-jumps,  Input- 
              length.  Incl.  Sourcecode;  Generates with simple  
              usage , a complete input mask as  Source- 
              Text (Form Input). Incl. Source in GFA-Basic. (M),  
              69 029 Bytes            
 
MENU EDIT 
     Source:   ST-Computer Nr. 149 
     Function:    A sort of RCS for GFA-Basic-Menu lists.  Lay out  
               your Menu-list as per a Dialogue.  The Program then 
               will produce a complete Program facing  for  
               GFA-Basic,  this can be fed into your own Program  
               and the entire Menu management of your Programs  
               can be resolved. (M) 
     Register: Actually worthwhile value during the design phase! 
 
 
5.8.3 Shells 
 
FLESH Flexible Shell 
     Author:   Peter Sippel 
     Source:   St-Computer Nr. 144,Source obtainable from Author. 
     Function: Program-shell, with which about 100 different 
               Programs can be called.  Very simple to use. 
               The Program unfortuneately consumes about as much  
               memory space approximately (approx.100 kB).In the  
               meantime there is also a commercial Version 
               (DM 79,--). 
 
GFA-Shell 
     Source:    ST-Computer Nr. 129 
     Function:  Program-shell;   Command Line Interpreter (CLI)  
                and integrated Sprite-Editor. 
 
SUPERSHELL 
     Source:    ST-Computer 118 
     Function:    Universal Program-shell. Call any Pro- 
               gram from the Menu-list. Sourcecode in  GFA-Basic  
               on the Disk.  You can personalise this to your own  
               wishes. (F/M);  
 
G_CSHELL 
     Source:    ST-Computer Nr. 175 
     Function:  Program-shell for GFA-Basic.  With this Program  
                the Interpreter and Compiler can be easily called.  
                  (M) 
 
 
5.8.4 Converter 
 
OSKAR     Omikron fast Converter for Atari ST-Computer 
     Author:    Markus  Zietlow,   Wilhelm-Kraft-Str. 14,  4322  
               Sprockhoevel 2 
     Source:  Listing in Happy Computer Sonderheft 23; Reader dis- 
               kette 25925 for DM 39,90 (much to expensive). 
     Function: Changes  translated  GFA-Basic-Source codes(*.LST)  
               to Omikron-Basic.However hand working is necessary  
               after that. 
 
ST-Kill 
     Source:    On the original GFA-Basic-Disk V2.02 
     Function:  Converts ST-Basic,Omikron-Basic,GW-Basic amongst 
                othersto GFA-Basic. about 9399 Byte. 
 
Converter: ST-Basic to GFA-Basic, 41 719 Bytes 
 
CONVERT 
     Author:    Klaus Mulder,  Obere Hauptstr.  4, 8051 Massenhau- 
               sen, Tel. 08165/8437 
 
Basic converter 
 
 
5.8.5 Other 
 
SPRITE Editor 
     Function:    Sprite Editor,(monochrome only), 12 866 Bytes 
 
ICONEDIT 
     Source:    ST-Computer Nr. 67 
     Function:  Makes  Sprite-,  Mouse- and Fill patterns you can  
                use in  GFA-Basic),  (mono),  31875  
                Bytes. 
 
SECO 
     Author:   Eckart Stinshoff, Address unknown 
     Source:   ST-Computer Nr. 111 
     Function: Manages image cuttings (with GFA-Basic  Commands  
               PUT  and GET these are dealt with) and sets them in 
               libraries. Incl. Source in GFA-Basic. (F/M),  
               63 874 Bytes. 
 
 
 
5.9 THIS and THAT 
 
 
5.9.1 Thanks to: 
 
My wife Ingrid for active co-operation and great patience. 
 
     Henrik Alt for the Assembly-Routines,  Wolfgang Brenner for  
the performance of tests and proof reading of the Handbooks, 
UweRoeger for the burning of the TOS 1.4-Eproms. 
 
    Particular thanks goes to the following USERS,  who with their  
detailed  USER-Reports have considerably aided with the further 
development of this program; 
 
    Daniel Egner,  Thomas Fehr,  Dr.  Flesch, Thorsten Floeck, P.  
    Frueh,  Thomas Gaertner,  Thorsten Hansen,  Roland  Heinemann,  
    Eric Hofmann, Axel Juehne,  Karsten Koeper, Thomas Kraenz,   
    Dr.Norber Mayer, Thomas Muckert, Andreas Pirner,  Marc  Saul,  
    Hayo Schmidt,  Stephan Schoroth, Friedemann Voigts, Heinrich  
    Wolf. 
 
  Also the others ca.  100 users, have filled in the USER-Report,  
filled in have,these and others are thanked for the active 
collaboration with this. 
 
On more practical grounds,it was impossible to answer all of the
letters written.When problems arise,often a short telephone call  
for clarification will help a great deal.Note that the Address for  
'Weller-TOOLS' from February 1990 is changed, please do not dial 
the old Telephone number.  Posting to the old Address will take a  
longer period of time to reach us. 
 
 
5.9.2 Ideas from other Programs: 
 
     H. Bauchs Listing for Cross-Reference-Analysers in the ST- 
Computer from May 1987, Peter Sippels flexible Shell 'Flesh' from  
the ST-Computer Public-Domain-Disk No. 114  and Lothar  Vei- 
thenhansls Tracebas from the GFA-Club-Disk No. 22.  Ideas for the  
Programming styles and for Methods of working with programming,in 
the Book 'Fascination Program'. 
 
 
5.9.3 Program hints: 
 
   The Program was developed with  GFA-Basic Interpreter V3.07D
and compiled with the Compiler V3.03.The Handbook was written   
with 1st Word Plus V3.15,the Table of Contents were drawn up with  
1ST XTRA V1.02 .The Images were drawn with Public Painter V0.47  
(Monochrome)and can be edited with this also.Tempus V2.05 has done
a good job for us. Finally,for the Fan mail: Adimens V2.3,  
and Aditalk V2.3 looks after the Addresses. 
 
 
5.9.4 Copyright, Public Domain: 
 
The Software,the Handbook,the Name 'Weller-TOOLS for GFA-Basic' 
as well as the 'Weller-TOOLS'-Sign are subject to the Copyright  
of Clemens Weller,  Steinheim a.d. Murr.  Disks of the Public- 
Domain-Version may be freely copied, as long as the compilation 
of the Disks have not been changed,without this,these Copyrights 
will have been infringed. 
 
 
5.10 USER-Report "Weller-TOOLS for GFA-Basic" V3.02 
 
This blank may help to improve the Weller-TOOLS for GFA-Basic.  
 This blank, should the occassion arise, repeatedly,  print out, 
 fill-in and send to: 
 
     The Address of 'Weller-TOOLS'  from February 1990 will be  
altered,  please do not dial the old Telephone number. Posting  
to the old Address will take a longer period of time to reach us. 
 
            Weller-TOOLS 
            Dipl.-Ing. Clemens Weller 
            Adalbert-Stifter-Strasse 27 
 
            7141 Steinheim a.d. Murr 
 
 
Name        ..................................................... 
 
Street, No. ..................................................... 
 
city, postcode .................................................. 
 
Telephone     ....................... 
 
Version     3.02 PD......  obtained on(circa) ................ 
 
Sourcee:     O self copied
            O Pd-House: ....................................... 
 
Hardware 
 
Atari Computer  ......... Hard-disk .. MB   Monitor  O mono O Col 
 
Printer: ........................................................ 
Problems when printing Listing : 
O No   O Yes: .................................................. 
 
GFA-Programs (Circa-Information) 
 
                 Size of LST-Files max ca  ...... kB 
                    Number Procedures max. ca. ...... 
Number of Local Variables per Procedure max. ca. ...... 
 Which Variables types appear frequently : ........... 
                              how often ca. ...... 
 
Opinions: 
 
Particularly useful is: 
O X-REF   O Outliner  O Shell  O Lister  O Others: ........... 
 
Particularly requiring further improvement are: 
O X-REF   O Outliner  O Shell  O Lister  O Others: ........... 
O Speed     O Screen display   O Operation 
 
My Programming knowledge (Mark, freely): 
 
      Starter <--0--1--2--3--4--5--6--7--8--9--10--> Expert 
 
 
Suggestions, Criticism, Ideas, Errors, Wishes: 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 
