Example of an Outline-File
--------------------------

     In the following example it should be examined,whether the 
treatment of different In-/Output-Channels are 'cleanly'  program-
med. It allows e.g. not to happen, that a file should be opened, 
which is already open. This file was generated with the Outline- 
function ,with that the runtime-error  'File already open' appears.

File: E:\WT_GFA\WT_107.LST 89529 Byte
Keywords:
OPEN 
CLOSE 
PRN:
--------------------------------------------------------------------------------
PROCEDURE e_pars
  OPEN "I",#1,e_file$
  CLOSE #1
PROCEDURE f_copy
        OPEN "I",#1,f_copy_source$
        OPEN "O",#2,f_copy_target$
        CLOSE #1
        CLOSE #2
PROCEDURE exe_edit
  IF a_file$<>"" AND a_file$<>"PRN:"
PROCEDURE xref_out
          OPEN "O",#2,a_file$
            CLOSE #2
PROCEDURE ol
          OPEN "O",#2,a_file$
          CLOSE #2
PROCEDURE ol_load
    OPEN "I",#1,ol_file$
    CLOSE #1
PROCEDURE ol_save
    OPEN "O",#2,ol_file$
    CLOSE #2
PROCEDURE out_init
    a_file$="PRN:"
PROCEDURE init_exe
    OPEN "I",#1,act_lw$+":"+act_path$+"WT_GFA.INF"
    CLOSE #1
PROCEDURE i_all
      OPEN "O",#2,a_file$
      CLOSE #2

     In a Procedure with about 100 comprehensive lines,  'xref_out' will 
be a more or less longer procedure,if there is an inbuilt error: There will
be an output channel opened and closed again later.  The 'CLOSE' is  
indented again however, so that here the possibilities are that something 
is not correct.  If between times the 'IF-ENDIF'-Strukte  has been 
used, then it may be, that the 'CLOSE' has been wrongly positioned. 
Particularly when switching between different program sections can 
this occur easily.  It is also recommended,that this program-section
be looked at yet once more in the Interpreter.

The other OPEN-CLOSE-combinations are equally indented further, 
so that here(probably) no errors are present..
