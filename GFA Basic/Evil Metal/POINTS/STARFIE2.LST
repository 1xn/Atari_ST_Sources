'
'       Exemple de STARFIELD
'       By Evil Metal of DUNE
'       Utilisant une routine assembleur
'       avec clipping des points en assembleur.
'
CLEAR
CLS
'
@init
'
' Ne pas oublier de charger les INLINE :
'
' Routines assembleur :
' ---------------------
' Utilisation de la routine de point assembleur clipp‚
'
INLINE plotc%,1826
INLINE efface%,86
'
ndp&=100                 ! Nombre d'‚toiles.
speed%=3                 ! Vitesse, pas
'
' Tableau pour les points 3d
' Ici il y a 1 optimisation : Enlever les tableaux et remplacer par des
' buffer
'
DIM x3d%(ndp&),y3d%(ndp&),z3d%(ndp&)
'
cx%=160                 ! Centre X
cy%=100                 ! Centre Y
'
' cr‚ation des coordonn‚es 3d :
'
FOR i&=0 TO ndp&
  x3d%(i&)=MUL(RAND(320)-cx%,80)
  y3d%(i&)=MUL(RAND(200)-cy%,80)
  z3d%(i&)=RANDOM(256)
NEXT i&
'
' Cr‚ation de table pour l'‚ffacement
'
table$=SPACE$(ndp&*4)
table%=V:table$
table0%=table%+2
'
table2$=SPACE$(ndp&*4)
table2%=V:table2$
table02%=table2%+2
'
'
REPEAT
  '
  CLR i&
  CLR pos%
  '
  REPEAT
    '
    z3d%(i&)=SUB(z3d%(i&),speed%)               ! deplacement de notre z
    IF z3d%(i&)<2                               ! si top pret de nous en remet
      z3d%(i&)=256                              ! son z normal
    ENDIF
    '
    x2d&=ADD(cx%,DIV(x3d%(i&),z3d%(i&)))        ! X/Z
    y2d&=ADD(cy%,DIV(y3d%(i&),z3d%(i&)))        ! Y/Z
    '
    CARD{table%+pos%}=x2d&
    CARD{table0%+pos%}=y2d&
    '
    ADD pos%,4
    INC i&
    '
  UNTIL i&>ndp&                                 ! Fin de la boucle
  '
  ~C:plotc%(L:e2%,ndp&,L:table%,L:table%)       ! On affiche tous les points
  '
  SWAP e1%,e2%                                  ! On swap les buffers a cause
  SWAP table%,table2%                           ! des deux ‚crans
  SWAP table0%,table02%
  ~XBIOS(5,L:e1%,L:e1%,-1)                      ! Bonne adresse ‚cran
  '
  '
  ' CARD{&HFFFF8240}=&H777                     ! Vbl free
  VSYNC
  CARD{&HFFFF8240}=0
  '
  '
  ~C:efface%(L:e2%,ndp&,L:table%)               ! On efface les points
  '
  '
UNTIL INKEY$=" "
'
@fin
'
> PROCEDURE init
  '
  s%=GEMDOS(32,L:0)                     ! On passe en mode superviseur
  '
  xb%=XBIOS(2)                          ! On sauve l'adresse de l'‚cran
  rez%=XBIOS(4)                         ! On sauve la resolution
  ~XBIOS(5,L:-1,L:-1,0)                 ! On passe en basse r‚solution
  '                                     ! Buffer pour la palette
  INLINE pal%,32
  '                                     ! Il faut mieux sauvegarder ca aussi !
  INLINE sauv%,4
  LONG{sauv%}=LONG{&H484}
  '
  BMOVE &HFFFF8240,pal%,32              ! On copie la palette dans notre buffer
  '
  DIM s%(32255/4)                       ! On reserve les ecrans dans des
  DIM s1%(32255/4)                      !
  e1%=(VARPTR(s%(0))+255) AND &HFFFF00  ! On d‚finit les ‚crans … des
  e2%=(VARPTR(s1%(0))+255) AND &HFFFF00 ! variables
  '
  VSYNC                                 ! Attente de Vbl
  '
  HIDEM
  '
  SETCOLOR 0,&H0                        ! Quelques couleurs
  SETCOLOR 1,&H777
  SETCOLOR 2,&H555
  SETCOLOR 3,&H777
  SETCOLOR 15,&H777
  '
  '
RETURN
'
> PROCEDURE fin
  VSYNC                                         ! Attente de Vbl
  LONG{&H484}=LONG{sauv%}                       ! On restore les donn‚es
  ~XBIOS(5,L:xb%,L:xb%,-1)                      ! de bases
  ~XBIOS(5,L:-1,L:-1,rez%)
  BMOVE pal%,&HFFFF8240,32
  '
  VOID GEMDOS(32,L:s%)                          ! Passe en mode User
  '
  EDIT                                          ! On revient sous l'‚diteur
RETURN
'
