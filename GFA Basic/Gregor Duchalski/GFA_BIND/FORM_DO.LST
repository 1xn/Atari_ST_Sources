' Erweiterte FORM_DO()-Routine fÅr GFA-BASIC 3.x
' Basiert auf einem Artikel in der ST COMPUTER
' Komplett Åberarbeitet und insbesondere um Flydials, Checkboxen usw.
' erweitert von Gregi Duchalski, Baueracker 15a, 4690 Herne 1
' eMail-Adresse: GREGOR DUCHALSKI @ DO im MausNet.
'
' last change 27.06.92
'
' Die Routinen wurden ursprÅnglich nur von einem Menschen benutzt. Da einige
' Leute Interesse bekundeten, habe ich die Bindings Åberarbeitet. Ich bitte
' daher um Nachsicht.
' Mit Anregungen und Fragen kînnen Sie sich gerne an mich wenden.
' ------------------------------------------------------------------------------
' Zu diesem Listing gehîrt die FORM_DO.RSC-Datei. Zum besseren VerstÑndnis
' sollten Sie sich diese Dialogbox mit einem RCS ansehen.
'
' GrundsÑtzliches...
'  Die Adressen der DialogbÑume befinden sich im Feld rsc_adr%(), die Koordinaten
'  in den Feldern rsc_x&(),rsc_y&(),rsc_b&(),rsc_h&(). Die einzelnen Funktionen
'  werden meistens nur mit der Baumnummer aufgerufen, das spart Tipparbeit.
'
'  Mit der Funktion rsc_draw() wird der Dialog gezeichnet. Dabei wird in
'  rsc_back$ der Hintergrund gesichert. Dieser wird zur Restauration z.B.
'  beim Flydial benîtigt.
'
' Erweiterte Editier-Mîglichkeiten...
' -Spezielle Tastenbelegungen:
'  SHIFT-LINKS/RECHTS springt an den Anfang/das Ende eines Eingabefeldes
'  CLRHOME/SHIFT-CLRHOME springt zum ersten/letzten Eingabefeld
'  SHIFT-HOCH/RUNTER macht das Gleiche
'  UNDO bricht den Dialog ab, wenn es eine 'Abbruch'-Taste gibt.
'
' -Tastaturbedienung Åber ALTERNATE:
'  Im oberen Byte von OB_TYPE wird der SCAN-Code der gewÅnschten Taste einge-
'  tragen. Beispiel: 97 fÅr 'Abbruch', 98 fÅr 'Hilfe'
'
' -Sonstiges:
'  Der Cursor lÑût sich in Eingabefeldern zeichengenau mit der Maus
'  positionieren.
'
' Hintergrund: Die Realisation der versch. Objekte...
'  Vorweg: Normalerweise werden erweiterte AES-Routinen Åber sog. USERDEFINED-
'  Objekts realisiert. Da sich in GFABASIC diese Routinen nur schwer
'  ansprechen lassen, muûte ein anderer Weg gegangen werden. Optisch ist
'  allerdings (fast) kein Unterschied festzustellen. Probleme kînnten sich bei
'  einigen Farbauflîsungen ergeben.
'
'  Flydial     : Wird durch Setzen des 10. Bits in OB_FLAGS gekennzeichnet.
'                Ist ein Image, kann aber z.B. auch eine Box sein.
'  Checkboxen  : Bit 11 in OB_FLAGS gesetzt. Eine einfache Box mit dem
'                SELECTED-Attribut. Das Ankreuzen wird durch Setzen des
'                CROSSED-Attributes erreicht.
'  Beide Objekte brauchen _keinen_ TOUCHEXIT-Status, da wir ja selbst die
'  Auswertung Åbernehmen.
'
'  Radiobuttons: Ein Icon.
'  Unterstr. Buchstaben: Ein Image.
'
'  Am besten schauen Sie sich die Beispiel-Resource einmal an.
'
'  Zum Setzen der Werte in OB_STATE/FLAGS/TYPE eignet sich ein Resource-
'  Construction-Set. Ich empfehle INTERFACE von SHIFT.
'
init
'
' Resource laden. Hier muû natÅrlich Ihr persînlicher Pfad rein!
rsc_laden("D:\BINDINGS\FORM_DO.RSC",0)
rsc_draw(0,0,10)
'
' Dialogaufruf (Objektbaum,Startobjekt, in obj& steht am Ende das Objekt, in
' dem der Cursor steht). Unsauber: In mc& steht die Anzahl der Mausklicks.
rsc&=@form_do(0,1,obj&)
'
~RSRC_FREE()
EDIT
'
> PROCEDURE init
  '
  ' Hier werden ein Paar Werte geholt, die von den RSC-Routinen
  ' benîtigt werden.
  '
  ' Bildschirmausmaûe...
  max_w&=SUCC(WORK_OUT(0))
  max_h&=SUCC(WORK_OUT(1))
  '
  ' Hintergrundfenster. Wichtig fÅr die Flydials...
  ~WIND_GET(0,7,deskx&,desky&,deskw&,deskh&)
  '
  ' FÅllumrandung aus...
  BOUNDARY 0
  '
RETURN
> PROCEDURE rsc_laden(a$,l&)
  LOCAL i&
  '
  ' Setzt das Bit b& in a&, und zwar TRUE bei c&<>0...
  DEFFN bsc(a&,b&,c&)=-MUL((c&=0),BCLR(a&,b&))-MUL((c&<>0),BSET(a&,b&))
  '
  ' Vertauscht High- und Low-Byte von OB_TYPE...
  DEFFN swap_type(a|,b|)=BYTE(SHR(OB_TYPE(rsc_adr%(a|),b|),8))
  '
  ' GegenstÅck zur Prozedur rsc_flags()...
  DEFFN rsc_flags(a|,b|,c|)=BTST(OB_FLAGS(rsc_adr%(a|),b|),c|)
  '
  DIM rsc_adr%(l&),rscx&(l&),rscy&(l&),rscb&(l&),rsch&(l&)
  '
  IF RSRC_LOAD(a$)=0                 ! Rsc laden...
    ALERT 3," | Fehler beim Laden der | Resource-Datei... ",1,"Abbruch",b&
    EDIT
  ENDIF
  '                                  ! Baumadresse ermitteln...
  FOR i&=0 TO l&
    '
    ~RSRC_GADDR(0,i&,rsc_adr%(i&))
    ~FORM_CENTER(rsc_adr%(i&),rscx&(i&),rscy&(i&),rscb&(i&),rsch&(i&))
    '
  NEXT i&
  '
RETURN
' -------------------------------------------------------- RSC-Routinen
' Diese Routinen dienen nur der Vereinfachung.
'
> PROCEDURE rsc_draw(a|,b|,c|)
  LOCAL h&,w&
  '
  ' Zeichnet den Objektbaum a| ab Objekt b| mit der Tiefe c|
  ' Der Dialoghintergrund wird dabei in rsc_back$ gesichert, es sei
  ' denn, c| ist gleich 11. Auûerdem wird der Dialog mit einem
  ' Schatten versehen.
  '
  IF c|>3 AND c|<>11
    w&=MIN(PRED(max_w&),ADD(ADD(rscx&(a|),rscb&(a|)),10))
    h&=MIN(PRED(max_h&),ADD(ADD(rscy&(a|),rsch&(a|)),10))
    GET rscx&(a|),rscy&(a|),w&,h&,rsc_back$
    '
    ' Optischer Schnickschnack
    ~FORM_DIAL(1,ADD(rscx&(a|),DIV(rscb&(a|),2)),ADD(rscy&(a|),DIV(rsch&(a|),2)),0,0,rscx&(a|),rscy&(a|),rscb&(a|),rsch&(a|))
    '
    ' Schattenmalerei
    rsc_draw_shadow(a|)
  ENDIF
  '
  ~OBJC_DRAW(rsc_adr%(a|),b|,c|,rscx&(a|),rscy&(a|),rscb&(a|),rsch&(a|))
  '
RETURN
> PROCEDURE rsc_draw_shadow(a|)
  LOCAL b&,c&,d&,e&
  '
  ' Zeichnet einen Schatten um die Dialogbox. Kînnen Sie natÅrlich auch
  ' weglassen, reine Geschmacksache.
  '
  b&=ADD(rscx&(a|),rscb&(a|))
  c&=ADD(rscy&(a|),rsch&(a|))
  d&=MIN(PRED(max_w&),ADD(b&,10))   !Wegen Quick ST Clippen...
  e&=MIN(PRED(max_h&),ADD(c&,10))
  '
  DEFFILL 1,2,4
  GRAPHMODE 2
  '
  PBOX b&,ADD(rscy&(a|),10),d&,e&
  PBOX ADD(rscx&(a|),10),c&,d&,e&
  '
  GRAPHMODE 1
  DEFFILL 0,2,8
  '
RETURN
> PROCEDURE rsc_back(a|)
  '
  ' Restauriert den Dialoghintergrund von Baum a|
  '
  PUT rscx&(a|),rscy&(a|),rsc_back$
  CLR rsc_back$
  '
  ' Optischer Schnickschnack
  ~FORM_DIAL(2,ADD(rscx&(a|),DIV(rscb&(a|),2)),ADD(rscy&(a|),DIV(rsch&(a|),2)),0,0,rscx&(a|),rscy&(a|),rscb&(a|),rsch&(a|))
  '
RETURN
'
> PROCEDURE rsc_state(a|,b|,c|,a&)
  '
  ' Setzt das OB_STATE Bit c| des Objektes b| im Baum a|
  ' Bei einer CHECK-BOX (Radio-Kreuz) ist etwas mehr Aufwand erforderlich.
  '
  IF BTST(OB_FLAGS(rsc_adr%(a|),b|),11)         ! Ist es ein Radio-Kreuz?...
    '                                           !...SELECTED-Status...
    IF c|=0 AND ((NOT BTST(OB_STATE(rsc_adr%(a|),b|),7)) OR a&=0)
      OB_STATE(rsc_adr%(a|),b|)=@bsc(OB_STATE(rsc_adr%(a|),b|),1,a&)! öber Bit 1
      '
    ELSE IF c|=3                                !...DISABLED-Status
      OB_STATE(rsc_adr%(a|),b|)=@bsc(OB_STATE(rsc_adr%(a|),b|),7,a&)! öber Bit 7
      '
    ELSE IF c|<>0                               ! sonst normal behandeln
      OB_STATE(rsc_adr%(a|),b|)=@bsc(OB_STATE(rsc_adr%(a|),b|),c|,a&)
    ENDIF
    '
  ELSE                                          ! Normales Objekt...
    OB_STATE(rsc_adr%(a|),b|)=@bsc(OB_STATE(rsc_adr%(a|),b|),c|,a&)
  ENDIF
  '
RETURN
> FUNCTION rsc_state(a|,b|,c|)
$F%
'
' GegenstÅck zur Prozedur rsc_state()
'
IF BTST(OB_FLAGS(rsc_adr%(a|),b|),11)         ! Ist es ein Radio-Kreuz?...
  '
  IF c|=0                                     ! SELECTED-Status
    RETURN BTST(OB_STATE(rsc_adr%(a|),b|),1)  ! ...Åber CROSSED abfragen
    '
  ELSE IF c|=3                                ! DISABLED-Status...
    RETURN BTST(OB_STATE(rsc_adr%(a|),b|),7)  ! ...öber Bit 7 abfragen
  ENDIF
  '
ENDIF
'
RETURN BTST(OB_STATE(rsc_adr%(a|),b|),c|)     ! Normales Objekt...
'
ENDFUNC
'
> PROCEDURE rsc_flags(a|,b|,c|,d|)
'
' Setzt das Bit c| im OB_FLAGS-Status des Objektes b| im Baum a|
' d|=0 : FALSE, d|<>0 : TRUE
'
OB_FLAGS(rsc_adr%(a|),b|)=@bsc(OB_FLAGS(rsc_adr%(a|),b|),c|,d|)
'
RETURN
'
> PROCEDURE rsc_fly_dial(a&)
LOCAL a$,b&,h&,x&,y&
'
' Tja, hier also wird der Objektbaum durch die Gegend bewegt.
' deskx& usw. werden benîtigt
'
DEFMOUSE 4
GRAPHMODE 3
MOUSE mx&,my&,mb&
'
x&=SUB(mx&,rscx&(a&))
y&=SUB(my&,rscy&(a&))
'
GET rscx&(a&),rscy&(a&),ADD(rscx&(a&),PRED(rscb&(a&))),ADD(rscy&(a&),PRED(rsch&(a&))),a$
BOX SUB(PRED(mx&),x&),SUB(PRED(my&),y&),ADD(SUB(mx&,x&),rscb&(a&)),ADD(SUB(my&,y&),rsch&(a&))
'
~GRAF_MOVEBOX(0,0,0,0,0,0)
'
REPEAT
  '
  MOUSE b&,h&,mb&
  IF b&<>mx& OR h&<>my&
    '
    IF SUB(PRED(b&),x&)>deskx& AND SUB(PRED(h&),y&)>desky& AND ADD(SUB(b&,x&),rscb&(a&))<ADD(deskx&,PRED(deskw&)) AND ADD(SUB(h&,y&),rsch&(a&))<ADD(desky&,PRED(deskh&))
      '
      BOX SUB(PRED(mx&),x&),SUB(PRED(my&),y&),ADD(SUB(mx&,x&),rscb&(a&)),ADD(SUB(my&,y&),rsch&(a&))
      mx&=b&
      my&=h&
      BOX SUB(PRED(mx&),x&),SUB(PRED(my&),y&),ADD(SUB(mx&,x&),rscb&(a&)),ADD(SUB(my&,y&),rsch&(a&))
      '
    ELSE
      SETMOUSE mx&,my&
    ENDIF
    '
    ~GRAF_MOVEBOX(0,0,0,0,0,0)
  ENDIF
  '
UNTIL MOUSEK=0
'
x&=SUB(mx&,x&)
y&=SUB(my&,y&)
'
BOX PRED(x&),PRED(y&),ADD(x&,rscb&(a&)),ADD(y&,rsch&(a&))
GRAPHMODE 1
DEFMOUSE 0
'
PUT rscx&(a&),rscy&(a&),rsc_back$ !Kein rsc_back weil sonst Form_Dial
'
OB_X(rsc_adr%(a&),0)=ADD(x&,3)
OB_Y(rsc_adr%(a&),0)=ADD(y&,3)
rscx&(a&)=x&
rscy&(a&)=y&
'
b&=MIN(PRED(max_w&),ADD(ADD(rscx&(a&),rscb&(a&)),10))
h&=MIN(PRED(max_h&),ADD(ADD(rscy&(a&),rsch&(a&)),10))
'
GET rscx&(a&),rscy&(a&),b&,h&,rsc_back$
PUT rscx&(a&),rscy&(a&),a$
'
rsc_draw_shadow(a&)
'    rsc_draw(a&,0,10)
'
RETURN
' -------------------------------------------------------- FORM_DO()-Routine
' Hier beginnt die eigentliche Dialogroutine.
'
> FUNCTION form_do(a&,b&,VAR obj&)
$F%
LOCAL c&,mx&,my&,mb&,rsc&,shift&,key&,a!
'
' In mc& steht die Anzahl der Mausklicks, daher nicht lokal
' In obj& steht das Objekt, in dem der Cursor steht
'
~WIND_UPDATE(1)                                 !Appl. Åberni. Kontrolle...
~WIND_UPDATE(3)
'
b&=MAX(0,b&)                                    !Positivieren
obj&=-1
'
IF @rsc_flags(a&,b&,3) AND (NOT @rsc_state(a&,b&,3))!Start-Objekt editierbar?
nxt_obj&=b&                                       !und nicht disabled
'
ELSE                                            !nicht editierbar,
nxt_obj&=b&
'
REPEAT
  nxt_obj&=@form_search_flag(a&,nxt_obj&,3,1) !also editierbares suchen
UNTIL nxt_obj&=0 OR (NOT @rsc_flags(a&,nxt_obj&,7)) !Event. hidden?
'
ENDIF
'
a!=(nxt_obj&<>0)                                !Editable Objekt vorhanden
'
REPEAT                                          !Nun geht's los...
IF obj&<>nxt_obj& AND nxt_obj&<>0
  obj&=nxt_obj&
  ~OBJC_EDIT(rsc_adr%(a&),obj&,0,0,1,pos&)    !Cursor darstellen
ENDIF
'
rsc&=EVNT_MULTI(&X11,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,mx&,my&,mb&,shift&,key&,mc&)
'
IF BTST(rsc&,0)                               !Tastaturereignis...
  c&=@form_key(a&,obj&,shift&,key&,nxt_obj&)
  '
ELSE                                          !Mausereignis...
  c&=OBJC_FIND(rsc_adr%(a&),0,100,mx&,my&)    !Objekt unter der Maus ermitteln
  c&=@form_maus(a&,c&,mc&,nxt_obj&)
  '
ENDIF
'
IF c&=0 OR (obj&<>nxt_obj& AND nxt_obj&<>0)
  ~OBJC_EDIT(rsc_adr%(a&),obj&,0,pos&,3,pos&) !Cursor weg
ENDIF
UNTIL c&=0                                      !Bis Touchexit-Objekt
'
~WIND_UPDATE(2)                                 !Appl. gibt Kontrolle ab...
~WIND_UPDATE(0)
'
RETURN nxt_obj&
ENDFUNC
'
> FUNCTION form_maus(a&,b&,mc&,VAR nxt_obj&)
$F%
LOCAL c&
'
' Hier wird der Mausklick ausgewertet.
' a&       : Objektbaum
' b&       : Objekt unter der Maus
' mc&      : Anzahl Klicks
' nxt_obj& :
'
IF b&=-1                                  ! Daneben...
OUT 2,7
RETURN obj&
'
ELSE
' --------------------------------------- Flydial...
IF @rsc_flags(a&,b&,10)                 ! (OB_FLAGS 10)
rsc_fly_dial(a&)
nxt_obj&=obj&
RETURN 1
'
' ------------------------------------- Radio Button (Kreuz)...
ELSE IF @rsc_flags(a&,b&,11)            ! (OB_FLAGS 11)
rsc_state(a&,b&,0,NOT @rsc_state(a&,b&,0))
rsc_draw(a&,b&,0)
'
c&=@rsc_flags(a&,b&,6)
IF c&
  nxt_obj&=b&
ELSE
  nxt_obj&=obj&
ENDIF
RETURN SUCC(c&)
'
ELSE IF @rsc_state(a&,b&,3)             ! ...Disabled
RETURN obj&
'
ELSE IF @rsc_flags(a&,b&,3)             ! ...Editable
RETURN @form_edit(a&,b&)
'
ELSE                                    ! sonst form_button
'
c&=FORM_BUTTON(rsc_adr%(a&),b&,mc&,nxt_obj&)
'
IF @swap_type(a&,b&)=98               ! HELP-Button...
  nxt_obj&=-10                        ! ...-10 als Kennung fÅr Hilfe
ELSE
  nxt_obj&=WORD(BCLR(nxt_obj&,15))
ENDIF
'
RETURN c&
ENDIF
'
ENDIF
'
ENDFUNC
> FUNCTION form_edit(a&,b&)
$F%
LOCAL a%,b%,i&,l&,m&,p&,x&,a|
'
a%=rsc_adr%(a&)                     !Baum-Adresse
b%=OB_SPEC(a%,b&)                   !
'
~OBJC_OFFSET(a%,b&,x&,c&)           !Absolute Koordinaten
'
~GRAF_HANDLE(w&,c&,c&,c&)           !Breite eines Standardzeichens
'
l&=CARD{ADD(b%,26)}                 !LÑnge des Objekts
'
SELECT CARD{ADD(b%,16)}             !Ausrichtung...
'
CASE 0                              !...linksbÅndig
m&=TRUNC((mx&-x&)/w&+0.5)
'
CASE 1                              !...rechtsbÅndig
m&=TRUNC((mx&-x&-OB_W(a%,b&)+l&*w&)/w&-0.5)
'
CASE 2                              !...zentriert
m&=TRUNC((mx&-x&-(OB_W(a%,b&)-l&*w&)/2)/w&)
'
ENDSELECT
'
CLR p&,i&
'
IF m&>0
'
REPEAT
'
IF BYTE{ADD({ADD(b%,4)},i&)}=95 !'_'
INC p&
ENDIF
'
INC i&
UNTIL i&=m& OR i&=l&
'
ELSE
p&=0
ENDIF
'
~OBJC_EDIT(a%,obj&,0,pos&,3,pos&)   !Cursor weg
'
a|=BYTE{ADD({b%},p&)}               !Zeichen merken
BYTE{ADD({b%},p&)}=0                !und durch 0 ersetzen
'
~OBJC_EDIT(a%,b&,0,pos&,1,pos&)     !Cursor setzen
BYTE{ADD({b%},p&)}=a|               !und Zeichen restaurieren
'
nxt_obj&=b&
obj&=b&
'
RETURN 1
ENDFUNC
'
> FUNCTION form_key(a&,obj&,shift&,key&,VAR nxt_obj&)
$F%
'
' Hier wird ein Tastendruck ausgewertet. Wenn er keine Sonderfunktion
' wie z.B. CLR-HOME bedient, so wird nach einem tastaturbedienbaren Objekt
' gesucht.
'
SELECT key&
'
CASE &H1C0D,&H720D                        ! RETURN/ENTER...
nxt_obj&=@form_search_flag(a&,0,1,1)    ! ...Default-Button suchen
IF nxt_obj&                             ! ...gefunden
RETURN FORM_BUTTON(rsc_adr%(a&),nxt_obj&,1,nxt_obj&)
ENDIF
'
CASE &H4D36                               ! SHIFT right...
IF a!
~OBJC_EDIT(rsc_adr%(a&),obj&,0,pos&,3,pos&)
~OBJC_EDIT(rsc_adr%(a&),obj&,0,pos&,1,pos&)
ENDIF
'
CASE &H4B34                               ! SHIFT left...
IF a!
'
~OBJC_EDIT(rsc_adr%(a&),obj&,0,pos&,3,pos&)
'
a|=BYTE{{OB_SPEC(rsc_adr%(a&),obj&)}}
BYTE{{OB_SPEC(rsc_adr%(a&),obj&)}}=0
'
~OBJC_EDIT(rsc_adr%(a&),obj&,0,pos&,1,pos&)
BYTE{{OB_SPEC(rsc_adr%(a&),obj&)}}=a|
'
ENDIF
'
CASE &H5000                               ! Down
nxt_obj&=@form_search_flag(a&,obj&,3,1)
'
CASE &H4800                               ! Up
nxt_obj&=@form_search_flag(a&,obj&,3,-1)
'
CASE &H5032,&H4737                        ! SHIFT down, SHIFT home =>letztes Feld
REPEAT
nxt_obj&=obj&
obj&=@form_search_flag(a&,obj&,3,1)
UNTIL obj&=0
'
CASE &H4838,&H4700                        ! SHIFT up, HOME =>erstes Feld
nxt_obj&=@form_search_flag(a&,0,3,1)
'
CASE &H1C0D,&H720D                        ! RETURN/ENTER
nxt_obj&=@form_search_flag(a&,0,1,1)    ! Default-Button suchen
IF nxt_obj&                             ! gefunden
RETURN FORM_BUTTON(rsc_adr%(a&),nxt_obj&,1,nxt_obj&)
ENDIF
'
DEFAULT                                   ! Keine Steuertaste =>Objekt suchen
c&=@form_search_key(a&,shift&,key&)
'
IF c&
RETURN @form_maus(a&,c&,1,nxt_obj&)
'
ENDIF
'
nxt_obj&=obj&
'
' Achtung: Bei TOS 1.0: fÅhrt hier '_' zum Absturz:
~OBJC_EDIT(rsc_adr%(a&),obj&,key&,pos&,2,pos&)
'
ENDSELECT
'
RETURN -1
ENDFUNC
'
> FUNCTION form_search_flag(a&,c&,a|,d&)
$F%
LOCAL b&
'
' Sucht im Baum a& ab Objekt c& das gesetzte OB_FLAG a| mit Schrittweite d&..
'
b&=c&
'
REPEAT
ADD b&,d&
IF @rsc_flags(a&,b&,a|) AND (NOT @rsc_state(a&,b&,3))
RETURN b&
ENDIF
UNTIL (b&<=0) OR @rsc_flags(a&,b&,5)! Exit wenn <=0 oder LAST-OBJECT gesetzt.
'
RETURN 0 !c&                           ! Nichts gefunden
ENDFUNC
> FUNCTION form_search_key(a&,shift&,key&)
$F%
LOCAL b&
'
' Findet ein Objekt im Baum a&, dem die Taste key& zugeordnet wurde...
'
scan|=SHR&(key&,8)
'
IF scan|=98 OR scan|=97 OR shift&=8     ! HELP, UNDO oder ALT...
'
REPEAT
INC b&
IF scan|=@swap_type(a&,b&)
RETURN b&                         ! ...gefunden
ENDIF
UNTIL @rsc_flags(a&,b&,5)             ! ...bis Last-Objekt gesetzt
'
ENDIF
'
RETURN 0
ENDFUNC
