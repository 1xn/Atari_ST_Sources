PROCEDURE set_resource
  '
  ' Modified from Larry D. Duke's CBARRON.LST by Jim Burton
  '
  ' This version supports ICON and BIT BLOCKS.  Integer math is now
  ' employed to speed things up.
  '
  ' To imbed your resource file, load the resource into an INLINE
  ' statement at the begining of your program, with the address rsc%
  ' example: INLINE rsc%,LENGTH
  ' (LENGTH should be replaced by the length in bytes of your resource file)
  ' Then call set_resource to update the addresses of the resource file,
  ' then call RSRC_GADDR to get the addresses of the tree(s) and object(s),
  ' just like you would do with a resource file loaded with RSRC_LOAD.
  '
  ' NOTE: Running this procedure changes the information in your INLINE.
  ' Therefore, if changes are made to your code, you must re-load the
  ' resource file into the INLINE before you save your updated program.
  '
  rsh_object%=ADD(CARD{ADD(rsc%,2)},rsc%)     ! object field address
  rsh_tedinfo%=ADD(CARD{ADD(rsc%,4)},rsc%)    ! tedinfo field address
  rsh_iconblk%=ADD(CARD{ADD(rsc%,6)},rsc%)    ! icon block field address
  rsh_bitblk%=ADD(CARD{ADD(rsc%,8)},rsc%)     ! bit image block field address
  rsh_frstr%=ADD(CARD{ADD(rsc%,10)},rsc%)     ! free strings address
  rsh_string%=ADD(CARD{ADD(rsc%,12)},rsc%)    ! tied strings address
  rsh_imdata%=ADD(CARD{ADD(rsc%,14)},rsc%)    ! image data address
  rsh_frimg%=ADD(CARD{ADD(rsc%,16)},rsc%)     ! cursor data address
  rsh_trindex%=ADD(CARD{ADD(rsc%,18)},rsc%)   ! tree pointer address
  global%={ADD(GB,4)}                         ! address of global array
  {ADD(global%,10)}=rsh_trindex%              ! Pointer Address to Global(5)
  ABSOLUTE rsh_nobs&,ADD(rsc%,20)             ! number of objects
  ABSOLUTE rsh_ntree&,ADD(rsc%,22)            ! number of trees
  ABSOLUTE rsh_nted&,ADD(rsc%,24)             ! number of tedinfos
  ABSOLUTE rsh_nib&,ADD(rsc%,26)              ! number of icon image blocks
  ABSOLUTE rsh_nbb&,ADD(rsc%,28)              ! number of bit image blocks
  ABSOLUTE rsh_nstring&,ADD(rsc%,30)          ! number of strings
  ABSOLUTE rsh_nimages&,ADD(rsc%,32)          ! number of cursor images
  DIM tree%(SUB(rsh_ntree&,1))                ! dimension only what you need
  '
  IF {rsh_trindex%}<&HFFFF          ! if initialized, will be >$FFFF
    IF rsh_nted&                    ! if tedinfos in resource file
      FOR x&=1 TO rsh_nted&
        {rsh_tedinfo%}=ADD(rsc%,{rsh_tedinfo%})      ! set first address
        {4+rsh_tedinfo%}=ADD(rsc%,{ADD(4,rsh_tedinfo%)})  ! set second address
        {8+rsh_tedinfo%}=ADD(rsc%,{ADD(8,rsh_tedinfo%)})  ! set third address
        ADD rsh_tedinfo%,28                     ! point to next tedinfo
      NEXT x&
    ENDIF
    IF rsh_nib&                    ! if icon images in resource file
      FOR x&=1 TO rsh_nib&
        {rsh_iconblk%}=ADD(rsc%,{rsh_iconblk%})      ! set first address
        {4+rsh_iconblk%}=ADD(rsc%,{ADD(4,rsh_iconblk%)})  ! set second address
        {8+rsh_iconblk%}=ADD(rsc%,{ADD(8,rsh_iconblk%)})  ! set third address
        ADD rsh_iconblk%,36                     ! point to next iconblk
      NEXT x&
    ENDIF
    IF rsh_nbb&                    ! if bit images in resource file
      FOR x&=1 TO rsh_nbb&
        {rsh_bitblk%}=ADD(rsc%,{rsh_bitblk%})      ! set first address
        ADD rsh_bitblk%,14                     ! point to next bitblk
      NEXT x&
    ENDIF
    '
    ' now do objects
    '
    of%=rsh_object%
    FOR x&=1 TO rsh_nobs&
      SELECT BYTE{ADD(of%,7)}                ! only set those that need it
      CASE 21 TO 23,26,28 TO 32
        {ADD(of%,12)}=ADD(rsc%,{ADD(of%,12)})! set OB_SPEC of the object
      ENDSELECT
      ADD of%,24                        ! point to next object
    NEXT x&
    '
    ' call ob_fix to set objects to resolution
    '
    FOR x&=0 TO SUB(rsh_nobs&,1)
      ~RSRC_OBFIX(ADD({rsh_trindex%},rsc%),x&)      ! set for resolution
    NEXT x&
    '
    ' convert tree start addresses
    '
  ENDIF                                 ! go here if already initialized
  FOR x&=0 TO SUB(rsh_ntree&,1)
    IF {rsh_trindex%}<&HFFFF           ! initialized?
      {rsh_trindex%}=ADD({rsh_trindex%},rsc%)      ! nope - add resource offset
    ENDIF
    tree%(x&)={rsh_trindex%}           ! set array while we're here
    ADD rsh_trindex%,4                 ! point to next address pointer
  NEXT x&
RETURN
