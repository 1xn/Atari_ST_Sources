' BEISPIEL.BAS - ErlÑutert alle Juniorsoft-Funktionen
' RH 1/87
Junior$=Space$(1800)    ! In diese Zeichenkette werden die Juniorsoft-
'                         Funkionen geladen
Junior%=Varptr(Junior$) ! Junior% enthÑlt die Adresse der Zeichenkette
Bload "JUNIOR.B",Junior% ! Assemblercode laden
'
Typ$=Space$(3000)       ! Wie oben, jedoch fÅr die Typentabelle
Typ%=Varptr(Typ$)
Bload "TYPTAB.B",Typ%
'
' Datenspeicher einrichten
'
Daten$=Space$(16385)
Daten%=Varptr(Daten$)
'
' Zuerst immer den Typ wÑhlen
'
@Typ(5)                 ! Typindex 5 -> EPROM 27128, 21 Volt
'
' Hardware Initialisieren
'
Dummi%=C:Junior%(11)
Print "Juniorprommer Demonstration."
'
' PrÅfen,  ob ein EPROM eingesetzt ist
'
@Typda
' Lesen des EPROM's
Print "Lesen des EPROMs."
Dummi%=C:Junior(4,L:Daten%,L:0,L:Endadr%)
Do
  Print "Bitte zu programmierendes Eprom einsetzen."
  @Typda                 ! EPROM eingesetzt ?
  '
  ' Leertest und VertrÑglichkeitstest
  '
  Print "Leertest des EPROMs."
  Exit If C:Junior%(5,L:0,L:Endadr%)>0      ! Leertest
  Print "Speicher nicht leer"
  Exit If C:Junior%(7,L:Daten%,L:0,L:Endadr%) ! VertrÑglichkeitstest
  Print "Ein Programmieren ist mit diesen Daten nicht mîglich."
Loop
'
' Programmieren
'
Print "Programmieren ... ";
If C:Junior%(8,L:Daten%,L:0,L:Endadr%,0)>0    ! Programmieren
  Print "erfolgreich."
Else
  Print "Fehlgeschlagen."
  End
Endif
'
' Vergleichen
'
Print "Vergleichen ... ";
If C:Junior%(6,L:Daten%,L:0,L:Endadr%,0)>0    ! Vergleichen
  Print "erfolgreich."
Else
  Print "fehlerhaft."
Endif
End
'
' Unterroutinen
'
Procedure Typ(Index%)
  Dummi%=C:Junior%(10,L:Typ%+Index%*82)   ! Typ einstellen
  Kapazi%=Lpeek(Typ%+Index%*82+30)        ! KapazitÑt in der Tabelle
  Endadr%=Kapazi%-1                       ! Resultierende Endadresse
Return
'
' PrÅft, ob Speicher eingesetzt ist
'
Procedure Typda
  Do
    Exit If C:Junior%(9)=0
    Print "Speicher einsetzen"
    Do
      Exit If Inkey$=Chr$(13)
    Loop
  Loop
Return
