           Subject: DMA Toolkit
                By: James Collett (Professor)
       A Member Of: VIRTUAL INFINITY
              Date: September 1994

             Phone: 0235 510463  (After 5pm only)
           Address: Park View Farm, Carlton, Nr Nuneaton, Warks, CV13 ODA
          Internet: jrc1@axprl1.rl.ac.uk
      Mono Account: bcc


    Contents
    ========
        * Disclaimer:
            You can use these routines, but don`t blame me!

        * Playing Samples:
            Overview of how to play samples using the DMA routines

        * The Toolkit:
            Descriptions of the routines

        * And Finally:
            Don`t send your money, but DO support!
                                       ÿÿ

    Disclaimer
    ==========
        The   low-level  routines  used  in  the  toolkit  are   based   on 
    documentation from ATARI,  so they -should- be correct, shouldn`t they? 
    But  just  incase  anyone  wants  to  blow  anything  up,   I  hold  no 
    responsibility for the use (or misuse) of these routines!

        The  higher-level  programs which demonstrate the use  of  the  DMA 
    routines,  were written by me several years ago.   They`re probably not 
    the  best piece of programming that`s ever been done,  but they  should 
    sufficiently demonstrate the routines to save me re-writing them!


    Playing Samples
    ===============
        The following is an overview to some of the things you may need  to 
    do  in order to play a sample using the DMA chip [which is not  present 
    in all ATARI machines], and the order in which you may need to do these 
    things:

        The first thing to do is check to make sure the machine you want to 
    play on has a DMA fitted.   If it doesn`t and you try to play a sample, 
    the machine will **most probably bomb**.   A routine called 'dma.found' 
    is provided for this, (refer to "The Toolkit" below for further details 
    about this routine).

        If  the machine has no DMA,  all you can do is report an  error  or 
    skip  playing the sample.   Assuming you do have a DMA,  the steps  you 
    then wish to go through may be something like this:

    * Load sample from disk
    * Setup start address, end addr & replay rate - these are mandatory
    * Setup master volume, stereo balance, treble & base - these are option
    * Play sample: either once through or loop (repeat)

        Two  routines,  called 'dma.set' and 'dma.ctrl',  are provided  for 
    respectively  setting the mandatory and optional  controls,  (refer  to 
    "The Toolkit" below for further details about these routines).

        In order to play, you have to POKE &ff8901 (hex FF8901) as follows: 
    0  to stop playing (this is default);  1 to play through once and  then 
    stop;  3 to loop (repeat) playing.  The DMA chip plays samples using an 
    interrupt,  which means you can get on with other things [e.g. graphics 
    or loading from disk] while the sample is playing:
           .______________________________________________________.
           ||ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ||
           ||  Note: The DMA chip can only play signed samples,  ||
           ||  ÿÿÿÿ  and cannot play unsigned samples!!          ||
           ||____________________________________________________||
           'ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ'
        I  cannot  find this fact documented  anywhere!!  Perhaps  it`s  so 
    blindingly obvious it doesn`t need documenting?   But I don`t think  so 
    either, so I am now officially documenting it on behalf of ATARI!

        If a sample doesn`t play as expected,  and you definitely have  the 
    start and end addresses correct,  the most likely explanation is you`re 
    trying  to  play  a STOS MAESTRO  or  similar  unsigned  sample!   [The 
    solution is to convert it to signed and try again!]


    The Toolkit
    ===========
     dma.found
     ~~~~~~~~~
          When called, this function returns either TRUE or FALSE depending 
      on  whether  a  DMA chip is found or not.   Use  it  prior  to  using 
     'dma.set' and/or playing samples.   *Note* the presence of a DMA  chip 
     (i.e.  a  result  of TRUE) doesn`t bear much relationship  to  whether 
     'dma.ctrl'  will work.   For example,  on the STE both  'dma.set'  and 
     'dma.ctrl' work, but on the FALCON only 'dma.set' works and 'dma.ctrl' 
     does not do anything if called, (see also 'dma.ctrl').

          This function, 'dma.found', searches the cookie jar to look for a 
      DMA chip.   If the cookie jar is not present (e.g. in standard STfm), 
      all that can be done is to assume a DMA chip is not present either.

     dma.set
     ~~~~~~~
          The  parameters  passed to this procedure should  be:  the  start 
      address  of the sample in memory,  the end (or stop) address  of  the 
      sample in memory,  and the replay rate.  The most common replay rates 
      are:
                  &80 (hex 80) - 6.25KHz, stereo
                  &81 (hex 81) - 12.5KHz, stereo
                  &82 (hex 82) - 25KHz, stereo
                  &83 (hex 83) - 50KHz (approx CD quality), stereo

          *Note* this procedure assumes a DMA chip is present.   If not and 
      you  call this procedure,  the machine will **most  probably  bomb**. 
      Use 'dma.found' to test if a DMA chip exists before attempting to use 
      this procedure or attempting to play samples.

     dma.ctrl
     ~~~~~~~~
          The parameters passed to this procedure should be as follows:

                 Master volume - range from 0 to 40 (inclusive)
                  Left balance - range from 0 to 20 (inc.)
                 Right balance - range from 0 to 20 (inc.)
                        Treble - range from 0 to 12 (inc.)
                          Base - range from 0 to 12 (inc.)
                           Mix - range from 0 to 3 (inc.)

          *Note*  this  procedure not only requires a DMA  chip,  but  also 
      requires a MICROWIRE.   The boolean returned from 'dma.found' doesn`t 
      bear much relationship as to whether a microwire exists or not.   The 
      procedure has no effect when called on a FALCON,  which does not have 
      a microwire,  but does have effect when called on an STE,  which does 
      have a microwire.


    And Finally
    ===========
        Although  there  is  no  financial  charge  for  this,  support  is 
    appreciated.  You can support in two ways:

    1) by distributing this to everyone you know, ensuring all files remain 
       together and unaltered,

    2) feedback:  all comments,  queries,  error / incompatibility reports, 
       ideas,  suggestions,  etc are welcome - both positive and  negative. 
       My postal and E-mail addresses are previously listed.


    ---END---
