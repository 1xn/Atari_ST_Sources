'
'                CIRC&SPH.BCC\SPH_CODE\E-CRKSCW.LST  (Corkscrew!)
'
' +----------------------------------------------------------------------------+
' |         This routine was written by Professor of VIRTUAL INFINITY,         |
' |      and is part of the "Programmer`s Circle & Sphere Routine Library"     |
' |                                                                            |
' |      The routine has been implemented in GFA 3.5e & ST low resolution,     |
' |  and may be re-implemented in other languages & resolutions **providing**  |
' | you have read & agree with the conditions listed in CIRC&SPH.BCC\INTRO.TXT |
' +----------------------------------------------------------------------------+
'
' (See also B-SPH1Y.LST and D-SPH2Y.LST)
' This starts off by linearly calculating initial angles (thetas) for as many
' points as there are rings, i.e. one point per ring.
'
' The routine then uses the "angle method" to increment all the angles (thetas),
' updating the position of the point on each 'ring' at each increment of the
' thetas.  Before each update the screen is cleared.  (Please see CIRC&SPH.BCC\
' INTRO.TXT for details about lines marked with '@'.)
'
' This routine`s calculation is **entirely** realtime.
'
CLS
DIM pic%(8063)   !@
sys%=XBIOS(3)   !@
scr1%=(V:pic%(0)+255) AND &HFFFF00   !@
scr2%=sys%   !@
set_palette
'
x_abs&=160                    ! Absolute horizontal origin
y_abs&=100                    ! Absolute vertical origin
x_maxrad&=20                  ! X radius at "absolute ring"
z_maxrad&=5                   ! Z radius at "absolute ring"
y_half&=9                     ! Number of rings above|below absolute }   y_
y_dist&=5                     ! Y distance between rings             } maxrad&
xz_step=0.07                  ! Theta increment step
'
y_total&=y_half&*2+1          ! [Total number of rings]
y_maxrad&=y_half&*y_dist&     ! [Y radius]
'
DIM xz_theta(y_half&*2)
y_count&=-y_half&
WHILE y_count&<=+y_half&
  xz_theta(y_count&+y_half&)=y_count&/y_half&*PI*2
  INC y_count&
WEND
'
REPEAT
  pageflip(scr1%,scr2%)   !@
  SWAP scr1%,scr2%   !@
  CLS
  y_count&=-y_half&
  WHILE y_count&<=+y_half&
    y_or&=y_abs&+y_count&*y_dist&
    '
    y_costheta=COS(ASIN(y_count&/y_half&))
    x_rad&=y_costheta*x_maxrad&
    z_rad&=y_costheta*z_maxrad&
    '
    x&=COS(xz_theta(y_count&+y_half&))*x_rad&
    z&=SIN(xz_theta(y_count&+y_half&))*z_rad&
    col&=SIN(xz_theta(y_count&+y_half&))*4
    clip(x_abs&+x&,y_or&+z&,4+col&)
    '
    ADD xz_theta(y_count&+y_half&),xz_step
    INC y_count&
  WEND
UNTIL INKEY$=" "
'
PRINT CHR$(7);
pageflip(sys%,sys%)   !@
EDIT
'
'
'
PROCEDURE clip(x&,y&,col&)
  IF x&>=0 AND x&<320 AND y&>=0 AND y&<200
    PSET x&,y&,col&
  ENDIF
RETURN
'
'
'
PROCEDURE pageflip(log%,phy%)
  ~XBIOS(5,L:log%,L:phy%,-1)   !@
RETURN
'
'
'
PROCEDURE set_palette
  LOCAL log&,phy&
  SETCOLOR 0,&H0
  SETCOLOR 15,&H333
  RESTORE color_data
  FOR log&=1 TO 7
    READ phy&
    SETCOLOR log&,phy&
  NEXT log&
RETURN
'
color_data:
DATA &111,&222,&333,&444,&555,&666,&777
