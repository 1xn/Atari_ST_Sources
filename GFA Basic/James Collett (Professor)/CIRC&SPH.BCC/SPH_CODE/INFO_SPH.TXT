CIRC&SPH.BCC\SPH_CODE\A-SPH1X.LST  (Draw sphere about X axis)
=============================================================
A sphere can be thought of as a number of 'rings', all on parallel YZ planes
about the X axis.  This routine uses the "angle method" to loop the angle
(theta) through 2*PI, plotting a point on each 'ring' at each increment of
theta.  The back half of the sphere is drawn first, followed by the front half
on top, as this is considered to render(draw) the clearest image.

At each 'ring', at each theta, the respective Y and Z radiuses are calculated
from the ring`s respective X position using the "axis method".  From these
radiuses the Y and Z components can be calculated using the "angle method".


CIRC&SPH.BCC\SPH_CODE\B-SPH1Y.LST  (Draw sphere about Y axis)
=============================================================
A sphere can be thought of as a number of 'rings', all on parallel XZ planes
about the Y axis.  This routine uses the "angle method" to loop the angle
(theta) through 2*PI, plotting a point on each 'ring' at each increment of
theta.  The back half of the sphere is drawn first, followed by the front half
on top, as this is considered to render(draw) the clearest image.

At each 'ring', at each theta, the respective X and Z radiuses are calculated
from the ring`s respective Y position using the "axis method".  From these
radiuses the X and Z components can be calculated using the "angle method".


CIRC&SPH.BCC\SPH_CODE\C-SPH2X.LST  (Rotate sphere about X axis)
===============================================================
(See also A-SPH1X.LST)
A sphere can be thought of as a number of 'rings', all on parallel YZ planes
about the X axis.  This routine starts off by randomising initial angles
(thetas) for as many points as there are rings, i.e. one point per ring.

The routine then uses the "angle method" to increment all the angles (thetas),
updating the position of the point on each 'ring' at each increment of the
thetas.  Before each update the screen is cleared.  (Please see CIRC&SPH.BCC\
INTRO.TXT for details about lines marked with '@'.)


CIRC&SPH.BCC\SPH_CODE\D-SPH2Y.LST  (Rotate sphere about Y axis)
===============================================================
(See also B-SPH1Y.LST)
A sphere can be thought of as a number of 'rings', all on parallel XZ planes
about the Y axis.  This routine starts off by randomising initial angles
(thetas) for as many points as there are rings, i.e. one point per ring.

The routine then uses the "angle method" to increment all the angles (thetas),
updating the position of the point on each 'ring' at each increment of the
thetas.  Before each update the screen is cleared.  (Please see CIRC&SPH.BCC\
INTRO.TXT for details about lines marked with '@'.)


CIRC&SPH.BCC\SPH_CODE\E-CRKSCW.LST  (Corkscrew!)
================================================
(See also B-SPH1Y.LST and D-SPH2Y.LST)
This starts off by linearly calculating initial angles (thetas) for as many
points as there are rings, i.e. one point per ring.

The routine then uses the "angle method" to increment all the angles (thetas),
updating the position of the point on each 'ring' at each increment of the
thetas.  Before each update the screen is cleared.  (Please see CIRC&SPH.BCC\
INTRO.TXT for details about lines marked with '@'.)


CIRC&SPH.BCC\SPH_CODE\F-RADAR.LST  (Radar dish - with a bit of imagination!)
============================================================================
(See also B-SPH1Y.LST and D-SPH2Y.LST)
This starts off by randomising initial angles (thetas) for as many points as
there are rings, i.e. one point per ring.

The routine then uses the "angle method" to increment all the angles (thetas),
updating the position of the point on each 'ring' at each increment of the
thetas.  Before each update the screen is cleared.  (Please see CIRC&SPH.BCC\
INTRO.TXT for details about lines marked with '@'.)


---END---
