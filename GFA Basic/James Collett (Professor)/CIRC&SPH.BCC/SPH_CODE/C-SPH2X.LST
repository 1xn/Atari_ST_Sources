'
'        CIRC&SPH.BCC\SPH_CODE\C-SPH2X.LST  (Rotate sphere about X axis)
'
' +----------------------------------------------------------------------------+
' |         This routine was written by Professor of VIRTUAL INFINITY,         |
' |      and is part of the "Programmer`s Circle & Sphere Routine Library"     |
' |                                                                            |
' |      The routine has been implemented in GFA 3.5e & ST low resolution,     |
' |  and may be re-implemented in other languages & resolutions **providing**  |
' | you have read & agree with the conditions listed in CIRC&SPH.BCC\INTRO.TXT |
' +----------------------------------------------------------------------------+
'
' (See also A-SPH1X.LST)
' A sphere can be thought of as a number of 'rings', all on parallel YZ planes
' about the X axis.  This routine starts off by randomising initial angles
' (thetas) for as many points as there are rings, i.e. one point per ring.
'
' The routine then uses the "angle method" to increment all the angles (thetas),
' updating the position of the point on each 'ring' at each increment of the
' thetas.  Before each update the screen is cleared.  (Please see CIRC&SPH.BCC\
' INTRO.TXT for details about lines marked with '@'.)
'
' This routine`s calculation is **entirely** realtime.
'
CLS
DIM pic%(8063)   !@
sys%=XBIOS(3)   !@
scr1%=(V:pic%(0)+255) AND &HFFFF00   !@
scr2%=sys%   !@
set_palette
'
x_abs&=160                    ! Absolute horizontal origin
y_abs&=100                    ! Absolute vertical origin
z_maxrad&=10                  ! Z radius at "absolute ring"
y_maxrad&=50                  ! Y radius at "absolute ring"
x_half&=7                     ! Number of rings left|right absolute }   x_
x_dist&=7                     ! X distance between rings            } maxrad&
yz_step=0.05                  ! Theta increment step
'
x_total&=x_half&*2+1          ! [Total number of rings]
x_maxrad&=x_half&*x_dist&     ! [X radius]
'
DIM yz_theta(x_half&*2)
RANDOMIZE
x_count&=-x_half&
WHILE x_count&<=+x_half&
  yz_theta(x_count&+x_half&)=RND*2*PI
  INC x_count&
WEND
'
REPEAT
  pageflip(scr1%,scr2%)   !@
  SWAP scr1%,scr2%   !@
  CLS
  x_count&=-x_half&
  WHILE x_count&<=+x_half&
    x_or&=x_abs&+x_count&*x_dist&
    '
    x_sintheta=SIN(ACOS(x_count&/x_half&))
    z_rad&=x_sintheta*z_maxrad&
    y_rad&=x_sintheta*y_maxrad&
    '
    z&=COS(yz_theta(x_count&+x_half&))*z_rad&
    y&=SIN(yz_theta(x_count&+x_half&))*y_rad&
    col&=COS(yz_theta(x_count&+x_half&))*4
    clip(x_or&+z&,y_abs&+y&,4+col&)
    '
    ADD yz_theta(x_count&+x_half&),yz_step
    INC x_count&
  WEND
UNTIL INKEY$=" "
'
PRINT CHR$(7);
pageflip(sys%,sys%)   !@
EDIT
'
'
'
PROCEDURE clip(x&,y&,col&)
  IF x&>=0 AND x&<320 AND y&>=0 AND y&<200
    PSET x&,y&,col&
  ENDIF
RETURN
'
'
'
PROCEDURE pageflip(log%,phy%)
  ~XBIOS(5,L:log%,L:phy%,-1)   !@
RETURN
'
'
'
PROCEDURE set_palette
  LOCAL log&,phy&
  SETCOLOR 0,&H0
  SETCOLOR 15,&H333
  RESTORE color_data
  FOR log&=1 TO 7
    READ phy&
    SETCOLOR log&,phy&
  NEXT log&
RETURN
'
color_data:
DATA &111,&222,&333,&444,&555,&666,&777
