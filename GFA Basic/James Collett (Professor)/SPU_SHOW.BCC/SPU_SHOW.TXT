           Subject: The Spectrum SPU Format
                By: James Collett (Professor)
       A Member Of: VIRTUAL INFINITY
              Date: September 1994

             Phone: 0235 510463  (After 5pm only)
           Address: Park View Farm, Carlton, Nr Nuneaton, Warks, CV13 ODA
          Internet: jrc1@axprl1.rl.ac.uk
      Mono Account: bcc


    Contents
    ========
        * Acknowledgements:
            Thanks and credits for contributions

        * Copyright:
            Rules & regulations about distributing & modifying

        * User Instructions:
            Non-technical guide to using the GFA source & the executable

        * SPU Explained:
            Description of the SPU file structure

        * So How Do I Display It? (i.e. Technical Documentation):
            (Very) brief discussion of bitmaps
            Technical guide to de-coding SPU files

        * And Finally:
            Don`t send your money, but DO support!
                                       ÿÿ

    Acknowledgements
    ================
        A quick thanks to Steve Belczyk for providing the main SPU  de-code 
    routine  (find_index).   Note this routine was placed in public  domain 
    during December of 1990.


    Copyright
    =========
        Both the GFA source and the executable are public domain.   You may 
    cut, copy, chop & change as required *providing* the names Professor of 
    VIRTUAL INFINITY *and* Steve Belczyk get mentioned somewhere.

        Please also bear in mind,  whoever you give a copy to might like to 
    read some documentation, just as you are reading now!


    User Instructions
    =================
        Spectrum pictures can contain upto 512 colors (or even more on  the 
    STE).   The  ST is only normally capable of displaying 16 colors  at  a 
    time.   In order to display an SPU,  a very fast and very CPU-intensive 
    program is needed.   I don`t have such a program,  so instead I  REDUCE 
    the  512 color image to 16 colors using a method  called  GREY-SCALING. 
    This  will be discussed in detail in the technical  documentation,  for 
    the  purposes of the user instructions,  grey-scaling means  the  image 
    will  be converted to and displayed in "black and white",  even if  the 
    image is high-color.

        The  EXECUTABLE program shouldn`t need much explanation and  should 
    speak for itself.   The first question it asks is whether you want  the 
    sarcastic  comments  on or off!   If you say  'on',  the  program  will 
    display  a  "humorous" line while decoding the SPU,  (I  use  the  word 
    "humorous" very loosely!)  If you say 'off' to sarcastic comments,  the 
    program simply displays "crunching, please wait" while decoding.

        The program then asks you to select an SPU file, loads it (assuming 
    it`s valid),  decodes it [remember as "black and white"], and then asks 
    you  if you want to save the SPU as a Degas PI1.   If you say 'yes'  to 
    save,  the program asks you to select a PI1 and saves it (assuming  the 
    file is valid) before quitting.

        The  SOURCE  file is also straight-forward  to  run.   It  requires 
    GFA 3,  but should be portable to most other high-level languages.   As 
    it is currently set-up in GFA, there are two ways to start the source:

      * 'Proper' Start:  Set all three constants
                                       ~~~~~~~~~
      * 'QuickStart':  Set only first constant & leave other two as default
         ~~~~~~~~~~

        The first constant,  fload$,  is mandatory and should be a  *valid* 
    SPU filename to load.
        The second constant, fsave$, should be a *valid* degas PI1 filename 
    to save.   If you don`t wish to save & only wish to view, fsave$ can be 
    set to "", (which is the default for QuickStart).
        The third constant,  ste!,  determines the number of shades of grey 
    to  be used to display the "black and white" image.   If set  to  FALSE 
    then  8 greys will be =forced=,  if set to TRUE then 16 greys  will  be 
    =forced=.  Note  machines  with 3 bit palettes  (e.g.  STfm)  are  only 
    capable of displaying 8 greys;  trying to display 16 greys (by  setting 
    ste!  to TRUE) is **dangerous**.   To prevent you from having to  worry 
    about this,  you can set ste!  to STE?,  (which is the default).   With 
    this  setting the program will use 8 greys if you`re machine is  3  bit 
    (with  only 8 greys),  and use 16 greys if you`re machine has a  4  bit 
    palette (and able to show 16 greys).   I can`t see any need to  =force= 
    it either way, but the facility is there just in case!

        If  either the source (SPU_SHOW.LST) or  executable  (SPU_SHOW.PRG) 
    are missing,  complain to whoever gave you a copy of this document!  If 
    this doesn`t work write to me (Professor) and I`ll send you a copy.


    SPU Explained
    =============
        Probably the most interesting section of this document,  the actual 
    SPU file format!  The size (or resolution) of the image is actually 320 
    by 199 - i.e. 199 horizontal SCANLINES each containing 320 pixels.  The 
    top scanline is not used.  The actual structure is as follows:
                    ÿÿÿ
        160 bytes: First scanline, should be all zeros & should be ignored
      31840 bytes: Scanlines 1 to 199 inclusive (each 160 bytes)
      19104 bytes: Palettes 1 to 199 inc. (each 96 bytes), one palette for
                   each scanline, except the top scanline which is excluded
      -----------
      51104 bytes: TOTAL

        The  Spectrum  mode uses a different,  48 color  palette  for  each 
    scanline,   allowing  more  colors  to  be  displayed  than`s  normally 
    possible.   This obviously requires a tremendous amount of CPU time  to 
    maintain the image.

        The  details  of the scanline structure will be  discussed  in  the 
    technical documentation.   Each palette contains 48 words (96 bytes); 1 
    word (2 bytes) for each color in the following form:

      '00000rrr0ggg0bbb' if SPU is 3 bit (i.e. 512 colors)
      '0000rrrrggggbbbb' if SPU is 4 bit (i.e. STE compatible, 4096 colors)


        Given an X co-ordinate (from 0 to 319) and the color index (from  0 
    to  15) for that X co-ord,  a de-code routine is needed to  return  the 
    "proper" index (from 0 to 47) for that X co-ord in the Spectrum palette 
    for that scanline.  The following C routine does this:

     /*
      *  Given an x-coordinate and a color index, returns the corresponding
      *  Spectrum palette index.
      *
      *  by Steve Belczyk; placed in the public domain December, 1990.
      */
     int 
     FindIndex(x, c)
             int x, c;
     {
             int x1;
     
             x1 = 10 * c;
     
             if (1 & c)              /* If c is odd */
                     x1 = x1 - 5;
             else                    /* If c is even */
                     x1 = x1 + 1;
     
             if (x >= x1 && x < x1 + 160) 
                     c = c + 16;
             else if (x >= x1 + 160) 
                     c = c + 32;
     
             return c;
     }

        Note  this  C  routine has already been converted  to  GFA  and  is 
    present  in the source associated with this document.   If  either  the 
    source   (SPU_SHOW.LST)  or  executable  (SPU_SHOW.PRG)  are   missing, 
    complain to whoever gave you a copy of this document!   If this doesn`t 
    work write to me (Professor) and I`ll send you a copy.


    So How Do I Display It? (i.e. Technical Documentation)
    ======================================================
        Before studying this section, it is assumed you have some knowledge 
    of how the bitmap,  bitplanes and pixels relate to each other.   If not 
    it  is  recommended  you study "the complete  and  essential  guide  to 
    bitmaps",  back  on Ictari Disk #8 (March 1994),  *prior*  to  studying 
    this section.

        For  anyone  who  has some knowledge  about  bitmaps,  but  is  not 
    familiar  with ST low res [and SPU],  here is a (very) brief  reminder: 
    The  ST low res bitmap consists of 200 scanlines (or 199 lines  in  the 
    case of an SPU file).  Each scanline consists of 20 GROUPS (or BLOCKS); 
    each group consists of 4 planes;  and each plane is 16 bits long  (from 
    hex 0 [LSB] to hex F [MSB]).   Each group (or block) holds  information 
    about sixteen pixels, and has the following structure:

     FEDCBA9876543210  FEDCBA9876543210  FEDCBA9876543210  FEDCBA9876543210
     ~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~
         Plane 0           Plane 1           Plane 2           Plane 3

        In  order to de-code and display an SPU,  you need to de-code  each 
    scanline.   In  order to do this you need to de-code or  "crunch"  each 
    group (group|) within each scanline (y&):

     y&=1
     WHILE y&<200
       group|=0
       WHILE group|<20
         ---- crunch single group ----
         INC group|
       WEND
       INC y&
     WEND

        As already mentioned,  each scanline (i.e. set of 20 groups) uses a 
    different palette.  Before any crunching can begin you need the address 
    of (or a pointer to) the scanline and the address of (or a pointer  to) 
    the scanline`s palette:

     y&=1
     WHILE y&<200
       ---- find address of scanline ----
       ---- find address of palette ----

       group|=0
       WHILE group|<20
         ---- read 4 planes for group ----
         set_pixel|=0
         WHILE set_pixel|<16
           ---- crunch single pixel for group ----
           INC set_pixel|
         WEND
         INC group|
       WEND

       INC y&
     WEND

        Crunching each group consists of two main operations:  reading  the 
    four planes for that group,  and crunching the sixteen pixels for  that 
    group (see algorithm above).

        As  briefly mentioned in the user instructions,  Spectrum  pictures 
    can  contain  upto 512 colors (or 4096 on the STE).   The  ST  is  only 
    normally  capable  of  displaying 16 colors at a  time.   In  order  to 
    display an SPU,  a very fast and very CPU-intensive program is  needed. 
    I don`t have such a program, so instead I REDUCE the 512 color image to 
    16  colors  using a simple but effective  method  called  GREY-SCALING. 
    This involves   calculating  the  "average  brightness"   or   "average 
    intensity"  for  each  pixel from its  respective  red,  green  &  blue 
    components.

        In order to crunch a pixel, the following must be done:

     * calculate (or decode) pixel color (from 0 to 15) using planes
     * calculate X co-ordinate
     * calculate spectrum color (from 0 to 47) using pixel color & X co-ord
     * reduce spectrum color`s RGB to a grey which can be displayed

        Thus the algorithm is now as follows:

     y&=1
     WHILE y&<200
       ---- find address of scanline ----
       ---- find address of palette ----

       group|=0
       WHILE group|<20
         ---- read 4 planes for group from scanline ----
         set_pixel|=0
         WHILE set_pixel|<16
           ---- decode pixel color from planes ----
           ---- calculate X co-ordinate ----
           ---- calculate spectrum color using pixel color & X co-ord ----
           ---- reduce spectrum color`s RGB to a grey ----
           INC set_pixel|
         WEND
         INC group|
       WEND

       INC y&
     WEND

        It could now be possible to write the reduced greys 'direct' to the 
    screen.   However this is very inefficient and slow;   it is far better 
    to re-insert these greys back into 4 planes and then write these planes 
    when  they are 'fully loaded' with 16 greys.   In order to  accommodate 
    this, the algorithm needs a few modifications:

     y&=1
     WHILE y&<200
       ---- find in_address of source scanline (in SPU) ----
       ---- find address of palette ----
       ---- find out_address of target scanline (on screen) ----

       group|=0
       WHILE group|<20
         ---- read 4 in_planes for group from source scanline ----
         set_pixel|=0
         WHILE set_pixel|<16
           ---- decode in_pixel color from in_planes ----
           ---- calculate X co-ordinate ----
           --- calculate spectrum color using in_pixel color & X co-ord ---
           ---- reduce spectrum color`s RGB to an out_grey ----
           INC set_pixel|
         WEND
         INC group|
       WEND

       INC y&
     WEND

        Each of the 16 out_greys of the group can now be encoded back  into 
    four  planes,  which  can then all be written in  one  go,  giving  the 
    *final* algorithm as follows:

     y&=1
     WHILE y&<200
       ---- find in_address of source scanline (in SPU) ----
       ---- find address of palette ----
       ---- find out_address of target scanline (on screen) ----

       group|=0
       WHILE group|<20
         ---- read 4 in_planes for group from source scanline ----
         set_pixel|=0
         WHILE set_pixel|<16
           ---- decode in_pixel color from in_planes ----
           ---- calculate X co-ordinate ----
           --- calculate spectrum color using in_pixel color & X co-ord ---
           ---- reduce spectrum color`s RGB to an out_grey ----
           ---- encode out_grey to 4 out_planes
           INC set_pixel|
         WEND
         ---- write 4 out_planes for group to target scanline ----
         INC group|
       WEND

       INC y&
     WEND

        This  algorithm  has been successfully implemented in GFA  and  the 
    source  should  be present with this document.   If either  the  source 
    (SPU_SHOW.LST)  or executable (SPU_SHOW.PRG) are missing,  complain  to 
    whoever gave you a copy of this document!   If this doesn`t work  write 
    to me (Professor) and I`ll send you a copy.

        Note  the program uses a simple but effective method  called  GREY-
    SCALING  to  reduce  SPU images to 16 color.   It may  be  possible  to 
    re-implement using a different (more complex?) reduction method, though 
    a fairly extensive re-coding would probably be necessary.   If you have 
    an  queries  about  doing this,  or anything  else  mentioned  in  this 
    document, please don`t hesitate to get in touch with me (Professor).


    And Finally
    ===========
        Although  there  is no financial charge for  the  program,  support 
    appreciated.  You can support in two ways:

    1) by  distributing  the program to everyone  you  know,  ensuring  all 
       files remain together,

    2) feedback:  all comments,  queries,  error / incompatibility reports, 
       ideas,  suggestions,  etc are welcome - both positive and  negative. 
       My postal and E-mail addresses are previously listed.


    ---END---
