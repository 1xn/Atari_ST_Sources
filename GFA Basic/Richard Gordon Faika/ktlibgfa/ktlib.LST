'
' KEYTAB-Bibliothek fÅr GFA
' (c) RGF Software, Richard Gordon Faika
' Freeware
'
' ********************************************
' ** Inline von get-cookie nicht vergessen! **
' ********************************************
'
'
' Hinweis: Die Bibliothek ist dynamisch, das ist zwar etwas langsamer, aber
'          sicherer, da KEYTAB wÑhrend der Laufzeit des Systems ja auch rausfliegen
'          kann oder sich der Cookiejar bzw. die Struktur und Ihre Position Ñndert.
'          D.h. bei jedem Aufruf irgendeiner Funktion wird die Struktur auf GÅltigkeit
'          geprÅft.
'
'
' Beispiel fÅr Ausgabe der Namen der Export- und ImportzeichnsÑtze:
'
@beispiel
PROCEDURE beispiel
  '
  LOCAL max_exp&,max_imp&,nr&,id&,a$
  LOCAL buffer%,buffer1%
  '
  INLINE buffer%,128
  INLINE buffer1%,128
  '
  max_exp&=@kt_get.exp.maxnr
  max_imp&=@kt_get.imp.maxnr
  '
  PRINT "Export-ZeichensÑtze:"
  PRINT "langer Name                     | kurzer Name"
  PRINT "--------------------------------+-----------------------------"
  FOR i&=0 TO max_exp&
    PRINT LEFT$(CHAR{@kt_get.exp.name.fromnr(i&)}+SPACE$(32),32);"| ";CHAR{@kt_get.exp.shortname.fromnr(i&)}
  NEXT i&
  PRINT
  '
  '
  PRINT "Import-ZeichensÑtze:"
  PRINT "langer Name                     | kurzer Name"
  PRINT "--------------------------------+-----------------------------"
  FOR i&=0 TO max_imp&
    PRINT LEFT$(CHAR{@kt_get.imp.name.fromnr(i&)}+SPACE$(32),32);"| ";CHAR{@kt_get.imp.shortname.fromnr(i&)}
  NEXT i&
  PRINT
  PRINT "<taste>"
  ~INP(2)
  '
  PRINT
  PRINT "Ausgabe eines Teststrings:"
  PRINT
  CHAR{buffer%}=CHR$(34)+"ÑîÅéôöû?!›$%&/()="+CHR$(34)
  '
  PRINT "Atari-Format         : ";CHAR{buffer%}
  FOR i&=1 TO max_exp&
    PRINT LEFT$(CHAR{@kt_get.exp.name.fromnr(i&)}+SPACE$(21),21);": ";CHAR{@kt_string.atari2x(buffer1%,i&,buffer%)}
  NEXT i&
  '
  PRINT
  PRINT "<taste>"
  ~INP(2)
  EDIT
  '
  '
RETURN
'
'
FUNCTION get_cookie(cookie$)
  $F%
  '
  LOCAL rgemcook%
  '
  INLINE rgemcook%,88
  RETURN C:rgemcook%(L:CVL(cookie$))
  '
ENDFUNC
'
FUNCTION kt_get.keytab(VAR size%)               ! Strukturadresse und -LÑnge ermitteln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%
  '
  CLR size%                                     ! lîschen
  kt_struc%=@get_cookie("KEYT")                 ! Cookie lesen
  IF kt_struc%<>0                               ! Struktur vorhanden?
    IF {kt_struc%}=CVL("KEYT")                  ! "magic" gÅltig?
      size%={kt_struc%+4}                       ! LÑnge lesen -> in size% zurÅck
      RETURN kt_struc%                          ! Adresse zurÅckgeben
    ENDIF
  ENDIF
  RETURN FALSE
ENDFUNC
FUNCTION kt_get.euro                            ! Info und Lage des Euro-Zeichens liefern
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=84                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN C:kt_func%()                       ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_get.release                         ! Versionsnummer von KEYTAB ermitteln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=64                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN WORD(C:kt_func%())                 ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_get.exp.maxnr                       ! max. nummer der export-zeichnsÑtze ermitteln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=8                                     ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN WORD(C:kt_func%())                 ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_get.imp.maxnr                       ! max. nummer der import-zeichensÑtze ermitteln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=24                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN WORD(C:kt_func%())                 ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_get.exp.name.fromnr(nr&)            ! namen eines export-zeichensatzes ermitteln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=48                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN C:kt_func%(nr&)                    ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_get.imp.name.fromnr(nr&)            ! namen eines import-zeichensatzes ermitteln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=52                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN C:kt_func%(nr&)                    ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_get.exp.shortname.fromnr(nr&)       ! kurzen namen eines export-zeichensatzes ermitteln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=56                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN C:kt_func%(nr&)                    ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_get.imp.shortname.fromnr(nr&)       ! kurzen namen eines import-zeichensatzes ermitteln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=60                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN C:kt_func%(nr&)                    ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_get.exp.nr.fromid(id&)              ! export-zeichensatz mittels id ermitteln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=16                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN WORD(C:kt_func%(id&))              ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_get.imp.nr.fromid(id&)              ! import-zeichensatz mittels id ermitteln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=32                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN WORD(C:kt_func%(id&))              ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_get.exp.id.fromnr(nr&)              ! id eines export-zeichensatzes ermitteln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=68                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN WORD(C:kt_func%(nr&))              ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_get.imp.id.fromnr(nr&)              ! id eines importzeichensatzes ermitteln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=72                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN WORD(C:kt_func%(nr&))              ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_get.exp.nr.fromname(name%)          ! ""
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=76                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN WORD(C:kt_func%(L:name%))          ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_get.imp.nr.fromname(name%)          ! ""
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=80                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      RETURN WORD(C:kt_func%(L:name%))          ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_char.atari2x(nr&,char|)             ! Ein Zeichen in einen anderen Zeichensatz wandeln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&,var%
  '
  offset&=20                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      var%=0
      INT{V:var%}=nr&                           ! parameter einpacken, sonst bekomm ich hier das byte nicht auf den stack
      BYTE{V:var%+2}=char|                      ! WIE KANN MAN NUR AUF DIE IDEE KOMMEN EIN BYTE AUFN STACK ZU PACKEN?
      '                                           (das kann nur wieder n fauler c-coder gewesen sein ;-))
      RETURN BYTE(C:kt_func%(L:var%))           ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_char.x2atari(nr&,char|)             ! Ein Zeichen aus einem anderen Zeichensatz wandeln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&,var%
  '
  offset&=36                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      var%=0
      INT{V:var%}=nr&                           ! parameter einpacken, sonst bekomm ich hier das byte nicht auf den stack
      BYTE{V:var%+2}=char|                      ! WIE KANN MAN NUR AUF DIE IDEE KOMMEN EIN BYTE AUFN STACK ZU PACKEN?
      '                                           (das kann nur wieder n fauler c-coder gewesen sein ;-))
      RETURN BYTE(C:kt_func%(L:var%))           ! aufrufen (cdecl)
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_block.atari2x(nr&,len%,sadr%,dadr%) ! einen Speicherbereich in einen anderen Zeichensatz wandeln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=40                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      IF sadr%<>dadr%
        BMOVE sadr%,dadr%,len%
      ENDIF
      ~C:kt_func%(nr&,L:len%,L:dadr%)           ! aufrufen (cdecl)
      RETURN dadr%
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_block.x2atari(nr&,len%,sadr%,dadr%) ! einen Speicherbereich aus einem andern Zeichensatz wandeln
  $F%                                           ! IntegerrÅckgabe
  $C+                                           ! Register sichern
  '
  LOCAL kt_struc%,kt_size%,kt_func%
  LOCAL offset&
  '
  offset&=44                                    ! Zeigerposition in der Struktur
  '
  kt_struc%=@kt_get.keytab(kt_size%)            ! Strukturadresse holen
  IF kt_struc%<>0                               ! prÅfen
    IF kt_size%>offset&                         ! LÑnge prÅfen
      kt_func%={kt_struc%+offset&}              ! Funktionsadresse holen
      IF sadr%<>dadr%
        BMOVE sadr%,dadr%,len%
      ENDIF
      ~C:kt_func%(nr&,L:len%,L:dadr%)           ! aufrufen (cdecl)
      RETURN dadr%
    ENDIF
  ENDIF
  RETURN TRUE                                   ! -1 zurÅck, falls Fehler
ENDFUNC
FUNCTION kt_string.atari2x(des%,nr&,src%)       ! einen C-String in einen anderen Zeichensatz wandeln
  $F%                                           ! IntegerrÅckgabe
  RETURN @kt_block.atari2x(nr&,LEN(CHAR{src%})+1,src%,des%)
ENDFUNC
FUNCTION kt_string.x2atari(des%,nr&,src%)       ! einen C-String aus einem anderen Zeichensatz wandeln
  $F%                                           ! IntegerrÅckgabe
  RETURN @kt_block.x2atari(nr&,LEN(CHAR{src%})+1,src%,des%)
ENDFUNC
