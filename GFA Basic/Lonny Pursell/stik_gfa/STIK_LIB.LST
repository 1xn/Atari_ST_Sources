' GFA-Basic Library Code for STiK  v1.09
' by Lonny Pursell
' (C)1997-98 by Lonny Pursell and ENCOM
' All rigths reserved.
' Date: 1/25/98
' E-Mail: atari@bright.net
' WWW: http://www.bright.net/~atari/
'
' -- library routines ----------------------------------------------------------
FUNCTION cookie_get(id$,VAR i%) !v0.03
  $F%
  ' N$   TARGET COOKIE            [MAX 4 CHARS]
  ' CI%  RETURN COOKIE INFO       [LONG: 0-?]
  '      RETURN COOKIE STATUS     [TRUE/FALSE]
  LOCAL s!,a%
  CLR s!,i%
  a%=LPEEK(&H5A0) !GET COOKIE JAR ADDRESS
  IF a%>FALSE !COOKIE JAR EXIST?
    DO
      IF MKL$(LPEEK(a%))=id$ !FOUND COOKIE?
        i%=LPEEK(a%+4) !GET COOKIE INFO
        s!=TRUE !SET COOKIE EXIST FLAG
        EXIT IF TRUE
      ENDIF
      EXIT IF LPEEK(a%)=FALSE !EOL?
      a%=ADD(a%,8)
    LOOP
  ENDIF
  RETURN s!
ENDFUNC
' -- stik access routines ------------------------------------------------------
FUNCTION init_stik
  $F%
  LOCAL i.&,stik.&
  ' LOCAL debug.%
  CLR stik_!,stik_&,stik_%,tpl_%,stik_$
  IF LPEEK(&H5A0)>FALSE                       !cookie jar exist?
    stik_!=@cookie_get("STiK",stik_%)
    IF stik_!=TRUE                            !stik cookie exist?
      IF stik_%>FALSE                         !stik enabled?
        stik_$=STRING$(11,CHR$(FALSE))
        FOR i.&=1 TO 10
          MID$(stik_$,i.&,1)=CHR$(PEEK(stik_%+(i.&-1)))
        NEXT i.&
        stik_$=CHAR{V:stik_$} !clip
        IF stik_$="STiKmagic"                 !stik magic?
          '
          ' ** init stik setup functions
          LET get_dftab_%=LONG{stik_%+10}
          LET etm_exec_%=LONG{stik_%+14}
          LET config_%=LONG{stik_%+18}
          ' LET debug.%=LONG{stik_%+22}         !debug
          '
          tpl_%=@get_dftab("TRANSPORT_TCPIP") !get pointer to function table
          IF tpl_%>FALSE !null pointer?
            stik.&=FALSE !set stik valid flag
            '
            ' ** init stik function pointers
            LET module_%=LONG{tpl_%}
            LET author_%=LONG{tpl_%+4}
            LET version_%=LONG{tpl_%+8}
            LET krmalloc_%=LONG{tpl_%+12}
            LET krfree_%=LONG{tpl_%+16}
            LET krgetfree_%=LONG{tpl_%+20}
            LET krrealloc_%=LONG{tpl_%+24}
            LET get_err_text_%=LONG{tpl_%+28}
            LET getvstr_%=LONG{tpl_%+32}
            LET carrier_detect_%=LONG{tpl_%+36}
            LET tcp_open_%=LONG{tpl_%+40}
            LET tcp_close_%=LONG{tpl_%+44}
            LET tcp_send_%=LONG{tpl_%+48}
            LET tcp_wait_state_%=LONG{tpl_%+52}
            LET tcp_ack_wait_%=LONG{tpl_%+56}
            LET udp_open_%=LONG{tpl_%+60}
            LET udp_close_%=LONG{tpl_%+64}
            LET udp_send_%=LONG{tpl_%+68}
            LET cnkick_%=LONG{tpl_%+72}
            LET cnbyte_count_%=LONG{tpl_%+76}
            LET cnget_char_%=LONG{tpl_%+80}
            LET cnget_ndb_%=LONG{tpl_%+84}
            LET cnget_block_%=LONG{tpl_%+88}
            LET housekeep_%=LONG{tpl_%+92}
            LET resolve_%=LONG{tpl_%+96}
            LET ser_disable_%=LONG{tpl_%+100}
            LET ser_enable_%=LONG{tpl_%+104}
            LET set_flag_%=LONG{tpl_%+108}
            LET clear_flag_%=LONG{tpl_%+112}
            LET cngetinfo_%=LONG{tpl_%+116}
            '
            ' ** get stik global configurations
            LET client_ip_%=LONG{config_%}
            LET provider_%=LONG{config_%+4}
            LET ttl_&=CARD{config_%+8}
            LET ping_ttl_&=CARD{config_%+10}
            LET mtu_&=CARD{config_%+12}
            LET mss_&=CARD{config_%+14}
            LET df_bufsize_&=CARD{config_%+16}
            LET rcv_window_&=CARD{config_%+18}
            LET def_rtt_&=CARD{config_%+20}
            LET time_wait_time_&=WORD{config_%+22}
            LET unreach_resp_&=WORD{config_%+24}
            LET cn_time_%=LONG{config_%+26}
            LET cd_valid_&=WORD{config_%+30}
            '
            ' tcp connection states
            LET tclosed&=FALSE
            LET tlisten&=1
            LET tsyn_sent&=2
            LET tsyn_recv&=3
            LET testablish&=4
            LET tfin_wait1&=5
            LET tfin_wait2&=6
            LET tclose_wait&=7
            LET tclosing&=8
            LET tlast_ack&=9
            LET ttime_wait&=10
            '
            ' tcp and connection error states
            LET e_normal&=FALSE
            LET e_obuffull&=-1
            LET e_nodata&=-2
            LET e_eof&=-3
            LET e_rreset&=-4
            LET e_ua&=-5
            LET e_nomem&=-6
            LET e_refuse&=-7
            LET e_badsyn&=-8
            LET e_badhandle&=-9
            LET e_listen&=-10
            LET e_noccb&=-11
            LET e_noconnection&=-12
            LET e_connectfail&=-13
            LET e_badclose&=-14
            LET e_usertimeout&=-15
            LET e_cntimeout&=-16
            LET e_cantresolve&=-17
            LET e_baddname&=-18
            LET e_lostcarrier&=-19
            LET e_nohostname&=-20
            LET e_dnsworklimit&=-21
            LET e_nonameserver&=-22
            LET e_dnsbadformat&=-23
            LET e_unreachable&=-24
            LET e_dnsnoaddr&=-25
            LET e_locked&=-26
            LET e_lasterror&=26
            '
          ELSE !transport layer not loaded?
            stik.&=-5
          ENDIF
        ELSE !stik magic not found?
          stik.&=-4
        ENDIF
      ELSE !stik disabled?
        stik.&=-3
      ENDIF
    ELSE !stik cookie not found?
      stik.&=-2
    ENDIF
  ELSE !no cookie jar?
    stik.&=TRUE
  ENDIF
  stik_&=stik.& !global!
  RETURN stik.&
ENDFUNC
FUNCTION get_dftab(tl.$)
  $F%
  tl.$=tl.$+CHR$(FALSE)
  RETURN C:get_dftab_%(L:V:tl.$) !pointer%
ENDFUNC
FUNCTION etm_exec(m.$)
  $F%
  ' unknown function (execute external module?)
  LOCAL r.%
  m.$=m.$+CHR$(FALSE)
  r.%=C:etm_exec_%(L:V:m.$)
  RETURN WORD{V:r.%+2} !word&
ENDFUNC
FUNCTION module$
  RETURN CHAR{module_%} !string$
ENDFUNC
FUNCTION author$
  RETURN CHAR{author_%} !string$
ENDFUNC
FUNCTION version$
  RETURN CHAR{version_%} !string$
ENDFUNC
FUNCTION krmalloc(size.%)
  $F%
  RETURN C:krmalloc_%(L:size.%) !pointer%
ENDFUNC
FUNCTION krfree(block.%)
  $F%
  RETURN C:krfree_%(L:block.%) !void~
ENDFUNC
FUNCTION krgetfree(flag.&)
  $F%
  RETURN C:krgetfree_%(W:flag.&) !long%
ENDFUNC
FUNCTION krrealloc(block.%,newsize.%)
  $F%
  RETURN C:krrealloc_%(L:block.%,L:newsize.%) !pointer%
ENDFUNC
FUNCTION get_err_text$(code.&)
  LOCAL sp.%
  sp.%=C:get_err_text_%(W:code.&)
  RETURN CHAR{sp.%} !string$
ENDFUNC
FUNCTION getvstr$(var.$)
  LOCAL sp.%
  LOCAL value.$
  IF LEN(var.$)>FALSE
    var.$=var.$+CHR$(FALSE)
    sp.%=C:getvstr_%(L:V:var.$)
    IF sp.%=FALSE OR sp.%=1
      value.$=""
    ELSE
      value.$=CHAR{sp.%}
    ENDIF
  ELSE
    value.$=""
  ENDIF
  RETURN value.$ !string$
ENDFUNC
FUNCTION carrier_detect
  $F%
  LOCAL cd.%
  cd.%=C:carrier_detect_%()
  RETURN WORD{V:cd.%+2} !word&
ENDFUNC
FUNCTION tcp_open(rhost.%,rport.%,tos.&,obsize.&)
  $F%
  LOCAL ec.%,rport.&
  WORD{V:rport.&}=WORD{V:rport.%+2} !convert port% to port& (word&)
  ec.%=C:tcp_open_%(L:rhost.%,W:rport.&,W:tos.&,W:obsize.&)
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION tcp_close(cn.&,timeout.&)
  $F%
  LOCAL ec.%
  ec.%=C:tcp_close_%(W:cn.&,W:timeout.&)
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION tcp_send(cn.&,buf.%,len.&)
  $F%
  LOCAL ec.%
  IF len.&>FALSE
    ec.%=C:tcp_send_%(W:cn.&,L:buf.%,W:len.&)
  ELSE
    ec.%=FALSE !return e_normal
  ENDIF
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION tcp_wait_state(cn.&,state.&,timeout.&)
  $F%
  LOCAL ec.%
  ec.%=C:tcp_wait_state_%(W:cn.&,W:state.&,W:timeout.&)
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION tcp_ack_wait(cn.&,timeout.&)
  $F%
  LOCAL ec.%
  ec.%=C:tcp_ack_wait_%(W:cn.&,W:timeout.&)
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION udp_open(rhost.%,rport.&)
  $F%
  LOCAL ec.%
  ec.%=C:udp_open_%(L:rhost.%,W:rport.&)
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION udp_close(cn.&)
  $F%
  LOCAL ec.%
  ec.%=C:udp_close_%(W:cn.&)
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION udp_send(cn.&,buf.%,len.&)
  $F%
  LOCAL ec.%
  IF len.&>FALSE
    ec.%=C:udp_send_%(W:cn.&,L:buf.%,W:len.&)
  ELSE
    ec.%=FALSE !return e_normal
  ENDIF
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION cnkick(cn.&)
  $F%
  LOCAL ec.%
  ec.%=C:cnkick_%(W:cn.&)
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION cnbyte_count(cn.&)
  $F%
  LOCAL ec.%
  ec.%=C:cnbyte_count_%(W:cn.&)
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION cnget_char(cn.&)
  $F%
  LOCAL ec.%
  ec.%=C:cnget_char_%(W:cn.&)
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION cnget_ndb(cn.&)
  $F%
  RETURN C:cnget_ndb_%(W:cn.&) !pointer%
ENDFUNC
FUNCTION cnget_block(cn.&,blk.%,len.&)
  $F%
  LOCAL ec.%
  ec.%=C:cnget_block_%(W:cn.&,L:blk.%,W:len.&)
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION housekeep
  $F%
  RETURN C:housekeep_%() !void~
ENDFUNC
FUNCTION resolve(dn.$,rdn.%,alist.%,lsize.&)
  $F%
  LOCAL ec.%
  dn.$=dn.$+CHR$(FALSE)
  ec.%=C:resolve_%(L:V:dn.$,L:rdn.%,L:alist.%,W:lsize.&)
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION ser_disable
  $F%
  RETURN C:ser_disable_%() !void~
ENDFUNC
FUNCTION ser_enable
  $F%
  RETURN C:ser_enable_%() !void~
ENDFUNC
FUNCTION set_flag(flag.&)
  $F%
  LOCAL ec.%
  ec.%=C:set_flag_%(W:flag.&)
  RETURN WORD{V:ec.%+2} !word&
ENDFUNC
FUNCTION clear_flag(flag.&)
  $F%
  RETURN C:clear_flag_%(W:flag.&) !void~
ENDFUNC
FUNCTION cngetinfo(cn.&)
  $F%
  RETURN C:cngetinfo_%(W:cn.&) !pointer%
ENDFUNC
' eof
