' Example code how to use zView codecs (plugins) directly
' Written by Lonny Pursell
' Version 1.03
'
' History:
' 1.00 1st release
' 1.01 Added vs_color() for correct high/true-color rendering, RGB 0-256 scaled up to 0-1000
'      For color mapped images, palette is now set
' 1.02 Compatible with GFA v3.6
' 1.03 corrected libpath() call
'
'
' See READ_ME.TXT for further info before running this code.
'
' $C+                   !not needed for plugins
REM #lib new lib        !adjust as needed
$m65536                 !use only this amount of ram (required or plugins can't be loaded)
'
CLS
'
ldg_&=@ldg_init                                 !first init ldg so we can call it
IF ldg_&                                        !ldg init was ok?
  PRINT "LDG version: ";HEX$(ldg_&,4)
ELSE                                            !ldg init failed?
  PRINT "ldg_init() failed - aborted"
  EDIT
ENDIF
'
' various test paths (adjust as needed)
plugin_$="codecs\degas.ldg"
' img_$="j:\images\degas\high\elephant.pc3"     !mono
img_$="j:\images\degas\low\dire.pi1"            !color mapped
'
' plugin_$="codecs\compeyes.ldg"
' img_$="j:\images\compeyes\320x200.ce1"
'
' plugin_$="codecs\spec512.ldg"
' img_$="j:\images\spec512\5_bit\image.spu"
'
' plugin_$="codecs\tga.ldg"
' img_$="k:\images\tga\car.tga"                 !true color
'
stat!=EXIST(img_$)                              !check file
IF stat!
  PRINT "image: ";img_$,stat!
ELSE
  PRINT img_$;" not found"
  EDIT
ENDIF
'
PRINT "plugin: ";plugin_$
stat!=@ldg_libpath(plugin_$)                    !check plugin availability
IF stat!
  PRINT "plugin: ";plugin_$,stat!
ELSE
  PRINT plugin_$;" not found"
  EDIT
ENDIF
'
@codec_open(plugin_$)                           !open the plugin
@codec_struct                                   !get list of supported file extensions
@plugin_init                                    !required
'
' create info structure
INLINE imginf_%,1130
CHAR{imginf_%}=STRING$(1130-1,0)                !clr inline
@imginf_struct
PRINT "ext(s): ";pi_ext_$
'
stat!=@reader_init(img_$,imginf_%)              !gather info about the image file
IF stat!
  PRINT "reader_read(): ok"
ELSE
  PRINT "reader_read() failed: ";stat!
ENDIF
'
PRINT "image WxH: ";width_&;"x";height_&
PRINT "components: ";components_&
PRINT "planes: ";planes_&
PRINT "colors: ";colors_%
PRINT "orientation: ";orientation_&;" ";
IF orientation_&
  PRINT "(image needs flipped)"
ELSE
  PRINT "(ok as is)"
ENDIF
PRINT "page: ";page_&
PRINT "delay: ";delay_&
PRINT "num_comments: ";num_comments_&
PRINT "max_comments_length: ";max_comments_length_&
PRINT "indexed_color: ";indexed_color_&
PRINT "memory_alloc: ";memory_alloc_&
PRINT "Palette: ";
DIM red_|(256),green_|(256),blue_|(256)         !buffers for palette
IF indexed_color_&                              !is there a palette?
  PRINT "yes"
  FOR i&=0 TO 255                               !grab all 256, don't trust planes_& or color_&
    red_|(i&)=BYTE{palette_%+(i&*4)}
    green_|(i&)=BYTE{palette_%+(i&*4)+1}
    blue_|(i&)=BYTE{palette_%+(i&*4)+2}
    ' PRINT HEX$(red_|(i&),2);HEX$(green_|(i&),2);HEX$(blue_|(i&),2);" ";
    @vs_color(i&,red_|(i&)*3.922,green_|(i&)*3.922,blue_|(i&)*3.922)
  NEXT i&
ELSE
  PRINT "none"
ENDIF
PRINT "background_color: $";HEX$(background_color_%,8)
PRINT "thumbnail: ";thumbnail_&
PRINT "page_wanted: ";page_wanted_&
info_$=CHAR{info_%}
PRINT "info: ";info_$,LEN(info_$)
compression_$=CHAR{compression_%}
PRINT "compression: ";compression_$,LEN(compression_$)
PRINT "real_width: ";real_width_&
PRINT "real_height: ";real_height_&
'
DIM buffer_|((width_&*components_&)+64)         !scan line buffer, +64 in case of plugin overrun
buffer_%=V:buffer_|(0)
'
page_wanted_&=0                                 !tell plugin which frame, always 0 for images
'
bp_&=WORD{LONG{GB+4}+20}                        !current screen bit planes
FOR y&=0 TO height_&-1
  stat!=@reader_read(imginf_%,buffer_%)         !get next scan line
  IF stat!=FALSE                                !problem?
    PRINT "error getting scan line: ";y&
    EXIT IF TRUE
  ENDIF
  ' render scan line
  FOR x&=0 TO width_&-1
    IF components_&=1                           !mono?
      IF bp_&<=8
        COLOR buffer_|(x&)
      ELSE
        IF buffer_|(x&)
          @vs_color(254,1000,1000,1000)         !white
        ELSE
          @vs_color(254,0,0,0)                  !black
        ENDIF
        COLOR 254
      ENDIF
    ELSE
      IF indexed_color_&                        !color mapped?
        IF bp_&<=8
          COLOR buffer_|(x&) !non-tc
        ELSE
          index&=buffer_|(x&)
          @vs_color(254,red_|(index&)*3.922,green_|(index&)*3.922,blue_|(index&)*3.922)
          COLOR 254
        ENDIF
      ELSE                                      !true color?
        @vs_color(254,BYTE{buffer_%+(x&*3)}*3.922,BYTE{buffer_%+(x&*3)+1}*3.922,BYTE{buffer_%+(x&*3)+2}*3.922)
        COLOR 254
      ENDIF
    ENDIF
    PLOT x&,y&
  NEXT x&
NEXT y&
'
@reader_quit(imginf_%)          !free plugin resources
@codec_close                    !done with lib, so close it (unload)
'
PRINT
PRINT "done"
EDIT
'
' plugin setup
> PROCEDURE codec_open(plugin$)
  desc_%=@ldg_open(plugin$)     !get plugin descriptor
  IF desc_%>FALSE
    ' get the addresses for all 5 library calls
    plugin_init%=@ldg_find("plugin_init",desc_%)
    reader_init%=@ldg_find("reader_init",desc_%)
    reader_read%=@ldg_find("reader_read",desc_%)
    reader_quit%=@ldg_find("reader_quit",desc_%)
    reader_get_txt%=@ldg_find("reader_get_txt",desc_%)
  ELSE
    PRINT "Error at plugin_open"
    EDIT
  ENDIF
RETURN
> PROCEDURE codec_close
  IF @ldg_close(desc_%)<>FALSE
    PRINT "Error at plugin_close"
    EDIT
  ENDIF
RETURN
> PROCEDURE imginf_struct
  ' see zview.h (if this structure ever changes, these offsets need updated!)
  ' setup direct read/write access to structure (1128 bytes)
  ABSOLUTE width_&,imginf_%+0
  ABSOLUTE height_&,imginf_%+2
  ABSOLUTE components_&,imginf_%+4
  ABSOLUTE planes_&,imginf_%+6
  ABSOLUTE colors_%,imginf_%+8
  ABSOLUTE orientation_&,imginf_%+12
  ABSOLUTE page_&,imginf_%+14
  ABSOLUTE delay_&,imginf_%+16
  ABSOLUTE num_comments_&,imginf_%+18
  ABSOLUTE max_comments_length_&,imginf_%+20
  ABSOLUTE indexed_color_&,imginf_%+22
  ABSOLUTE memory_alloc_&,imginf_%+24
  palette_%=imginf_%+26                 !padded to 4 bytes, 'rgb0', thus 256*4 bytes total
  ABSOLUTE background_color_%,imginf_%+1050
  ABSOLUTE thumbnail_&,imginf_%+1054
  ABSOLUTE page_wanted_&,imginf_%+1056
  info_%=imginf_%+1058
  compression_%=imginf_%+1098               !padded, thus 5+1=6
  ABSOLUTE real_width_&,imginf_%+1104
  ABSOLUTE real_height_&,imginf_%+1106
  ' beyond this point is private stuff used by the codec
RETURN
> PROCEDURE codec_struct
  ABSOLUTE pi_magic_%,LONG{desc_%}
  ABSOLUTE pi_version_&,WORD{desc_%+4}
  ABSOLUTE pi_id_&,WORD{desc_%+6}
  ABSOLUTE pi_num_&,WORD{desc_%+8}
  ABSOLUTE pi_list_%,LONG{desc_%+10}
  pi_ext_$=CHAR{LONG{desc_%+14}}        !list of supported extensions
  ABSOLUTE pi_count_%,LONG{desc_%+158}
RETURN
'
' plugin functions
> PROCEDURE plugin_init
  ~C:plugin_init%()
RETURN
> FUNCTION reader_init(name$,info%)
  $F%
  LET name$=name$+CHR$(0)
  RETURN C:reader_init%(L:V:name$,L:info%)=1 !boolean
ENDFUNC
> FUNCTION reader_read(info%,buffer%)
  $F%
  RETURN C:reader_read%(L:info%,L:buffer%)=1 !boolean
ENDFUNC
> PROCEDURE reader_quit(info%)
  ~C:reader_quit%(L:info%)
RETURN
> PROCEDURE reader_get_txt(info%,buffer%) !not sure how this works
  ~C:reader_get_txt%(L:info%,L:buffer%)
RETURN
'
' vdi functions
> PROCEDURE vs_color(i&,r&,g&,b&)
  CONTRL(0)=14
  CONTRL(1)=0
  CONTRL(3)=4
  ' CONTRL(6)=h& !not needed
  INTIN(0)=i&
  INTIN(1)=r&
  INTIN(2)=g&
  INTIN(3)=b&
  VDISYS
RETURN
'
' used by LDG lib
> FUNCTION setexc(num&,newvec%)
  $F%
  RETURN BIOS(5,W:num&,L:newvec%)
ENDFUNC
> FUNCTION ssystem(mode&,arg1%,arg2%) !v0.01
  $F%
  ' get cookie - mode=8/arg1=tag/arg2=v:data
  RETURN GEMDOS(340,W:mode&,L:arg1%,L:arg2%)
ENDFUNC
> FUNCTION getcookie(id%,VAR i%) !v0.07
  $F%
  ' id%  target cookie            max 4 chars
  ' i%   return cookie info       long: 0-?
  ' s!   return cookie status     true/false
  LOCAL s!,a%,c%
  ' CLR s!,i%
  IF @ssystem(TRUE,FALSE,FALSE)=FALSE !use mint call?
    s!=@ssystem(8,id%,V:i%)=FALSE
  ELSE
    REM a%=LPEEK(&H5A0)      !get cookie jar address
    a%=@setexc(&H5A0\4,TRUE) !get cookie jar address
    IF a%>FALSE !cookie jar exist?
      DO
        c%=LPEEK(a%) !get cookie id
        IF c%=id% !found cookie?
          i%=LPEEK(a%+4) !get cookie info
          s!=TRUE !set cookie exist flag
          EXIT IF TRUE
        ENDIF
        EXIT IF LPEEK(a%)=FALSE !eol?
        a%=ADD(a%,8)
      LOOP
    ENDIF
  ENDIF
  RETURN s!
ENDFUNC
' ---------------------------------------------------------------------------------------
' -- LDG bindings by Lonny Pursell v1.03 --
> FUNCTION ldg_init
  $F%
  ' return: true=init ok, or false=failed
  LOCAL ldg!
  CLR version&,ldg_%,ldg_open%,ldg_close%,ldg_find%,ldg_error%,ldg_libpath%,ldg_global%
  ldg!=@getcookie(CVL("LDGM"),ldg_%)
  IF ldg!
    version&=WORD{ldg_%}
    ldg_open%=LONG{ldg_%+134}
    ldg_close%=LONG{ldg_%+138}
    ldg_find%=LONG{ldg_%+142}
    ldg_error%=ldg_%+150
    ldg_libpath%=LONG{ldg_%+164}
    ldg_global%=LONG{GB+4}
  ENDIF
  RETURN version&
ENDFUNC
> FUNCTION ldg_open(lib$)
  $F%
  ' return: lib descriptor, or negative error code (see ldg.h in devkit)
  LOCAL desc%
  lib$=lib$+CHR$(0)
  desc%=C:ldg_open%(L:V:lib$,L:ldg_global%)
  IF desc%=FALSE           !failed?
    desc%=WORD{ldg_error%} !get actual error code
  ENDIF
  RETURN desc%
ENDFUNC
> FUNCTION ldg_close(desc%)
  $F%
  ' null=closed ok, or negative error code
  RETURN C:ldg_close%(L:desc%,L:ldg_global%)
ENDFUNC
> FUNCTION ldg_find(func$,desc%)
  $F%
  ' return: address of function, null=not found
  func$=func$+CHR$(0)
  RETURN C:ldg_find%(L:V:func$,L:desc%)
ENDFUNC
FUNCTION ldg_libpath(VAR path$)
  $F%
  ' return: true=found, false=not found
  LOCAL buff%,ret%
  INLINE buff%,130
  CHAR{buff%}=path$
  ret%=C:ldg_libpath%(L:buff%,L:ldg_global%)
  path$=CHAR{buff%}
  RETURN ret%=1
ENDFUNC
> PROCEDURE ldg_debug(desc%)
  LOCAL i&,num&,list%,name%,info%,func%
  PRINT
  PRINT "    magic: ";MKL$(LONG{desc%})
  PRINT "  lib ver: $";HEX$(WORD{desc%+4},4)
  PRINT "       id: ";WORD{desc%+6}
  PRINT "      num: ";WORD{desc%+8}
  PRINT "     list: ";LONG{desc%+10}
  PRINT "    infos: ";CHAR{LONG{desc%+14}}
  PRINT " basepage: ";LONG{desc%+18}
  PRINT "    flags: %";BIN$(WORD{desc%+22},16)
  PRINT "    close: ";LONG{desc%+24}
  PRINT "proto ver: %";HEX$(WORD{desc%+28},4)
  PRINT "     path: ";CHAR{desc%+30}
  PRINT " user_ext: ";LONG{desc%+158}
  PRINT " addr_ext: ";LONG{desc%+162}
  PRINT
  num&=WORD{desc%+8}
  LET list%=LONG{desc%+10}
  FOR i&=0 TO num&-1
    LET name%=LONG{list%}
    info%=LONG{list%+4}
    func%=LONG{list%+8}
    ADD list%,12
    PRINT " num: ";i&+1
    PRINT "name: ";CHAR{name%}
    PRINT "info: ";CHAR{info%}
    PRINT "func: ";func%
    PRINT
  NEXT i&
RETURN
' eof
