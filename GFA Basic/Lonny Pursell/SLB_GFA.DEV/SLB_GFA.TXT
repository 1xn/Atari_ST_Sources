SLB DevKit  v1.10
by Lonny Pursell and ENCOM
Released as Public Domain
3/25/2003

E-Mail: atari@q1.net
   WWW: http://www.q1.net/~atari/

Based partly on information provided by Grzegorz Pawlik.
Some files taken from the 'magic programming documentation' archive.
Additional docs provided by Julian Reschke.
Technical support provided by draco. (Gemma coded by draco)
Visit draco.atari.org if wish to download the full Gemma archive.


Background
==========
One day while installing Aniplayer a thought occured to me.  Would it
be possible to use a 'shared library' aka SLB from with in GFA-Basic?
I posted a message on the GFA mailing-list asking if this was
possible.  Grzegorz Pawlik initially posted a reply with example code
to open/close an SLB.  However, that is all he could provide as a
documented SLB was needed for a real test.  A while later he posted a
follup stating he found an SLB suitable for a test, and provided an
example call to an SLB.  The example code in the posts could not
actually be ran.  I had saved these 2 mails and for some reason I had
overlooked the fact that he stated the test actually worked.

Another SLB related idea popped into my head and thus the interest in
SLB's was re-sparked.  I dug out these posts and pasted together a
test program coded in GFA, and added the missing parts as his example
code was just the main routines and one call.

Much to my suprise, the example did not work at all.  Not matter what
I did, or where I placed the test SLB on the HD, I always received
back an -33 (file not found) error code.  What the heck is going on?
I decided to toss the original test code and start over, so I
downloaded the SLBLOAD archive by Julian Reschke, and coded my own
test program.  Again it failed with the same error message!

I then double checked my $SLBPATH setting, did some tests with
Aniplayer since it uses SLB's, and found that Aniplayer had no
problems finding it's SLB files.  Originally this was said to work
under magic and I was using MiNT.  Was this a clue?  The test SLB was
also taken from the magic programming documentation archive.  I
checked and re-checked my code over and over, only to end up with a
non-working test program again.  I had someone with magic test my SLB
stuff and it worked!  I was at the point where I needed help or give
up.  The problem was either related to MiNT or the test SLB was
faulty.  It was a combination of both actually.

Draco to the rescue!  I sent the questionable test SLB to Draco and he
checked it out.  Apparently MiNT does some extra checks that magic
ignores.  Simply renaming the SLB to match the name stored in it's
header solved the problem!  Just like magic it suddenly worked!  :oP

All this hoopla over not even a screen full of code...


Files
=====
\demo
  demo.gfa   source to my SLB shared library bindings
  demo.prg   executable version
  demo.slb   the actual SLB that is called during this test
\gemma
  gemma.gfa  source to my gemma SLB test program
  gemma.prg  executable version
  gemma.slb  the actual SLB that is called during this test
  dummy.rsc  resource file used by gemma.prg
slb_gfa.txt  this doc file


How the use demo.prg
====================
First place the demo.slb file in your global SLB folder.  Depending on
your setup you can leave it in the same path as the test program.
This docs assumes you know how to setup your global SLB path and have
previously installed other SLB's.

Now run the slb_test.prg and it should print some information.  The
best way to do this is to open the console before you start it, so
that the console captures the output.  Otherwise it will corrupt the
desktop display.

The test program should display some values and a line of text.  The
line of text is actually passed from the GFA program to the SLB, and
the SLB places that line of text on the screen.  You then need to
press a key to exit the test program.

If if everything is ok, you should get this in the console:

  slb_open
   ver% 1
  hand% 25559040
  exec% 18688238

  slb demo call
  SLB via GFA!  Press any key to exit...
  stat% 0

  slb_close
  stat% 0

  done

If you don't get this, you probably have a problem with your SLB path.
See the SLB docs and/or the GFA source file if you wish to know what
these values are.  ;-)


How to use gemma.prg
====================
First place gemma.slb in it's proper location.
Make sure dummy.rsc is in the same path as gemma.prg.
Start gemma.prg and you should get an alert box with 3 buttons.
Pick a button to exit.
The information displayed should show which button you selected.
The alert is actually displayed by Gemma.
Study the source code for more information.


Sharing is fun!


Disclaimer
==========
Use entirely at your own risk!  :o)


History
=======
v1.00  First release.
v1.10  Added Gemma demo.


eof


