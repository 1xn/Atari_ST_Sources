

THE PROCEDURES Volume 1.00 (92-02-15)


All procedures written by Dan Panke.

    Should you have any questions or comments please feel free to
    contact me on the following systems:

        CompuServe:  73257,2635  (Who is number1?)
        Delphi:      DPANKE
        GEnie:       D.PANKE


    The following is a description of the accompanying procedures for
    use in GFA BASIC 3.0 or greater. Some modification to these
    procedures may be required in order for them to work in earlier
    versions of GFA BASIC.



Procedure: 4-WAY STICK

File Name: 4WAY_STK.LST

Associated File(s): none

The Call: GOSUB 4way_stick(x%,y%)

Variable(s):

    x%,y% = current x/y position of joystick 1. The new x/y position
    will be returned in these variables.

Note(s):

    1) A STICK(1) command will freeze the mouse. If you wish to
    continue using the mouse execute a STICK 0 call after this
    procedure.

    2) This procedure only reads the joystick in 4 directions (up,
    down, left, right).

    3) This procedure only changes the x/y coordinates by 1 in each
    direction. Adjust the procedure if you require greater movement.

Example(s):

    @4way_stick(x%,y%)



Procedure: 8-WAY STICK

File Name: 8-WAY_STK.LST

Associated File(s): none

The Call: GOSUB 8way_stick(x%,y%)

Variable(s):

    x%,y% = current x/y position of joystick 1. The new x/y position
    will be returned in these variables.

Note(s):

    1) A STICK(1) command will freeze the mouse. If you wish to
    continue using the mouse execute a STICK 0 call after this
    procedure.

    2) This procedure reads the joystick in all eight positions.
    Diagonal movement adjusts both the x and y coordinates.

    3) This routine only changes the x/y coordinates by 1 in each
    direction. Adjust the procedure if you require greater movement.

Example(s):

    @8way_stick(x%,y%)



Procedure: BLOCK MOVE

File Name: BLK_MOVE.LST

Associated File(s): none

The Call:
  GOSUB block_move(source%,x1%,y1%,x2%,y2%,destination%,dx%,dy%,type%)

Variable(s):

    source% = address of source screen where block to move is located.

    x1%,y1%,x2%,y2% = framed coordinates of block to move (similar to
    GET x1%,y1%,x2%,y2%,block$).

    destination% = address of destination screen where source block
    is to be copied to.

    dx%,dy% = coordinate to put blocked area (similar to PUT
    dx%,dy%,block$).

    type% = similar to the GRAPHMODE command variable. See NOTE 2.

Note(s):

    1) This procedure works very similar to the GET/PUT command but is
    slightly different and is a little more flexible. As the procedure
    stands it is about the same speed as GET/PUT. (This procedure is
    more of an example and should be modified to increase desired
    speed and result.)

    2) Consult the BITBLT command in your GFA Manual for various copy
    modes. Most common modes are:
        3  = replace (GRAPHMODE 1)
        6  = xor (GRAPHMODE 2)
        7  = transparent (GRAPHMODE 3)
        13 = inverse transparent (GRAPHMODE 4)

Example(s):

    INLINE screen_2%,32000
    @block_move(screen_2%,0,0,15,15,XBIOS(3),160,100,3)



Procedure: CENTER TEXT

File Name: CENTER_T.LST

Associated File(s): none

The Call: GOSUB center_text(txt$,screen_line%)

Variable(s):

    txt$ = text string to center on screen.

    screen_line% = the screen line on which to center the text. This
    must be a number from 1 to 25.

Note(s):

    1) The length of the text string must be less than the current
    screen resolution width before the procedure will execute (less
    than 40 for low resolution and less than 80 for medium or high
    resolution).

    2) After every center text procedure call a carriage return is
    executed except for line 25 (a carriage return on line 25 would
    move the centered text to line 24).

Example(s):

    title$="Loading data, please wait..."
    @center_text(title$,4)



Procedure: DEGAS UNCOMPRESS

File Name: DEGAS_PC.LST

Associated File(s): DEGAS_PC.INL

The Call: @degas_pc(source%,destination%)

Variable(s):

    source% = the starting address of the Degas compressed picture.

    destination% = where the uncompressed picture should be stored.

Note(s):

    1) In most cases the destination will be the screen addresses
    XBIOS(2) or XBIOS(3).

    2) This procedure does not set the colors for the loaded picture.
    This can be accomplished with ~XBIOS(6,L:source%+2).

    3) This procedure does not check for the correct screen
    resolution of the loaded picture.

    4) This procedure creates a variable called degas_pc% for the
    INLINE command.

Example(s):

    DIM picture%(8100)
    BLOAD "degas.pc1",VARPTR(picture%(0))
    @degas_pc(VARPTR(picture%(0)),XBIOS(3)
    ~XBIOS(6,L:VARPTR(picture%(0))+2)



Procedure: DE-ICE

File Name: ICE.LST

Associated File(s): ICE.INL
                    JAMPACK.PRG

The Call: GOSUB(source%,destination%)

Variable(s):

    source% = starting memory location of the compressed ICE file.

    destination% = destination memory location to place the
    uncompressed ICE file.

Note(s):

    1) Use JAMPACK.PRG to compress files into ICE format.

    2) ICE provides an efficient and reasonably fast decompression
    speed. Decompression speed is approximately 2/3 of a second for
    60K of uncompressed data, however, compression time is very slow.

    3) This procedure creates a variable called ice% for the INLINE
    command.

Example(s):

    DIM source|(10000),destination|(50000)
    BLOAD "file.ice",VARPTR(source|(0))
    @ice(VARPTR(source|(0)),VARPTR(destination|(0))

    INLINE degas_picture%,9267
    @ice(degas_picture%,XBIOS(3)-34)
    ~XBIOS(6,L:XBIOS(3)-32)



Procedure: DE-LZH

File Name: LZH.LST

Associated File(s): LZH.INL
                    JAMPACK.PRG

The Call: GOSUB lzh(source%,destination%)

Variable(s):

    source% = starting memory location of the compressed LZH file.

    destination% = destination memory location to place the
    uncompressed LZH file.

Note(s):

    1) Use JAMPACK.PRG to compress files into LZH format.

    2) LZH provides the best average compression of the 3 main methods
    found in the JAMPACK.PRG. Decompression is approximately 1 second
    for 60K of uncompressed data.

    3) LZH seems to overwrite the source so the LZH method is not
    recommended for multiple uses within a program.

    4) This procedure creates a variable called lzh% for the INLINE
    command.

Example(s):

    DIM source|(10000),destination|(50000)
    BLOAD "file.lzh",VARPTR(source|(0))
    @lzh(VARPTR(source|(0)),VARPTR(destination|(0))

    INLINE degas_picture%,8263
    @lzh(degas_picture%,XBIOS(3)-34)
    ~XBIOS(6,L:XBIOS(3)-32)



Procedure: DE-LZW

File Name: LZW.LST

Associated File(s): LZW.INL
                    JAMPACK.PRG

The Call: GOSUB lzw(source%,destination%)

Variable(s):

    source% = starting memory location of the compressed LZW file.

    destination% = destination memory location to place the
    uncompressed LZW file.

Note(s):

    1) Use JAMPACK.PRG to compress files into LZW format.

    2) LZW provides the poorest average compression of the 3 main
    methods found in the JAMPACK.PRG. However, decompression is the
    fastest! Approximately 1/3 of a second for 60K of uncompressed
    data.

    3) This procedure creates a variable called lzw% for the INLINE
    command.

Example(s):

    DIM source|(10000),destination|(50000)
    BLOAD "file.lzw",VARPTR(source|(0))
    @lzw(VARPTR(source|(0)),VARPTR(destination|(0))

    INLINE degas_picture%,12393
    @lzw(degas_picture%,XBIOS(3)-34)
    ~XBIOS(6,L:XBIOS(3)-32)



Procedure: DISSOLVE SCREEN

File Name: DISSOLVE.LST

Associated File(s): none

The Call: GOSUB dissolve

Note(s):

    1) Dissolve will speckle the displayed screen to the background
    color. Creates a nice effect on title screens.

    2) See 'SPECKLE IN SCREEN' for the reverse of this procedure.

Example(s):

    @dissolve



Procedure: FILE SELECT

File Name: FILE_SEL.LST

Associated File(s): none

The Call: GOSUB file_select(file$)

Variable(s):

    file$ = the selected file via the File Selector will be returned
    in this string variable.

Note(s):

    1) If you wish to have a specific file extender searched for,
    enter the extender preceeded by a period (i.e. file$=".PC?") in
    the passed procedure string variable.

    2) This procedure sets the path and active drive to the file
    selected.

Example(s):

    @file_select(file$)

    file$=".doc"
    @file_select(file$)
    BLOAD file$,location%



Procedure: FUNCTION KEY

File Name: FUNC_KEY.LST

Associated File(s): none

The Call: GOSUB function_key(key%)

Variable(s):

    key% = the Function Key pressed will be returned in this variable.

Note(s):

    1) If no Function Key was pressed, zero will be returned in the
    passed variable. If a Function Key was pressed the number of the
    Function Key will be found in the passed variable (A number
    between 1 & 10).

Example(s):

    DO
      @function_key(key%)
      IF key%
        PRINT "F";key%;" was pressed."
      ENDIF
    LOOP



Procedure: LOWER CASE

File Name: LOWER_CS.LST

Associated File(s): none

The Call: GOSUB lower_case(txt$)

Variable(s):

    txt$ = text string to change to lower case.

Note(s):

    1) Only upper case letters (A-Z) are changed to lower case. All
    other characters are unaffected.

    2) The string to change must be passed in a string variable. The
    modified string is passed back in the same string variable.

Example(s):

    entry$="GOOD LUCK!"
    @lower_case(entry$)
    entry$=UPPER$(LEFT$(entry$))+RIGHT$(entry$,LEN(entry$)-1)
    PRINT entry$



Procedure: PALETTE SAVE/RESET

File Name: PALETTE.LST

Associated File(s): none

The Call: GOSUB palette

Note(s):

    1) This procedure creates a dimensioned variable called
    palette|().

    2) The initial call to this procedure will store the current
    color palette. A second call will restore the saved palette and
    erase the dimensioned variable stated in NOTE 1.



Procedure: REFORMAT TEXT

File Name: REFORMAT.LST

Associated File(s): none

The Call: GOSUB reformat_text(txt$,x%,y%,width%)

Variable(s):

    txt$ = the text string to reformat on the screen.

    x%,y% = the x/y coordinates to start printing the text.

    width% = the width in characters to reformat the text to.

Note(s):

    1) This routine is not error trapped against printing off screen
    or exceeding the screen with.

    2) Consult the PRINT AT() command in the GFA Manual for legal x/y
    coordinates.

Example(s):

    txt$="The books are on the counter by the phone."
    @reformat_text(txt$,10,10,8)



Procedure: REPLAY DIGITIZED SAMPLE

File Name: REPLAY.LST

Associated File(s): REPLAY.INL

The Call: GOSUB replay(sample%,length%,speed%)

Variable(s):

    sample% = the starting address of the digitized sample to play.

    length% = the length of the sample found at the sample% address.

    speed% = the MHz speed at which to play the sample. The sample
    may be replayed from 3 to 16 MHz.

Note(s):

    1) This routine is interrupt driven so digitized samples will
    play in the background.

    2) This procedure creates a variable called samplay_exe% for the
    INLINE command.

Example(s):

    DIM gong|(20000)
    BLOAD "gong.spl",VARPTR(gong|(0))
    @replay(VARPTR(gong(0)),18244,10)



Procedure: RESOLUTION CHANGE

File Name: RESOLUTN.LST

Associated File(s): none

The Call: GOSUB resolution(change%)

Variable(s):

    change% = change is the desired screen resolution.

Note(s):

    1) The passed variable must be a 0, 1 or 2 before the procedure
    will be executed. Passing a 1 will change the screen resolution to
    LOW, a 2 will change the resolution to MEDIUM, and a 0 will RESET
    the resolution to its initial setting.

    2) This procedure always executes a CLS (Clear Screen).

    3) This procedure creates a variable called resolution|.

Example(s):

    @resolution(1)
    PRINT "Low resolution"
    DELAY 1
    @resolution(2)
    PRINT "Medium resolution"
    DELAY 1
    @resolution(0)
    PRINT "Resolution restored!"
    DELAY 1



Procedure: ROLL DICE

File Name: DICE.LST

Associated File(s): none

The Call: GOSUB dice(number%,sides%,total%)

Variable(s):

    number% = the number of dice to roll.

    sides% = the number of sides on the dice.

    total% = the total of the dice rolled is returned in this
    variable. This variable is zeroed in the procedure before the
    value is calculated.

Note(s):

    1) Rolling dice is required in many games: YAHTZEE, DUNGEONS &
    DRAGONS, CRAPS, MONOPOLY, etc. This procedure can fit comfortably
    and work in any dice required program.

Example(s):

    PRINT "Rolling 2 6-sided dice..."
    @dice(2,6,total%)
    PRINT "I rolled a ";total%

    PRINT "Selecting a RANDOM number from 1-100"
    @dice(1,100,number%)
    PRINT number%



Procedure: SCREENS

File Name: SCREENS.LST

Associated File(s): none

The Call: GOSUB screens(number%,location%)

Variable(s):

    number% = the number of screens to reserve in memory or, should
    screens be already allocated, the memory location of the reserved
    screen. Sending a 0 will ERASE the reserved area.

    location% = the location of the first screen reserved if reserving
    screens, or if screen areas have been allocated the location of
    the screen area in memory.

Note(s):

    1) This procedure creates a dimensioned variable called
    screens|().

    2) Each screen (except the first one) will have an offset of 32256
    bytes from the number returned in the variable: location%. A large
    enough buffer has been given that will allow screen loads into
    the new screen areas.

    3) Flipping around the various defined screens is done through
    the use of XBIOS 5. Check your GFA manual for the use of the
    XBIOS 5 command.

Examples:

    @screens(0,location%)     ' location%=0
    @screens(2,location%)     ' reserve 2 screens
                                location%=address of 1st screen
    BLOAD "screen1.pi1",location%-34
    @screens(2,location%)     ' find location of 2nd screen
    BLOAD "screen2.pi1",location%-34
    original_screen%=XBIOS(2)
    @screens(1,location%)     ' find location of 1st screen
    ~XBIOS(5,L:location%,L:location%,-1)
    PAUSE 100
    @screens(2,location%)     ' find location of 2nd screen
    ~XBIOS(5,L:location%,L:location%,-1)
    PAUSE 100
    ~XBIOS(5,L:original_screen%,L:original_screen%,-1)



Procedure: SCROLL TEXT

File Name: SCROLL_T.LST

Associated File(s): none

The Call: GOSUB scroll_text(txt$,y%)

Variable(s):

    txt$ = the text string to scroll on screen.

    y% = the screen line to scroll the text on.

Note(s):

    1) A simple procedure that scrolls text on screen and repeats
    until a key is pressed. This procedure does not work on line 25
    (use lines 1 to 24).

    2) Pad your text line with spaces if your text line to scroll is
    NOT less than the screen width of the current resolution.

    3) This procedure is not entirely smooth but does the trick
    without creating a large and complicated routine. Again, modify
    for your own desired result.



Procedure: SPECKLE IN SCREEN

File Name: SPECKLE.LST

Associated File(s): none

The Call: GOSUB speckle(screen2%)

Variable(s):

    screen2% = the memory location of the screen to speckle in.

Note(s):

    1) SPECKLE IN SCREEN will display a new screen by randomly
    speckling the new screen into view.

    2) It is recommended that you set your colors before calling the
    SPECKLE procedure.

    3) See 'DISSOLVE' for the reverse of this procedure.

Example(s):

    DIM screen2|(32100)
    BLOAD "degas.pi1",VARPTR(screen2|(0))
    ~XBIOS(6,L:VARPTR(screen2|(0))+2)
    @speckle(VARPTR(screen2|(0))+34)



Procedure: TINY DISPLAY

File Name: TINY.LST

Associated File(s): none

The Call: GOSUB tiny(source%,destination%)

Variable(s):

    source% = the memory location of the Tiny picture to decompress.

    destination% = where to place the Tiny picture in memory (normally
    XBIOS(2) or XBIOS(3)).

Note(s):

    1) The resolution for the Tiny picture can be found at
    PEEK(source%).

    2) The 32 bit color palette for the Tiny picture starts at
    tiny_palette%.

Example(s):

    INLINE picture%,6306
    @tiny(picture%,XBIOS(3))
    ~XBIOS(6,L:tiny_palette%)



Procedure VERB/NOUN

File Name: VERBNOUN.LST

Associated File(s): none

The Call: @verb_noun(entry$,verb$,noun$)

Variable(s):

    entry$ = the string to separate in a verb and noun.

    verb$ = the verb part of the entry$ string.

    noun$ = the noun part of the entry$ string.

Note(s):

    1) Verb$ and noun$ will always be returned in upper case.

    2) Extraneous spaces are trimmed before execution.

    3) If the entry$ string is a single word, both verb$ and noun$
    will be equal to the entry$ string.

    4) The procedure is very useful for anyone writing text
    adventures.

    5) Verb$ and noun$ are always set to a length of zero in the
    procedure before execution.

Example(s):

    DO
      INPUT entry$
      @verb_noun(entry$,verb$,noun$)
      PRINT verb$;" ",noun$
    LOOP



