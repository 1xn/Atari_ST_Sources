DIM table$(20,20)   ! TABLEAU POUR OBSTACLES
DIM pgtable$(20,20) ! TABLMEAU POUR PACGUMS
DIM xf(15),yf(15),oldxf(15),oldyf(15),montant(15)
DIM basant(15),droitant(15),gauchant(15)
'
' ** ON LANCE UNE PETITE MUSIQUE SOUNDCHIP **
' **       pour se faire pardonner         **
'
EXEC 0,"primtime.tos","",""
'
lives=4   ! NOMBRE DE VIES
level=1   ! NIVEAU DE DEPART
nf=2      ! NOMBRE DE FANTOMES AU DEPART (15 MAXIMUM)
DO
  score=0
  tmer=0  !  COMPTEUR TEMPOREL
  fnt=1   !  NUMERO D'IDENTIFICATION DU FANTOME A TRAITER
  fin=0   !  FLAG INDICATEUR DE LA FIN D'UNE PARTIE
  pgnb=0
  @lecture ! LECTURE DE TABLE$()
  @lecture2 ! LECTURE DE PGTABLE$()
  @affgr    ! AFFICHAGE DE L'AIRE DE JEU
  @init     ! DETERMINE LES TOUTES LES COORDONNEES
  @tstpg    ! TESTE SI PAC MAN EST SUR UNE PACGUM
  @leclev   ! LECTURE DE LA DIFFICULTE DU NIVEAU DE JEU
  DO
    IF tmer=maxtmr THEN
      FOR fnt=1 TO nf
        @treat        ! TRAITE LA POURSUITE
        @actuf
        exit=0        ! FLAG INDIQUANT L'EXECUTION DU TRAITEMENT
      NEXT fnt
      tmer=0        ! MISE A 0 DU COMPTEUR
    ELSE
      INC tmer
    ENDIF
    @tstend   ! TESTE LA FIN DU JEU
    fnt=1     ! ON REPASSE AU PREMIER FANTOME
    @tdir     ! ON TESTE LES VOLONTêS DU JOUEUR
    @tstpg    ! ANALYSE TERRAIN OCCUPE PAR LE JOUEUR
    @tstend   ! TESTE SI FIN DU JEU
    @actup    ! AFFICHE PACMAN AUX NOUVELLES COORDONNêES
    EXIT IF fin=TRUE
  LOOP
  '
  IF pgnb=0  ! SI PLUS DE PACGUMS ALORS ON PASSE AU NIVEAU SUIVANT
    INC level
  ENDIF
LOOP
'
END
'
PROCEDURE treat
  IF xp<xf(fnt) AND yp<yf(fnt)
    @hg
  ENDIF
  IF xf(fnt)=xp AND yp<yf(fnt) AND exit=0
    @h
  ENDIF
  IF xp>xf(fnt) AND yp=yf(fnt) AND exit=0
    @d
  ENDIF
  IF xp=xf(fnt) AND yp>yf(fnt) AND exit=0
    @b
  ENDIF
  IF xp<xf(fnt) AND yp>yf(fnt) AND exit=0
    @bg
  ENDIF
  IF xp>xf(fnt) AND yp>yf(fnt) AND exit=0
    @bd
  ENDIF
  IF xp>xf(fnt) AND yp<yf(fnt) AND exit=0
    @hd
  ENDIF
  IF xp<xf(fnt) AND yp=yf(fnt) AND exit=0
    @g
  ENDIF
RETURN
PROCEDURE hg
  IF basant(fnt)=0 AND exit=0
    @tstm
  ENDIF
  IF droitant(fnt)=0 AND exit=0
    @tstg
  ENDIF
  IF gauchant(fnt)=0 AND exit=0
    @tstd
  ENDIF
  IF montant(fnt)=0 AND exit=0
    @tstb
  ENDIF
  IF exit=0
    @tstm
    IF exit=0
      @tstg
    ENDIF
    IF exit=0
      @tstd
    ENDIF
    IF exit=0
      @tstb
    ENDIF
  ENDIF
RETURN
PROCEDURE g
  IF droitant(fnt)=0 AND exit=0
    @tstg
  ENDIF
  IF basant(fnt)=0 AND exit=0
    @tstm
  ENDIF
  IF gauchant(fnt)=0 AND exit=0
    @tstd
  ENDIF
  IF montant(fnt)=0 AND exit=0
    @tstb
  ENDIF
  IF exit=0
    @tstg
    IF exit=0
      @tstm
    ENDIF
    IF exit=0
      @tstd
    ENDIF
    IF exit=0
      @tstb
    ENDIF
  ENDIF
RETURN
PROCEDURE h
  IF basant(fnt)=0 AND exit=0
    @tstm
  ENDIF
  IF droitant(fnt)=0 AND exit=0
    @tstg
  ENDIF
  IF gauchant(fnt)=0 AND exit=0
    @tstd
  ENDIF
  IF montant(fnt)=0 AND exit=0
    @tstb
  ENDIF
  IF exit=0
    @tstm
    IF exit=0
      @tstg
    ENDIF
    IF exit=0
      @tstd
    ENDIF
    IF exit=0
      @tstb
    ENDIF
  ENDIF
RETURN
PROCEDURE b
  IF montant(fnt)=0 AND exit=0
    @tstb
  ENDIF
  IF gauchant(fnt)=0 AND exit=0
    @tstd
  ENDIF
  IF droitant(fnt)=0 AND exit=0
    @tstg
  ENDIF
  IF basant(fnt)=0 AND exit=0
    @tstm
  ENDIF
  IF exit=0
    @tstb
    IF exit=0
      @tstd
    ENDIF
    IF exit=0
      @tstg
    ENDIF
    IF exit=0
      @tstm
    ENDIF
  ENDIF
RETURN
'
PROCEDURE bg
  IF montant(fnt)=0 AND exit=0
    @tstb
  ENDIF
  IF droitant(fnt)=0 AND exit=0
    @tstg
  ENDIF
  IF basant(fnt)=0 AND exit=0
    @tstm
  ENDIF
  IF gauchant(fnt)=0 AND exit=0
    @tstd
  ENDIF
  IF exit=0
    @tstb
    IF exit=0
      @tstg
    ENDIF
    IF exit=0
      @tstm
    ENDIF
    IF exit=0
      @tstd
    ENDIF
  ENDIF
RETURN
'
PROCEDURE bd
  IF montant(fnt)=0 AND exit=0
    @tstb
  ENDIF
  IF gauchant(fnt)=0 AND exit=0
    @tstd
  ENDIF
  IF basant(fnt)=0 AND exit=0
    @tstm
  ENDIF
  IF droitant(fnt)=0 AND exit=0
    @tstg
  ENDIF
  IF exit=0
    @tstb
    IF exit=0
      @tstd
    ENDIF
    IF exit=0
      @tstm
    ENDIF
    IF exit=0
      @tstg
    ENDIF
  ENDIF
RETURN
'
PROCEDURE d
  IF gauchant(fnt)=0 AND exit=0
    @tstd
  ENDIF
  IF montant(fnt)=0 AND exit=0
    @tstb
  ENDIF
  IF basant(fnt)=0 AND exit=0
    @tstm
  ENDIF
  IF droitant(fnt)=0 AND exit=0
    @tstg
  ENDIF
  IF exit=0
    @tstd
    IF exit=0
      @tstb
    ENDIF
    IF exit=0
      @tstm
    ENDIF
    IF exit=0
      @tstg
    ENDIF
  ENDIF
RETURN
'
PROCEDURE hd
  IF basant(fnt)=0 AND exit=0
    @tstm
  ENDIF
  IF gauchant(fnt)=0 AND exit=0
    @tstd
  ENDIF
  IF montant(fnt)=0 AND exit=0
    @tstb
  ENDIF
  IF droitant(fnt)=0 AND exit=0
    @tstg
  ENDIF
  IF exit=0
    @tstm
    IF exit=0
      @tstd
    ENDIF
    IF exit=0
      @tstb
    ENDIF
    IF exit=0
      @tstg
    ENDIF
  ENDIF
RETURN
'
' ******************************************
' *  LES PROCEDURES TSTG,TSTD,... TESTENT  *
' * SI LE FANTOME PEUT SE DIRIGER DANS LA  *
' * DIRECTION ESCOMPTEE SANS RENCONTRER    *
' *              D'OBSTACLES               *
' ******************************************
'
PROCEDURE tstg
  IF table$(xf(fnt)-1,yf(fnt))<>"*"
    @old
    @gt
  ENDIF
RETURN
'
PROCEDURE tstm
  IF table$(xf(fnt),yf(fnt)-1)<>"*"
    @old
    @mt
  ENDIF
RETURN
'
PROCEDURE tstd
  IF table$(xf(fnt)+1,yf(fnt))<>"*"
    @old
    @dt
  ENDIF
RETURN
'
PROCEDURE tstb
  IF table$(xf(fnt),yf(fnt)+1)<>"*"
    @old
    @bt
  ENDIF
RETURN
'
' ****************************************
' * LA PROCEDURE OLD ACTUALISE           *
' * LES ANCIENNES COORDONNEES DU FANTOME *
' ****************************************
'
PROCEDURE old
  oldxf(fnt)=xf(fnt)
  oldyf(fnt)=yf(fnt)
RETURN
'
PROCEDURE mt
  DEC yf(fnt)
  montant(fnt)=TRUE
  basant(fnt)=FALSE
  droitant(fnt)=FALSE
  gauchant(fnt)=FALSE
  exit=1
RETURN
'
PROCEDURE bt
  INC yf(fnt)
  basant(fnt)=TRUE
  gauchant(fnt)=FALSE
  droitant(fnt)=FALSE
  montant(fnt)=FALSE
  exit=1
RETURN
'
PROCEDURE gt
  DEC xf(fnt)
  gauchant(fnt)=TRUE
  basant(fnt)=FALSE
  droitant(fnt)=FALSE
  montant(fnt)=FALSE
  exit=1
RETURN
'
PROCEDURE dt
  INC xf(fnt)
  droitant(fnt)=TRUE
  gauchant(fnt)=FALSE
  montant(fnt)=FALSE
  basant(fnt)=FALSE
  exit=1
RETURN
'
' ******************************
' * REDESSINE TERRAIN MODIFIE  *
' * PAR LE FANTOME             *
' ******************************
'
PROCEDURE actuf
  LOCATE xf(fnt),yf(fnt)
  PRINT "F"
  LOCATE oldxf(fnt),oldyf(fnt)
  IF pgtable$(oldxf(fnt),oldyf(fnt))="."
    PRINT "."
  ELSE
    PRINT " "
  ENDIF
RETURN
'
' *******************************
' * REDESSINNE TERRAIN MODIFIE  *
' * PAR PACMAN                  *
' *******************************
'
PROCEDURE actup
  LOCATE xp,yp
  PRINT "P"
  LOCATE oldxp,oldyp
  IF pgtable$(oldxp,oldyp)="."
    PRINT "."
  ELSE
    PRINT " "
  ENDIF
RETURN
'
PROCEDURE lecture
  RESTORE pgt
  FOR y=1 TO 12
    FOR x=1 TO 12
      READ pgtable$(x,y)
      IF pgtable$(x,y)="."
        INC pgnb
      ENDIF
    NEXT x
  NEXT y
  pgt:
  DATA *,*,*,*,*,*,*,*,*,*,*,*
  DATA *,.,.,.,.,.,.,.,.,.,.,*
  DATA *,.,*,.,.,.,.,.,*,.,.,*
  DATA *,.,*,*,*,.,*,*,*,.,.,*
  DATA *,.,.,.,.,.,.,.,.,.,.,*
  DATA *,.,*,*,*,.,*,*,*,.,.,*
  DATA *,.,.,*,.,.,.,*,.,.,.,*
  DATA *,.,.,.,.,.,.,.,.,.,*,*
  DATA *,.,.,*,*,*,*,*,.,.,.,*
  DATA *,.,.,.,.,.,.,.,.,.,.,*
  DATA *,.,.,.,.,.,.,.,.,.,.,*
  DATA *,*,*,*,*,*,*,*,*,*,*,*
RETURN
PROCEDURE lecture2
  RESTORE table
  FOR y=1 TO 12
    FOR x=1 TO 12
      READ table$(x,y)
      IF table$(x,y)="."
        table$(x,y)=" "
      ENDIF
    NEXT x
  NEXT y
  table:
  DATA *,*,*,*,*,*,*,*,*,*,*,*
  DATA *,.,.,.,.,.,.,.,.,.,.,*
  DATA *,.,*,.,.,.,.,.,*,.,.,*
  DATA *,.,*,*,*,.,*,*,*,.,.,*
  DATA *,.,.,.,.,.,.,.,.,.,.,*
  DATA *,.,*,*,*,.,*,*,*,.,.,*
  DATA *,.,.,*,.,.,.,*,.,.,.,*
  DATA *,.,.,.,.,.,.,.,.,.,*,*
  DATA *,.,.,*,*,*,*,*,.,.,.,*
  DATA *,.,.,.,.,.,.,.,.,.,.,*
  DATA *,.,.,.,.,.,.,.,.,.,.,*
  DATA *,*,*,*,*,*,*,*,*,*,*,*
RETURN
'
' ***************************
' * AFFICHE L'AIRE DE JEU   *
' ***************************
'
PROCEDURE affgr
  FOR y=1 TO 12
    FOR x=1 TO 12
      LOCATE x,y
      IF pgtable$(x,y)="."
        PRINT "."
      ELSE
        PRINT "*"
      ENDIF
    NEXT x
  NEXT y
RETURN
'
' **********************************
' * TIRE AU HASARD LES COORDONNEES *
' * DE CHAQUE FANTOME ET DEFINIT   *
' * COORDONNEES DE DEPART DE PCMAN *
' **********************************
'
PROCEDURE init
  LOCAL fnt
  xp=2
  yp=4
  oldxp=xp
  oldyp=yp
  FOR i=1 TO nf
    DO
      @rndf
      EXIT IF pgtable$(x,y)="."
    LOOP
    xf(i)=x
    yf(i)=y
    oldxf(i)=xf(i)
    oldyf(i)=yf(i)
  NEXT i
RETURN
'
' *********************
' * TESTS CLAVIER     *
' *********************
PROCEDURE tdir
  a$=INKEY$
  IF CVI(a$)=72 AND table$(xp,yp-1)<>"*"
    @ph
  ENDIF
  IF CVI(a$)=80 AND table$(xp,yp+1)<>"*"
    @pb
  ENDIF
  IF CVI(a$)=75 AND table$(xp-1,yp)<>"*"
    @pg
  ENDIF
  IF CVI(a$)=77 AND table$(xp+1,yp)<>"*"
    @pd
  ENDIF
RETURN
'
PROCEDURE ph
  oldxp=xp
  oldyp=yp
  DEC yp
  @actup
RETURN
'
PROCEDURE pb
  oldxp=xp
  oldyp=yp
  INC yp
  @actup
RETURN
'
PROCEDURE pd
  oldxp=xp
  oldyp=yp
  INC xp
  @actup
RETURN
'
PROCEDURE pg
  oldxp=xp
  oldyp=yp
  DEC xp
  @actup
RETURN
'
PROCEDURE tstpg
  IF pgtable$(xp,yp)="."
    DEC pgnb
    score=score+50
    pgtable$(xp,yp)=" "
    @acsc
  ENDIF
RETURN
'
PROCEDURE acsc
  LOCATE 20,15
  PRINT "SCORE: ";score
  LOCATE 20,17
  PRINT "RESTANTES: ";pgnb;"   "
RETURN
'
PROCEDURE rndf
  x=1+(INT(RND(8)*12))
  y=1+(INT(RND(8)*12))
RETURN
'
' *******************************
' * ON TESTE S'IL NE RESTE PLUS *
' * DE PACGUMS OU S'IL Y A UNE  *
' * COLLISION PACMAN-FANTOME    *
' *******************************
'
PROCEDURE tstend
  FOR fnt=1 TO nf
    IF pgnb=0 OR (xf(fnt)=xp AND yf(fnt)=yp)
      fin=TRUE
    ENDIF
  NEXT fnt
RETURN
'
PROCEDURE leclev
  IF level=>1 AND level<=3
    maxtmr=130
  ENDIF
  IF level=>4 AND level<=7
    maxtmr=115
  ENDIF
  IF level=>8 AND level<=10
    maxtmr=110
  ENDIF
  IF level>=11 AND level<=15
    maxtmr=75
  ENDIF
  IF level>=16 AND level<=20
    maxtmr=40
  ENDIF
  IF level>=21
    maxtmr=15
  ENDIF
RETURN
