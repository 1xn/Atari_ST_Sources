Multifileselect                                           GFA-Routinen

Autor: [7]

'
DEFINT "a-z"
RESERVE 100000 ! Speicher freigeben (it's unsauber, ich wei· -> hier
'              ! nurDemo!))
GOSUB multi_fileselect("Mach hin!","E:\*.IMG","TEST.IMG",10)
'
PROCEDURE multi_fileselect(titel$,pfad$,datei$,anzahl)
  '
  '
  ' Multi-Fileselect
  '
  ' V1.0 vom 25.12.1992
  '
  '  ********* modifiziert fÅr Zeig's mir!*****
  '
  ' Aufgabe: gestattet es, zusammen mit Selectric mehrere Dateien zu
  '          selektieren
  '
  ' Parameter:
  ' titel$       . Titelzeile in der Fileselectbox, wie bei FILESELECT
  ' pfad$        . Pfad und Maske, wie bei FILESELECT
  ' datei$       . Vorbelegung, wie bei FILESELECT
  ' anzahl       . Anzahl max. zulÑssiger Dateien
  '
  '
  LOCAL flag,fsel_struct,z$,z2$,p,z,n2,ram,n
  '
  ' EinschrÑnkungen in der aktuellen Version
  ' - max 120 Dateien selektierbar, denn viel mehr als 120*256=30720
  '   passen nicht in einen String
  '                  (im Desktop kînnen Pfadnamen bis zu   ^^^ 256
  '                    Byte lang werden)
  '
  ' - die Anzahl der Selektierungen ist auf 120 beschrÑnkt:
  '   selektiert man also 20 Ordner + 130 Dateien, dann
  '   bleiben effektiv u.U. nur 120 - 20 (Ordnerzahl) = 100 Dateien
  '   Åbrig!
  '
  '
  '
  anzahl=MIN(anzahl,120)
  @test_cookie("FSEL",flag,fsel_struct)
  IF flag
    IF LPEEK(fsel_struct)=CVL("SLCT")
      IF BTST(DPEEK(fsel_struct+6),0)
        flag=1
      ELSE
        flag=0
      ENDIF
    ELSE
      flag=0
    ENDIF
  ENDIF
  IF flag=0
    GOSUB fileselect(titel$,pfad$,datei$,z$,ok)
    IF ok
      @add_liste(z$)
    ENDIF
  ELSE
    '
    DPOKE fsel_struct+22,3
    DPOKE fsel_struct+30,120
    '
    @malloc(0,32000,32000,ram,z)
    z2$=SPACE$(32000)
    IF ram>0
      BMOVE VARPTR(z2$),ram,32000
      LPOKE fsel_struct+32,ram
      GOSUB fileselect(titel$,pfad$,datei$,z$,ok)
      BMOVE ram,VARPTR(z2$),32000
      GOSUB mfree(ram)
    ELSE
      IF debug                                                  ! -Deb
        PRINT CHR$(7);                                          ! -Deb
        GOSUB output_infofenster(19,"Riskanter FILESELECT!")    ! -Deb
      ENDIF                                                     ! -Deb
      LPOKE fsel_struct+32,VARPTR(z2$)
      @fileselect(titel$,pfad$,datei$,z$,ok)
    ENDIF
    n=DPEEK(fsel_struct+30)
    '
    IF ok=1
      IF n>0
        GOSUB zerlege_dateiname(z$,pfad$,z$)
        p=1
        n2=0
        REPEAT
          z=INSTR(z2$,CHR$(32),p)
          z$=MID$(z2$,p,z-p)
          WHILE RIGHT$(z$,1)=CHR$(0)
            z$=LEFT$(z$,LEN(z$)-1)
          WEND
          p=z+1
          INC n2
          GOSUB add_liste(pfad$+z$)
        UNTIL n2>=n OR n2=anzahl
      ELSE
        GOSUB add_liste(z$)
      ENDIF
    ENDIF
  ENDIF
RETURN
PROCEDURE test_cookie(kenn$,VAR flag,wert)
  REM
  REM
  REM  Modul: test_cookie
  REM
  REM V1.0 vom 21.11.90
  REM
  REM Testet, ob der angegebene Cookie im Cookie-Jar installiert ist.
  REM RÅckgabe: flag =  0 - nicht installiert
  REM      oder flag = -1 - installiert, wert = Parameter des Cookie
  REM
  LOCAL cookie,such_kennung,kennung
  such_kennung=CVL(kenn$)
  cookie=LPEEK(&H5A0)
  IF cookie<>0
    REPEAT
      kennung=LPEEK(cookie)
      wert=LPEEK(cookie+4)
      ADD cookie,8
    UNTIL kennung=such_kennung OR kennung=0
    IF kennung=0
      flag=0
      wert=0
    ELSE
      flag=-1
    ENDIF
  ELSE
    flag=0
    wert=0
  ENDIF
RETURN
PROCEDURE fileselect(titel$,pfad$,datei$,VAR auswahl$,button)
  '
  ' Kam irgendwann mal in einer Maus-Mail
  '
  LOCAL puffer,gem_v,flag,fsel_struct
  '
  INLINE puffer,190
  '
  GOSUB test_cookie("FSEL",flag,fsel_struct)
  CHAR{puffer}=pfad$
  CHAR{puffer+140}=LEFT$(datei$,19)
  CHAR{puffer+160}=LEFT$(titel$,29)
  gem_v=CARD{LONG{GB+4}}                !GEM-Version
  '
  ' ---Initialisieren + Aufrufen der Fileselectbox
  GCONTRL(1)=0
  GCONTRL(2)=2
  GCONTRL(4)=0
  ADDRIN(0)=puffer
  ADDRIN(1)=puffer+140
  IF ((gem_v>=&H140 AND gem_v<&H200) OR gem_v>&H300) OR flag<>0
    GCONTRL(3)=3
    ADDRIN(2)=puffer+160
    GEMSYS 91                         !Entspricht FILESELECT#...
  ELSE
    GCONTRL(3)=2
    GEMSYS 90                         !Entspricht FILESELECT ...
  ENDIF
  ' ---Auslesen der Fileselectbox
  button=GINTOUT(1)                  !Ausgangs-Button
  GOSUB zerlege_dateiname(CHAR{ADDRIN(0)},auswahl$,datei$)
  auswahl$=auswahl$+CHAR{ADDRIN(1)}
  '
RETURN
PROCEDURE zerlege_dateiname(file$,VAR pfad$,datei$)
  LOCAL z
  REM
  REM Zerlegt einen hierarchischen Dateinamen in seine Bestandteile
  REM (Zugriffspfad und Dateiname)
  REM
  REM V1.0 vom 25.12.1990
  z=RINSTR(file$,"\")
  pfad$=LEFT$(file$,z)
  datei$=MID$(file$,z+1)
RETURN
'
PROCEDURE malloc(which_ram,min,max,VAR speicher,anzahl)
  '
  ' Achtung: Abweichung bei which_ram vom mxalloc des Betriebssystems!!!
  '
  '
  ' which_ram:   0 = egal, keine Preferenz
  '              1 = _nur_ ST-Ram (DMA-Transfer!)
  '
  ' min, max : mindestens <min>, aber nicht mehr als <max> reservieren!
  '
  '
  LOCAL st_ram,tt_ram,puffer,nn
  '
  puffer=MALLOC(16000) ! 16000 Bytes freihalten
  nn=MIN(MAX(MALLOC(-1),min),max)
  speicher=MALLOC(nn)
  IF speicher=0
    anzahl=0
  ELSE
    anzahl=nn
  ENDIF
  VOID MFREE(puffer)
  '
RETURN
PROCEDURE mshrink(ram,belegt)
  ~GEMDOS(74,0,L:ram,L:belegt)
RETURN
PROCEDURE mfree(ram)
  ~MFREE(ram)
RETURN
'
PROCEDURE add_liste(a$)
  ' hier geht der Punk ab
  PRINT a$
RETURN
'

