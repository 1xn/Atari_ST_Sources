Hinweise zur Pure Pascal Version 1.1                 Pure Software
README                                               15.3.93


Was ist in Release 1.1 neu?
===========================


Spracherweiterungen:
--------------------

- Offene Arrayparameter gestatten es, Arrays flexibler Grîûe an
  Prozeduren und Funktionen zu Åbergeben.

  Beispiel: FUNCTION SkalarProdukt( a, b: ARRAY OF REAL): REAL;

- Bei VAR-Parametern vom Typ String ist es jetzt ebenfalls
  mîglich, die Grîûe flexibel zu halten.

  Beispiel: PROCEDURE FillBlanks( VAR s: OpenString );

- Um die öbergabe groûer Eingangsparameter effizienter zu machen,
  gibt es jetzt die Mîglichkeit, Parameter mit dem SchlÅsselwort
  CONST zu deklarieren. Solche Parameter kînnen von der aufgeru-
  fenen Funktion oder Prozedur nicht modifiziert werden und mÅssen
  daher nicht kopiert werden.

  Beispiel: PROCEDURE Proc( CONST x: BigVector; ... );

- In Objektdeklarationen gibt es zusÑtzlich zu PRIVATE jetzt die
  Direktive PUBLIC. PUBLIC und PRIVATE Abschnitte dÅrfen sich
  beliebig abwechseln.

- Mit dem neuen SchlÅsselwort INHERITED wird die Methode eines
  Basistyps aufgerufen. Bisher muûte der Name des Basistyps ex-
  plizit angegeben werden, die neue Syntax erleichtert also
  énderungen in der Objekthierarchie.

- Der neue Typ PCHAR steht fÅr nullterminierte Strings, wie sie
  in der Sprache C gebrÑuchlich sind.


Neue Standardfunktionen:
------------------------

- ASSIGNED(P: POINTER oder PROCEDURE(...)):BOOLEAN;
  gestattet es, Zeiger und Prozedurvariablen auf NIL zu
  ÅberprÅfen. Dies ist insbesondere bei Prozedurvariablen
  wichtig.

- INCLUDE(VAR S: SET OF ...; ELEM: ...); und
  EXCLUDE(VAR S: SET OF ...; ELEM: ...);
  gestatten es direkt, Elemente zu Mengen hinzuzufÅgen oder
  zu entfernen.

- BREAK verlÑût eine FOR- WHILE- oder REPEAT-Schleife.
  CONTINUE startet eine neue Iteration einer Schleife.

- LOW und HIGH ermitteln Ober- und Untergrenzen von skalaren
  Typen und Arrays.


Neue Standardunit Strings:
--------------------------

- Bietet Funktionen zur bequemen Verarbeitung von nullterminierten
  Strings.



Neue Compileroptionen
=====================

- $P+ Offene VAR-String Parameter:
  Dieser Schalter veranlaût, daû VAR-Parameter vom Typ String wie
  offene Arrays Åbergeben werden, als ob man den Parameter also als

    VAR s: OpenString;

  deklariert hÑtte.
  Voreinstellung ist $P-.

- $Q+ öberlaufprÅfung:
  Der Compiler erzeugt optional Code, um arithmetischen öberlauf
  bei ganzzahliger Arithmetik zu ÅberprÅfen. Dies wird mit dem
  Compilerschalter $Q+ eingeschaltet, Voreinstellung ist $Q-.

- $T+ Strenge TypprÅfung beim Adreûoperator @:
  Optional ist es mîglich, den Addressoperator @ mit dem "richtigen"
  Typ zu versehen und damit die TypprÅfungen in diesem Zusammen-
  hang strenger zu machen. Die strengere TypprÅfung wird durch
  den Compilerschalter $T+ veranlaût - $T- ist die Voreinstellung.

- $Z- schaltet die Optimierung des Compilers ab. Dies ist manchmal beim
  Debuggen nÅtzlich, um auf die Werte der Variablen immer zugreifen
  zu kînnen. Voreinstellung ist $Z+.



énderungen im Debugger
======================

- Bei Objekten werden nun auch die ererbten Felder und Methoden auto-
  matisch dargestellt. Das Feld "Ancestor" ist entfallen.

- Bei Objekten gibt es ein zusÑtzliches Feld "TypeOf", das den
  Typ des Objektes zur Laufzeit darstellt, falls das Objekt einen
  gÅltigen VMT-Zeiger aufweist.

- Die Anzeige von Parametern ist nun auch am Anfang von Prozeduren
  korrekt, wenn die Parameter noch nicht in die endgÅltigen
  Speicherstellen kopiert sind.
