unit	gem;


interface

(* -------------------------------------------------------------------- *)
(*		constants, types & variables									*)
(* -------------------------------------------------------------------- *)

const
			(* ++++++++++++++++++++++++++++++++++++++++ *)
			(*					GEM						*)
			(* ++++++++++++++++++++++++++++++++++++++++ *)

		White			= 0;
		Black			= 1;
		Red				= 2;
		Green			= 3;
		Blue			= 4;
		Cyan			= 5;
		Yellow			= 6;
		Magenta			= 7;
		LWhite			= 8;
		LBlack			= 9;
		LRed			= 10;
		LGreen			= 11;
		LBlue			= 12;
		LCyan			= 13;
		LYellow			= 14;
		LMagenta		= 15;

		control_max		= 11;
		intin_max		= 131;
		intout_max		= 139;
		workout_max		= 56;
		workin_max		= 10;
		addrin_max		= 15;
		addrout_max		= 15;
		global_max		= 14;
		pts_max			= 144;

			(* ++++++++++++++++++++++++++++++++++++++++ *)
			(*					AES						*)
			(* ++++++++++++++++++++++++++++++++++++++++ *)

		MU_KEYBD		= 1;
		MU_BUTTON		= 2;
		MU_M1			= 4;
		MU_M2			= 8;
		MU_MESAG		= 16;
		MU_TIMER		= 32;

		K_RSHIFT		= 1;
		K_LSHIFT		= 2;
		K_CTRL			= 4;
		K_ALT			= 8;

		MN_SELECTED		= 10;
		WM_REDRAW		= 20;
		WM_TOPPED		= 21;
		WM_CLOSED		= 22;
		WM_FULLED		= 23;
		WM_ARROWED		= 24;
		WM_HSLID		= 25;
		WM_VSLID		= 26;
		WM_SIZED		= 27;
		WM_MOVED		= 28;
		WM_NEWTOP		= 29;
		WM_UNTOPPED		= 30;
		WM_ONTOP		= 31;
		AC_OPEN			= 40;
		AC_CLOSE		= 41;
		CT_UPDATE		= 50;
		CT_MOVE			= 51;
		CT_NEWTOP		= 52;
		AP_TERM			= 50;
		AP_TFAIL		= 51;
		AP_RESCHG		= 57;
		SHUT_COMPLETED	= 60;
		RESCHG_COMPLETED = 61;
		CH_EXIT			= 80;

		WA_UPPAGE		= 0;
		WA_DNPAGE		= 1;
		WA_UPLINE		= 2;
		WA_DNLINE		= 3;
		WA_LFPAGE		= 4;
		WA_RTPAGE		= 5;
		WA_LFLINE		= 6;
		WA_RTLINE		= 7;

		FMD_START		= 0;
		FMD_GROW		= 1;
		FMD_SHRINK		= 2;
		FMD_FINISH		= 3;

		R_TREE			= 0;
		R_OBJECT		= 1;
		R_TEDINFO		= 2;
		R_ICONBLK		= 3;
		R_BITBLK		= 4;
		R_STRING		= 5;
		R_IMAGEDATA		= 6;
		R_OBSPEC		= 7;
		R_TEPTEXT		= 8;
		R_TEPTMPLT		= 9;
		R_TEPVALID		= 10;
		R_IBPMASK		= 11;
		R_IBPDATA		= 12;
		R_IBPTEXT		= 13;
		R_BIPDATA		= 14;		R_FRSTR			= 15;		R_FRIMG			= 16;		NAME			= 1;		CLOSER			= 2;		FULLER			= 4;		MOVER			= 8;		INFO			= 16;		SIZER			= 32;		UPARROW			= 64;		DNARROW			= 128;		VSLIDE			= 256;		LFARROW			= 512;		RTARROW			= 1024;		HSLIDE			= 2048;
		WC_BORDER		= 0;		WC_WORK			= 1;
		WF_KIND			= 1;		WF_NAME			= 2;		WF_INFO			= 3;		WF_WORKXYWH		= 4;		WF_CURRXYWH		= 5;		WF_PREVXYWH		= 6;		WF_FULLXYWH		= 7;		WF_HSLIDE		= 8;		WF_VSLIDE		= 9;		WF_TOP			= 10;		WF_FIRSTXYWH	= 11;		WF_NEXTXYWH		= 12;		WF_RESVD		= 13;		WF_NEWDESK		= 14;
		WF_HSLSIZE		= 15;		WF_VSLSIZE		= 16;		WF_SCREEN		= 17;
		WF_COLOR		= 18;
		WF_TATTRB		= 18;
		WF_DCOLOR		= 19;
		WF_SIZTOP		= 19;

		W_BOX			= 0;
		W_TITLE			= 1;
		W_CLOSER		= 2;
		W_NAME			= 3;
		W_FULLER		= 4;
		W_INFO			= 5;
		W_DATA			= 6;
		W_WORK			= 7;
		W_SIZER			= 8;
		W_VBAR			= 9;
		W_UPARROW		= 10;
		W_DNARROW		= 11;
		W_VSLIDE		= 12;
		W_VELEV			= 13;
		W_HBAR			= 14;
		W_LFARROW		= 15;
		W_RTARROW		= 16;
		W_HSLIDE		= 17;
		W_HELEV			= 18;

		END_UPDATE		= 0;		BEG_UPDATE		= 1;		END_MCTRL		= 2;		BEG_MCTRL		= 3;
		ARROW			= 0;		TEXT_CRSR		= 1;		BUSYBEE			= 2;		HOURGLASS		= 2;		POINT_HAND		= 3;		FLAT_HAND		= 4;		THIN_CROSS		= 5;		THICK_CROSS		= 6;		OUTLN_CROSS		= 7;		USER_DEF		= 255;		M_OFF			= 256;		M_ON			= 257;
		G_BOX			= 20;		G_TEXT			= 21;		G_BOXTEXT		= 22;		G_IMAGE			= 23;		G_USERDEF		= 24;		G_IBOX			= 25;		G_BUTTON		= 26;		G_BOXCHAR		= 27;		G_STRING		= 28;		G_FTEXT			= 29;		G_FBOXTEXT		= 30;		G_ICON			= 31;		G_TITLE			= 32;
		NONE			= 0;		SELECTABLE		= 1;		DEFAULT			= 2;		F_EXIT			= 4;		EDITABLE		= 8;		RBUTTON			= 16;		LASTOB			= 32;		TOUCHEXIT		= 64;		HIDETREE		= 128;		INDIRECT		= 256;		NORMAL			= 0;		SELECTED		= 1;		CROSSED			= 2;		CHECKED			= 4;		DISABLED		= 8;		OUTLINED		= 16;		SHADOWED		= 32;		EDSTART			= 0;
		EDINIT			= 1;
		EDCHAR			= 2;
		EDEND			= 3;

		IBM				= 3;
		SMALL			= 5;

		TE_LEFT			= 0;		TE_RIGHT		= 1;		TE_CNTR			= 2;

		ROOT			= 0;		MAX_DEPTH		= 8;
		GDOS_NONE		= -2;			(* no GDOS installed           *)
		GDOS_FSM		= $5F46534D;	(* '_FSM' - FSMGDOS installed  *)
		GDOS_FNT		= $5F464E54;	(* '_FNT' - FONTGDOS installed *)

		BackSpace		= $0E08;
		Tab				= $0F09;
		S_Delete		= $537F;
		S_Insert		= $5200;
		Shift_Ins		= $5230;
		Return			= $1C0D;
		Enter			= $720D;
		Undo			= $6100;
		Help			= $6200;
		Home			= $4700;
		Cur_Up			= $4800;
		Cur_Down		= $5000;
		Cur_Left		= $4B00;
		Cur_Right		= $4D00;
		Shift_Home		= $4737;
		Shift_CU		= $4838;
		Shift_CD		= $5032;
		Shift_CL		= $4B34;
		Shift_CR		= $4D36;
		Esc				= $011B;
		Ctrl_A			= $1E01;
		Ctrl_B			= $3002;
		Ctrl_C			= $2E03;
		Ctrl_D			= $2004;
		Ctrl_E			= $1205;
		Ctrl_F			= $2106;
		Ctrl_G			= $2207;
		Ctrl_H			= $2308;
		Ctrl_I			= $1709;
		Ctrl_J			= $240A;
		Ctrl_K			= $250B;
		Ctrl_L			= $260C;
		Ctrl_M			= $320D;
		Ctrl_N			= $310E;
		Ctrl_O			= $180F;
		Ctrl_P			= $1910;
		Ctrl_Q			= $1011;
		Ctrl_R			= $1312;
		Ctrl_S			= $1F13;
		Ctrl_T			= $1414;
		Ctrl_U			= $1615;
		Ctrl_V			= $2F16;
		Ctrl_W			= $1117;
		Ctrl_X			= $2D18;
		Ctrl_Y			= $2C19;
		Ctrl_Z			= $151A;
		Ctrl_1			= $0211;
		Ctrl_2			= $0300;
		Ctrl_3			= $0413;
		Ctrl_4			= $0514;
		Ctrl_5			= $0615;
		Ctrl_6			= $071E;
		Ctrl_7			= $0817;
		Ctrl_8			= $0918;
		Ctrl_9			= $0A19;
		Ctrl_0			= $0B10;
		Alt_A			= $1E00;
		Alt_B			= $3000;
		Alt_C			= $2E00;
		Alt_D			= $2000;
		Alt_E			= $1200;
		Alt_F			= $2100;
		Alt_G			= $2200;
		Alt_H			= $2300;
		Alt_I			= $1700;
		Alt_J			= $2400;
		Alt_K			= $2500;
		Alt_L			= $2600;
		Alt_M			= $3200;
		Alt_N			= $3100;
		Alt_O			= $1800;
		Alt_P			= $1900;
		Alt_Q			= $1000;
		Alt_R			= $1300;
		Alt_S			= $1F00;
		Alt_T			= $1400;
		Alt_U			= $1600;
		Alt_V			= $2F00;
		Alt_W			= $1100;
		Alt_X			= $2D00;
		Alt_Y			= $2C00;
		Alt_Z			= $1500;
		Alt_1			= $7800;
		Alt_2			= $7900;
		Alt_3			= $7A00;
		Alt_4			= $7B00;
		Alt_5			= $7C00;
		Alt_6			= $7D00;
		Alt_7			= $7E00;
		Alt_8			= $7F00;
		Alt_9			= $8000;
		Alt_0			= $8100;
		F1				= $3B00;
		F2				= $3C00;
		F3				= $3D00;
		F4				= $3E00;
		F5				= $3F00;
		F6				= $4000;
		F7				= $4100;
		F8				= $4200;
		F9				= $4300;
		F10				= $4400;
		Shift_F1		= $5400;
		Shift_F2		= $5500;
		Shift_F3		= $5600;
		Shift_F4		= $5700;
		Shift_F5		= $5800;
		Shift_F6		= $5900;
		Shift_F7		= $5A00;
		Shift_F8		= $5B00;
		Shift_F9		= $5C00;
		Shift_F10		= $5D00;
		Ctrl_AE			= $2804;
		Ctrl_OE			= $2714;
		Ctrl_UE			= $1A01;
		Alt_AE			= $285D;
		Alt_OE			= $275B;
		Alt_UE			= $1A40;
		SH_Alt_AE		= $287D;
		SH_Alt_OE		= $277B;
		SH_Alt_UE		= $1A5C;


			(* ++++++++++++++++++++++++++++++++++++++++ *)
			(*					VDI						*)
			(* ++++++++++++++++++++++++++++++++++++++++ *)

		TA_LEFT			= 0;
		TA_CENTER		= 1;
		TA_RIGHT		= 2;
		TA_BASELINE		= 0;
		TA_HALF			= 1;
		TA_ASCENT		= 2;
		TA_BOTTOM		= 3;
		TA_DESCENT		= 4;
		TA_TOP			= 5;

		MD_REPLACE		= 1;
		MD_TRANS		= 2;
		MD_XOR			= 3;
		MD_ERASE		= 4;

		MT_DOT			= 1;
		MT_PLUS			= 2;
		MT_ASTERISK		= 3;
		MT_SQUARE		= 4;
		MT_DCROSS		= 5;
		MT_DIAMOND		= 6;

		LE_SQUARED		= 0;
		LE_ARROWED		= 1;
		LE_ROUNDED		= 2;

		FIS_HOLLOW		= 0;
		FIS_SOLID		= 1;
		FIS_PATTERN		= 2;
		FIS_HATCH		= 3;
		FIS_USER		= 4;

		DOTS			= 3;
		GRID			= 6;
		BRICKS			= 9;
		WEAVE			= 16;

		LT_SOLID		= 1;
		LT_LONGDASH		= 2;
		LT_DOTTED		= 3;
		LT_DASHDOT		= 4;
		LT_DASHED		= 5;
		LT_DASHDOTDOT	= 6;
		LT_USERDEF		= 7;

		TF_NORMAL		= 0;
		TF_THICKENED	= 1;
		TF_LIGHTENED	= 2;
		TF_SLANTED		= 4;
		TF_UNDERLINED	= 8;
		TF_OUTLINED		= 16;
		TF_SHADOWED		= 32;

		ALL_WHITE		= 0;
		S_AND_D			= 1;
		S_AND_NOTD		= 2;
		S_ONLY			= 3;
		NOTS_AND_D		= 4;
		D_ONLY			= 5;
		S_XOR_D			= 6;
		S_OR_D			= 7;
		NOT_SORD		= 8;
		NOT_SXORD		= 9;
		D_INVERT		= 10;
		S_OR_NOTD		= 11;
		NOT_D			= 12;
		NOTS_OR_D		= 13;
		NOT_SANDD		= 14;
		ALL_BLACK		= 15;

		MODE_REQUEST	= 1;
		MODE_SAMPLE		= 2;

		DEV_LOCATOR		= 1;
		DEV_VALUATOR	= 2;
		DEV_CHOICE		= 3;
		DEC_STRING		= 4;


type
			(* ++++++++++++++++++++++++++++++++++++++++ *)
			(*					GEM						*)
			(* ++++++++++++++++++++++++++++++++++++++++ *)

		global_ARRAY	= ARRAY[0..global_max] of Integer;
		control_ARRAY	= ARRAY[0..control_max] of Integer;
		intin_ARRAY		= ARRAY[0..intin_max] of Integer;
		intout_ARRAY	= ARRAY[0..intout_max] of Integer;
		ptsin_ARRAY		= ARRAY[0..pts_max] of Integer;
		ptsout_ARRAY	= ARRAY[0..pts_max] of Integer;
		addrin_ARRAY	= ARRAY[0..addrin_max] of Pointer;
		addrout_ARRAY	= ARRAY[0..addrout_max] of Pointer;
		workout_ARRAY	= ARRAY[0..workout_max] of Integer;
		workin_ARRAY	= ARRAY[0..workin_max] of Integer;

		VDIPBPtr = ^VDIPB;
		VDIPB = record
			control	: ^control_ARRAY;
			intin	: ^intin_ARRAY;
			ptsin	: ^ptsin_ARRAY;
			intout	: ^intout_ARRAY;
			ptsout	: ^ptsout_ARRAY;
		end;

		AESPBPtr = ^AESPB;
		AESPB = record
			control	: ^control_ARRAY;
			global	: ^global_ARRAY;
			intin	: ^intin_ARRAY;
			intout	: ^intout_ARRAY;
			addrin	: ^addrin_ARRAY;
			addrout	: ^addrout_ARRAY;
		end;

		VDI_block = record
			control	: control_ARRAY;
			intin	: intin_ARRAY;
			intout	: intout_ARRAY;
			ptsin	: ptsin_ARRAY;
			ptsout	: ptsout_ARRAY;
		end;

		AES_block = record
			control	: control_ARRAY;
			global	: global_ARRAY;
			intin	: intin_ARRAY;
			intout	: intout_ARRAY;
			addrin	: addrin_ARRAY;
			addrout	: addrout_ARRAY;
		end;

		ARRAY_2		= ARRAY[0..1] of Integer;
		ARRAY_3		= ARRAY[0..2] of Integer;
		ARRAY_4		= ARRAY[0..3] of Integer;
		ARRAY_5		= ARRAY[0..4] of Integer;
		ARRAY_6		= ARRAY[0..5] of Integer;
		ARRAY_8		= ARRAY[0..7] of Integer;
		ARRAY_10	= ARRAY[0..9] of Integer;
		ARRAY_16	= ARRAY[0..15] of Integer;


			(* ++++++++++++++++++++++++++++++++++++++++ *)
			(*					AES						*)
			(* ++++++++++++++++++++++++++++++++++++++++ *)

		TEDINFOPtr = ^TEDINFO;
		TEDINFO = record
			te_ptext		: Pointer;
			te_ptmplt		: Pointer;
			te_pvalid		: Pointer;
			te_font			: Integer;
			te_resvd1		: Integer;
			te_just			: Integer;
			te_color		: Integer;
			te_resvd2		: Integer;
			te_thickness	: Integer;
			te_txtlen		: Integer;
			te_tmplen		: Integer;
		end;

		ICONBLKPtr = ^ICONBLK;
		ICONBLK = record
			ib_pmask		: Pointer;
			ib_pdata		: Pointer;
			ib_ptext		: Pointer;
			ib_char			: Integer;
			ib_xchar		: Integer;
			ib_ychar		: Integer;
			ib_xicon		: Integer;
			ib_yicon		: Integer;
			ib_wicon		: Integer;
			ib_hicon		: Integer;
			ib_xtext		: Integer;
			ib_ytext		: Integer;
			ib_wtext		: Integer;
			ib_htext		: Integer;
		end;

		BITBLKPtr = ^BITBLK;
		BITBLK = record
			bi_pdata		: Pointer;
			bi_wb			: Integer;
			bi_hl			: Integer;
			bi_x			: Integer;
			bi_y			: Integer;
			bi_color		: Integer;
		end;

		USERBLKPtr = ^USERBLK;
		USERBLK = record
			ub_code			: Pointer;
			ub_parm			: LongInt;
		end;

		MFORMPtr = ^MFORM;
		MFORM = record
			mf_xhot			: Integer;
			mf_yhot			: Integer;
			mf_nplanes		: Integer;
			mf_fg			: Integer;
			mf_bg			: Integer;
			mf_mask			: ARRAY_16;
			mf_data			: ARRAY_16;
		end;

		OBSPECPtr = ^OBSPEC;
		OBSPEC = record
			case Integer of
				0,
				G_BOX,
				G_IBOX,
				G_BOXCHAR:	( index : 		LongInt		);
				G_BOXTEXT,
				G_TEXT,
				G_FTEXT,
				G_FBOXTEXT:	( ted_info : 	TEDINFOPtr	);
				G_IMAGE:	( bit_blk : 	BITBLKPtr	);
				G_USERDEF:	( user_blk : 	USERBLKPtr	);
				G_BUTTON,
				G_STRING,
				G_TITLE:	( free_string :	Pointer		);
				G_ICON:		( icon_blk :	ICONBLKPtr	);

				INDIRECT:	( ob_spec : 	OBSPECPtr	);
		end;

		AESOBJECTPtr = ^AESOBJECT;
		AESOBJECT = record
			ob_next			: Integer;
			ob_head			: Integer;
			ob_tail			: Integer;
			ob_type			: Word;
			ob_flags		: Word;
			ob_state		: Word;
			ob_spec			: OBSPEC;
			ob_x			: Integer;
			ob_y			: Integer;
			ob_width		: Integer;
			ob_height		: Integer;
		end;

		AESTreePtr = ^AESTree;
		AESTree = Array[0..8192] of AESOBJECT;

		PARMBLKPtr = ^PARMBLK;
		PARMBLK = record
			pb_tree			: AESTreePtr;
			pb_obj			: Integer;
			pr_prevstate	: Integer;
			pr_currstate	: Integer;
			pb_x			: Integer;
			pb_y			: Integer;
			pb_w			: Integer;
			pb_h			: Integer;
			pb_xc			: Integer;
			pb_yc			: Integer;
			pb_wc			: Integer;
			pb_hc			: Integer;
			pb_parm			: LongInt;
		end;

		RSHDRPtr = ^RSHDR;
		RSHDR = record
			rsh_vrsn :		Word;
			rsh_object :	Word;
			rsh_tedinfo :	Word;
			rsh_iconblk :	Word;
			rsh_bitblk :	Word;
			rsh_frstr :		Word;
			rsh_string :	Word;
			rsh_imdata :	Word;
			rsh_frimg :		Word;
			rsh_trindex :	Word;
			rsh_nobs :		Word;
			rsh_ntree :		Word;
			rsh_nted :		Word;
			rsh_nib :		Word;
			rsh_nbb :		Word;
			rsh_nstring :	Word;
			rsh_nimages :	Word;
			rsh_rssize :	Word;
		end;

		EVENTPtr = ^EVENT;
		EVENT = record
			ev_mflags :		Integer;        { input parameters }
			ev_mbclicks :	Integer;
			ev_bmask :		Integer;
			ev_mbstate :	Integer;
			ev_mm1flags :	Integer;
			ev_mm1x :		Integer;
			ev_mm1y :		Integer;
			ev_mm1width :	Integer;
			ev_mm1height :	Integer;
			ev_mm2flags :	Integer;
			ev_mm2x :		Integer;
			ev_mm2y :		Integer;
			ev_mm2width :	Integer;
			ev_mm2height :	Integer;
			ev_mtlocount :	Integer;
			ev_mthicount :	Integer;
			ev_mwich :		Integer;		{ output parameters }
			ev_mmox :		Integer;
			ev_mmoy :		Integer;
			ev_mmobutton :	Integer;
			ev_mmokstate :	Integer;
			ev_mkreturn :	Integer;
			ev_mbreturn :	Integer;
			ev_mmgpbuf :	ARRAY_8;
		end;

        MENUPtr = ^MENU;
        MENU = record
			mn_tree	: 		AESTreePtr;
			mn_menu	:		Integer;
			mn_item :		Integer;
			mn_scroll :		Integer;
        end;

		MN_SETPtr = ^MN_SET;
		MN_SET = record
			Display :		LongInt;
			Drag :			LongInt;
			Delay :			LongInt;
			Speed :			LongInt;
			Height :		Integer;
		end;


			(* ++++++++++++++++++++++++++++++++++++++++ *)
			(*					VDI						*)
			(* ++++++++++++++++++++++++++++++++++++++++ *)

		FONT_HDRPtr = ^FONT_HDR;
		FONT_HDR = record
			font_id			: Integer;
			point			: Integer;
			name			: Array[0..31] of Char;
			first_ade		: Word;
			last_ade		: Word;
			top				: Word;
			ascent			: Word;
			half			: Word;
			descent			: Word;
			bottom			: Word;
			max_char_width	: Word;
			max_cell_width	: Word;
			left_offset		: Word;
			right_offset	: Word;
			thicken			: Word;
			ul_size			: Word;
			lighten			: Word;
			skew			: Word;
			flags			: Word;
			hor_table		: Pointer;
			off_table		: Pointer;
			dat_table		: Pointer;
			form_width		: Word;
			form_height		: Word;
			next_font		: FONT_HDRPtr;
		end;

		MFDBPtr = ^MFDB;
		MFDB = record
			fd_addr		: Pointer;
			fd_w		: Integer;
			fd_h		: Integer;
			fd_wdwidth	: Integer;
			fd_stand	: Integer;
			fd_nplanes	: Integer;
			fd_r1		: Integer;
			fd_r2		: Integer;
			fd_r3		: Integer;
		end;

		String32	= String[32];
		String80	= String[80];
		String125	= String[125];

		fsm_int = record
			value		: Integer;
			remainder	: Integer;
		end;

		fsm_fpoint_t = record
			x			: fsm_int;
			y			: fsm_int;
		end;

		fsm_data_fpoint_tPtr = ^fsm_data_fpoint_t;
		fsm_data_fpoint_t = record
			pt			: fsm_fpoint_t;
			cpt			: fsm_fpoint_t;
			sharp		: fsm_int;
		end;

		fsm_component_tPtr = ^fsm_component_t;
		fsm_component_t = record
			reserved1		: Integer;
			nextComponent	: fsm_component_tPtr;
			numPoints		: Byte;
			numCurves		: Byte;
			numContours		: Byte;
			reserved2		: array[1..13] of Byte;
			points			: fsm_data_fpoint_tPtr;
			startPtr		: Pointer;
		end;


var
			(* ++++++++++++++++++++++++++++++++++++++++ *)
			(*					GEM						*)
			(* ++++++++++++++++++++++++++++++++++++++++ *)

		VDI_blk	: VDI_block;
		Gem_pb	: AES_block;
		VDI_pb	: VDIPB;
		AES_pb	: AESPB;


(* -------------------------------------------------------------------- *)
(*		functions & procedures											*)
(* -------------------------------------------------------------------- *)

		procedure	SetFreeString( tree : AESTreePtr; obj : Integer; str : String );

		procedure	GetFreeString( tree : AESTreePtr; obj : Integer; var str : String );

		procedure	SetPtext( tree : AESTreePtr; obj : Integer; str : String );

		procedure	GetPtext( tree : AESTreePtr; obj : Integer; var str : String );

		procedure	SetPtmplt( tree : AESTreePtr; obj : Integer; str : String );

		procedure	GetPtmplt( tree : AESTreePtr; obj : Integer; var str : String );

		procedure	SetPvalid( tree : AESTreePtr; obj : Integer; str : String );

		procedure	GetPvalid( tree : AESTreePtr; obj : Integer; var str : String );

		procedure	SetIcontext( tree : AESTreePtr; obj : Integer; str : String );

		procedure	GetIcontext( tree : AESTreePtr; obj : Integer; var str : String );


		procedure	WindSetTitle( handle : Integer; str : String; var buf : String );

		procedure	WindSetInfo( handle : Integer; str : String; var buf : String );

		procedure	WindSetNewDesk( tree : AESTreePtr; firstObj : Integer );


			(* ++++++++++++++++++++++++++++++++++++++++ *)
			(*					AES						*)
			(* ++++++++++++++++++++++++++++++++++++++++ *)

		function	vq_aes : Integer;

		procedure	_crystal( aespb : AESPBPtr );

		function	appl_init : Integer;

		function	appl_read( ap_rid, ap_rlength : Integer;
								ap_rpbuff : Pointer ) : Integer;

		function	appl_write( ap_wid, ap_wlength : Integer;
								ap_wpbuff : Pointer ) : Integer;

		function	appl_find( ap_fpname : String ) : Integer;

		function	appl_tplay( ap_tpmem : Pointer;
								ap_tpnum, ap_tpscale : Integer ) : Integer;

		function	appl_trecord( ap_trmem : Pointer;
								ap_trcount : Integer ) : Integer;

		function	appl_bvset( ap_bvdisk, ap_bvhard : Word ) : Integer;

		function	appl_yield : Integer;

		function	appl_exit : Integer;

		function	appl_search( ap_smode : Integer; var ap_sname : String;
							var ap_stype, ap_sid : Integer ) : Integer;

		function	evnt_keybd : Integer;

		function	evnt_button( ev_bclicks, ev_bmask,
									ev_bstate : Integer;
									var ev_bmx, ev_bmy, ev_bbutton,
									ev_bkstate : Integer ) : Integer;

		function	evnt_mouse( ev_moflags, ev_mox, ev_moy,
									ev_mowidth, ev_moheight : Integer;
									var ev_momx, ev_momy, ev_mobutton,
									ev_mokstate : Integer ) : Integer;

		function	evnt_mesag( var ev_mgpbuff : ARRAY_8 ) : Integer;

		function	evnt_timer( ev_tlocount, ev_thicount : Word ) : Integer;

		function	evnt_multi( ev_mflags, ev_mbclicks, ev_mbmask,
								ev_mbstate, ev_mm1flags, ev_mm1x,
								ev_mm1y, ev_mm1width, ev_mm1height,
								ev_mm2flags, ev_mm2x, ev_mm2y,
								ev_mm2width, ev_mm2height : Integer;
								var ev_mmgpbuf : ARRAY_8;
								ev_mtlocount, ev_mthicount : Integer;
								var ev_mmox, ev_mmoy, ev_mmobutton,
								ev_mmokstate, ev_mkreturn,
								ev_mbreturn : Integer ) : Integer;

		function	EvntMulti( var evnt_struct : EVENT ) : Integer;

		function	evnt_dclick( ev_dnew, ev_dgetset : Integer ) : Integer;

		function	menu_bar( me_btree : AESTreePtr;
								me_bshow : Integer ) : Integer;

		function	menu_icheck( me_ctree : AESTreePtr;
									me_citem, me_ccheck : Integer ) : Integer;

		function	menu_ienable( me_etree : AESTreePtr;
									me_eitem, me_eenable : Integer ) : Integer;

		function	menu_tnormal( me_ntree : AESTreePtr;
									me_ntitle, me_nnormal : Integer ) : Integer;

		function	menu_text( me_ttree : AESTreePtr;
								me_titem : Integer;
								me_ttext : String ) : Integer;

		function	menu_register( me_rapid : Integer;
									me_rpstring : String ) : Integer;

		function	menu_unregister( me_uapid : Integer ) : Integer;

		function	menu_popup( me_menu : MENUPtr;
									me_xpos, me_ypos : Integer;
									var me_mdata : MENU ) : Integer;

		function	menu_attach( me_flag : Integer; me_tree: AESTreePtr;
									me_item : Integer;
									me_mdata : MENUPtr ) : Integer;

		function	menu_istart( me_flag : Integer; me_tree: AESTreePtr;
									me_imenu, me_item : Integer ) : Integer;

		function	menu_settings( me_flag : Integer;
									me_values : MN_SETPtr ) : Integer;

		function	objc_add( ob_atree : AESTreePtr;
								ob_aparent, ob_achild : Integer ) : Integer;

		function	objc_delete( ob_dltree : AESTreePtr;
									ob_dlobject : Integer ) : Integer;

		function	objc_draw( ob_drtree : AESTreePtr;
								ob_drstartob, ob_drdepth,
								ob_drxclip, ob_dryclip,
								ob_drwclip, ob_drhclip : Integer ) : Integer;

		function	objc_find( ob_ftree : AESTreePtr;
								ob_fstartob, ob_fdepth,
								ob_fmx, ob_fmy : Integer ) : Integer;

		function	objc_offset( ob_oftree : AESTreePtr;
									ob_ofobject : Integer;
									var ob_ofxoff,
										ob_ofyoff : Integer ) : Integer;

		function	objc_order( ob_ortree : AESTreePtr;
									ob_orobject,
									ob_ornewpos : Integer ) : Integer;

		function	objc_edit( ob_edtree : AESTreePtr;
								ob_edobject, ob_edchar : Integer;
								var ob_edidx : Integer;
								ob_edkind : Integer ) : Integer;

		function	objc_change( ob_ctree : AESTreePtr;
									ob_cobject, ob_cresvd,
									ob_xclip, ob_yclip,
									ob_wclip, ob_hclip,
									ob_cnewstate,
									ob_credraw : Integer ) : Integer;

		function	form_do( fo_dotree : AESTreePtr;
								fo_dostartob : Integer ) : Integer;

		function	form_dial( fo_diflag, fo_dilittlx, fo_dilittly,
								fo_dilittlw, fo_dilittlh,
								fo_dibigx, fo_dibigy, fo_dibigw,
								fo_dibigh : Integer ) : Integer;

		function	form_alert( fo_adefbttn : Integer;
									fo_astring : String ) : Integer;

		function	form_error( fo_enum : Integer ) : Integer;

		function	form_center( fo_ctree : AESTreePtr;
									var fo_cx, fo_cy,
										fo_cw, fo_ch : Integer ) : Integer;

		function	form_keybd( fo_ktree : AESTreePtr;
									fo_kobject, fo_kobnext,
										fo_kchar : Integer;
									var fo_knxtobject,
										fo_knxtchar : Integer ) : Integer;

		function	form_button( fo_btree : AESTreePtr;
									fo_bobject, fo_bclicks : Integer;
									var fo_bnxtobj : Integer ) : Integer;

		function	graf_rubbox( gr_rx, gr_ry, gr_rminwidth,
										gr_rminheight : Integer;
										var gr_rlastwidth,
											gr_rlastheight : Integer ) : Integer;

		function	graf_rubberbox( gr_rx, gr_ry, gr_rminwidth,
										gr_rminheight : Integer;
										var gr_rlastwidth,
											gr_rlastheight : Integer ) : Integer;

		function	graf_dragbox( gr_dwidth, gr_dheight, gr_dstartx,
									gr_dstarty, gr_dboundx, gr_dboundy,
									gr_dboundw, gr_dboundh : Integer;
									var gr_dfinishx,
										gr_dfinishy : Integer ) : Integer;

		function	graf_mbox( gr_mwidth, gr_mheight, gr_msourcex,
									gr_msourcey, gr_mdestx,
									gr_mdesty : Integer ) : Integer;

		function	graf_movebox( gr_mwidth, gr_mheight, gr_msourcex,
									gr_msourcey, gr_mdestx,
									gr_mdesty : Integer ) : Integer;

		function	graf_growbox( gr_gstx, gr_gsty, gr_gstwidth,
									gr_gstheight, gr_gfinx, gr_gfiny,
									gr_gfinwidth, gr_gfinheight :
											Integer ) : Integer;

		function	graf_shrinkbox( gr_sfinx, gr_sfiny, gr_sfinwidth,
									gr_sfinheight, gr_sstx, gr_ssty,
									gr_sstwidth, gr_sstheight :
											Integer ) : Integer;

		function	graf_watchbox( gr_wptree : AESTreePtr;
									gr_wobject, gr_winstate,
									gr_woutstate : Integer ) : Integer;

		function	graf_slidebox( gr_slptree : AESTreePtr;
									gr_slparent, gr_slobject,
									gr_slvh : Integer ) : Integer;

		function	graf_handle( var gr_hwchar, gr_hhchar,
									gr_hwbox, gr_hhbox : Integer ) : Integer;

		function	graf_mouse( gr_monumber : Integer;
								gr_mofaddr : MFORMPtr ) : Integer;

		function	graf_mkstate( var gr_mkmx, gr_mkmy, gr_mkmstate,
									gr_mkkstate : Integer ) : Integer;

		function	scrp_read( var sc_rpscrap : String ) : Integer;

		function	scrp_write( sc_wpscrap : String ) : Integer;

		function	scrp_clear : Integer;

		function	fsel_input( var fs_iinpath, fs_iinsel : String;
								var fs_iexbutton : Integer ) : Integer;

		function	fsel_exinput( var fs_einpath, fs_einsel : String;
									var fs_eexbutton : Integer;
									fs_elabel : String ) : Integer;

		function	wind_create( wi_crkind, wi_crwx, wi_crwy, wi_crww,
									wi_crwh : Integer ) : Integer;

		function	wind_open( wi_ohandle, wi_owx, wi_owy,
								wi_oww, wi_owh : Integer ) : Integer;

		function	wind_close( wi_chandle : Integer ) : Integer;

		function	wind_delete( wi_dhandle : Integer ) : Integer;

		function	wind_get( wi_ghandle, wi_gfield : Integer;
								var wi_gw1, wi_gw2, wi_gw3,
									wi_gw4 : Integer ) : Integer;

		function	wind_set( wi_shandle, wi_sfield,
								wi_sw1, wi_sw2,
								wi_sw3, wi_sw4 : Integer ) : Integer;

		function	wind_find( wi_fmx, wi_fmy : Integer ) : Integer;

		function	wind_update( wi_ubegend : Integer ) : Integer;

		function	wind_calc( wi_ctype, wi_ckind, wi_cinx, wi_ciny,
								wi_cinw, wi_cinh : Integer;
								var wi_coutx, wi_couty, wi_coutw,
									wi_couth : Integer ) : Integer;

		procedure	wind_new;

		function	rsrc_load( re_lpfname : String ) : Integer;

		function	rsrc_free : Integer;

		function	rsrc_gaddr( re_gtype, re_gindex : Integer;
								var re_gaddr : Pointer ) : Integer;

		function	rsrc_saddr( re_stype, re_sindex : Integer;
									re_saddr : Pointer ) : Integer;

		function	rsrc_obfix( re_obtree : AESTreePtr;
									re_oobject : Integer ) : Integer;

		function	rsrc_rcfix( rc_header : RSHDRPtr ) : Integer;

		function	shel_read( var sh_rpcmd, sh_rptail : String ) : Integer;

		function	shel_write( sh_wdoex, sh_wisgr,
								sh_wisover : Integer;
								sh_wpcmd, sh_wptail : String ) : Integer;

		function	shel_get( sh_gaddr : Pointer;
								sh_glen : Integer ) : Integer;

		function	shel_put( sh_paddr : Pointer;
								sh_plen : Integer ) : Integer;

		function	shel_find( var sh_fpbuff : String ) : Integer;

		function	shel_envrn( var sh_epvalue : Pointer;
									sh_eparm : String ) : Integer;

		function	shel_rdef( var sh_rlpcmd, sh_rlpdir : String ) : Integer;

		function	shel_wdef( sh_wlpcmd, sh_wlpdir : String ) : Integer;

		function	xgrf_stepcalc( xg_storgw, xg_storgh, xg_stxc,
									xg_styc, xg_stw, xg_sth : Integer;
									var xg_stpcx, xg_stpcy,
										xg_stpcnt, xg_stpxstep,
										xg_stpystep : Integer ) : Integer;

		function	xgrf_2box( xg_2cnt, xg_2xstep, xg_2ystep,
								xg_2doubled, xg_2corners, xg_2xc,
								xg_2yc, xg_2w, xg_2h : Integer ) : Integer;


			(* ++++++++++++++++++++++++++++++++++++++++ *)
			(*					VDI						*)
			(* ++++++++++++++++++++++++++++++++++++++++ *)

		procedure	vdi( pb : VDIPBPtr );

		function	vq_gdos : Integer;

		function	vq_vgdos : LongInt;

		procedure	v_opnwk( WorkIn : workin_Array;
								var handle : Integer;
								var WorkOut : workout_Array );

		procedure	v_clswk( handle : Integer );

		procedure	v_opnvwk( WorkIn : workin_Array;
								var handle : Integer;
								var WorkOut : workout_Array );

		procedure	v_clsvwk( handle : Integer );

		procedure	v_clrwk( handle : Integer );

		procedure	v_updwk( handle : Integer );

		function	vst_load_fonts( handle, select : Integer ) : Integer;

		procedure	vst_unload_fonts( handle, select : Integer );

		procedure	vs_clip( handle, clipflag : Integer;
								pxarray : ARRAY_4 );

		procedure	v_pline( handle, count : Integer;
								pxyarray : ptsin_ARRAY );

		procedure	v_pmarker( handle, count : Integer;
								pxyarray : ptsin_ARRAY );

		procedure	v_gtext( handle, x, y : Integer;
								outputstring : string );

		procedure	v_fillarea( handle, count : Integer;
									pxyarray : ptsin_ARRAY );

		procedure	v_cellarray( handle : Integer;
									pxyarray : ARRAY_4;
									rowlength, elused,
									numrows, wrtmode : Integer;
									colarray : intin_ARRAY );

		procedure	v_contourfill( handle, x, y, index : Integer );

		procedure	vr_recfl( handle : Integer;
								pxyarray : ARRAY_4 );

		procedure	v_bar( handle : Integer;
							pxyarray : ARRAY_4 );

		procedure	v_arc( handle, x, y, radius, begang, endang : Integer );

		procedure	v_pieslice( handle, x, y, radius,
									begang, endang : Integer );

		procedure	v_circle( handle, x, y, radius : Integer );

		procedure	v_ellipse( handle, x, y, xradius, yradius : Integer );

		procedure	v_ellarc( handle, x, y, xradius, yradius,
								begang, endang : Integer );

		procedure	v_ellpie( handle, x, y, xradius, yradius,
								begang, endang : Integer );

		procedure	v_rbox( handle : Integer; xyarray : ARRAY_4 );

		procedure	v_rfbox( handle : Integer; xyarray : ARRAY_4 );

		procedure	v_justified( handle, x, y : Integer;
									outputstring : string;
									width,
									wordspace,
									charspace : Integer );

		function	vswr_mode( handle, mode : Integer ) : Integer;

		procedure	vs_color( handle, index : Integer;
								rgb_in : ARRAY_3 );

		function	vsl_type( handle, style : Integer ) : Integer;

		procedure	vsl_udsty( handle, pattern : Integer );

		function	vsl_width( handle, width : Integer ) : Integer;

		function	vsl_color( handle, color_index : Integer ) : Integer;

		procedure	vsl_ends( handle, beg_style, end_style : Integer );

		function	vsm_type( handle, symbol : Integer ) : Integer;

		function	vsm_height( handle, height : Integer ) : Integer;

		function	vsm_color( handle, color_index : Integer ) : Integer;

		procedure	vst_height( handle, height : Integer;
								var char_width, char_height,
									cell_width, cell_height : Integer );

		function	vst_point( handle, point : Integer;
								var char_width, char_height,
									cell_width, cell_height : Integer )
																: Integer;

		function	vst_rotation( handle, angle : Integer ) : Integer;

		function	vst_font( handle, font : Integer ) : Integer;

		function	vst_color( handle, color_index : Integer ) : Integer;

		function	vst_effects( handle, effect : Integer ) : Integer;

		procedure	vst_alignment( handle, hor_in, vert_in : Integer;
									var hor_out, vert_out : Integer );

		function	vsf_interior( handle, style : Integer ) : Integer;

		function	vsf_style( handle, style_index : Integer ) : Integer;

		function	vsf_color( handle, color_index : Integer ) : Integer;

		function	vsf_perimeter( handle, per_vis : Integer ) : Integer;

		procedure	vsf_udpat( handle : Integer;
								pfill_pat : Pointer;
								planes : Integer );

		procedure	vro_cpyfm( handle, wr_mode : Integer;
								pxyarray : ARRAY_8;
								psrcMFDB, pdesMFDB : MFDB );

		procedure	vrt_cpyfm( handle, wr_mode : Integer;
								pxyarray : ARRAY_8;
								psrcMFDB, pdesMFDB : MFDB;
								color_index : ARRAY_2 );

		procedure	vr_trnfm( handle : Integer;
								psrcMFDB, pdesMFDB : MFDB );

		procedure	v_get_pixel( handle, x, y : Integer;
									var pel, index : Integer );

		function	vsin_mode( handle, dev_type, mode : Integer ) : Integer;

		procedure	vrq_locator( handle, x, y : Integer;
									var xout, yout, term : Integer );

		function	vsm_locator( handle, x, y : Integer;
									var xout, yout,
										term : Integer ) : Integer;

		procedure	vrq_valuator( handle, valuator_in : Integer;
									var valuator_out, terminator : Integer );

		procedure	vsm_valuator( handle, val_in : Integer;
									var val_out, term, status : Integer );

		procedure	vrq_choice( handle, ch_in : Integer;
									var ch_out : Integer );

		function	vsm_choice( handle : Integer;
									var choice : Integer ) : Integer;

		procedure	vrq_string( handle, max_length, echo_mode : Integer;
								echo_xy : ARRAY_2;
								var resString : string );

		function	vsm_string( handle, max_length, echo_mode : Integer;
								echo_xy : ARRAY_2;
								var resString : string ) : Integer;

		procedure	vsc_form( handle : Integer; pcur_form : MFORMPtr );

		procedure	vex_timv( handle : Integer; tim_addr : Pointer;
								var otim_addr : Pointer;
								var tim_conv : Integer );

		procedure	v_show_c( handle, doReset : Integer );

		procedure	v_hide_c( handle : Integer );

		procedure	vq_mouse( handle : Integer;
								var pstatus, x, y : Integer );

		procedure	vex_butv( handle : Integer; pusrcode : Pointer;
								var psavcode : Pointer );

		procedure	vex_motv( handle : Integer; pusrcode : Pointer;
								var psavcode : Pointer );

		procedure	vex_curv( handle : Integer; pusrcode : Pointer;
								var psavcode : Pointer );

		procedure	vq_key_s( handle : Integer; var pstatus : Integer );

		procedure	vq_extnd( handle, owflag : Integer;
								var WorkOut : workout_Array );

		function	vq_color( handle, color_index, set_flag : Integer;
								var rgb : ARRAY_3 ) : Integer;

		procedure	vql_attributes( handle : Integer; var attrib : ARRAY_4 );

		procedure	vqm_attributes( handle : Integer; var attrib : ARRAY_4 );

		procedure	vqf_attributes( handle : Integer; var attrib : ARRAY_5 );

		procedure	vqt_attributes( handle : Integer; var attrib : ARRAY_10 );

		procedure	vqt_extent( handle : Integer; calcString : String;
								var extent : ARRAY_8 );

		function	vqt_width( handle, character : Integer;
								var cell_width, left_delta,
									right_delta : Integer ) : Integer;

		function	vqt_name( handle, element_num : Integer;
								var name : String32 ) : Integer;

		procedure	vq_cellarray( handle : Integer; pxyarray : ARRAY_4;
									row_length, num_rows : Integer;
									var el_used, rows_used,
										status : Integer;
									colarray : Pointer );

		procedure	vqin_mode( handle, dev_type : Integer;
								var input_mode : Integer );

		procedure	vqt_fontinfo( handle : Integer;
									var minADE, maxADE : Integer;
									var distances : ARRAY_5;
									var maxwidth : Integer;
									var effects : ARRAY_3 );

		procedure	vqt_justified( handle, x, y : Integer;
									outString : String;
									length, word_space,
										char_space : Integer;
									offsets : Pointer );

		procedure	vq_chcells( handle : Integer;
								var rows, columns : Integer );

		procedure	v_exit_cur( handle : Integer );

		procedure	v_enter_cur( handle : Integer );

		procedure	v_curup( handle : Integer );

		procedure	v_curdown( handle : Integer );

		procedure	v_curright( handle : Integer );

		procedure	v_curleft( handle : Integer );

		procedure	v_curhome( handle : Integer );

		procedure	v_eeos( handle : Integer );

		procedure	v_eeol( handle : Integer );

		procedure	v_curaddress( handle, row, column : Integer );

		procedure	v_curtext( handle : Integer; outString : String );

		procedure	v_rvon( handle : Integer );

		procedure	v_rvoff( handle : Integer );

		procedure	vq_curaddress( handle : Integer;
									var row, column : Integer );

		function	vq_tabstatus( handle : Integer ) : Integer;

		procedure	v_hardcopy( handle : Integer );

		procedure	v_dspcur( handle, x, y : Integer );

		procedure	v_rmcur( handle : Integer );

		procedure	v_form_adv( handle : Integer );

		procedure	v_output_window( handle : Integer; xyarray : ARRAY_4 );

		procedure	v_clear_disp_list( handle : Integer );

		procedure	v_bit_image( handle : Integer; filename : string;
									aspect, x_scale, y_scale,
										h_align, v_align : Integer;
									 xyarray : ARRAY_4 );

		procedure	vq_scan( handle : Integer;
								var g_slice, g_page, a_slice,
									a_page, div_fac : Integer );

		procedure	v_alpha_text( handle : Integer; outString : String );

		function	vs_palette( handle, palette : Integer ) : Integer;

		procedure	v_sound( handle, frequency, duration : Integer );

		function	vs_mute( handle, action : Integer ) : Integer;

		procedure	vt_resolution( handle, xres, yres : Integer;
									var xset, yset : Integer );

		procedure	vt_axis( handle, xres, yres : Integer;
								var xset, yset : Integer );

		procedure	vt_origin( handle, xorigin, yorigin : Integer );

		procedure	vq_tdimensions( handle : Integer;
									var xdimension, ydimension : Integer );

		procedure	vt_alignment( handle, dx, dy : Integer );

		procedure	vsp_film( handle, index, lightness : Integer );

		function	vqp_filmname( handle, index : Integer;
									var name : String ) : Integer;

		procedure	vsc_expose( handle, state : Integer );

		procedure	v_meta_extents( handle, min_x, min_y,
										max_x, max_y : Integer );

		procedure	v_write_meta( handle, num_intin : Integer;
									a_intin : Pointer;
									num_ptsin : Integer;
									a_ptsin : Pointer );

		procedure	vm_pagesize( handle, pgwidth, pgheight : Integer );

		procedure	vm_coords( handle, llx, lly, urx, ury : Integer );

		procedure	vm_filename( handle : Integer; filename : String );

		procedure	v_offset( handle, offset : Integer );

		procedure	v_fontinit( handle : Integer; var fh : FONT_HDR );

		procedure	v_escape2000( handle, times : Integer );

		function	v_bez_on( handle : Integer ) : Integer;

		procedure	v_bez_off( handle : Integer );

		procedure	v_set_app_buff( handle : Integer;
									address : Pointer;
									nparagraphs : Integer );

		procedure	v_bez( handle, count : Integer;
							xyarr, bezarr : Pointer;
            				var extent : ARRAY_4;
            				var totpts, totmoves : Integer );

		procedure	v_bez_fill( handle, count : Integer;
							xyarr, bezarr : Pointer;
            				var extent : ARRAY_4;
            				var totpts, totmoves : Integer );

		function	v_bez_qual( handle, prcnt : Integer;
								var actual : Integer ) : Integer;

		procedure	vqt_f_extent( handle : Integer; str : String;
									var extent : ARRAY_8 );

		procedure	v_ftext( handle, x, y : Integer; str : String );

		procedure	v_killoutline( handle : Integer;
									component : fsm_component_tPtr );

		procedure	v_getoutline( handle, ch : Integer;
									var component : fsm_component_tPtr );

		procedure	vst_scratch( handle, mode : Integer );

		procedure	vst_error( handle, mode : Integer;
									var errorvar : Integer );

		procedure	vqt_advance( handle, ch : Integer;
									var advx, advy, remx, remy : Integer );

		function	vst_arbpt( handle, point : Integer;
								var chwd, chht,
									cellwd, cellht : Integer ) : Integer;

		procedure	vqt_devinfo( handle, devnum : Integer;
									var devexits : Integer;
				                    var devstr : String );

		function	v_flushcache( handle : Integer ) : Integer;

		procedure	vqt_cachesize( handle, which_cache : Integer;
										var size : LongInt );

		procedure	vqt_get_tables( handle : Integer;
										var gascii, style : Pointer );

		function	v_loadcache( handle : Integer; filename : String;
									mode : Integer ) : Integer;

		function	v_savecache( handle : Integer;
									filename : String ) : Integer;

		function	vst_setsize( handle, point : Integer;
									var chwd, chht,
										cellwd, cellht : Integer ) : Integer;

		function	vst_skew( handle, skew : Integer ) : Integer;


(* =================================================================== *)

