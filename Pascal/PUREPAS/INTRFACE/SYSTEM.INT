unit	system;

interface

(* -------------------------------------------------------------------- *)
(*		variables														*)
(* -------------------------------------------------------------------- *)

type

	PDPtr = ^PD;
	PD = record
		p_lowtpa :		Pointer;
		p_hitpa :		Pointer;
		p_tbase :		Pointer;
		p_tlen :		LongInt;
		p_dbase :		Pointer;
		p_dlen :		LongInt;
		p_bbase :		Pointer;
		p_blen :		LongInt;
		p_dta :			Pointer;
		p_parent :		PDPtr;
		p_resrvd0 :		LongInt;
		p_env :			Pointer;
		p_stdfh :		Array[0..5] of Byte;
		p_resrvd1 :		Byte;
		p_curdrv :		Byte;
		p_resrvd2 :		Array[0..17] of LongInt;
		p_cmdlin :		string[128];
	end;


var

	AppFlag : Boolean;			{ Application or Accessory				}
	ExitCode  : Integer;		{ program result						}
	ExitProc  : Pointer;		{ at last installed halt procedure  	}
	TermProc  : Pointer;		{ routine to return to operating system	}
	ErrorAddr : Pointer;		{ address of a run time error			}
	HeapError : Pointer;		{ routine to handle out of memory		}

	InOutRes : Integer;			{ result of i/o-operations				}

	RandSeed : LongInt;			{ base for random number generator		}

	FileMode : Byte;			{ standard mode for opening files		}

	Test68881 : Byte;			{ test result for a math processor		}


	StackLimit : Pointer;		{ pointer to the stack limit			}

	Input  : Text;				{ standard input						}
	Output : Text;				{ standard output						}

	Save02Exception : Pointer;	{ exception vector: bus error			}
	Save03Exception : Pointer;	{ exception vector: address error		}
	Save04Exception : Pointer;	{ exception vector: illegal instruction }
	Save05Exception : Pointer;	{ exception vector: divison by zero		}
	Save06Exception : Pointer;	{ exception vector: chk/chk2 			}
	Save07Exception : Pointer;	{ exception vector: trapv				}
	Save08Exception : Pointer;	{ exception vector: privilege violation	}


	BasePage	: PDPtr;

	_ParamCount : Word;
	FpuCtrl    : Word;


(* -------------------------------------------------------------------- *)
(*		functions & procedures											*)
(* -------------------------------------------------------------------- *)

	procedure	Append( var f : Text );
	external;

	procedure	ChDir( s : string );
	external;

	function	Copy( s : string; index, count : Integer ) : string;
	external;

	procedure	Delete( s : string; index, count : Integer );
	external;

	procedure	Flush( var f : Text );
	external;

	procedure	GetDir( d : Byte; var s : string );
	external;

	procedure	Insert( source : string; var s : string; index : Integer );
	external;

	function	IOResult : Word;
	external;

	procedure	MkDir( s : string );
	external;

	procedure	Move( var Source, Dest; count : LongInt );
	external;

	procedure	Page( var t : Text );
	external;

	function	ParamStr( index : Word ) : string;
	external;

	function	Pos( substr : string; s : string ) : Byte;
	external;

	procedure	Randomize;
	external;

	procedure	RmDir( s : string );
	external;

	function	UpCase( ch : Char ) : Char;
	external;

	function	MaxAvail: LongInt;
	external;

	function	MemAvail: LongInt;
	external;

	{ ----------------------------------------------------- }
	{	functions & procedures to support convenient use	}
	{	of highspeed pascal and maxon pascal				}
	{ ----------------------------------------------------- }

	function	RunFromMemory : Boolean;
	external;

	procedure	ClrEol;
	external;

	procedure	ClrEos;
	external;

	procedure	ClrScr;
	external;

	procedure	Delay( ms : LongInt );
	external;

	procedure	DelLine;
	external;

	procedure	GotoXY( col, lin : Integer );
	external;

	procedure	InsLine;
	external;

	function	KeyPressed : Boolean;
	external;

	function	ReadKey : Char;
	external;

