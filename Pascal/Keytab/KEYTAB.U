########################################
# @(#) Dokmentation zu KEYTAB 06
# @(#) Thomas Much, 16.04.1998
########################################

!language german

!raw [tex] \documentstyle[11pt,german]{article}
!raw [stg] @subject "Dokumentation/Utilities"
!raw [stg] @options "+z"

!docinfo [title]   Zeichensatzumwandlung mit
!docinfo [program] KEYTAB
!docinfo [date]    Release 06 (16.04.1998)
!docinfo [author]  Thomas Much

!use_auto_toptocs    [html,stg]
!use_auto_subtocs    [html,stg]
!use_auto_subsubtocs [html,stg]
!use_about_udo       [html,stg]
!no_effects          [asc]

!html_merge_subnodes
!html_merge_subsubnodes

########################################

!begin_document
!maketitle
!tableofcontents

!node Was ist KEYTAB?
!index Systemerweiterung
!index Betriebssysteme

KEYTAB ist eine kleine Systemerweiterung, die Routinen zur Umwandlung gÑngiger
Zeichensatztabellen zur VerfÅgung stellt. Beim Im- und Export von Dateien
unterschiedlicher Betriebssysteme gibt es immer wieder Probleme bei der Umwandlung
von Zeichen, besonders bei der Erkennung von Umlauten. Mit wenig Aufwand kînnen
bestehende Applikationen an KEYTAB angepaût werden, die dann diverse
Zeichensatztabellen anbieten.

Bitte beachten sie auch ""Rechtliches"".

!node FÅr Anwender
!index Anwender
!index AUTO-Ordner
!index MagiC-START-Ordner
!index KEYTAB.PRG
!index AUTOEXEC.BAT

Die Installation von KEYTAB ist denkbar einfach: Kopieren Sie KEYTAB.PRG
in den AUTO-Ordner und booten Sie neu. Das war's! MagiC-Anwender sollten
noch daran denken, KEYTAB.PRG in die Datei AUTOEXEC.BAT (liegt ebenfalls
im AUTO-Ordner) einzutragen. Bei jedem Start zeigt KEYTAB nun mit einen
kurzen Text an, ob es installiert werden konnte. Das sollte eigentlich
immer der Fall sein --- nur wenn KEYTAB bereits im Speicher oder der
Cookie-Jar voll ist, gibt es eine negative Meldung.

NatÅrlich ist auch das Starten im MagiC-START-Ordner oder vom Desktop
mîglich, aber der beste Ort fÅr KEYTAB.PRG ist der AUTO-Ordner.

Als Anwender merkt man im gÅnstigsten Fall nichts weiter von KEYTAB,
da die Programme die KEYTAB-Routinen automatisch aufrufen kînnen und sollen.
Lediglich bei der Auswahl eines Zeichensatzfilters (z.B. beim Im- oder Export)
bestimmt der Anwender das Verhalten von KEYTAB (Texel ab Version 2.0
gehîrt beispielsweise dazu).


!node FÅr Programmierer

!subnode Der Cookie
!index Cookie
!index KEYT
!label KEYT

Die VerfÅgbarkeit von KEYTAB kann durch den Cookie 'KEYT' getestet werden.
Wenn dieser Cookie existiert und einen Wert ungleich Null hat, zeigt der Wert
auf folgende Struktur.

!index magic
!index size
!label magic
!label size
!label Magic
!label Size
Wenn das Feld magic den Wert 'KEYT' enthÑlt und size grîûer gleich 40
ist, kînnen die KEYTAB-Routinen bis ImportChar (inklusive) benutzt werden.
Wenn size grîûer gleich 48 ist, dÅrfen auch ExportString und ImportString
verwendet werden. Und wenn size grîûer gleich 64 ist, stehen auch die Routinen
GetExportShortName und GetImportShortName zur VerfÅgung.

(!B)Wichtig:(!b) Aufgrund eines Fehlers in der Schnittstellendefinition konnten C-Programmierer
bis KEYTAB Rel. 04 (inklusive) die Namen der Filter nicht abfragen. Um die neuen (auch aus
C benutzbaren) Routinen GetExportName und GetImportName aufrufen zu kînnen, muû Size
grîûer gleich 56 sein.

!subsubnode FÅr C-Programmierer
!index C

!index cdecl
!label cdecl
(!B)Wichtig:(!b) Seit KEYTAB Rel. 05 muû size grîûer gleich 56 sein, damit GetExportName
und GetImportName aufgerufen werden dÅrfen. (FÅr Experten: cdecl erwartet die RÅckgabe immer
in d0, bis KEYTAB Rel. 04 wurde der Zeiger auf die Namen aber in a0 zurÅckgegeben.)

!begin_verbatim

typedef struct
{
  long   magic;
  long   size;
  int    cdecl (*GetExportCount)  (void);
  long   resvd0;
  int    cdecl (*GetExportFilter) (int eid);
  char   cdecl (*ExportChar)      (int enr, char echr);
  int    cdecl (*GetImportCount)  (void);
  long   resvd1;
  int    cdecl (*GetImportFilter) (int iid);
  char   cdecl (*ImportChar)      (int inr, char ichr);
  void   cdecl (*ExportString)    (int enr, long elen, char *echrs);
  void   cdecl (*ImportString)    (int inr, long ilen, char *ichrs);
  char * cdecl (*GetExportName)      (int enr);
  char * cdecl (*GetImportName)      (int inr);
  char * cdecl (*GetExportShortName) (int enr);
  char * cdecl (*GetImportShortName) (int inr);
} KEYT;

!end_verbatim


!subsubnode FÅr Pascal-Programmierer
!index Pascal

Bei den Pascal-Routinen sind die Dummy-Parameter d1..d5 nîtig, in denen
beim Aufruf der Routinen einfach nil bzw. 0 Åbergeben wird.

Da Pascal cdecl nicht kennt, wurde bei den alten Routinen GetExportName
und GetImportName der Zeiger in a0 zurÅckgegeben, was eine Verwendung mit
C nahezu unmîglich gemacht hat. Die alten Routinen, die aus Pascal immer noch
korrekt aufgerufen werden kînnen, heiûen nun pasGetExportName und pasGetImportName.
Wer allerdings auch aus Pascal lieber die neuen Routinen verwenden mîchte, muû
Size auf einen Wert grîûer gleich 56 testen und kann dann GetExportName und
GetImportName aufrufen. Die longint-RÅckgabe dieser beiden Routinen muû dann
allerdings per Typecast in den Datentyp PChar() umgewandelt werden.


!index PKEYT
!index TKEYT
!index pasGetExportName
!label pasGetExportName
!index pasGetImportName
!label pasGetImportName
!begin_verbatim

type

  PKEYT = ^TKEYT;
  TKEYT = record
    Magic             : array [0..3] of char;
    Size              : longint;
    GetExportCount    : function: integer;
    pasGetExportName  : function(d1,d2: pointer; d3,d4,d5: longint;
                               enr: integer): PChar;
    GetExportFilter   : function(d1,d2: pointer; d3,d4,d5: longint;
                               eid: integer): integer;
    ExportChar        : function(d1,d2: pointer; d3,d4,d5: longint;
                               enr: integer; echr: char): char;
    GetImportCount    : function: integer;
    pasGetImportName  : function(d1,d2: pointer; d3,d4,d5: longint;
                               inr: integer): PChar;
    GetImportFilter   : function(d1,d2: pointer; d3,d4,d5: longint;
                               iid: integer): integer;
    ImportChar        : function(d1,d2: pointer; d3,d4,d5: longint;
                               inr: integer; ichr: char): char;
    ExportString      : procedure(d1,d2: pointer; d3,d4,d5: longint;
                                enr: integer; elen: longint;
                                echrs: PChar);
    ImportString      : procedure(d1,d2: pointer; d3,d4,d5: longint;
                                inr: integer; ilen: longint;
                                ichrs: PChar);
    GetExportName     : function(d1,d2: pointer; d3,d4,d5: longint;
                               enr: integer): longint;
    GetImportName     : function(d1,d2: pointer; d3,d4,d5: longint;
                               inr: integer): longint;
    GetExportShortName: function(d1,d2: pointer; d3,d4,d5: longint;
                               enr: integer): longint;
    GetImportShortName: function(d1,d2: pointer; d3,d4,d5: longint;
                               inr: integer): longint;
  end;

!end_verbatim


!subnode VerfÅgbare Filter abfragen
!index Filter

!index GetExportCount
!index GetImportCount
!label GetExportCount
!label GetImportCount
Zur Abfrage der verfÅgbaren Exportfilter ruft man zunÑchst GetExportCount
auf. Diese Routine liefert die Anzahl der vorhandenen Exporttabellen (0..n).
Die Wert von Null bis zu dieser Anzahl kînnen bei den Routinen GetExportName,
GetExportShortName und ExportChar verwendet werden.

!index GetExportName
!label GetExportName
!index GetImportName
!label GetImportName
!index GetExportShortName
!label GetExportShortName
!index GetImportShortName
!label GetImportShortName
!index Filtername
Mit GetExportName kann man die Namen der verfÅgbaren Filter (als nullterminierter
ASCII-Text) abfragen, z.B. um sie dem Benutzer in einem Popup anzuzeigen. enr wird
dabei die Filternummer (0..GetExportCount) Åbergeben. Die gelieferten Pointer sind
zur gesamten KEYTAB-Laufzeit gÅltig, man braucht die Namen also nicht umkopieren.
Die Zeichenketten von GetExportName sind maximal 37 Zeichen (plus 1 Zeichen fÅr das
Nullbyte) lang. Wenn man kÅrzere Namen benîtigt, steht ab KEYTAB Rel. 06 die Funktion
GetExportShortName zur VerfÅgung. Sie entspricht vom Aufruf her exakt GetExportName,
liefert aber maximal 13 Zeichen (plus 1 Zeichen fÅr das Nullbyte) zurÅck.

!index identische Abbildung
!index Atari-Zeichensatz
Filter Nr. Null ist immer die identische Abbildung, d.h. in diesem Fall
der Export im Atari-Zeichensatz.

Wenn man Zeichen nicht exportieren sondern importieren mîchte, muû man statt
dessen einfach die entsprechenden Import-Funktionen verwenden.


!subnode Generische Filter
!index generische Filter
!index Filter-ID
!index Filternummer

!index GetExportFilter
!label GetExportFilter
!index GetImportFilter
!label GetImportFilter
Wenn keine Mîglichkeit besteht, den Benutzer einen Filter auswÑhlen zu lassen,
muû das Programm automatisch einen generischen Filter ver!-wen!-den. Dazu Åbergibt
man der Funktion GetExportFilter die ID einer Filtergruppe (z.B. Mac-Filter,
PC-Filter) und erhÑlt als RÅckgabe eine Filternummer, die man fÅr GetExportName
und ExportChar verwenden kann. Folgende IDs stehen als generische Filter zur
VerfÅgung.

In C-Notation:

!index KEYTAB_ID_IDENTICAL
!index KEYTAB_ID_ANSI
!index KEYTAB_ID_MAC
!index KEYTAB_ID_PC
!begin_verbatim

#define KEYTAB_ID_IDENTICAL 0
#define KEYTAB_ID_ANSI      1
#define KEYTAB_ID_MAC       2
#define KEYTAB_ID_PC        3

!end_verbatim

In Pascal-Notation:

!begin_verbatim

const

  KEYTAB_ID_IDENTICAL = 0;
  KEYTAB_ID_ANSI      = 1;
  KEYTAB_ID_MAC       = 2;
  KEYTAB_ID_PC        = 3;

!end_verbatim

Auch hier gilt das oben geschriebene entsprechend fÅr die Import!-routinen.


!subnode Filtern von Zeichen
!index Filtern
!index Umwandlung

!index ExportChar
!index ImportChar
!label ExportChar
!label ImportChar
Nachdem man eine Filternummer bestimmt hat (entweder vom Benutzer ausgewÑhlt
oder durch einen generischen Filter), ruft man fÅr jedes umzuwandelnde Zeichen
die Routine ExportChar auf und Åbergibt ihr Filternummer und Zeichen. Als
RÅckgabe erhÑlt man das gewÅnschte Zeichen im Exportzeichensatz.

!index ExportString
!index ImportString
!label ExportString
!label ImportString
Seit KEYTAB Rel. 03 kînnen auch ganze Blîcke gefiltert werden. Dazu
wird ExportString mit der Filternummer, der BlocklÑnge in Zeichen (1..n) und
einem Pointer auf den Blockanfang aufgerufen.

FÅr den Import (und damit ImportChar sowie ImportString) gilt dieses natÅrlich
entsprechend.


!begin_appendix

!node Historie

!begin_description
!item [Release 06 (1998-04-16)]
!begin_itemize
!item neue Im- und Exporttabelle ""Windows Codepage 1252""
!item neue Routinen GetExportShortName und GetImportShortName
!item MaximallÑngen fÅr Filternamen dokumentiert
!end_itemize
!item [Release 05 (1998-01-13)]
!begin_itemize
!item Fehler im C-Interface behoben
!end_itemize
!item [Release 04 (1997-11-12)]
!begin_itemize
!item neue Im- und Exporttabelle ""MS-DOS Codepage 850""
!item Filternamen korrigiert (ISO, Codepage)
!item QL-Import korrigiert
!end_itemize
!item [Release 03 (1997-09-01)]
!begin_itemize
!item neue Filterroutinen ExportString und ImportString
!end_itemize
!item [Release 02 (1997-08-26)]
!begin_itemize
!item Sinclair-QL-Import
!item schnellere Umwandlungsroutinen
!end_itemize
!item [Release 01 (1997-08-24)]
!begin_itemize
!item erste îffentliche Version
!end_itemize
!end_description


!node Zeichensatztabellen

!subnode Importtabellen
!index Importtabellen

!begin_itemize
!item Atari
!item ISO Latin 1
!item Macintosh
!item MS-DOS Codepage 437
!item MS-DOS Codepage 850
!item Windows Codepage 1252
!item Sinclair QL
!end_itemize

!subnode Exporttabellen
!index Exporttabellen

!begin_itemize
!item Atari
!item ISO Latin 1
!item Macintosh
!item MS-DOS Codepage 437
!item MS-DOS Codepage 850
!item Windows Codepage 1252
!end_itemize


!node Kontakt
!index Adresse

!begin_verbatim

Thomas Much, Gerwigstraûe 46, D-76131 Karlsruhe, Germany

Fax:       +49 / (0)721 / 62 28 21

EMail:     Thomas Much @ KA2                 (MausNet)
           Thomas_Much@ka2.maus.de
           Thomas.Much@stud.uni-karlsruhe.de (Internet)

WWW:       http://www.uni-karlsruhe.de/~Thomas.Much/nbp.html
           http://thmuch.home.pages.de
!end_verbatim


!node Rechtliches
!index Rechtliches

KEYTAB ist mit allen zugehîrigen Dateien (!I)Freeware(!i) - dies wird
auch in Zukunft so bleiben. Er darf auch einzeln und auch mit kommerziellen
Programmen ohne Zahlung von LizenzgebÅhren weitergegeben werden!
Gegen einen Hinweis in der Distribution auf den Autor bzw. eine
Be!-nach!-rich!-ti!-gung an mich (s. ""Kontakt"") im Falle einer solchen Nutzung hÑtte ich
allerdings nichts einzuwenden.

Die Haftung fÅr SchÑden, die sich mittelbar oder unmittelbar aus der
Nutzung dieser Dokumentation und des KEYTAB-Paketes ergeben, ist
ausgeschlossen.

Alle Angaben ohne GewÑhr, énderungen vorbehalten.


!node Dank
!index Danke

Mein Dank geht an

!begin_itemize
!item Christoph Bartholme fÅr die Atari-, ANSI-, PC- und Mac-Zeichen!-satz!-tabel!-len aus Blinex,
!item Rainer Seitel fÅr die Korrekturen
!item Gerhard Stoll fÅr die Fehlermeldungen im C-Interface
!item Gerd Castan fÅrs Nerven (!grin) sowie
!item Dirk Hagedorn fÅr UDO6.
!end_itemize

!end_appendix

!end_document
