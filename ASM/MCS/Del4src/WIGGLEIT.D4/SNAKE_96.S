;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++ The Hooligan of M.C.S presents WIGGLE IT +++++++++++
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;Code : The Hooligan	|Je multipli les credits
;Designing : The Hooligan	|pour que mon nom y figure plus
;Idea : The Hooligan	|gniark,gniark
;Gfx : Zorglub

;Ceci est a reloger LE PLUS BAS POSSIBLE EN MEMOIRE
;(j'utilise les 256K place juste apres le programme)
;Pour l'execute en memoire sous dvpack il faut un 
;buffer texte de 80K et l'assembler en 200K.

;Les appels systems (superviseur/quit) sont suvit d'un ;SYS
;(cf. ci dessous), il suffit dont de rechercher 'SYS' pour
;les remplacers

;Dernier changement et ultime debuggage le 20/03/92
; THE HOOLIGAN OF MCS/FRENCH ALLIANCE



   
	MOVE.L	#0,-(SP)		;SYS
	MOVE.W	#$20,-(SP)	;SYS
	TRAP	#1		;SYS
	ADDQ.L	#6,SP		;SYS

	JSR	NO_PAL

	MOVE.L	#END+34+16*160,D0
	AND.W	#$FF00,D0
	ADD.W	#256,D0

	MOVE.L	#PHYS,A0
	MOVE.W	#8-1,D1
	
PHYSTAP	MOVE.L	D0,(A0)+
	MOVE.L	D0,A1
	
	ADD.L	#32000,D0
	DBRA	D1,PHYSTAP

	MOVE.L	PHYS+2*4,A0
	MOVE.W	#8000-1,D0
TSOIN:	MOVE.L	#0,(A0)+
	DBRA	D0,TSOIN
		
	MOVE.L	PHYS+2*4,D0
	JSR	SWAP
	MOVE.B	#0,$FFFFF8260.W

	JSR	SAVE_INT
	JSR	INIT_TRACK
	;MOVE.W	#$700,$FFFFFF8240.W

;************ REPLICANTS - ST AMIGOS PRESENTATION **************
	MOVE.L	#END+34+16*160,A0
	MOVE.L	PHYS+2*4,A1
	MOVE.W	#8000-16*40-1,D0
COP_REP:	MOVE.L	(A0)+,(A1)+
	DBRA	D0,COP_REP
	MOVEM.L	END+2,D0-D7
	MOVEM.L	D0-D7,EMPTY
	MOVE.B	#3,CL
STAM	CMPI.B	#1,CL
	BNE	STAM
	MOVE.B	#0,CL

WAIT_REP:	CMPI.B	#$39,$FFFFFC02.W		
	BNE	WAIT_REP
WAIT_STAM:CMPI.B	#$39+$80,$FFFFFFC02.W
	BNE	WAIT_STAM
	JSR	NO_PAL
;************ FIN REPLICANTS - ST AMIGOS PRESENTATION **************

	MOVE.L	PHYS+2*4,A1
	MOVE.W	#8000-1,D0
HJDVB	MOVE.L	#0,(A1)+
	DBRA	D0,HJDVB
	
;**************** MENU , OH YEAH! *****************	

MENU_MENU	JSR	NO_PAL
	MOVE.W	#0,LEVEL
	MOVE.B	#"3",SCORE_T+34
	MOVE.L	#0,SCORE
	MOVE.B	#0,SCORE+4
	MOVE.L	#0,INIT_SC
	MOVE.B	#0,INIT_SC+4
	MOVE.L	PHYS,D0
	JSR	SWAP
	JSR	CLS1
	
	MOVE.L	#MENU,A0
	MOVE.L	PHYS,A1
	MOVE.L	#RMEUP,A2
	
MENU_LP	MOVE.W	#40,D7
	CMP.B	#1,(A2)+
	BEQ	MENU_YO
	JSR	HOO1
	BRA	MENU_YA
MENU_YO:	JSR	RHOO1
MENU_YA:	ADD.L	#8*160,A1
	ADD.L	#40,A0
	CMP.L	#-1,(A0)
	BNE	MENU_LP
	
	MOVE.L	#END+2,A3
	MOVEQ	#0,D0
	MOVE.W	#7-1,D7
	
HOFEUDITX	MOVE.W	#16-1,D6
	MOVE.L	#EMPTY,A1
	MOVE.L	A3,A0

HOLEUPOOLX MOVE.W	(A0)+,D1
	JSR	STOP_IT
	MOVE.W	D5,(A1)+
	DBRA	D6,HOLEUPOOLX
	MOVE.W	#0,EMPTY
	ADD.W	#$111,D0
	MOVE.B	#3,CL
HONOT_ME2X CMPI.B	#1,CL
	BNE	HONOT_ME2X
	JSR	VSYNC
	JSR	VSYNC
	JSR	VSYNC
	DBRA	D7,HOFEUDITX

;TEST POUR LE MENU
MEN_SPACE:MOVE.B	MAG11,D0
	BTST	#7,D0
	BNE	FIN_MEN

MEN_T	CMPI.B	#$3C,$FFFFFFC02.W
	BNE	MEN_TT

	JSR	ERR_SQR

	MOVE.L	#HIGH_PRES,A0
	MOVE.L	PHYS,A1
	ADD.L	#12*160,A1
	MOVE.W	#40,D7
	JSR	RHOO1

	ADD.L	#12*4,A1
	MOVE.W	#10-1,D1
	MOVE.W	#16,D7

	MOVE.L	#HIGH_SCORES,A0

AFF_CS:	ADD.L	#16*160,A1
	JSR	HOO1
	JSR	VSYNC
	JSR	VSYNC
	JSR	VSYNC
	ADD.L	#16,A0
	DBRA	D1,AFF_CS

EUH	CMPI.B	#$39,$FFFFFC02.W
	BNE	EUH
HUE	CMPI.B	#$39+$80,$FFFFFC02.W
	BNE	HUE

	JSR	ERR_SQR
	
	BRA	MENU_MENU
	
MEN_TT:	CMPI.B	#$3D,$FFFFFFC02.W
	BNE	MEN_T3

	JSR	ERR_SQR
	MOVE.L	#PEUSS,A0
	MOVE.W	#40,D7
	MOVE.L	PHYS,A1
	ADD.L	#92*160,A1
	JSR	RHOO1
	
	MOVE.L	#TEST,A0
	JSR	GET_8
	
	JSR	ERR_SQR
	JSR	NO_PAL
			
	MOVE.L	#TEST,A0
	MOVE.L	#PASS,A1
	MOVE.W	#MAX_LEV/5-1,D7
	
MOLPASS:	MOVE.L	(A1),D2
	CMP.L	(A0),D2
	BNE	NEXT_PASS
	MOVE.L	4(A1),D2
	CMP.L	4(A0),D2
	BNE	NEXT_PASS

;BON PASSWORD
	SUB.L	#PASS,A1
	MOVE.L	A1,D1
	DIVU.W	#8,D1
	ADDQ	#1,D1
	MULU.W	#5,D1
	SUBQ	#1,D1
	MOVE.W	D1,LEVEL
	BRA	FIN_MEN

NEXT_PASS:LEA.L	8(A1),A1
	DBRA	D7,MOLPASS		
;MAUVAIS PASSWORD
	MOVE.L	PHYS,A1
	ADD.L	#96*160,A1
	MOVE.L	#TAF,A0
	MOVE.W	#40,D7
	JSR	HOO1
	
	JSR	SHOW_IT	
	MOVE.W	#50,D0
	JSR	PAUSE
	JSR	HIDE_IT	
	BRA	MENU_MENU
	
MEN_T3:	CMPI.B	#$3F,$FFFFFFFC02.W
	BNE	MEN_T4
	JSR	HIDE_IT
	JSR	CLS1

	MOVE.L	#HELP1,A0
	MOVE.L	PHYS,A1
	MOVE.L	#RHELP1,A2
	
HMENU_LP	MOVE.W	#40,D7
	CMP.B	#1,(A2)+
	BEQ	HMENU_YO
	JSR	HOO1
	BRA	HMENU_YA
HMENU_YO:	JSR	RHOO1
HMENU_YA:	ADD.L	#8*160,A1
	ADD.L	#40,A0
	CMP.L	#-1,(A0)
	BNE	HMENU_LP

	JSR	SHOW_IT

HPL1:	CMPI.B	#$39,$FFFFFFC02.W
	BNE	HPL1
	JSR	HIDE_IT
	JSR	CLS1

	MOVE.L	#HELP2,A0
	MOVE.L	PHYS,A1
	MOVE.L	#RHELP2,A2
	
HHMENU_LP	MOVE.W	#40,D7
	CMP.B	#1,(A2)+
	BEQ	HHMENU_YO
	JSR	HOO1
	BRA	HHMENU_YA
HHMENU_YO:JSR	RHOO1
HHMENU_YA:ADD.L	#8*160,A1
	ADD.L	#40,A0
	CMP.L	#-1,(A0)
	BNE	HHMENU_LP

	JSR	SHOW_IT

HPL2:	CMPI.B	#$39,$FFFFFFC02.W
	BNE	HPL2
	JSR	HIDE_IT

	BRA	MENU_MENU
	
MEN_T4:	BRA	MEN_SPACE
;FIN DES TESTS

TEST:	DC.B	"........"
PEUSS:	DC.B	"   CARE TO ENTER YOUR PASSWORD, DEAR?   "
TAF:	DC.B	"      HOW SAD, YOU HAD A QWERTY...      "

ERR_SQR:	MOVE.L	PHYS,A1
	MOVE.W	#25-1,D7
PLOL1	MOVE.W	#8*40-1,D1
PLOL2	MOVE.L	#0,(A1)+
	DBRA	D1,PLOL2
	JSR	VSYNC
	JSR	VSYNC
	JSR	VSYNC
	DBRA	D7,PLOL1	
	RTS

FIN_MEN	SUB.W	#1,LEVEL
	MOVE.L	#END+2,A3
	MOVE.W	#$666,D0	
	MOVE.W	#6-1,D7	
	
OHFEUDITX	MOVE.W	#16-1,D6
	MOVE.L	#EMPTY,A1
	MOVE.L	A3,A0
OHLEUPOOLX MOVE.W	(A0)+,D1
	JSR	STOP_IT
	MOVE.W	D5,(A1)+
	DBRA	D6,OHLEUPOOLX

	MOVE.W	#0,EMPTY
	SUB.W	#$111,D0
	MOVE.B	#3,CL

OHNOT_ME2X CMPI.B	#1,CL
	BNE	OHNOT_ME2X
	JSR	VSYNC
	JSR	VSYNC
	JSR	VSYNC
	DBRA	D7,OHFEUDITX

	JSR	NO_PAL


	BRA	GO_JONY
	
MENU:	DC.B	"      MANY CARROTS IN THE SAUCEPAN      "	
	DC.B	"           ALSO KNOWN AS M.C.S          "
	DC.B	"  WOULD LIKE TO INTRODUCE TO YOU A NEW  "
	DC.B	"  TYPE OF GAME, NEVER ACHIEVED BEFORE:  "
	DC.B	"               WIGGLE IT                "
	DC.B	"                                        "
	DC.B	"THIS GAME WILL CREATE A NEW FASHION THAT"
	DC.B	"         WILL LAST FOR YEARS...         "
	DC.B	"                                        "
	DC.B	"ALL CODING AND ORIGINAL IDEA:           "
	DC.B	"           THE HOOLIGAN OF MCS          "
	DC.B	"                                        "
	DC.B	"MAIN GRAPHICS:                          "
	DC.B	"             ZORGLUB OF MCS             "
	DC.B	"                                        "
	DC.B	"LEVEL DESIGNING:                        "
	DC.B	"      THE HOOLIGAN,MCS AND FRIENDS      "
	DC.B	"                                        "
	DC.B	"               F1 TO QUIT               "
	DC.B	"          F2 TO SEE HIGHSCORES          "
	DC.B	"          F3 TO ENTER PASSWORD          "
	DC.B	"DURING GAME, F4 RETURNS TO THE MAIN MENU"
	DC.B	"   F5 FOR HELP LOOKING ALIKE BULLSHIT   "
	DC.B	"         FIRE TO START THE GAME         "
	DC.B	"    THE HOOLIGAN OF MCS THE 29.10.91    "
	DC.L	-1

RMEUP:	DC.B	1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0
	EVEN

HELP1:
	DC.B	"               WIGGLE IT                "
	DC.B	"                                        "
	DC.B	"                                        "
	DC.B	" SO WOT?  TOO FUCKIN LAZY TO UNDERSTAND "
	DC.B	" HOW THIS BRILL GAME WORKS? RIGHT, READ "
	DC.B	" DIS AND YOU WILL BE ABLE TO ENTER YOUR "
	DC.B	"  NAME IN THE SO CALLED  HALL OF LAME   "
	DC.B	"                                        "
	DC.B	"                WARNING                 "
	DC.B	"                                        "
	DC.B	"YOU MAY FIND AT FIRST THAT THIS GAME IS "
	DC.B	" A BIT HARD TO CONTROL,BUT I THINK IT S "
	DC.B	" BETTER THIS WAY, COZ THIS GAME IS MUCH "
	DC.B	"    MORE ENJOYABLE ONCE YOU MASTER IT   "
	DC.B	"                                        "
	DC.B	"              HOW TO PLAY?              "
	DC.B	"                                        "
	DC.B	"PUT THE DELIRIOUS FOUR DISK IN THE DRIVE"
	DC.B	" SWITCH THE COMPUTER ON,GATHER YOUR WAY "
	DC.B	"TO THE CHIP SAYING  WIGGLE IT, PRESS THE"
	DC.B	"SPACE BAR,PRESS IT AGAIN TWICE,PLUG YOUR"
	DC.B	" JOYSTICK IN, PRESS FIRE AND AGAIN FIRE "
	DC.B	"AND THEN MOVE THE TRIGGER TO THE LEFT TO"
	DC.B	" GO LEFT,TO THE RIGHT TO GO RIGHT,UP TO "
	DC.B	"     GO UP AND DOWN TO GO DOWN.FEW.     "	
	DC.L	-1
	
RHELP1:	DC.B	1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
	EVEN

HELP2:
	DC.B	"        AND HOW DO I FUCKIN PLAY        "
	DC.B	"                                        "
	DC.B	"THAT S PISS EASY. YOU CONTROL A SNAKE,OR"
	DC.B	" WHATEVER YOU WANT IT TO BE, IN A KINDA "
	DC.B	"  FUCKIN LABIRYNTH, WHERE YOU HAVE TO   "
	DC.B	" COLLECT SOME GREAT BONUS.BUT THE SNAKE "
	DC.B	"  GROWS EACH TIME YOU EAT A BONUS, AND  "
	DC.B	"YOU DIE EACH TIME YOU RUN INTO A WALL OR"
	DC.B	"  EAT YOUR TAIL. YOU HAVE THREE LIVES   "
	DC.B	"                                        "
	DC.B	"               PASSWORDS                "
	DC.B	"                                        "
	DC.B	"YOU GET A PASSWORD EVERY FIVE LEVELS...."
	DC.B	"                                        "
	DC.B	"                SCORES                  "
	DC.B	"                                        "
	DC.B	"SOME LAMERS WILL SAY:HE GETS FIVE POINTS"
	DC.B	"EACH TIME HE GETS A BONUS.NOTHING TO SAY"
	DC.B	"BUT THATS NOT TRUE.IF YOU WERE ATTENTIVE"
	DC.B	" YOU WOULD HAVED NOTICED THAT SOMETIMES "
	DC.B	"YOU GET FIVE POINTS AND SOME OTHERS TEN."
	DC.B	" WOW.HOW DID I DO IT.WELL THE THING IS  "
	DC.B	"THAT THE VERY FIRST BLOCK YOU TAKE AFTER"
	DC.B	" HAVING TURNED GIVES TEN POINTS WHEREAS "
	DC.B	"THE OTHERS GIVE YOU FIVE. SILLY BUT TRUE"
	DC.L	-1

RHELP2:	DC.B	1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0
	EVEN	

		 
PASS:	DC.B	"MANTILLA"
	DC.B	"REINVEST"
	DC.B	"COLLOGUE"
	DC.B	"TINNITUS"
	DC.B	"OVERTASK"
	DC.B	"DIHEDRAL"
	DC.B	"   IF YOU THINK YOU ARE CLEVER COZ YOU FOUND"
	DC.B	" THOSE CODES IN MEMORY, LET ME TELL YOU YOU"
	DC.B	" ARE A LAMER. I DELIBERATLY LEFT THEM UNCRIPTED"
	DC.B	" COZ IT'S NOT MY PROBLEM IF YOU WANNA CHEAT"
	DC.B	" AND STAY A LAMER ALL YOUR LIFE. FUCK YOU,MY"
	DC.B	" FRIEND.    THE HOOLIGAN/MCS/FRENCH ALLIANCE"
	DC.B	" THE 20/03/92 (FRENCH NOTATION!)"
	EVEN

GO_JONY:
LET_P:	MOVE.W	#0,NO_CLICK
	ADD.W	#1,LEVEL
	
	JSR	NO_PAL
	JSR	TELL_HIM
	JSR	NO_PAL
	
	MOVE.L	SCORE,INIT_SC
	MOVE.L	SCORE+4,INIT_SC+4
	 
	MOVE.L	DISMAP,A0
	MOVE.W	#20*12-1,D0
	MOVEQ	#0,D1

SAVE_ME:	CMPI.B	#3,(A0,D1.W)
	BNE	SAVED
	MOVE.B	#2,(A0,D1.W)
SAVED:	ADDQ	#1,D1
	DBRA	D0,SAVE_ME	

	MOVE.L	#PHYS,A0
	MOVE.W	#8-1,D1
	
PHYSPAT	MOVE.L	(A0),A1
	MOVE.W	#8000-1,D2
PHYSFFO:	MOVE.L	#0,(A1)+
	DBRA	D2,PHYSFFO

	MOVE.L	(A0)+,D0
	JSR	CREATE_ONE
	
	DBRA	D1,PHYSPAT

	MOVE.L	#COOR,A0
	MOVE.W	#800-1,D0
ERASECOOR:MOVE.L	#-1,(A0)+
	DBRA	D0,ERASECOOR

	MOVE.W	#3,LONG
	MOVE.W	#3,VBL3
	MOVE.W	#0,TRY_IT

	MOVE.L	DISMAP,A0
	SUB.L	#32,A0
	MOVE.L	A0,A3
	MOVEQ	#0,D0
	MOVE.W	#7-1,D7
	

FEUDIT	MOVE.W	#16-1,D6
	MOVE.L	#EMPTY,A1
	MOVE.L	A3,A0
LEUPOOL	MOVE.W	(A0)+,D1
	AND.W	#$FF0,D1
	ADDQ	#7,D1
	JSR	STOP_IT
	MOVE.W	D5,(A1)+
	DBRA	D6,LEUPOOL
	ADD.W	#$111,D0
	MOVE.B	#3,CL
NOT_ME2	CMPI.B	#1,CL
	BNE	NOT_ME2
	JSR	VSYNC
	JSR	VSYNC
	JSR	VSYNC
	DBRA	D7,FEUDIT

	MOVE.W	#7-1,D7
FEUDIT2	MOVE.W	#16-1,D6
	MOVE.L	#EMPTY,A1
	MOVE.L	A3,A0
LEUPOOL2	MOVE.W	(A0),D1
	AND.W	#$FF0,D1
	ADD.W	D7,D1
	CMP.W	(A0)+,D1
	BHS	MATE
	MOVE.W	-2(A0),D1
MATE	MOVE.W	D1,(A1)+
	DBRA	D6,LEUPOOL2
	MOVE.B	#3,CL
NOT_ME1	CMPI.B	#1,CL
	BNE	NOT_ME1
	JSR	VSYNC
	JSR	VSYNC
	JSR	VSYNC
	DBRA	D7,FEUDIT2

	
	MOVE.L	#SCORE_T,A0	
	MOVE.L	#PHYS,A2
	MOVE.W	#40,D7

	REPT	8
	MOVE.L	(A2)+,A1
	ADD.L	#193*160,A1
	JSR	HOO1
	ENDR

	;MOVE.W	#$070,$FFFFFF8240.W
	MOVE.L	#VBL,$70.W

ERENCL	CMPI.B	#2,CL
	BNE.S	ERENCL1
	BRA	ERENCL2
ERENCL1:	CMPI.B	#4,CL
	BNE.S	ERENCL
	
GO_M_V	MOVE.B	#0,CL
	JSR	NO_PAL
	JSR	CLS1
	
	MOVE.L	#OVER,A0
	MOVE.L	PHYS,A1
	ADD.L	#96*160,A1
	MOVE.W	#40,D7
	JSR	HOO1
	JSR	SHOW_IT
	MOVE.W	#50,D0
	JSR	PAUSE
	JSR	HIDE_IT

	MOVE.L	#HIGH_SCORES+11,A0
	MOVEQ	#0,D0
	ADD.B	#"0",SCORE	
	ADD.B	#"0",SCORE+1	
	ADD.B	#"0",SCORE+2
	ADD.B	#"0",SCORE+3
	ADD.B	#"0",SCORE+4

	MOVE.W	#10-1,D7
	MOVEQ	#0,D0

HAVE_HOO:	MOVE.B	(A0),D0
	CMP.B	SCORE,D0
	BLO	HAVE_CS
	BHI	NEXT_SC
	MOVE.B	1(A0),D0
	CMP.B	SCORE+1,D0
	BLO	HAVE_CS
	BHI	NEXT_SC
	MOVE.B	2(A0),D0
	CMP.B	SCORE+2,D0
	BLO	HAVE_CS
	BHI	NEXT_SC
	MOVE.B	3(A0),D0
	CMP.B	SCORE+3,D0
	BLO	HAVE_CS
	BHI	NEXT_SC
	MOVE.B	4(A0),D0
	CMP.B	SCORE+4,D0
	BLO	HAVE_CS
	BHI	NEXT_SC
;AKEU UN HIGH SCORE!
	
HAVE_CS	SUB.L	#11,A0
	MOVE.L	A0,A2
	MOVE.L	#END_SCORES-16,A0
	
ADD_N_TEU	CMP.L	A0,A2
	BHS	ADD_N_DEUX
	MOVE.L	-16(A0),(A0)
	MOVE.L	-16+4(A0),4(A0)
	MOVE.L	-16+8(A0),8(A0)
	MOVE.L	-16+12(A0),12(A0)
	SUB.L	#16,A0
	BRA	ADD_N_TEU

ADD_N_DEUX: MOVE.L	A2,A0 
	MOVE.B	SCORE,11(A0)
	MOVE.B	SCORE+1,12(A0)
	MOVE.B	SCORE+2,13(A0)
	MOVE.B	SCORE+3,14(A0)
	MOVE.B	SCORE+4,15(A0)

	JSR	CLS1
	MOVEM.L	END+2,D0-D7
	MOVEM.L	D0-D7,$FFFFFF8240.W
	MOVE.L	#BAH,A0
	MOVE.L	PHYS,A1
	ADD.L	#92*160,A1
	MOVE.W	#40,D7
	JSR	RHOO1
	
	MOVE.L	A2,A0
	JSR	GET_8	;STORE DS A0
	MOVE.W	#25,D0
	JSR	PAUSE
	BRA	MENU_MENU
		
NEXT_SC:	ADD.L	#16,A0
	DBRA	D7,HAVE_HOO

	BRA	MENU_MENU

ERENCL2	MOVE.B	#0,CL
	BRA	LET_P

OVER:	DC.B	"               GAME OVER                "
BAH:	DC.B	"OH BOY, A HIGHSCORE...WHAT IS YOUR NAME?"

HIGH_SCORES:
	DC.B	"HOOLIGAN : 10000"
	DC.B	"DREAMER  : 05000"
	DC.B	" MAGNUM  : 03000"
	DC.B	"ZORGLUB  : 01995"
	DC.B	"SHREIDER : 01500"
	DC.B	"  P.F    : 01000"
	DC.B	"GALAHAD  : 00700"
	DC.B	" GADGET  : 00515"
	DC.B	" AXEL.F  : 00200"
	DC.B	"GROUPMFY : 00195"
END_SCORES:

HIGH_PRES:
	DC.B	"  YOU HAVE ENTERED THE HALL OF LAME...  "

GET_8:	MOVEM.L	D0-D7/A0-A5,-(SP)
	
	MOVE.L	A0,A2
	MOVE.L	PHYS,A1
	ADD.L	#100*160+64,A1
	MOVE.L	#"????",(A0)
	MOVE.L	#"????",4(A0)

	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D2
	MOVE.W	#8,D7
	MOVEQ	#0,D6

JIYLP:	JSR	HOO1
	JSR	VSYNC
	
	MOVEQ	#0,D0

WAKEU:	MOVE.B	$FFFFFFFC02.W,D0
	CMPI.B	#$39,D0
	BLS.S	WAKEUNAN
	MOVEQ	#0,D2
	BRA.S	WAKEU
WAKEUNAN: CMP.B	D0,D2
	BEQ.S	WAKEU
			
	MOVE.L	#SCANCODE,A4
	CMP.B	#"?",(A4,D0.W)
	BEQ	WAKEU
	MOVE.B	(A4,D0.W),(A2)

	ADD.L	#1,A2
	ADDQ	#1,D1
	MOVE.B	D0,D2
	
	CMP.W	#8,D1
	BLO	JIYLP
	
	JSR	RHOO1
	JSR	VSYNC

	MOVEM.L	(SP)+,D0-D7/A0-A5
	RTS

SCANCODE:	DC.B	"????????????????AZERTYUIOP???" ;$1C
	DC.B	"?QSDFGHJKLM????WXCVBN?????"	;$36
	DC.B	"??."	;$39 (AH?)
	EVEN
	
FINISHED:
	ADDQ.L	#4,SP
	JSR	BACK_INT
	MOVE.B	#$A,$FFFFF8800.W
	MOVE.B	#$0,$FFFFF8802.W
	MOVE.B	#$9,$FFFFF8800.W
	MOVE.B	#$0,$FFFFF8802.W
	MOVE.B	#$8,$FFFFF8800.W
	MOVE.B	#$0,$FFFFF8802.W
	MOVE.W    #$777,$FF8240
	MOVE.W    #$000,$FF8246

	CLR.W	-(SP)	;SYS
	TRAP	#1	;SYS

EMPTY:	DCB.W	16,0
;D0 = COULEUR
;D1 = A NE PAS DEPASSER
;D5 = RESULTAT
STOP_IT:
	MOVE.W	D1,D3
	MOVE.W	D0,D2
	AND.W	#$F,D3
	AND.W	#$F,D2
	CMP.W	D2,D3
	BHS	KO1
	MOVE.W	D3,D2
KO1:
	MOVE.W	D0,D4
	AND.W	#$F0,D4
	MOVE.W	D1,D3
	AND.W	#$F0,D3
	CMP.W	D4,D3
	BHS	KO2
	MOVE.W	D3,D4	
KO2:	

	MOVE.W	D0,D5
	AND.W	#$F00,D5
	MOVE.W	D1,D3
	AND.W	#$F00,D3
	CMP.W	D5,D3
	BHS	KO3
	MOVE.W	D3,D5
	
KO3:	
	ADD.W	D2,D4
	ADD.W	D4,D5
	RTS
	

TELL_HIM:
	JSR	CLS1

	MOVE.W	LEVEL,D1
	MULU.W	#20*12+2+8+4+4+16*2+4*2*2+40,D1
	ADD.L	#MAP1,D1
	MOVE.L	D1,A0
	ADD.L	#34,A0
	MOVE.L	PHYS,A1
	ADD.L	#96*160,A1
	MOVE.W	#40,D7
	JSR	HOO1

;UN MOT DE PASSE TOUT LES 5 LEVELS!	
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVE.W	LEVEL,D1
	ADDQ	#1,D1
	MOVE.W	D1,D0
	DIVU.W	#5,D1
	MULU.W	#5,D1
	CMP.W	D0,D1
	BNE	NO_PASS

	DIVU.W	#5,D1
	SUBQ	#1,D1
	MULU.W	#8,D1
	ADD.L	#PASS,D1
	MOVE.L	D1,A0
	ADD.L	#16*160+64,A1
	MOVE.W	#8,D7
	JSR	RHOO1
	JSR	VSYNC
			
NO_PASS:	JSR	SHOW_IT
	JSR	WAIT_FIRE
	JSR	HIDE_IT

	RTS

WAIT_FIRE:
	MOVE.L	D0,-(SP)

NAH:	MOVE.B	MAG11,D0
	BCLR	#7,D0
	BEQ	NAH
	MOVE.L	(SP)+,D0
	RTS
	
SHOW_IT:
	MOVE.L	#END+2,A3
	MOVEQ	#0,D0
	MOVE.W	#7-1,D7
	
HOFEUDIT	MOVE.W	#16-1,D6
	MOVE.L	#EMPTY,A1
	MOVE.L	A3,A0

HOLEUPOOL	MOVE.W	(A0)+,D1
	JSR	STOP_IT
	MOVE.W	D5,(A1)+
	DBRA	D6,HOLEUPOOL
	MOVE.W	#0,EMPTY
	ADD.W	#$111,D0
	MOVE.B	#3,CL
HONOT_ME2	CMPI.B	#1,CL
	BNE	HONOT_ME2
	JSR	VSYNC
	JSR	VSYNC
	JSR	VSYNC
	DBRA	D7,HOFEUDIT
	RTS
	
HIDE_IT:	MOVE.L	#END+2,A3
	MOVE.W	#$666,D0	*
	MOVE.W	#6-1,D7	*
	
OHFEUDIT	MOVE.W	#16-1,D6
	MOVE.L	#EMPTY,A1
	MOVE.L	A3,A0
OHLEUPOOL	MOVE.W	(A0)+,D1
	JSR	STOP_IT
	MOVE.W	D5,(A1)+
	DBRA	D6,OHLEUPOOL

	MOVE.W	#0,EMPTY
	SUB.W	#$111,D0
	MOVE.B	#3,CL

OHNOT_ME2	CMPI.B	#1,CL
	BNE	OHNOT_ME2
	JSR	VSYNC
	JSR	VSYNC
	JSR	VSYNC
	DBRA	D7,OHFEUDIT

	JSR	NO_PAL
	RTS

PRES_VBL:
	MOVEM.L	D0-D7/A0-A5,-(SP)

	move.l	sdtvar,a5		;lit le buffer
	move.l	(a5),a6		;a jouer cette vbl!
	CLR.B	$FFFFFA1B.W

	CMP.B	#3,CL
	BNE	LEAVE_MA
	MOVEM.L	EMPTY,D1-D6/A4-A5
	MOVEM.L	D1-D6/A4-A5,$FFFFFFF8240.W
	MOVE.B	#0,CL
LEAVE_MA
	moveq	#1,d0		; d0 = 1 <=> jouer
	jsr	player		; prepare zik pour cette vbl

	MOVEM.L	(SP)+,D0-D7/A0-A5

	MOVE.B	#1,CL
	CMPI.B	#$3B,$FFFFFC02.W
	BEQ	FINISHED
	RTE



VSYNC:	TST.B	CL
	BEQ.S	VSYNC
	MOVE.B	#0,CL
	RTS

CLS1:	MOVEM.L	A0/D0,-(SP)
	MOVE.L	PHYS,A0
	MOVE.W	#8000-1,D0
CLS_LP:	MOVE.L	#0,(A0)+
	DBRA	D0,CLS_LP
	MOVEM.L	(SP)+,A0/D0
	RTS

CLS2:	MOVEM.L	A0/D0,-(SP)
	MOVE.L	PHYS,A0
	LEA.L	32000(A0),A0
	MOVE.W	#8000-1,D0
CLS_LP2:	MOVE.L	#0,(A0)+
	DBRA	D0,CLS_LP2
	MOVEM.L	(SP)+,A0/D0
	RTS

NO_PAL:	MOVEM.L	A0/D0,-(SP)
	MOVE.L	#$FFFFFF8240,A0
	MOVE.W	#8-1,D0
NOP_LP:	MOVE.L	#0,(A0)+
	DBRA	D0,NOP_LP
	MOVEM.L	(SP)+,A0/D0
	RTS	

PAUSE:	JSR	VSYNC
	DBRA	D0,PAUSE
	RTS

SWAP:	LSR.L	#8,D0
	MOVE.B	D0,$FFFFF8203.W
	LSR.W	#8,D0
	MOVE.B	D0,$FFFFF8201.W
	RTS

SCORE_SWAP:
	MOVE.L	#$4000500,$FFFF8240+1*2
	MOVE.L	#$6000700,$FFFF8240+3*2
	MOVE.L	#$7200F30,$FFFF8240+5*2
	MOVE.L	#$7400004,$FFFF8240+7*2
	MOVE.L	#$50006,$FFFF8240+9*2
	MOVE.L	#$70027,$FFFF8240+11*2
	MOVE.L	#$3F0047,$FFFF8240+13*2
	RTE
		
SCORE_T:	DC.B	"     SCORE:                 LIFE:       "
VBL:
	move.l	sdtvar,a5		;lit le buffer
	move.l	(a5),a6		;a jouer cette vbl!
	
	MOVE.B	#0,$FFFFFA1B.W
	MOVE.B	#200-8,$FFFFFFA21.W
	MOVE.B	#8,$FFFFFFA1B.W
	MOVE.L	#SCORE_SWAP,$120.W

	MOVEM.L	DISMAP,A0
	SUB.L	#32,A0
	MOVEM.L	(A0),D0-D7
	MOVEM.L	D0-D7,$FFFFFF8240.W

	;MOVE.W	#$777,$FFFFFFF8240.W
	moveq	#1,d0		; d0 = 1 <=> jouer
	jsr	player		; prepare zik pour cette vbl


	;MOVE.W	#$007,$FFFFFFF8240.W
	JSR	READ_COOR
	JSR	PLOT_IT
	;MOVE.W	#$000,$FFFFFFF8240.W

	MOVE.L	#SCORE_T+12,A0	
	MOVEQ	#0,D0

	MOVE.B	SCORE,D0
	ADD.B	#"0",D0
	MOVE.B	D0,(A0)

	MOVE.B	SCORE+1,D0
	ADD.B	#"0",D0
	MOVE.B	D0,1(A0)

	MOVE.B	SCORE+2,D0
	ADD.B	#"0",D0
	MOVE.B	D0,2(A0)

	MOVE.B	SCORE+3,D0
	ADD.B	#"0",D0
	MOVE.B	D0,3(A0)

	MOVE.B	SCORE+4,D0
	ADD.B	#"0",D0
	MOVE.B	D0,4(A0)
	
	MOVE.L	PHYS,A1
	ADD.L	#(200-7)*160+12*4,A1
	MOVE.W	#6,D7	
	JSR	RHOO1
	
	MOVE.L	#SCORE_T+34,A0
	MOVE.L	PHYS,A1
	ADD.L	#(200-7)*160+34*4,A1
	MOVE.W	#2,D7
	JSR	RHOO1

	CMP.L	#VBL,$70
	BNE	NOBUDGE	
	MOVE.L	#PHYS,A0
	MOVE.L	PHYS,D0
	MOVE.W	#7-1,D1
BUDGE:	MOVE.L	4(A0),(A0)+
	DBRA	D1,BUDGE	
	MOVE.L	D0,(A0)
	MOVE.L	PHYS+7*4,D0
	JSR	SWAP

	MOVE.L	#C1,A0
	MOVE.L	C1,D0
	MOVE.W	#7-1,D1
BUDGE2:	MOVE.L	4(A0),(A0)+
	DBRA	D1,BUDGE2
	MOVE.L	D0,(A0)

	MOVE.L	CD1,A0		;CHAINE MAX = 100 RAMIFCATIONS...
	ADD.L	#100*4,A0

	MOVEM.L	-10*4(A0),D3-D7/A1-A4	;9 MOTS LONG
	MOVEM.L	D3-D7/A1-A4,-9*4(A0)

	MOVEM.L	-20*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-19*4(A0)

	MOVEM.L	-30*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-29*4(A0)

	MOVEM.L	-40*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-39*4(A0)

	MOVEM.L	-50*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-49*4(A0)

	MOVEM.L	-60*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-59*4(A0)

	MOVEM.L	-70*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-69*4(A0)

	MOVEM.L	-80*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-79*4(A0)

	MOVEM.L	-90*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-89*4(A0)

	MOVEM.L	-100*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-99*4(A0)

	MOVE.L	#CD1,A0
	MOVE.L	CD1,D0
	MOVE.W	#7-1,D1
BUDGE3:	MOVE.L	4(A0),(A0)+
	DBRA	D1,BUDGE3
	MOVE.L	D0,(A0)

NOBUDGE:	
	MOVE.B	#1,CL
	CMPI.B	#$3B,$FFFFFC02.W
	BEQ	FINISHED
	CMPI.B	#$3E,$FFFFFC02.W
	BEQ	MENU_BACK
	;MOVE.W	#$0,$FFFFFFF8240.W
	RTE
MENU_BACK:
	JSR	NO_PAL
	MOVE.L	PHYS,D0
	JSR	SWAP
	CLR.B	$FFFFFA1B.W
	MOVE.L	#PRES_VBL,$70.W
	MOVE.B	#4,CL
	RTE
	
;*********** AFFICHE, EFFACE, SWAP... ************
PLOT_IT:

;EFFACE LA QUEU
	MOVE.W	LONG,D7
	MOVE.L	C1,A0
	MULU.W	#4,D7
	ADD.W	D7,A0
	MOVE.W	(A0),D0	;D0=XPOS
	MOVE.W	2(A0),D1	;D1=YPOS

	CMP.W	#-1,D0
	BEQ	FG

	MOVE.L	PHYS,A0
	MOVE.L	CD1,A1
	ADD.W	D7,A1
	MOVE.L	(A1),A1
	ADD.L	#4*2*8*16*(32/2),A1 ;CHANGE
	
	MULU.W	#160,D1
	MOVE.W	D0,D2
	AND.B	#$F0,D0
	LSR.W	#1,D0
	ADD.W	D0,D1
	ADD.L	D1,A0		;A0 = OU PLOTER
	
	AND.W	#$F,D2
	MULU.W	#8*(32/2),D2
	ADD.W	D2,A1		;A1 = MSK

	JSR	ALL_EFF
	
;RAFFICHE LE DERNIER SPRITE
	MOVE.W	LONG,D7
	SUB.W	#1,D7
	MOVE.L	C1,A0
	MULU.W	#4,D7
	ADD.W	D7,A0
	MOVE.W	(A0),D0	;D0=XPOS
	MOVE.W	2(A0),D1	;D1=YPOS

	MOVE.L	PHYS,A0
	MOVE.L	CD1,A1
	ADD.L	D7,A1
	MOVE.L	(A1),A1
	ADD.L	#4*2*8*16*(32/2)-8*16*(32/2),A1 ;CHANGE
	;SUB.L	#8*16*(32/2),A1	;CHANGE
	
	MULU.W	#160,D1
	MOVE.W	D0,D2
	AND.B	#$F0,D0
	LSR.W	#1,D0
	ADD.W	D0,D1
	ADD.L	D1,A0		;A0 = OU PLOTER
	
	AND.W	#$F,D2
	MULU.W	#8*(32/2),D2
	ADD.W	D2,A1		;A1 = SPRITE
	LEA.L	8*(32/2)*16(A1),A2	;A2 = MASK

	JSR	ALL_AFF
FG:
;EFFACE LA TETE
	MOVE.L	C1,A0
	MOVE.W	4(A0),D0	;D0=XPOS
	MOVE.W	6(A0),D1	;D1=YPOS

	CMP.W	#-1,D0
	BEQ	FG2

	MOVE.L	PHYS,A0
	MOVE.L	CD1,A1
	MOVE.L	4(A1),A1
	
	MULU.W	#160,D1
	MOVE.W	D0,D2
	AND.B	#$F0,D0
	LSR.W	#1,D0
	ADD.W	D0,D1
	ADD.L	D1,A0		;A0 = OU PLOTER
	
	AND.W	#$F,D2
	MULU.W	#8*(32/2),D2
	ADD.W	D2,A1		;A1 = MSK

	JSR	ALL_EFF

FG2:
;AFFICHE LA TETE
	MOVE.W	X_POS,D0
	MOVE.W	Y_POS,D1
	MOVE.L	CD1,A0

	CMP.W	#0,X_SPEED
	BEQ	UP_OR_DOWN_H

	CMP.W	#2,X_SPEED
	BEQ	DROITE_H
	MOVE.L	#HEAD_G,A1
	MOVE.L	#HEAD_G+8*(32/2)*16,(A0)
	BRA	DONE_FOR_H

DROITE_H:	MOVE.L	#HEAD_D,A1
	MOVE.L	#HEAD_D+8*(32/2)*16,(A0)
	BRA	DONE_FOR_H

UP_OR_DOWN_H:
	CMP.W	#2,Y_SPEED
	BEQ	DOWN_H
	MOVE.L	#HEAD_H,A1
	MOVE.L	#HEAD_H+8*(32/2)*16,(A0)
	BRA	DONE_FOR_H

DOWN_H:	MOVE.L	#HEAD_B,A1
	MOVE.L	#HEAD_B+8*(32/2)*16,(A0)
	

DONE_FOR_H	
	MOVE.L	PHYS,A0
	MULU.W	#160,D1
	MOVE.W	D0,D2
	AND.B	#$F0,D0
	LSR.W	#1,D0
	ADD.W	D0,D1
	ADD.L	D1,A0		;A0 = OU PLOTER
	
	AND.W	#$F,D2
	MULU.W	#8*(32/2),D2
	ADD.W	D2,A1		;A1 = SPRITE
	LEA.L	8*(32/2)*16(A1),A2	;A2 = MASK

	JSR	ALL_AFF

;AFFICHE LA 1ER RAMIFICATION
	MOVE.L	C1,A0
	MOVE.W	4(A0),D0	;D0=XPOS
	MOVE.W	6(A0),D1	;D1=YPOS

	CMP.W	#-1,D0
	BEQ	NO_RAM_NO_END

	MOVE.L	PHYS,A0
	MOVE.L	CD1,A1
	MOVE.L	4(A1),A1
	ADD.L	#4*2*8*16*(32/2)-8*16*(32/2),A1 ;CHANGE
	;SUB.L	#8*16*(32/2),A1	;CHANGE

	
	MULU.W	#160,D1
	MOVE.W	D0,D2
	AND.B	#$F0,D0
	LSR.W	#1,D0
	ADD.W	D0,D1
	ADD.L	D1,A0		;A0 = OU PLOTER
	
	AND.W	#$F,D2
	MULU.W	#8*(32/2),D2
	ADD.W	D2,A1		;A1 = SPRITE
	LEA.L	8*(32/2)*16(A1),A2	;A2 = MASK

	JSR	ALL_AFF

;RE-AFFICHE LA 2EM RAMIFICATION (BECOZ OF OVERLAPPING)
	MOVE.L	C1,A0
	MOVE.W	8(A0),D0	;D0=XPOS
	MOVE.W	10(A0),D1	;D1=YPOS

	CMP.W	#-1,D0
	BEQ	NO_RAM_NO_END

	MOVE.L	PHYS,A0

	MOVE.L	CD1,A1
	MOVE.L	8(A1),A1
	ADD.L	#4*2*8*16*(32/2)-8*16*(32/2),A1 ;CHANGE
	;SUB.L	#8*16*(32/2),A1	;CHANGE
	
	MULU.W	#160,D1
	MOVE.W	D0,D2
	AND.B	#$F0,D0
	LSR.W	#1,D0
	ADD.W	D0,D1
	ADD.L	D1,A0		;A0 = OU PLOTER
	
	AND.W	#$F,D2
	MULU.W	#8*(32/2),D2
	ADD.W	D2,A1		;A1 = SPRITE
	LEA.L	8*(32/2)*16(A1),A2	;A2 = MASK

	JSR	ALL_AFF

NO_RAM_NO_END:
;AFFICHAGE DES DEUX PREMIER TRANSPORTEUR
	CMP.W	#-1,X_T1
	BEQ	NO_TRANSYO

	MOVE.W	X_T1,D0
	MOVE.W	Y_T1,D1

	MOVE.L	PHYS,A0
	MOVE.L	#BBC+16*160,A1
	
	MULU.W	#160,D1
	MOVE.W	D0,D2
	AND.B	#$F0,D0
	LSR.W	#1,D0
	ADD.W	D0,D1
	ADD.L	D1,A0		;A0 = OU PLOTER
	
	AND.W	#$F,D2
	MULU.W	#16*(32/2),D2
	ADD.W	D2,A1		;A1 = SPRITE
	LEA.L	8(A1),A2		;A2 = MASK

NOD	SET	0

	REPT	16
	MOVEM.L	160*NOD(A2),D0-D1
	AND.L	D0,160*(NOD)(A0)
	AND.L	D1,160*(NOD)+4(A0)

	MOVEM.L	160*NOD(A1),D0-D1
	
	OR.L	D0,160*(NOD)(A0)
	OR.L	D1,160*(NOD)+4(A0)

NOD	SET	NOD+1
	ENDR

	MOVE.W	X_T2,D0
	MOVE.W	Y_T2,D1

	MOVE.L	PHYS,A0
	MOVE.L	#BBC+16*160,A1
	
	MULU.W	#160,D1
	MOVE.W	D0,D2
	AND.B	#$F0,D0
	LSR.W	#1,D0
	ADD.W	D0,D1
	ADD.L	D1,A0		;A0 = OU PLOTER
	
	AND.W	#$F,D2
	MULU.W	#16*(32/2),D2
	ADD.W	D2,A1		;A1 = SPRITE
	LEA.L	8(A1),A2		;A2 = MASK

NOD	SET	0

	REPT	16
	MOVEM.L	160*NOD(A2),D0-D1
	AND.L	D0,160*(NOD)(A0)
	AND.L	D1,160*(NOD)+4(A0)

	MOVEM.L	160*NOD(A1),D0-D1
	
	OR.L	D0,160*(NOD)(A0)
	OR.L	D1,160*(NOD)+4(A0)

NOD	SET	NOD+1
	ENDR


NO_TRANSYO:
;AFFICHAGE DES DEUX DERNIER TRANSPORTEUR
	CMP.W	#-1,X_T3
	BEQ	NO_TRANSYA

	MOVE.W	X_T3,D0
	MOVE.W	Y_T3,D1

	MOVE.L	PHYS,A0
	MOVE.L	#BBC+16*160,A1
	
	MULU.W	#160,D1
	MOVE.W	D0,D2
	AND.B	#$F0,D0
	LSR.W	#1,D0
	ADD.W	D0,D1
	ADD.L	D1,A0		;A0 = OU PLOTER
	
	AND.W	#$F,D2
	MULU.W	#16*(32/2),D2
	ADD.W	D2,A1		;A1 = SPRITE
	LEA.L	8(A1),A2		;A2 = MASK

NOD	SET	0

	REPT	16
	MOVEM.L	160*NOD(A2),D0-D1
	AND.L	D0,160*(NOD)(A0)
	AND.L	D1,160*(NOD)+4(A0)

	MOVEM.L	160*NOD(A1),D0-D1
	
	OR.L	D0,160*(NOD)(A0)
	OR.L	D1,160*(NOD)+4(A0)

NOD	SET	NOD+1
	ENDR

	MOVE.W	X_T4,D0
	MOVE.W	Y_T4,D1

	MOVE.L	PHYS,A0
	MOVE.L	#BBC+16*160,A1
	
	MULU.W	#160,D1
	MOVE.W	D0,D2
	AND.B	#$F0,D0
	LSR.W	#1,D0
	ADD.W	D0,D1
	ADD.L	D1,A0		;A0 = OU PLOTER
	
	AND.W	#$F,D2
	MULU.W	#16*(32/2),D2
	ADD.W	D2,A1		;A1 = SPRITE
	LEA.L	8(A1),A2		;A2 = MASK

NOD	SET	0

	REPT	16
	MOVEM.L	160*NOD(A2),D0-D1
	AND.L	D0,160*(NOD)(A0)
	AND.L	D1,160*(NOD)+4(A0)

	MOVEM.L	160*NOD(A1),D0-D1
	
	OR.L	D0,160*(NOD)(A0)
	OR.L	D1,160*(NOD)+4(A0)

NOD	SET	NOD+1
	ENDR


NO_TRANSYA:
	RTS

ALL_AFF:
NOD	SET	0

	REPT	8
	MOVEM.L	(A2)+,D0-D7
	AND.L	D0,160*(NOD)(A0)
	AND.L	D1,160*(NOD)+4(A0)
	AND.L	D2,160*(NOD)+8(A0)
	AND.L	D3,160*(NOD)+12(A0)

	AND.L	D4,160*(NOD+1)(A0)
	AND.L	D5,160*(NOD+1)+4(A0)
	AND.L	D6,160*(NOD+1)+8(A0)
	AND.L	D7,160*(NOD+1)+12(A0)

	MOVEM.L	(A1)+,D0-D7
	
	OR.L	D0,160*(NOD)(A0)
	OR.L	D1,160*(NOD)+4(A0)
	OR.L	D2,160*(NOD)+8(A0)
	OR.L	D3,160*(NOD)+12(A0)

	OR.L	D4,160*(NOD+1)(A0)
	OR.L	D5,160*(NOD+1)+4(A0)
	OR.L	D6,160*(NOD+1)+8(A0)
	OR.L	D7,160*(NOD+1)+12(A0)

NOD	SET	NOD+2
	ENDR
	RTS
	
ALL_EFF:
NOD	SET	0

	REPT	8
	MOVEM.L	(A1)+,D0-D7
	AND.L	D0,160*(NOD)(A0)
	AND.L	D1,160*(NOD)+4(A0)
	AND.L	D2,160*(NOD)+8(A0)
	AND.L	D3,160*(NOD)+12(A0)

	AND.L	D4,160*(NOD+1)(A0)
	AND.L	D5,160*(NOD+1)+4(A0)
	AND.L	D6,160*(NOD+1)+8(A0)
	AND.L	D7,160*(NOD+1)+12(A0)

NOD	SET	NOD+2
	ENDR
	RTS
	
TRY_IT:	DC.W	0
;*********** LIT LES COORDONES, LES TESTS, ECT... *************
READ_COOR:
	MOVEQ	#0,D7
	MOVE.B	MAG11,D7
	BCLR	#7,D7

	CMPI.B	#1,D7
	BEQ	OK_F_T
	CMPI.B	#2,D7
	BEQ	OK_F_T
	CMPI.B	#4,D7
	BEQ	OK_F_T
	CMPI.B	#8,D7
	BEQ	OK_F_T
	;CMPI.B	#9,D7
	;BEQ	OK_F_T
	;CMPI.B	#5,D7
	;BEQ	OK_F_T
	;CMPI.B	#$A,D7
	;BEQ	OK_F_T
	;CMPI.B	#6,D7
	;BEQ	OK_F_T

	BRA	EHU

OK_F_T	CMP.B	TRY_IT,D7
	BEQ	EHU
	MOVE.B	D7,TRY_IT

EHU:	CMPI.B	#15,TRY_IT+1
	BNE	NO_CLAR
	MOVE.B	#0,TRY_IT+1
	MOVE.B	D7,TRY_IT

NO_CLAR:	ADD.B	#1,TRY_IT+1
	MOVE.B	TRY_IT,D7

;********** TEST POUR LE HAUT *********	
	TST.W	X_SPEED
	BEQ	NOT_HAUT

	;CMPI.B	#9,D7
	;BEQ	OUF_H	
	;CMPI.B	#5,D7
	;BEQ	OUF_H

	CMPI.B	#1,D7		;HAUT
	BNE	NOT_HAUT

OUF_H	MOVE.W	X_POS,D0
	MOVE.W	D0,D1
	LSR.W	#4,D0
	LSL.W	#4,D0
	CMP.W	D0,D1
	BNE	NOT_HAUT	

	MOVE.L	DISMAP,A0
	MOVE.W	X_POS,D0
	LSR.W	#4,D0	;X/16
	MOVE.W	Y_POS,D1
	LSR.W	#4,D1	;Y/16
	SUBQ	#1,D1	;CAR VERS HAUT
	MULU.W	#20,D1
	ADD.W	D0,D1
	CMP.B	#1,(A0,D1.W)
	BEQ	NOT_HAUT

	MOVE.W	X_POS,D0
	ADD.W	#15,D0	;CAR VERS HAUT
	LSR.W	#4,D0	;X/16
	MOVE.W	Y_POS,D1
	LSR.W	#4,D1	;Y/16
	SUBQ	#1,D1	;CAR VERS HAUT
	MULU.W	#20,D1
	ADD.W	D0,D1
	CMP.B	#1,(A0,D1.W)
	BEQ	NOT_HAUT

	MOVE.W	#-2,Y_SPEED
	MOVE.W	#0,X_SPEED
	MOVE.W	#1,NO_CLICK
	BRA	NO_BUG_SVP
NOT_HAUT:
;********** TEST POUR LE BAS *********	
	TST.W	X_SPEED
	BEQ	NOT_BAS
	
	;CMPI.B	#$A,D7
	;BEQ	OUF_B	
	;CMPI.B	#6,D7
	;BEQ	OUF_B

	CMPI.B	#2,D7		;BAS
	BNE	NOT_BAS

OUF_B:	MOVE.W	X_POS,D0
	MOVE.W	D0,D1
	LSR.W	#4,D0
	LSL.W	#4,D0
	CMP.W	D0,D1
	BNE	NOT_BAS


	MOVE.L	DISMAP,A0
	MOVE.W	X_POS,D0
	LSR.W	#4,D0	;X/16
	MOVE.W	Y_POS,D1
	LSR.W	#4,D1	;Y/16
	ADDQ	#1,D1	;CAR VERS BAS
	MULU.W	#20,D1
	ADD.W	D0,D1
	CMP.B	#1,(A0,D1.W)
	BEQ	NOT_BAS

	MOVE.W	X_POS,D0
	ADD.W	#15,D0	;CAR VERS BAS
	LSR.W	#4,D0	;X/16
	MOVE.W	Y_POS,D1
	LSR.W	#4,D1	;Y/16
	ADDQ	#1,D1	;CAR VERS BAS
	MULU.W	#20,D1
	ADD.W	D0,D1
	CMP.B	#1,(A0,D1.W)
	BEQ	NOT_BAS

	
	MOVE.W	#2,Y_SPEED
	MOVE.W	#0,X_SPEED
	MOVE.W	#1,NO_CLICK
	BRA	NO_BUG_SVP
	
NOT_BAS:  
;********** TEST POUR LA GAUCHE *********	
	TST.W	Y_SPEED
	BEQ	NOT_GAUCHE

	;CMPI.B	#5,D7
	;BEQ	OUF_G
	;CMPI.B	#6,D7
	;BEQ	OUF_G

	CMPI.B	#4,D7		;GAUCHE
	BNE	NOT_GAUCHE

OUF_G:	MOVE.W	Y_POS,D0
	MOVE.W	D0,D1
	LSR.W	#4,D0
	LSL.W	#4,D0
	CMP.W	D0,D1
	BNE	NOT_GAUCHE


	MOVE.L	DISMAP,A0
	MOVE.W	X_POS,D0
	LSR.W	#4,D0	;X/16
	SUBQ	#1,D0	;CAR VERS GAUCHE
	MOVE.W	Y_POS,D1
	LSR.W	#4,D1	;Y/16
	MULU.W	#20,D1
	ADD.W	D0,D1
	CMP.B	#1,(A0,D1.W)
	BEQ	NOT_GAUCHE

	MOVE.W	X_POS,D0
	LSR.W	#4,D0	;X/16
	SUBQ	#1,D0	;CAR VERS GAUCHE
	MOVE.W	Y_POS,D1
	ADD.W	#15,D1	;CAR VERS GAUCHE
	LSR.W	#4,D1	;Y/16
	MULU.W	#20,D1
	ADD.W	D0,D1
	CMP.B	#1,(A0,D1.W)
	BEQ	NOT_GAUCHE


	MOVE.W	#-2,X_SPEED
	MOVE.W	#0,Y_SPEED
	MOVE.W	#1,NO_CLICK
	BRA	NO_BUG_SVP

NOT_GAUCHE: 

;********** TEST POUR LA DROITE *********	
	TST.W	Y_SPEED
	BEQ	NOT_DROITE

	;CMPI.B	#9,D7
	;BEQ	OUF_D
	;CMPI.B	#$A,D7
	;BEQ	OUF_D

	CMPI.B	#8,D7		;DROITE
	BNE	NOT_DROITE

OUF_D:	MOVE.W	Y_POS,D0
	MOVE.W	D0,D1
	LSR.W	#4,D0
	LSL.W	#4,D0
	CMP.W	D0,D1
	BNE	NOT_DROITE


	MOVE.L	DISMAP,A0
	MOVE.W	X_POS,D0
	LSR.W	#4,D0	;X/16
	ADDQ	#1,D0	;CAR VERS DROITE
	MOVE.W	Y_POS,D1
	LSR.W	#4,D1	;Y/16
	MULU.W	#20,D1
	ADD.W	D0,D1
	CMP.B	#1,(A0,D1.W)
	BEQ	NOT_DROITE

	MOVE.W	X_POS,D0
	LSR.W	#4,D0	;X/16
	ADDQ	#1,D0	;CAR VERS DROITE
	MOVE.W	Y_POS,D1
	ADD.W	#15,D1	;CAR VERS DROITE
	LSR.W	#4,D1	;Y/16
	MULU.W	#20,D1
	ADD.W	D0,D1
	CMP.B	#1,(A0,D1.W)
	BEQ	NOT_DROITE

	MOVE.W	#2,X_SPEED
	MOVE.W	#0,Y_SPEED
	MOVE.W	#1,NO_CLICK

NOT_DROITE:
NO_BUG_SVP:
	MOVE.W	X_POS,D0		;D0 = X_POS
	MOVE.W	Y_POS,D1		;D1 = Y_POS

	ADD.W	X_SPEED,D0
	ADD.W	Y_SPEED,D1
	
	MOVE.L	C1,A0		;COORDONE DU SERPENT
	ADD.L	#4,A0
	MOVE.W	LONG,D2		;D0 = LONGUEUR DU SERPENT
	SUBQ	#3,D2
	MOVE.W	D0,D3
	MOVE.W	D1,D4
		
HEADTST:	ADD.W	#16,D0
	CMP.W	(A0),D0		;TESTE SI ON NE SE 
	BLS	FEW		;MORD PAS LA KEU!
	SUB.W	#32,D0
	CMP.W	(A0),D0
	BHS	FEW
	
	ADD.W	#16,D1
	CMP.W	2(A0),D1
	BLS	FEW
	SUB.W	#32,D1
	CMP.W	2(A0),D1
	BHS	FEW
	
	JSR	CRASHED		;DEGAGE!
FEW:	LEA.L	4(A0),A0
	MOVE.W	D3,D0
	MOVE.W	D4,D1
	DBRA	D2,HEADTST

	MOVE.W	D0,D2
	LSR.W	#4,D2	;X/16
	MOVE.W	D1,D3
	LSR.W	#4,D3	;Y/16
	MOVE.W	D3,D4
	MULU.W	#20,D3
	MOVE.L	DISMAP,A0
	ADD.W	D2,D3

	CMP.B	#1,(A0,D3.W)
	BNE	FEW_AGAIN
	JSR	CRASHED
	

FEW_AGAIN:CMP.B	#2,(A0,D3.W)
	BNE	NO_MIAM
	ADD.W	#1,LONG
	MOVE.B	#3,(A0,D3.W)
	JSR	ERASE_BONUS
	MOVE.W	LONG,D7
	CMP.W	DISWIN,D7
	BNE	NO_MIAM
	JSR	WON_DIS
		
NO_MIAM:	MOVE.W	D0,D2
	ADD.W	#15,D2
	LSR.W	#4,D2	;X/16
	MOVE.W	D1,D3
	ADD.W	#15,D3
	LSR.W	#4,D3	;Y/16
	MOVE.W	D3,D4
	MULU.W	#20,D3
	MOVE.L	DISMAP,A0
	ADD.W	D2,D3

	CMP.B	#1,(A0,D3.W)
	BNE	SAY_FEW
	JSR	CRASHED
SAY_FEW:	CMP.B	#2,(A0,D3.W)
	BNE	SAY_MIAM
	ADD.W	#1,LONG
	MOVE.B	#3,(A0,D3.W)
	JSR	ERASE_BONUS
	MOVE.W	LONG,D7
	CMP.W	DISWIN,D7
	BNE	SAY_MIAM
	JSR	WON_DIS

SAY_MIAM: MOVE.W	D0,D2
	ADD.W	#15,D2
	LSR.W	#4,D2	;X/16
	MOVE.W	D1,D3
	LSR.W	#4,D3	;Y/16
	MOVE.W	D3,D4
	MULU.W	#20,D3
	MOVE.L	DISMAP,A0
	ADD.W	D2,D3

	CMP.B	#1,(A0,D3.W)
	BNE	FEW_AG
	JSR	CRASHED
FEW_AG: 	CMP.B	#2,(A0,D3.W)
	BNE	MIAM_AG
	ADD.W	#1,LONG
	MOVE.B	#3,(A0,D3.W)
	JSR	ERASE_BONUS
	MOVE.W	LONG,D7
	CMP.W	DISWIN,D7
	BNE	MIAM_AG
	JSR	WON_DIS

MIAM_AG:	MOVE.W	D0,D2
	LSR.W	#4,D2	;X/16
	MOVE.W	D1,D3
	ADD.W	#15,D3
	LSR.W	#4,D3	;Y/16
	MOVE.W	D3,D4
	MULU.W	#20,D3
	MOVE.L	DISMAP,A0
	ADD.W	D2,D3

	CMP.B	#1,(A0,D3.W)
	BNE	NOT_FEW
	JSR	CRASHED
NOT_FEW: 	CMP.B	#2,(A0,D3.W)
	BNE	NOT_MIAM
	ADD.W	#1,LONG
	MOVE.B	#3,(A0,D3.W)
	JSR	ERASE_BONUS
	MOVE.W	LONG,D7
	CMP.W	DISWIN,D7
	BNE	NOT_MIAM
	JSR	WON_DIS
 

NOT_MIAM:	CMP.W	X_T1,D0
	BNE	NO_TRANS1
	CMP.W	Y_T1,D1
	BNE	NO_TRANS1
	
	MOVE.W	X_T2,D0
	MOVE.W	Y_T2,D1
	BRA	NO_TRANS2

NO_TRANS1:CMP.W	X_T2,D0
	BNE	NO_TRANS2
	CMP.W	Y_T2,D1
	BNE	NO_TRANS2
	
	MOVE.W	X_T1,D0
	MOVE.W	Y_T1,D1

NO_TRANS2:
	CMP.W	X_T3,D0
	BNE	OP_TRANS1
	CMP.W	Y_T3,D1
	BNE	OP_TRANS1
	
	MOVE.W	X_T4,D0
	MOVE.W	Y_T4,D1
	BRA	OP_TRANS2

OP_TRANS1:CMP.W	X_T4,D0
	BNE	OP_TRANS2
	CMP.W	Y_T4,D1
	BNE	OP_TRANS2
	
	MOVE.W	X_T3,D0
	MOVE.W	Y_T3,D1

OP_TRANS2:	
	MOVE.L	C1,A0		;CHAINE MAX = 100 RAMIFCATIONS...
	ADD.L	#100*4,A0

	MOVEM.L	-10*4(A0),D3-D7/A1-A4	;9 MOTS LONG
	MOVEM.L	D3-D7/A1-A4,-9*4(A0)

	MOVEM.L	-20*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-19*4(A0)

	MOVEM.L	-30*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-29*4(A0)

	MOVEM.L	-40*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-39*4(A0)

	MOVEM.L	-50*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-49*4(A0)

	MOVEM.L	-60*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-59*4(A0)

	MOVEM.L	-70*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-69*4(A0)

	MOVEM.L	-80*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-79*4(A0)

	MOVEM.L	-90*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-89*4(A0)

	MOVEM.L	-100*4(A0),D3-D7/A1-A5	;10 MOTS LONG
	MOVEM.L	D3-D7/A1-A5,-99*4(A0)


	MOVE.L	C1,A0
	MOVE.W	D0,(A0)		;SV X
	MOVE.W	D0,X_POS	
	MOVE.W	D1,2(A0)		;SV Y
	MOVE.W	D1,Y_POS	
	
	RTS

;1 CLICK JOYSTICK + 1 PRIS   = 10 POINT
;1 PRIS SANS CLICK JOYSTICK  = 5 POINT
;1 LCIK JOYSTICK / RIEN PRIS = 0 POINT
SCORE:	DC.B	0,0,0,0,0	;SCORE
	DC.B	0	;AKEU PAIR!
INIT_SC:	DC.B	0,0,0,0,0	;SCORE A L'ARRIVEE AU LEVEL
	DC.B	0	;AKEU PAIR!
NO_CLICK:	DC.W	0

X_POS:	DC.W	16
Y_POS:	DC.W	16
X_SPEED:	DC.W	0
Y_SPEED:	DC.W	2
X_T1:	DC.W	-1
Y_T1:	DC.W	-1
X_T2:	DC.W	-1
Y_T2:	DC.W	-1
X_T3:	DC.W	-1
Y_T3:	DC.W	-1
X_T4:	DC.W	-1
Y_T4:	DC.W	-1

LONG:	DC.W	3 		;TAILLE DE LA CHENILLE

DISMAP:	DC.L	MAP1+26+32+40 	;LA CARTE
DISWIN:	DC.W	19+3		;LA CARTE

COOR:	DCB.L	800,-1
C1:	DC.L	COOR
C2:	DC.L	COOR+100*4	
C3:	DC.L	COOR+200*4	
C4:	DC.L	COOR+300*4	
C5:	DC.L	COOR+400*4	
C6:	DC.L	COOR+500*4	
C7:	DC.L	COOR+600*4	
C8:	DC.L	COOR+700*4	

DIR:	DCB.L	800,-1
CD1:	DC.L	DIR
CD2:	DC.L	DIR+100*4	
CD3:	DC.L	DIR+200*4	
CD4:	DC.L	DIR+300*4	
CD5:	DC.L	DIR+400*4	
CD6:	DC.L	DIR+500*4	
CD7:	DC.L	DIR+600*4	
CD8:	DC.L	DIR+700*4	

ERASE_BONUS:
	MOVEM.L	D0-D7/A0-A6,-(SP)
;TESTE AU PASSAGE LE SCORE...
;JE SAIS,C'EST PAS FAIT POUR, MAIS CA VAUT MIEUX (POUR MOA)
; KE DE RECOPIER LA ROUTINE BECOZ FAINEANT!

	TST.W	NO_CLICK
	BEQ	ONLY_5
	ADD.B	#1,SCORE+3
	MOVE.W	#0,NO_CLICK
	BRA	BEUARK

ONLY_5	ADD.B	#5,SCORE+4

BEUARK:	CMP.B	#9,SCORE+4
	BLS	BEUARK2

	SUB.B	#10,SCORE+4
	ADD.B	#1,SCORE+3
	
BEUARK2:	CMP.B	#9,SCORE+3
	BLS	BEUARK3
	
	SUB.B	#10,SCORE+3
	ADD.B	#1,SCORE+2


BEUARK3:	CMP.B	#9,SCORE+2
	BLS	BEUARK4
	
	SUB.B	#10,SCORE+2
	ADD.B	#1,SCORE+1

BEUARK4:	CMP.B	#9,SCORE+1
	BLS	BEUARK5
	
	SUB.B	#10,SCORE+1
	ADD.B	#1,SCORE
BEUARK5:

;VOILA, LA CONVERSION DECIMAL EST FAITE!

	MOVE.W	D2,D5	
	MULU.W	#8,D5	;X

	MOVE.W	D4,D2
	MULU.W	#16*160,D2
	ADD.W	D2,D5
	MOVE.L	#PHYS,A0
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVE.W	#8-1,D6

ERBL	
	MOVE.L	(A0)+,A1
	ADD.L	D5,A1
NOD	SET	0
	REPT	16
	MOVEM.L	D0-D1,160*NOD(A1)
NOD	SET	NOD+1
	ENDR
	DBRA	D6,ERBL
	
	MOVEM.L	(SP)+,D0-D7/A0-A6
	RTS

CRASHED:	MOVE.L	#CRASH_VBL,$70
	MOVE.W	#3,VBL3
	MOVE.W	#0,COUNTSVP
	RTS

WON_DIS:	MOVE.L	#WON_VBL,$70
	MOVE.W	#0,VBL3
	RTS
WON_VBL:
	move.l	sdtvar,a5		;lit le buffer
	move.l	(a5),a6		;a jouer cette vbl!

	MOVE.B	#0,$FFFFFA1B.W
	MOVE.B	#200-8,$FFFFFFA21.W
	MOVE.B	#8,$FFFFFFA1B.W
	MOVE.L	#SCORE_SWAP,$120.W

	MOVEM.L	DISMAP,A0
	SUB.L	#32,A0
	MOVEM.L	(A0),D0-D7
	MOVEM.L	D0-D7,$FFFFFF8240.W
	MOVEQ	#0,D7

	MOVE.L	PHYS,D0
	JSR	SWAP

	MOVE.L	PHYS,A0
	LEA.L	32000-160(A0),A1
	MOVE.W	VBL3,D7
	ADD.W	#160,VBL3
	ADD.L	D7,A0
	SUB.L	D7,A1
	
	MOVE.W	#40-1,D1
ERSLINE	MOVE.L	#0,(A0)+
	MOVE.L	#0,(A1)+
	DBRA	D1,ERSLINE

	CMP.W	#101*160,VBL3
	BNE	CHEYA
	MOVE.B	#2,CL
	MOVE.L	#PRES_VBL,$70.W

CHEYA	moveq	#1,d0		; d0 = 1 <=> jouer
	jsr	player		; prepare zik pour cette vbl

	CMPI.B	#39,$FFFFFFC02.W
	BEQ	FINISHED
	RTE

VBL3:	DC.W	3
COUNTSVP:	DC.W	0

CRASH_VBL:
	move.l	sdtvar,a5		;lit le buffer
	move.l	(a5),a6		;a jouer cette vbl!

	MOVE.B	#0,$FFFFFA1B.W
	MOVE.B	#200-8,$FFFFFFA21.W
	MOVE.B	#8,$FFFFFFA1B.W
	MOVE.L	#SCORE_SWAP,$120.W

	MOVEM.L	DISMAP,A0
	SUB.L	#32,A0
	MOVEM.L	(A0),D0-D7
	MOVEM.L	D0-D7,$FFFFFF8240.W

	
	MOVE.L	PHYS,D0
	JSR	SWAP

	SUB.W	#1,VBL3
	BNE	PWFM
	MOVE.W	#3,VBL3
	MOVE.L	C1,A0
	ADD.W	COUNTSVP,A0
	ADD.W	#4,COUNTSVP
	SUB.W	#1,LONG
	CMP.W	#-1,LONG
	BNE	STILL_KILL

DONE_MATE:
	JSR	NO_PAL
	CLR.B	$FFFFFA1B.W
	SUB.W	#1,LEVEL
	MOVE.L	#PRES_VBL,$70.W
	MOVE.B	#2,CL
	SUB.B	#1,SCORE_T+34
	CMP.B	#"0",SCORE_T+34
	BEQ	LIVING

	MOVE.L	INIT_SC,SCORE
	MOVE.B	INIT_SC+4,SCORE+4
	MOVE.B	#0,CL
	
LIVING:	ADD.B	#2,CL
	moveq	#1,d0		; d0 = 1 <=> jouer
	jsr	player		; prepare zik pour cette vbl
	RTE
		

STILL_KILL
	MOVE.W	(A0),D0	;D0=XPOS
	MOVE.W	2(A0),D1	;D1=YPOS

	CMP.W	#-1,D0
	BEQ	DONE_MATE

	MOVE.L	PHYS,A0
	MOVE.L	#DEAD,A1
	
	MULU.W	#160,D1
	MOVE.W	D0,D2
	AND.B	#$F0,D0
	LSR.W	#1,D0
	ADD.W	D0,D1
	ADD.L	D1,A0		;A0 = OU PLOTER
	
	AND.W	#$F,D2
	MULU.W	#8*(32/2),D2
	ADD.W	D2,A1		;A1 = SPRITE
	LEA.L	8*(32/2)*16(A1),A2	;A2 = MASK

	JSR	ALL_AFF

PWFM	CMPI.B	#$3B,$FFFFFFFC02.W
	BEQ	FINISHED

	moveq	#1,d0		; d0 = 1 <=> jouer
	jsr	player		; prepare zik pour cette vbl
	
	RTE
	
CREATE_ONE:
	MOVEM.L	D0-D7/A0-A5,-(SP)
	MOVE.W	LEVEL,D1
	MULU.W	#20*12+2+8+4+4+16*2+4*2*2+40,D1
	ADD.L	#MAP1,D1
	MOVE.L	D1,A0
	MOVE.W	(A0),DISWIN	;NBR POUR GAGNE
	MOVE.L	2(A0),BLOCK	;ADR BLOCK
	MOVE.L	6(A0),BONUS	;ADR BONUS
	MOVE.W	10(A0),X_POS	;X_POS AU DEBUT
	MOVE.W	12(A0),Y_POS	;Y_POS   '   '
	MOVE.W	14(A0),X_SPEED	;X_SPEED '   '
	MOVE.W	16(A0),Y_SPEED	;Y_SPEED '   '
	MOVE.W	18(A0),X_T1	;POS_X TRANSPORTEUR 1
	MOVE.W	20(A0),Y_T1	;POS_Y TRANSPORTEUR 1
	MOVE.W	22(A0),X_T2	;POS_X TRANSPORTEUR 2
	MOVE.W	24(A0),Y_T2	;POS_Y TRANSPORTEUR 2
	MOVE.W	26(A0),X_T3	;POS_X TRANSPORTEUR 3
	MOVE.W	28(A0),Y_T3	;POS_Y TRANSPORTEUR 3
	MOVE.W	30(A0),X_T4	;POS_X TRANSPORTEUR 4
	MOVE.W	32(A0),Y_T4	;POS_Y TRANSPORTEUR 4

	ADD.L	#34+32+40,D1
	MOVE.L	D1,DISMAP

	MOVE.L	D0,A0
	MOVE.L	DISMAP,A1
	MOVE.L	BLOCK,A2
	MOVE.L	BONUS,A3

	MOVE.W	#12-1,D1		;YLOOP
XLOOP:	MOVE.W	#20-1,D2		;XLOOP
YLOOP:	MOVEQ	#0,D0
	MOVE.B	(A1)+,D0

	CMP.B	#1,D0
	BNE	BONUSTT

NOD	SET	0
	REPT	16
	MOVE.L	160*NOD(A2),160*NOD(A0)
	MOVE.L	4+160*NOD(A2),4+160*NOD(A0)
NOD	SET	NOD+1
	ENDR

BONUSTT:	CMP.B	#2,D0
	BNE	NOBON

NOD	SET	0
	REPT	16
	MOVE.L	160*NOD(A3),160*NOD(A0)
	MOVE.L	4+160*NOD(A3),4+160*NOD(A0)
NOD	SET	NOD+1
	ENDR


NOBON:	LEA.L	8(A0),A0
	DBRA	D2,YLOOP
	LEA.L	15*160(A0),A0
	DBRA	D1,XLOOP

	MOVEM.L	(SP)+,D0-D7/A0-A5
	RTS

BLOCK:	DS.L	1
BONUS:	DS.L	1

;A0 : TEXTE	
;A1 : ADR OU ECRIRE
HOO1:	MOVEM.L	D0-D7/A0-A5,-(SP)
	MOVE.L	#END+34,A2	;FONTS
	LSR.W	#1,D7
	SUBQ	#1,D7
	
HOO8:	MOVEQ	#0,D0
	MOVE.B	(A0)+,D0

	CMP.B	#"0",D0
	BLO	HOO3
	CMP.B	#"9",D0
	BHI	HOO3
	SUB.B	#"0",D0
	ADD.B	#"Z"+1,D0
	
HOO3:	CMP.B	#",",D0
	BNE	HOO4
	MOVE.B	#"Z"+11,D0
	BRA	HOO7

HOO4:	CMP.B	#".",D0
	BNE	HOO5
	MOVE.B	#"Z"+12,D0
	BRA	HOO7

HOO5:	CMP.B	#":",D0
	BNE	HOO6
	MOVE.B	#"Z"+13,D0
	BRA	HOO7

HOO6:	CMP.B	#"?",D0
	BNE	HOO7
	MOVE.B	#"Z"+14,D0

HOO7:	SUB.B	#"A",D0

	CMP.B	#" "-"A",D0
	BEQ	HOO10


	MULU.W	#8,D0
	CMP.W	#160,D0
	BLO	HOO9
	ADD.W	#7*160,D0
HOO9:
	
	MOVEQ	#0,D1
NOD	SET	0
	REPT	7

	MOVE.B	0(A2,D0.W),0+NOD(A1)
	MOVE.B	2(A2,D0.W),2+NOD(A1)
	MOVE.B	4(A2,D0.W),4+NOD(A1)
	MOVE.B	6(A2,D0.W),6+NOD(A1)

	ADD.W	#160,D0
NOD	SET	NOD+160
	ENDR

HOO10:	MOVEQ	#0,D0
	MOVE.B	(A0)+,D0

	CMP.B	#"0",D0
	BLO	HOOX3
	CMP.B	#"9",D0
	BHI	HOOX3
	SUB.B	#"0",D0
	ADD.B	#"Z"+1,D0
	BRA	HOOX7
	
HOOX3:	CMP.B	#",",D0
	BNE	HOOX4
	MOVE.B	#"Z"+11,D0
	BRA	HOOX7

HOOX4:	CMP.B	#".",D0
	BNE	HOOX5
	MOVE.B	#"Z"+12,D0
	BRA	HOOX7

HOOX5:	CMP.B	#":",D0
	BNE	HOOX6
	MOVE.B	#"Z"+13,D0
	BRA	HOOX7

HOOX6:	CMP.B	#"?",D0
	BNE	HOOX7
	MOVE.B	#"Z"+14,D0

HOOX7:	SUB.B	#"A",D0
	CMP.B	#" "-"A",D0
	BEQ	HOOX10

	MULU.W	#8,D0
	CMP.W	#160,D0
	BLO	HOOX9
	ADD.W	#7*160,D0
HOOX9:
	
	MOVEQ	#0,D1
NOD	SET	0
	REPT	7

	MOVE.B	0(A2,D0.W),1+NOD(A1)
	MOVE.B	2(A2,D0.W),3+NOD(A1)
	MOVE.B	4(A2,D0.W),5+NOD(A1)
	MOVE.B	6(A2,D0.W),7+NOD(A1)

	ADD.W	#160,D0
NOD	SET	NOD+160
	ENDR

HOOX10:	LEA.L	8(A1),A1

	DBRA	D7,HOO8

	MOVEM.L	(SP)+,D0-D7/A0-A5
	RTS

;A0 : TEXTE	
;A1 : ADR OU ECRIRE
RHOO1:	MOVEM.L	D0-D7/A0-A5,-(SP)
	MOVE.L	#END+34,A2	;FONTS

	LSR.W	#1,D7
	SUBQ	#1,D7
	
RHOO8:	MOVEQ	#0,D0
	MOVE.B	(A0)+,D0

	CMP.B	#"0",D0
	BLO	RHOO3
	CMP.B	#"9",D0
	BHI	RHOO3
	SUB.B	#"0",D0
	ADD.B	#"Z"+1,D0
	
RHOO3:	CMP.B	#",",D0
	BNE	RHOO4
	MOVE.B	#"Z"+11,D0
	BRA	RHOO7

RHOO4:	CMP.B	#".",D0
	BNE	RHOO5
	MOVE.B	#"Z"+12,D0
	BRA	RHOO7

RHOO5:	CMP.B	#":",D0
	BNE	RHOO6
	MOVE.B	#"Z"+13,D0
	BRA	RHOO7

RHOO6:	CMP.B	#"?",D0
	BNE	RHOO7
	MOVE.B	#"Z"+14,D0

RHOO7:	SUB.B	#"A",D0

	CMP.B	#" "-"A",D0
	BEQ	RHOO10


	MULU.W	#8,D0
	CMP.W	#160,D0
	BLO	RHOO9
	ADD.W	#7*160,D0
RHOO9:
	
	MOVEQ	#0,D1
NOD	SET	0
	REPT	7

	MOVE.B	0(A2,D0.W),0+NOD(A1)
	MOVE.B	2(A2,D0.W),2+NOD(A1)
	MOVE.B	4(A2,D0.W),4+NOD(A1)
	MOVE.B	D1,6+NOD(A1)

	ADD.W	#160,D0
NOD	SET	NOD+160
	ENDR

RHOO10:	MOVEQ	#0,D0
	MOVE.B	(A0)+,D0

	CMP.B	#"0",D0
	BLO	RHOOX3
	CMP.B	#"9",D0
	BHI	RHOOX3
	SUB.B	#"0",D0
	ADD.B	#"Z"+1,D0
	BRA	RHOOX7
	
RHOOX3:	CMP.B	#",",D0
	BNE	RHOOX4
	MOVE.B	#"Z"+11,D0
	BRA	RHOOX7

RHOOX4:	CMP.B	#".",D0
	BNE	RHOOX5
	MOVE.B	#"Z"+12,D0
	BRA	RHOOX7

RHOOX5:	CMP.B	#":",D0
	BNE	RHOOX6
	MOVE.B	#"Z"+13,D0
	BRA	RHOOX7

RHOOX6:	CMP.B	#"?",D0
	BNE	RHOOX7
	MOVE.B	#"Z"+14,D0

RHOOX7:	SUB.B	#"A",D0
	CMP.B	#" "-"A",D0
	BEQ	RHOOX10

	MULU.W	#8,D0
	CMP.W	#160,D0
	BLO	RHOOX9
	ADD.W	#7*160,D0
RHOOX9:
	
	MOVEQ	#0,D1
NOD	SET	0
	REPT	7

	MOVE.B	0(A2,D0.W),1+NOD(A1)
	MOVE.B	2(A2,D0.W),3+NOD(A1)
	MOVE.B	4(A2,D0.W),5+NOD(A1)
	MOVE.B	D1,7+NOD(A1)

	ADD.W	#160,D0
NOD	SET	NOD+160
	ENDR

RHOOX10:	LEA.L	8(A1),A1

	DBRA	D7,RHOO8

	MOVEM.L	(SP)+,D0-D7/A0-A5
	RTS


	
SAVE_INT:
	MOVE.W	#$2700,SR
	MOVE.B	$FFFA07,SA07
	MOVE.B	$FFFA09,SA09
	MOVE.B	$FFFA13,SA13
	MOVE.B	$FFFA21,SA21
	MOVE.B	$FFFA1B,SA1B
	MOVE.B	$FFFA15,SA15
	MOVE.B	$FFFA17,SA17
	MOVE.B	#0,$FFFA07
	MOVE.B	#0,$FFFA09
	MOVE.L	$70,S70
	MOVE.L	$120,S120
	MOVE.L	$118,S118
	MOVE.L	#PRES_VBL,$70
	clr.b	$fffa1b		* timer B coupe
	;bset	#0,$fffa07
	;clr.b	$fffa13
	;clr.b	$fffa15
	;bset	#0,$fffa13
	;bclr	#3,$fffa17
	MOVE.B	#2,$FF820A
	;MOVE.L	#HBL,$120
	MOVE.B	#$40,$FFFFFA09.W
	MOVE.L	#JOYSTICK,$118.W		
	MOVE.B	#$14,$FFFFFFC02.W	
	RTS

JOYSTICK:	MOVE.W	#$2500,SR 
	MOVE.W	D2,-(A7) 
	
MAG08:	MOVE.B	$FFFFFC00.W,D2 
	BTST	#$7,D2 
	BEQ.S	FIN_JOY
	MOVE.B	$FFFFFC02.W,D2 
	TST.W	MAG02
	BNE.S	MAG03
	
	TST.W	MAG04
	BNE.S	MAG05
	
	CMPI.B	#$FF,D2
	BNE.S	MAG07
	ST	MAG02
	BRA.S	MAG08
	
MAG07:	MOVE.B	D2,MAG09
	BMI.S	MAG10
	BTST	#$4,$FFFFFA01.W
	BEQ.S	MAG08
	
FIN_JOY:	MOVE.W	(A7)+,D2
	RTE
	
MAG10:	CLR.W	MAG09
	BRA.S	FIN_JOY
	
MAG03:	MOVE.B	D2,MAG11
	CLR.W	MAG02
	BRA.S	MAG08
	
MAG05:	MOVE.B	D2,MAG12
	CLR.W	MAG04
	BRA.S	MAG08

MAG02:	DC.W	0
MAG04:	DC.W	0
MAG09:	DC.B	0
MAG11:	DC.B	0
MAG12:	DC.B	0
	EVEN


BACK_INT:
	MOVE.W	#$2700,SR
	MOVE.B	SA07,$FFFA07
	MOVE.B	SA09,$FFFA09
	MOVE.B	SA13,$FFFA13
	MOVE.B	SA21,$FFFA21
	MOVE.B	SA1B,$FFFA1B
	MOVE.B	SA15,$FFFA15
	MOVE.B	SA17,$FFFA17
	MOVE.L	S70,$70
	MOVE.L	S120,$120
	MOVE.L	S118,$118
	MOVE.L	S_134,$134
	MOVE.B	#$8,$FFFFFFC02.W	
	MOVE.W	#$2300,SR
	RTS

;INIT DE LA SOUNDTRACK
;ROUTINE DE CHECKSUM/EQX
INIT_TRACK:
	Move.l	$4F2,d0
	cmpi.l	#$FC0000,d0
	beq	STF
	move.w	#154,st_attente
	bra.s	suite_demarrage
STF	move.w	#153,st_attente
suite_demarrage

	lea	debmod,a1		;debut du module
	lea	FINMOD,a2		;fin module
	moveq	#0,d0
	jsr	player		;d0 = 0 <=> init
	move.l	a0,sdtvar		;buffer -> sdtvar
	move.l	(a0),a6		;a6 = mt_buffer1

	ori.b	#1,$fffffa07.w
	ori.b	#1,$fffffa13.w

	MOVE.W	#$2300,SR
	jsr	vsync
	RTS

actual_pat	ds.w	1


* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* sous programmes
* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

sdtvar		ds.l	1

player	
* -----------------------------------------------
* ------- Soundtracker V2.4 - playroutine -------
* -----------------------------------------------
* -------     Coded by D.O.C.(AMIGA)     --------
* ------- Improved by CHECKSUM for ATARI --------
* -----------------------------------------------

deb	lea	fnct(pc),a0
	lsl.w	#2,d0
	jmp	(a0,d0.w)
fnct	bra	mt_init
	bra	mt_music
	bra	mt_end

level1	ds.w	1
level2	ds.w	1
level3	ds.w	1
level4	ds.w	1

;call 'mt_init' to initialize the playroutine

mt_init
	lea	mt_data(pc),a0	
	movem.l	a1/a2,(a0)	;store la fin et le dbut du module
	move.l	#$43c,nbr1	;adr pattern 31 instr
	move.l	#$3b8,nbr2	;table des pats pour les 31 instr
	move.l	mt_data(pc),a0	;A0 = DEBUT MODULE
	cmp.l	#"M.K.",1080(a0)	;31 instr?
	beq.s	mt_new_version	;yo! = mt_new_version

	move.l	#$1d8,nbr2	;table pattern pour 16 instr
	move.l	#$258,nbr1	;adr des patterns 16 instr
mt_new_version
	add.l	nbr2(pc),a0	;A0 = pattern a jouer (128 o)
	moveq	#127,d0
	moveq	#0,d1
mt_init1
	move.l	d1,d2
	subq.w	#1,d0
mt_init2
	move.b	(a0)+,d1		;numero du prochain pattern
	cmp.b	d2,d1		
	bgt.s	mt_init1
	dbf	d0,mt_init2
	addq.b	#1,d2		;D2 = nbr de pattern

mt_init3
	move.l	mt_data(pc),a0	;A0 = debut module
	lea	mt_sample1(pc),a1	
	asl.l	#8,d2		;*256
	asl.l	#2,d2		;*4
	add.l	nbr1(pc),d2	
	add.l	a0,d2		;D2 = adr des samples
	moveq	#$1e,d0
mt_init4
	move.l	d2,(a1)+		;mt_sample1 = suite de mot
	moveq	#0,d1		;long des adrs des X samples
	move.w	42(a0),d1		; = longueur des samples
	asl.l	#1,d1		
	add.l	d1,d2		
	add.l	#$1e,a0		;prochaine longeur
	dbf	d0,mt_init4

	move.l	mt_sample1(pc),a0	;A0 = adr premier sample
	move.l	mt_datafin(pc),a1	;A1 = fin module
mt_init5
	move.b	(a0),d1		;octet de son
	eor.b	#128,d1		;de-signe
	tst.b	d1
	bne.s	mt_init6		;si d1 = 0,
	moveq	#1,d1		;d1 = 1 (???)
mt_init6
	move.b	d1,(a0)+		;et on sauve l'octet!
	cmp.l	a0,a1
	bne.s	mt_init5

	lea	mt_sample1(pc),a0	;A0 = adr des samples
	moveq	#30,d0
mt_init7
	add.l	#$8000,(a0)+	;ajoute 32768 a l'adr
	dbf	d0,mt_init7	;de chaque sample...
	clr.l	mt_partnrplay
	clr.l	mt_partnote
	clr.l	mt_partpoint
	move.l	mt_data(pc),a0	;debut module
	add.l	nbr2(pc),a0	;table des pattern
	move.b	-2(a0),mt_maxpart+1	;nbr de position
	move.b	#6,mt_cool+3
	
	;move.b	$fb0001,d7
	;moveq	#0,d0
	;move.l	#no_noise,d1
	;move.l	d0,d2
	;move.l	d1,d3
	;move.l	#mt_tabvolume,d4
	;movem.l	d0-d4,mt_datavoice1
	;movem.l	d0-d4,mt_datavoice2
	;movem.l	d0-d4,mt_datavoice3
	;movem.l	d0-d4,mt_datavoice4
	
	move.l	$134.W,S_134
	move.l	#out_monitor,$134.w		;interupt pour jouer
	lea	$ffff8800.w,a0
	moveq	#10,d0
mt_yamahaclear
	move.b	d0,(a0)			;clear ze 
	clr.b	2(a0)			;yamaha-ha
	dbra	d0,mt_yamahaclear		;et non pas
	clr.b	(a0)			;suzuki-hihi
	clr.b	2(a0)
	move.b	#7,(a0)
	move.b	#$ff,2(a0)

	bclr	#3,$fffa17
	bset	#5,$fffa07		;interupt prepare
	bset	#5,$fffa13
	move.b	#32,$fffa1f
	move.b	#02,$fffa19
	lea	buffer(pc),a0
	move.l	#mt_buffer1,(a0)		;buffer pour store zik
	rts

mt_end
	bclr	#5,$fffa07
	bclr	#5,$fffa13
	clr.b	$fffa19
	clr.b	$fffa1f
	bset	#3,$fffa17
	rts

mt_music
	bsr	calcul_buffer	;prepare le buffer
	addq	#1,mt_counter
mt_cool	cmp.w	#6,mt_counter
	bne.s	mt_notsix
	clr.w	mt_counter
	bra	mt_rout2		;toute 6 VBLs


mt_notsix
	lea	mt_aud1temp(pc),a4
	tst.b	3(a4)
	beq.s	mt_arp1
	lea	 mt_datavoice1(pc),a5
	bsr.s	mt_arprout
mt_arp1
	lea	mt_aud2temp(pc),a4
	tst.b	3(a4)
	beq.s	mt_arp2
	lea	 mt_datavoice2(pc),a5
	bsr.s	mt_arprout
mt_arp2
	lea	mt_aud3temp(pc),a4
	tst.b	3(a4)
	beq.s	mt_arp3
	lea	 mt_datavoice3(pc),a5
	bsr.s	mt_arprout
mt_arp3
	lea	mt_aud4temp(pc),a4
	tst.b	3(a4)
	beq.s	mt_arp4
	lea	 mt_datavoice4(pc),a5
	bra.s	mt_arprout
mt_arp4	rts

mt_arprout
	move.b	2(a4),d0
	and.b	#$f,d0
	tst.b	d0
	beq	mt_arpegrt
	cmp.b	#$01,d0
	beq.s	mt_portup
	cmp.b	#$02,d0
	beq.s	mt_portdwn
	cmp.b	#$0a,d0
	beq.s	mt_volslide
	rts

mt_portup
	moveq	#0,d0
	move.b	3(a4),d0
	sub.w	d0,22(a4)
	cmp.w	#$71,22(a4)
	bpl.s	mt_ok1
	move.w	#$71,22(a4)
mt_ok1
	moveq	#0,d0
	move.w	22(a4),d0
	asl.l	#2,d0
	lea	mt_frequences(pc),a0
	move.l	(a0,d0.l),(a5)
	rts
mt_portdwn
	moveq	#0,d0
	move.b	3(a4),d0
	add.w	d0,22(a4)
	cmp.w	#$358,22(a4)
	bmi.s	mt_ok1
	move.w	#$358,22(a4)
	bra.s	mt_ok1

mt_volslide
	moveq	#0,d0
	move.b	3(a4),d0
	lsr.b	#4,d0
	tst.b	d0
	beq.s	mt_voldwn
	add.w	d0,18(a4)
	cmp.w	#64,18(a4)
	bmi.s	mt_ok3
	move.w	#64,18(a4)
mt_ok3	moveq	#0,d0
	move.w	18(a4),d0
	lea	mt_tabvolume(pc),a0
	lsl.l	#8,d0
	add.l	d0,a0
	move.l	a0,16(a5)
	rts

mt_voldwn
	moveq	#0,d0
	move.b	3(a4),d0
	and.b	#$f,d0
	sub.w	d0,18(a4)
	bpl.s	mt_ok3
	clr.w	18(a4)
	bra.s	mt_ok3

mt_arpegrt
	move.w	mt_counter(pc),d0
	cmp.w	#1,d0
	beq.s	mt_loop2
	cmp.w	#2,d0
	beq.s	mt_loop3
	cmp.w	#3,d0
	beq.s	mt_loop4
	cmp.w	#4,d0
	beq.s	mt_loop2
	cmp.w	#5,d0
	beq.s	mt_loop3
	rts

mt_loop2
	moveq	#0,d0
	move.b	3(a4),d0
	lsr.b	#4,d0
	bra.s	mt_cont
mt_loop3
	moveq	#0,d0
	move.b	3(a4),d0
	and.b	#$f,d0
	bra.s	mt_cont
mt_loop4
	move.w	16(a4),d2
	bra.s	mt_endpart
mt_cont
	add.w	d0,d0
	moveq	#0,d1
	move.w	16(a4),d1
	and.w	#$fff,d1
	lea	mt_arpeggio(pc),a0
mt_loop5
	move.w	(a0,d0),d2
	cmp.w	(a0),d1
	beq.s	mt_endpart
	addq.l	#2,a0
	bra.s	mt_loop5
mt_endpart
	moveq	#0,d0
	move.w	d2,d0
	asl.l	#2,d0
	lea	mt_frequences(pc),a0
	move.l	(a0,d0.l),(a5)
	rts


mt_rout2
	move.l	mt_data(pc),a0	;A0 = debut module
	move.l	a0,a3	
	add.l	#$0c,a3		;A3 = offset pour instr com
	move.l	a0,a2
	add.l	nbr2(pc),a2	;A2 = table des patterns
	add.l	nbr1(pc),a0	;A0 = adr des patterns
	move.l	mt_partnrplay(pc),d0;D0 = position
	moveq	#0,d1
	move.b	(a2,d0.w),d1	;D1 = prochain pattern a joue
	move.w	d1,actual_pat
	asl.l	#8,d1		*256
	asl.l	#2,d1		*4
	add.l	mt_partnote(pc),d1	;D1 = d1 + pos
	move.l	d1,mt_partpoint

	lea	mt_datavoice1(pc),a5;data de la voie
	lea	mt_aud1temp(pc),a4	;data du morceau a joue
	move.w	level1,mt_var	
	bsr	mt_playit		;prepare les prochaines donnes
	move.w	mt_var,level1

	lea	mt_datavoice2(pc),a5
	lea	mt_aud2temp(pc),a4
	move.w	level2,mt_var
	bsr	mt_playit
	move.w	mt_var,level2

	lea	mt_datavoice3(pc),a5
	lea	mt_aud3temp(pc),a4
	move.w	level3,mt_var
	bsr	mt_playit
	move.w	mt_var,level3

	lea	mt_datavoice4(pc),a5
	lea	mt_aud4temp(pc),a4
	move.w	level4,mt_var
	bsr	mt_playit
	move.w	mt_var,level4

	lea	mt_aud4temp(pc),a4
	lea	mt_datavoice4(pc),a5
	cmp.w	#1,14(a4)		;longeur a repeter
	beq.s	no_repeat4	;1 <=> silence
	move.l	10(a4),12(a5)	;instr 2 = adr ou repete
	bra.s	mt_voice3
no_repeat4
	move.l	#no_noise+$8000,12(a5) ;instr2 = silence
mt_voice3
	lea	mt_aud3temp(pc),a4
	lea	mt_datavoice3(pc),a5
	cmp.w	#1,14(a4)
	beq.s	no_repeat3
	move.l	10(a4),12(a5)
	bra.s	mt_voice2
no_repeat3
	move.l	#no_noise+$8000,12(a5)
mt_voice2
	lea	mt_aud2temp(pc),a4
	lea	mt_datavoice2(pc),a5
	cmp.w	#1,14(a4)
	beq.s	no_repeat2
	move.l	10(a4),12(a5)
	bra.s	mt_voice1
no_repeat2
	move.l	#no_noise+$8000,12(a5)
mt_voice1
	lea	mt_aud1temp(pc),a4
	lea	mt_datavoice1(pc),a5
	cmp.w	#1,14(a4)
	beq.s	no_repeat1
	move.l	10(a4),12(a5)
	bra.s	mt_voice0
no_repeat1
	move.l	#no_noise+$8000,12(a5)
mt_voice0
	move.l	mt_partnote(pc),d0		;pos in pattern
	add.l	#$10,d0			;+deja joue
	move.l	d0,mt_partnote
	cmp.l	#$400,d0			;fin pattern?
	bne.s	mt_stop			;no!
mt_higher
	clr.l	mt_partnote		;yo! adr = debut
	addq.l	#1,mt_partnrplay		;+ nvo patern
	moveq	#0,d0
	move.w	mt_maxpart(pc),d0
	move.l	mt_partnrplay(pc),d1
	cmp.l	d0,d1
	bne.s	mt_stop
	clr.l	mt_partnrplay
mt_stop
	tst.w	mt_status			;mt_status negatif
	beq.s	mt_stop2			;<=> next pattern
	clr.w	mt_status
	bra.s	mt_higher
mt_stop2
	rts


mt_playit
	move.l	(a0,d1.l),(a4)	;(A4) = mot lg voie 1
	addq.l	#4,d1		
	moveq	#0,d2
	move.b	2(a4),d2		 
	and.b	#$f0,d2		
	lsr.b	#4,d2		;D2 = Nm de l'instr
	
	;move.b	(a4),d0		 
	;and.b	#$f0,d0		
	;or.b	d0,d2

	;tst.b	d2

	beq	mt_nosamplechange

;CHANGEMENT DE SAMPLE
	moveq	#0,d3
	lea	mt_samples(pc),a1	;adr des sons
	move.l	d2,d4		;D4 = D2 = Nvo instr
	asl.l	#2,d2		;D2 = D2 * 4
	mulu	#30,d4		
	move.l	(a1,d2.w),4(a4)	;4(A4) = adr Nvo instr
	move.w	(a3,d4.l),8(a4)	;8(A4) = lng Nvo instr
	move.w	2(a3,d4.l),18(a4)	;18(A4)= volume Nvo instr
	move.w	4(a3,d4.l),d3	;D3    = repeat

	tst.w	d3
	beq.s	mt_displace

;YA UN REPEAT
	move.l	4(a4),d2		;D2 = adr instr
	add.l	d3,d2		;D2 = adr ou repeater
	move.l	d2,10(a4)		;10(A4) = adr ou repeter
	moveq	#0,d6
	move.w	6(a3,d4.l),d6	;D6 = longeur du repeat
	move.l	d6,d5
	asl.l	#1,d5		;D5 = D6 * 2
	add.l	d3,d5		;D5 = D5 + D3
	asr.l	#1,d5		;D5 = D5 / 2
	sub.w	8(a4),d5		;D5 = ou repeat fini
	bmi.s	mt_out		;si repeat < lng => saut
	sub.w	d5,d6		;D6 = longeur instr-repeat
mt_out
	move.w	d6,08(a4)		;8(A4)  = lng ou  repeter
	move.w	6(a3,d4.l),14(a4)	;14(A4) = lng a repeter
	moveq	#0,d0
	move.w	18(a4),d0		;D0 = volume
	lsl.l	#8,d0		;*256
	add.l	#mt_tabvolume,d0	;D0 = adr
	move.l	d0,16(a5)		;store la table vol
	bra.s	mt_nosamplechange

mt_displace
;PAS DE REPEAT
	move.l	4(a4),d2
	move.l	d2,10(a4)		;adr ou repeter = debut
	move.w	6(a3,d4.l),14(a4)	;longeur a repeter
	moveq	#0,d0		
	move.w	18(a4),d0		;volume
	lsl.l	#8,d0		;*256
	add.l	#mt_tabvolume,d0	;=adr
	move.l	d0,16(a5)		;store la table vol

mt_nosamplechange
	move.w	(a4),d0		;d0 = ligne de comande
	;and.w	#$fff,d0		
	;tst.w	d0
	beq.s	mt_retrout	;si rien,hop!

	move.w	18(a4),mt_var	;mtvar  = volume
	move.w	(a4),16(a4)	;16(A4) = commande
	move.l	4(a4),4(a5)	;store l'instr
	move.l	#$80000000,8(a5)	;pos = 0 (j'espere...)
	moveq	#0,d0
	move.w	8(a4),d0		;D0 = lng a repete
	asl.l	#1,d0		;*2 (= octet)
	add.l	10(a4),d0		;+ adr a repete
lo	and.w	#$fffe,d0		;met d0 pair
	move.l	d0,a1		;A1 = fin du repeat
	sub.l	#$8000+4,a1	*efface dernier mot of repeat
	clr.l	(a1)		*
	moveq	#0,d0		;a la place du AND.L #$FFF
	move.w	(a4),d0		;D0 = note
	;and.l	#$fff,d0
	lsl.l	#2,d0		;D0 = D0 * 4
	lea	mt_frequences(pc),a1;A1 = table des frequences
	ADD.L	D0,A1		*A1 = frequence pour la note
	MOVE.L	(A1),(A5)		*store la vitesse
mt_retrout
	tst.w	(a4)		;note
	beq.s	mt_nonewper	;=0 -> mt_nonewper
	move.w	(a4),22(a4)	;22(A4) = note
mt_nonewper
	move.b	2(a4),d0	
	and.b	#$0f,d0		;D0 = No de commande
	cmp.b	#$0b,d0
	beq.s	mt_posjmp		;position jump
	cmp.b	#$0c,d0
	beq.s	mt_setvol		;set volume
	cmp.b	#$0d,d0
	beq.s	mt_break		;pattern break
	cmp.b	#$0f,d0
	beq.s	mt_setspeed	;set speed
	rts

;SAUT DE POSITON
mt_posjmp
	not.w	mt_status
	moveq	#0,d0
	add.b	3(a4),d0		;parametre de commande
	subq.b	#1,d0
	move.l	d0,mt_partnrplay
	rts

;CHANGE DE VOLUME
mt_setvol
	moveq	#0,d0	
	move.b	3(a4),d0		;parametre de comande
	cmp.w	#64,d0
	bmi.s	mt_ok4
	moveq	#64,d0
mt_ok4
	lsl.l	#8,d0
	add.l	#mt_tabvolume,d0
	move.l	d0,16(a5)
	rts

;BREAK DE PATTERN
mt_break
	not.w	mt_status
	rts

;SET SPEED
mt_setspeed
	move.b	3(a4),d0		;parametre de commande
	and.b	#$0f,d0
	beq.s	mt_back
	clr.w	mt_counter
	move.b	d0,mt_cool+3
mt_back	rts


;ROUTINE DE CALCULE DU BUFFER
;=> DS BUFFER: 1 MOT = VOIE 1 ET 2 / 1 MOT = VOIE 3 ET 4
calcul_buffer
	eor.w	#4,mt_flipbuffer
	move.w	mt_flipbuffer(pc),d0	;swap les
	lea	mt_buffer(pc),a0		;buffer
	add.w	d0,a0			;calcule/joue
	move.l	(a0),buffer

	
	lea	mt_datavoice1(pc),a4
	move.l	(a4)+,d2			;D2 = vit voie 1
	move.l	(a4)+,a0			;A0 = instr voie 1
	move.l	(a4),d0			;D0 = pos voie 1
	move.l	8(a4),a2			;A2 = mt_tabvolume

	lea	mt_datavoice2(pc),a4
	move.l	(a4)+,d3			;D3 = vit voie 2
	move.l	(a4)+,a1			;A1 = instr voie 2 
	move.l	(a4),d1			;D1 = pos voie 2
	move.l	8(a4),a3			;A3 = mt_tabvolume
	moveq	#0,d4
	;moveq	#0,d5
	move.l	buffer(pc),a4		;A4 = ou store
	move.l	#$8000,a5			;A5 = 32768
	move.w	st_attente,d6		
mt_precalc1
	moveq	#0,d5		;1 NOP(S)
	add.l	d2,d0		;2 / d0 = pos1 + speed1
	add.l	d3,d1		;2 / d1 = pos2 + speed2
	swap	d0		;1 / permet de ralentir
	swap	d1		;1 / la frequence!!!!!
	move.b	(a0,d0.w),d4	;3 / d4 = vol octet a joue 1
	beq.s	ini1		;3 
no_ini1	move.b	(a2,d4.w),d4	;3 
	move.b	(a1,d1.w),d5	;3 / d5 = vol octet a joue 2 
	beq.s	ini2		;3 
no_ini2	move.b	(a3,d5.w),d5	;3 
	add.w	d4,d5		;1 / d5 = vol voie 1+2
	move.w	d5,(a4)+		;2 / store d5
	swap	d0		;1
	swap	d1		;1
	dbra	d6,mt_precalc1	;3
	bra.s	yo1
ini1
	moveq	#$7f,d4		    ; fin d'instr * d4 = silence
	move.l	a5,d0		    ; d0 = debut pos 1
	move.l	mt_datavoice1+12(pc),a0 ;a0 = prochain instr
	bra.s	no_ini1
ini2
	moveq	#$7f,d5
	move.l	a5,d1
	move.l	mt_datavoice2+12(pc),a1	
	bra.s	no_ini2
yo1
	move.l	d0,mt_datavoice1+8		;sauve Nell pos1
	move.l	d1,mt_datavoice2+8		;sauve Nell pos2
	move.l	a0,mt_datavoice1+4		;sauve Nv instr1
	move.l	a1,mt_datavoice2+4		;sauve Nv instr2

;********* PAREIL POUR VOIE 3 ET 4 **********

	lea	mt_datavoice3(pc),a4
	move.l	(a4)+,d2
	move.l	(a4)+,a0
	move.l	(a4),d0
	move.l	8(a4),a2
	lea	mt_datavoice4(pc),a4
	move.l	(a4)+,d3
	move.l	(a4)+,a1
	move.l	(a4),d1
	move.l	8(a4),a3
	moveq	#0,d4
*	moveq	#0,d5
	move.l	buffer(pc),a4
	move.l	#$8000,a5
	move.w	st_attente,d6
mt_precalc2
	moveq	#0,d5
	add.l	d2,d0		;2 NOP(S)
	add.l	d3,d1		;2
	swap	d0		;1
	swap	d1		;1
	move.b	(a0,d0.w),d4	;3
	beq.s	ini3		;3
no_ini3	move.b	(a2,d4.w),d4	;3
	move.b	(a1,d1.w),d5	;3
	beq.s	ini4		;3
no_ini4	move.b	(a3,d5.w),d5
	add.w	d4,d5		;1
	add.w	d5,(a4)+		;2
	swap	d0		;1
	swap	d1		;1
	dbra	d6,mt_precalc2	;3
	bra.s	yo2

ini3
	moveq	#$7f,d4	
	move.l	a5,d0	
	move.l	mt_datavoice3+12(pc),a0
	bra.s	no_ini3
ini4
	moveq	#$7f,d5
	move.l	a5,d1
	move.l	mt_datavoice4+12(pc),a1
	bra.s	no_ini4

;-----------------------------------
;                              T=252

yo2
	move.l	d0,mt_datavoice3+8
	move.l	d1,mt_datavoice4+8
	move.l	a0,mt_datavoice3+4
	move.l	a1,mt_datavoice4+4
;**************** FIN DE PAREIL ***********

	rts

out_monitor:
	;NOT.W	$FFFFF8240.W
	MOVEM.L	A5/D7,-(SP)
	;move.l	a5,usp		;4
	lea	$ffff8800.w,a5	;8
	move.w	(a6)+,d7		;8
	lsr.w	#1,d7
	lsl.w	#3,d7
	move.l	digitab+4(pc,d7.w),(a5);26
	move.l	digitab(pc,d7.w),d7	;18
	movep.l	d7,(a5)		;24
	;move.l	usp,a5		;4
	MOVEM.L	(SP)+,A5/D7
	;NOT.W	$FFFFF8240.W
	rte			;64

;----------------------------------
;                              T=168

digitab		incbin	"tab2voic.bin"
st_attente	ds.w	1
mt_var		ds.l	1
nbr1		ds.l	1
nbr2		ds.l	1
buffer		ds.l	1
mt_flipbuffer	dc.w	0
mt_buffer	dc.l	mt_buffer1,mt_buffer2
mt_buffer1	ds.w	307
		dcb.w	70,512
mt_buffer2	ds.w	307
		dcb.w	70,512
mt_datavoice1
		dc.l	0		;vit / frq
		dc.l	no_noise		;adr instr 
		dc.l	0		;pos
		dc.l	no_noise		;instr 2
		dc.l	mt_tabvolume	;table de volume
mt_datavoice2
		dc.l	0
		dc.l	no_noise
		dc.l	0
		dc.l	no_noise
		dc.l	mt_tabvolume
mt_datavoice3
		dc.l	0
		dc.l	no_noise
		dc.l	0
		dc.l	no_noise
		dc.l	mt_tabvolume
mt_datavoice4
		dc.l	0
		dc.l	no_noise
		dc.l	0
		dc.l	no_noise
		dc.l	mt_tabvolume

;mt_aud-temp - 
;1 mot long : instruction
;1 mot long : adr de l'instrument
;1 mot      : longeur de l'instrument
;1 mot long : adr ou repeter (si besoin est)
;2 octet	  : ??
;1 mot      : longeur a repeter
;2 octet    : ??
;1 mot      : volume
;2 octet	  : ??
;1 mot	  : note
mt_aud1temp	ds.w	30
mt_aud2temp	ds.w	30
mt_aud3temp	ds.w	30
mt_aud4temp	ds.w	30
mt_partnote	ds.l	1
mt_partnrplay	ds.l	1
mt_counter	ds.w	1
mt_partpoint	ds.l	1
mt_samples	ds.l	1
mt_sample1	ds.l	31
mt_maxpart	ds.w	1
mt_status	ds.w	1
mt_data		ds.l	1
mt_datafin	ds.l	1
mt_arpeggio	dc.w $0358,$0328,$02fa,$02d0,$02a6,$0280,$025c
	dc.w $023a,$021a,$01fc,$01e0,$01c5,$01ac,$0194,$017d
	dc.w $0168,$0153,$0140,$012e,$011d,$010d,$00fe,$00f0
	dc.w $00e2,$00d6,$00ca,$00be,$00b4,$00aa,$00a0,$0097
	dc.w $008f,$0087,$007f,$0078,$0071,$0000,$0000,$0000
		
no_noise	dcb.b	3000,$7f
	dc.l	0

mt_frequences:	dc.l	0
		incbin	"freq.bin"
mt_tabvolume:	incbin	"voltab.bin"


SA07:	DC.B	0
SA09:	DC.B	0
SA13:	DC.B	0
SA21:	DC.B	0
SA1B:	DC.B	0
SA15:	DC.B	0
SA17:	DC.B	0
CL:	DC.B	0	
	DC.B	0
	EVEN

S70:	DC.L	0
S120:	DC.L	0
S118:	DC.L	0
S_134:	DC.L	0
PHYS:	DS.L	8

S_SR:	DC.W	0
RAST:
	DCB.W	200,0

LEVEL:	DC.W	0
MAP1:	

;LEVEL 1
	DC.W	25+3	;COMBIEN POUR GAGNER?
	DC.L	PNEU	;BLOCK
	DC.L	BALON	;BONUS
	DC.W	16,16	;X,Y
	DC.W	0,2	;XSPEED, YSPEED
	DC.W	-1,-1,-1,-1	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"    LEVEL 1: GROUMPFY FINISHED IT...    "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1
	DC.B	1,0,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,0,1
	DC.B	1,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1
	DC.B	1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1
	DC.B	1,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,0,0,0,1
	DC.B	1,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1
	DC.B	1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1
	DC.B	1,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1
	DC.B	1,0,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,0,1
	DC.B	1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

;LEVEL	2
	DC.W	32+3	;COMBIEN POUR GAGNER?
	DC.L	OEUF3	;BLOCK
	DC.L	OEUF2	;BONUS
	DC.W	16,16	;X,Y
	DC.W	0,2	;XSPEED, YSPEED
	DC.W	-1,-1,-1,-1	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"LEVEL 2: BUT SHE IS BLOCKED ON THIS ONE "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,1,0,2,2,1,0,2,0,1,2,2,0,1,0,0,2,2,1
	DC.B	1,0,1,0,1,0,1,0,1,2,1,0,1,0,1,2,1,1,0,1
	DC.B	1,0,1,0,1,0,1,2,1,0,1,0,1,0,1,2,1,1,0,1
	DC.B	1,0,1,2,1,2,1,0,1,0,1,0,1,0,1,0,1,1,0,1
	DC.B	1,0,1,0,1,0,1,0,1,2,1,2,1,0,1,0,1,1,0,1
	DC.B	1,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,1
	DC.B	1,0,1,2,1,2,1,2,1,0,1,2,1,2,1,2,1,1,2,1
	DC.B	1,0,1,0,1,0,1,0,1,2,1,0,1,0,1,2,1,1,0,1
	DC.B	1,0,1,0,1,2,1,0,1,0,1,0,1,0,1,0,1,1,0,1
	DC.B	1,2,0,2,1,2,0,2,1,0,2,0,1,0,0,0,1,2,0,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1


;LEVEL	3
	DC.W	22+3	;COMBIEN POUR GAGNER?
	DC.L	LIERRE	;BLOCK
	DC.L	POMME	;BONUS
	DC.W	16,16	;X,Y
	DC.W	0,2	;XSPEED, YSPEED
	DC.W	-1,-1,-1,-1	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"LEVEL 3: OR WAS IT ON THIS ONE? I FORGOT"
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,1
	DC.B	1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1
	DC.B	1,0,1,2,0,0,0,0,0,0,0,2,0,0,0,0,2,1,0,1
	DC.B	1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1
	DC.B	1,2,1,0,0,2,0,0,2,0,0,2,1,0,0,2,0,1,2,1
	DC.B	1,2,1,0,1,0,0,2,0,2,0,0,0,2,0,0,0,1,2,1
	DC.B	1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1
	DC.B	1,0,1,2,0,0,0,0,2,0,0,0,0,0,0,0,2,1,0,1
	DC.B	1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1
	DC.B	1,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

	

;LEVEL	4
	DC.W	31+3	;COMBIEN POUR GAGNER?
	DC.L	MUR	;BLOCK
	DC.L	AMPOULE	;BONUS
	DC.W	18*16,16	;X,Y
	DC.W	-2,0	;XSPEED, YSPEED
	DC.W	-1,-1,-1,-1	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	" LEVEL 4: LITTLE BOX AND STUPID NAME... "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1
	DC.B	1,0,0,0,0,2,1,1,0,1,1,1,1,1,1,1,1,1,2,1
	DC.B	1,1,1,0,1,1,2,0,0,0,0,2,0,0,0,0,2,1,0,1
	DC.B	1,0,1,2,1,1,0,1,1,0,1,1,0,0,0,2,0,1,0,1
	DC.B	1,2,2,2,1,2,0,0,0,0,2,1,0,1,2,2,0,1,0,1
	DC.B	1,2,1,2,1,0,1,1,1,1,0,0,0,2,2,0,0,1,0,1
	DC.B	1,2,2,2,1,0,1,0,0,1,0,2,0,2,0,0,0,1,0,1
	DC.B	1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,0,2,1,0,1
	DC.B	1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,2,1
	DC.B	1,1,1,1,1,2,0,0,0,0,2,1,0,0,0,0,0,2,2,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	
;LEVEL	5
	DC.W	28+3	;COMBIEN POUR GAGNER?
	DC.L	MUR	;BLOCK
	DC.L	OEUF1	;BONUS
	DC.W	16,16	;X,Y
	DC.W	2,0	;XSPEED, YSPEED
	DC.W	-1,-1,-1,-1	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"LEVEL 5: AXEL THINKS ITS THE LAST LEVEL "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,2,2,1
	DC.B	1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,2,1,2,1
	DC.B	1,0,1,0,1,2,0,0,0,2,0,0,2,1,0,1,2,2,2,1
	DC.B	1,0,0,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1
	DC.B	1,0,1,0,1,1,1,2,0,0,2,1,0,1,0,0,0,0,0,1
	DC.B	1,0,1,0,0,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1
	DC.B	1,0,1,1,0,2,0,2,0,0,2,1,2,0,0,0,2,1,0,1
	DC.B	1,2,0,0,2,1,1,0,1,1,0,2,1,1,0,1,2,0,0,1
	DC.B	1,1,1,1,1,1,0,0,2,1,1,0,1,1,1,1,1,1,2,1
	DC.B	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

;LEVEL	6
	DC.W	43+3	;COMBIEN POUR GAGNER?
	DC.L	LIERRE	;BLOCK
	DC.L	CERISE	;BONUS
	DC.W	16,16	;X,Y
	DC.W	2,0	;XSPEED, YSPEED
	DC.W	16,3*16,18*16,8*16	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	18*16,10*16,16,5*16	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"LEVEL 6: OH YEAH, HERE COMES THE SUBWAY "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1
	DC.B	1,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,0,1
	DC.B	1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,0,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1


	
;LEVEL	7
	DC.W	33+3	;COMBIEN POUR GAGNER?
	DC.L	PNEU	;BLOCK
	DC.L	CITRON	;BONUS
	DC.W	5*16,4*16	;X,Y
	DC.W	0,2	;XSPEED, YSPEED
	DC.W	8*16,8*16,160,3*16	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"LEVEL 7: SUBWAYS ARE FULL OF HOOLIGANS  "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,2,2,2,0,1
	DC.B	1,0,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,2,1,1
	DC.B	1,0,0,1,1,2,1,0,2,1,0,2,2,2,2,2,2,2,0,1
	DC.B	1,0,2,0,1,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1
	DC.B	1,2,0,0,1,2,1,2,0,0,0,2,1,0,1,0,0,0,2,1
	DC.B	1,0,2,0,1,2,1,0,0,0,2,0,1,0,0,2,1,1,0,1
	DC.B	1,2,0,0,1,2,1,1,1,1,0,0,1,0,1,1,1,1,0,1
	DC.B	1,0,2,0,1,0,0,0,0,1,0,0,0,0,0,2,2,0,0,1
	DC.B	1,2,0,0,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1
	DC.B	1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,0,2,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

	
;LEVEL	8
	DC.W	90+3	;COMBIEN POUR GAGNER?
	DC.L	MUR	;BLOCK
	DC.L	POMME	;BONUS
	DC.W	10*16,6*16 ;X,Y
	DC.W	0,2	;XSPEED, YSPEED
	DC.W	-1,-1,-1,-1	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"   LEVEL 8: HAPPY BIRTHDAY TO YOU...    "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,1
	DC.B	1,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1
	DC.B	1,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,1
	DC.B	1,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1
	DC.B	1,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,1
	DC.B	1,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1
	DC.B	1,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,1
	DC.B	1,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1
	DC.B	1,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,1
	DC.B	1,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

;LEVEL	9
	DC.W	16+3	;COMBIEN POUR GAGNER?
	DC.L	LIERRE	;BLOCK
	DC.L	ATARI	;BONUS
	DC.W	16,16 	;X,Y
	DC.W	2,0	;XSPEED, YSPEED
	DC.W	2*16,8*16,2*16,7*16	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	2*16,9*16,18*16,10*16 ;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"    LEVEL 9: CHOOSE THE RIGHT ONE...    "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,0,0,0,0,0,0,2,1,1,2,0,2,1,1,1,1,1,1
	DC.B	1,1,1,1,2,1,2,1,0,1,1,0,1,0,1,0,0,2,1,1
	DC.B	1,0,0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,0,1,1
	DC.B	1,0,0,1,0,1,0,1,0,1,1,0,1,0,2,0,0,0,1,1
	DC.B	1,1,1,1,0,1,0,2,0,1,1,0,1,0,1,0,1,1,1,1
	DC.B	1,1,1,1,0,1,0,1,0,1,1,0,2,0,1,0,1,1,1,1
	DC.B	1,1,0,1,0,2,0,1,0,1,1,0,1,0,1,0,1,0,0,1
	DC.B	1,1,0,2,0,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1
	DC.B	1,1,0,0,0,1,0,1,0,1,1,0,1,2,1,2,1,1,1,1
	DC.B	1,1,1,1,1,1,2,0,2,1,1,2,0,0,0,0,0,0,0,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

;LEVEL	10
	DC.W	19+3	;COMBIEN POUR GAGNER?
	DC.L	PNEU	;BLOCK
	DC.L	CERISE	;BONUS
	DC.W	11*16,16 	;X,Y
	DC.W	2,0	;XSPEED, YSPEED
	DC.W	16,16,17*16,2*16	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1 	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"   LEVEL 10: YOU MAY REMAIN SILENT...   "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,2,0,0,0,0,0,2,1,1,0,0,0,0,0,0,0,2,1
	DC.B	1,1,1,0,0,0,2,1,0,1,1,2,1,1,1,0,0,0,0,1
	DC.B	1,0,0,0,0,1,1,1,0,1,1,0,1,2,0,0,2,0,0,1
	DC.B	1,0,0,0,0,0,0,0,0,1,1,0,2,0,1,0,1,0,0,1
	DC.B	1,0,1,2,1,2,1,1,0,0,0,0,1,0,1,0,1,0,0,1
	DC.B	1,0,1,0,0,2,0,0,0,0,0,0,0,0,1,0,1,0,0,1
	DC.B	1,0,1,0,1,1,0,1,0,1,1,0,1,0,2,0,1,0,0,1
	DC.B	1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1
	DC.B	1,0,1,0,0,2,0,1,0,1,1,0,1,0,1,0,1,0,0,1
	DC.B	1,2,1,0,2,0,0,0,0,0,2,0,1,2,0,0,1,2,2,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

;LEVEL	11
	DC.W	38+3	;COMBIEN POUR GAGNER?
	DC.L	OEUF3	;BLOCK
	DC.L	AMPOULE	;BONUS
	DC.W	8*16,16 	;X,Y
	DC.W	0,2	;XSPEED, YSPEED
	DC.W	-1,-1,-1,-1	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1 	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"    LEVEL 11: HOW ABOUT A NICE LOGO?    "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,2,2,2,2,0,0,0,0,0,0,2,0,0,0,0,0,0,2,1
	DC.B	1,2,1,2,0,0,2,1,2,1,1,1,1,2,1,1,1,1,0,1
	DC.B	1,2,1,1,0,0,1,1,0,1,2,0,0,0,1,2,0,0,0,1
	DC.B	1,2,1,1,2,2,1,1,0,1,0,0,0,0,1,2,0,0,0,1
	DC.B	1,2,1,0,1,1,2,1,0,1,0,2,0,2,1,1,1,1,0,1
	DC.B	1,2,1,0,1,1,0,1,0,1,0,0,0,0,0,0,2,1,0,1
	DC.B	1,2,1,2,0,0,2,1,0,1,0,0,0,2,0,0,0,1,0,1
	DC.B	1,2,1,0,0,0,0,1,0,1,2,0,0,0,0,0,2,1,0,1
	DC.B	1,2,1,0,0,0,0,1,2,1,1,1,1,1,1,1,1,1,0,1
	DC.B	1,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1


;LEVEL	12
	DC.W	41+3	;COMBIEN POUR GAGNER?
	DC.L	LIERRE	;BLOCK
	DC.L	OEUF1	;BONUS
	DC.W	9*16,4*16	;X,Y
	DC.W	2,0	;XSPEED, YSPEED
	DC.W	-1,-1,-1,-1	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1 	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"     LEVEL 12: READY, STEADY, GO...     "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1
	DC.B	1,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,1
	DC.B	1,0,2,0,1,0,0,0,1,1,1,1,0,0,0,1,0,2,0,1
	DC.B	1,0,0,0,1,0,0,0,1,0,2,1,0,0,0,1,0,0,0,1
	DC.B	1,2,2,2,1,0,0,2,1,2,2,1,2,0,0,1,2,2,2,1
	DC.B	1,1,1,0,1,0,1,1,1,0,2,1,1,1,0,1,0,1,1,1
	DC.B	1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
	DC.B	1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1
	DC.B	1,2,2,2,2,2,0,2,1,0,0,0,0,0,2,2,2,2,2,1
	DC.B	1,2,2,2,2,2,0,0,0,0,0,1,2,0,2,2,2,2,2,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1


;LEVEL	13
	DC.W	55+3	;COMBIEN POUR GAGNER?
	DC.L	OEUF3	;BLOCK
	DC.L	BALON	;BONUS
	DC.W	16,16 	;X,Y
	DC.W	0,2	;XSPEED, YSPEED
	DC.W	160,32,3*16,160	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1 	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"  LEVEL 13: ZE FOOL ON ZE HILL IS BACK  "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1
	DC.B	1,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,1
	DC.B	1,0,0,2,0,0,0,0,0,2,2,0,0,0,0,2,0,0,0,1
	DC.B	1,0,0,0,2,0,0,0,2,1,1,2,0,0,0,2,2,0,0,1
	DC.B	1,0,0,0,0,0,0,0,2,1,1,2,0,0,0,0,0,0,0,1
	DC.B	1,0,2,0,0,0,0,2,2,1,1,2,2,0,0,0,0,0,0,1
	DC.B	1,0,0,0,0,2,2,1,1,2,2,1,1,2,2,0,0,0,0,1
	DC.B	1,0,0,2,2,1,1,2,2,0,0,2,2,1,1,2,2,0,0,1
	DC.B	1,2,2,1,1,2,2,0,0,0,0,0,0,2,2,1,1,2,2,1
	DC.B	1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1


;LEVEL	14
	DC.W	20+3	;COMBIEN POUR GAGNER?
	DC.L	INT	;BLOCK
	DC.L	INT	;BONUS
	DC.W	16,16 	;X,Y
	DC.W	2,0	;XSPEED, YSPEED
	DC.W	-1,-1,-1,-1	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1 	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"      LEVEL 14:  WHERE AM I???          "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
	DC.B	1,0,1,1,1,1,1,2,1,1,1,1,1,1,1,2,2,1,0,1
	DC.B	1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1
	DC.B	1,0,1,0,2,1,1,1,2,1,1,1,1,1,2,1,0,1,0,1
	DC.B	1,0,1,0,2,1,1,1,2,1,1,1,1,1,2,1,0,2,0,1
	DC.B	1,0,1,0,2,1,1,1,2,1,1,1,1,1,2,1,0,1,0,1
	DC.B	1,0,1,0,2,1,1,1,2,1,1,1,1,1,2,1,0,1,0,1
	DC.B	1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1
	DC.B	1,0,1,1,1,1,1,1,1,1,2,2,1,1,1,1,2,1,0,1
	DC.B	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1




;LEVEL	15
	DC.W	13+3	;COMBIEN POUR GAGNER?
	DC.L	MUR	;BLOCK
	DC.L	CITRON	;BONUS
	DC.W	4*16,3*16 	;X,Y
	DC.W	0,2	;XSPEED, YSPEED
	DC.W	3*16,6*16,16*16,6*16	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	9*16,9*16,14*16,10*16 		;X_T3,Y_T3,X_T4,Y_T4
	DC.B	" LEVEL 15: LOOK OUT FOR SCHREIDERS HEAD "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1
	DC.B	1,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,1
	DC.B	1,0,0,1,0,0,2,1,0,0,0,0,1,0,0,0,1,0,0,1
	DC.B	1,0,1,0,0,0,0,0,1,0,0,1,2,0,0,0,0,1,0,1
	DC.B	1,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1
	DC.B	1,0,1,0,0,0,0,0,1,0,0,1,2,0,0,0,0,1,0,1
	DC.B	1,0,0,1,2,0,2,1,0,0,0,0,1,2,0,0,1,0,0,1
	DC.B	1,0,0,0,1,1,1,2,0,1,1,0,2,1,0,1,0,0,0,1
	DC.B	1,0,0,0,0,0,0,0,1,0,2,1,0,0,0,0,0,0,0,1
	DC.B	1,2,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,2,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

;LEVEL	16
	DC.W	30+3	;COMBIEN POUR GAGNER?
	DC.L	PNEU	;BLOCK
	DC.L	OEUF2	;BONUS
	DC.W	16,16 	;X,Y
	DC.W	2,0	;XSPEED, YSPEED
	DC.W	-1,-1,-1,-1	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1 	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"   LEVEL 16: AS EASY AS IT LOOKS...     "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,0,0,0,0,2,0,2,2,1,0,2,0,0,0,0,2,2,1
	DC.B	1,2,1,2,0,1,0,0,0,0,1,0,0,0,1,2,0,1,2,1
	DC.B	1,0,0,0,0,0,1,0,1,0,0,0,2,0,1,2,0,2,0,1
	DC.B	1,0,0,1,0,0,0,2,1,0,0,0,0,0,2,1,2,1,0,1
	DC.B	1,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,2,2,0,1
	DC.B	1,0,1,0,0,1,0,1,0,1,0,1,0,0,1,2,0,1,0,1
	DC.B	1,0,1,0,0,2,0,0,0,0,0,1,0,1,0,0,0,2,0,1
	DC.B	1,0,1,0,0,1,2,1,0,1,0,2,0,0,0,1,0,1,0,1
	DC.B	1,0,2,0,0,0,0,0,1,2,0,2,0,1,1,0,1,2,0,1
	DC.B	1,0,1,1,2,0,1,0,0,0,0,0,0,2,0,0,0,0,2,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

;LEVEL	17
	DC.W	44+3	;COMBIEN POUR GAGNER?
	DC.L	LIERRE	;BLOCK
	DC.L	ATARI	;BONUS
	DC.W	16,16 	;X,Y
	DC.W	0,2	;XSPEED, YSPEED
	DC.W	-1,-1,-1,-1	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1 	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"        LEVEL 17: UTTER BULLSHIT        "
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,0,1,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,1
	DC.B	1,2,1,2,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1
	DC.B	1,2,1,2,2,2,1,2,0,0,0,0,1,2,0,0,0,0,0,1
	DC.B	1,2,1,0,1,2,2,2,2,0,0,2,1,0,1,1,1,0,0,1
	DC.B	1,2,1,0,1,2,1,1,1,1,0,2,1,0,1,1,1,0,0,1
	DC.B	1,2,0,0,1,2,1,0,0,1,0,2,1,0,1,1,1,0,0,1
	DC.B	1,2,1,1,1,0,0,0,0,0,0,2,1,2,0,0,0,0,2,1
	DC.B	1,2,1,1,1,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1
	DC.B	1,2,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1
	DC.B	1,2,2,2,2,0,1,2,0,1,0,1,0,2,1,0,2,1,2,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1


;LEVEL	18
	DC.W	95+3	;COMBIEN POUR GAGNER?
	DC.L	INT	;BLOCK
	DC.L	INT	;BONUS
	DC.W	16,16 	;X,Y
	DC.W	0,2	;XSPEED, YSPEED
	DC.W	-1,-1,-1,-1	;X_T1,Y_T1,X_T2,Y_T2
	DC.W	-1,-1,-1,-1 	;X_T3,Y_T3,X_T4,Y_T4
	DC.B	"LEVEL 18: DON'T TRY, YOU CAN T FINISH IT"
	DC.W	0,$777,$40,$50,$60,$70,$440,$550,$660,$770,$444,$500,$600,$700,$666,$555
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,2,1,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,1
	DC.B	1,2,1,2,2,2,2,1,1,1,1,2,1,1,1,1,1,2,2,1
	DC.B	1,2,1,2,1,1,2,2,2,2,1,2,1,1,1,1,1,2,1,1
	DC.B	1,2,1,2,1,1,2,1,2,2,1,2,1,1,1,1,1,2,1,1
	DC.B	1,2,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,2,2,1
	DC.B	1,2,1,2,2,2,2,1,1,2,1,1,1,1,1,1,1,1,2,1
	DC.B	1,2,1,2,1,1,2,1,1,2,1,1,1,1,2,2,2,1,2,1
	DC.B	1,2,1,2,1,1,2,1,2,2,2,2,2,1,2,2,2,1,2,1
	DC.B	1,2,1,2,1,1,2,1,2,1,2,1,2,2,2,2,2,2,2,1
	DC.B	1,2,2,2,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1
	DC.B	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1


MAX_LEV	EQU	18

	
HEAD_H:	INCBIN	HEAD_H.SPR
	INCBIN	HEAD_H.MSK

HEAD_B:	INCBIN	HEAD_B.SPR
	INCBIN	HEAD_B.MSK

HEAD_G:	INCBIN	HEAD_G.SPR
	INCBIN	HEAD_G.MSK

HEAD_D:	INCBIN	HEAD_D.SPR
	INCBIN	HEAD_D.MSK


SNAKE_H:	INCBIN	SNAKE_H.SPR
	INCBIN	SNAKE_H.MSK

SNAKE_B:	INCBIN	SNAKE_B.SPR
	INCBIN	SNAKE_B.MSK

SNAKE_G:	INCBIN	SNAKE_G.SPR
	INCBIN	SNAKE_G.MSK

SNAKE_D:	INCBIN	SNAKE_D.SPR
	INCBIN	SNAKE_D.MSK
	
	

DEAD:	INCBIN	DEAD.SPR
	INCBIN	DEAD.MSK
CBB:	INCBIN	SNAKE.1IP
BBC	EQU	CBB+34

debmod:		incbin	"*.mod"
FINMOD:
END:
	INCBIN	CRK.PI1

PNEU	EQU	BBC
MUR	EQU	BBC+8
LIERRE	EQU	BBC+16
BALON	EQU	BBC+3*8
ATARI	EQU	BBC+4*8
INT	EQU	BBC+5*8
POMME	EQU	BBC+6*8
OEUF1	EQU	BBC+7*8
CITRON	EQU	BBC+8*8
AMPOULE	EQU	BBC+9*8
CERISE	EQU	BBC+10*8
OEUF2	EQU	BBC+11*8
OEUF3	EQU	BBC+12*8




