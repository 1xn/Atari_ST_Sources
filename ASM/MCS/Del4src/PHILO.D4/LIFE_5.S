;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;++++++++++ The Hooligan of M.C.S presents the Philosohical Demo ++++++++++
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;Code: 	 The Hooligan
;Idea: 	 The Hooligan
;Designing:The Hooligan
;Graphixxs:The Hooligan

;Les TRAPS sont suivit d'un ;SYS (Simple a remplacer, non?)
;La memoire ecran est directement apres le prog!

 
	MOVE.L	#0,-(SP)
	MOVE.W	#$20,-(SP)
	TRAP	#1		;SYS
	ADDQ.L	#6,SP

	JSR	MAKE_BALLS
	
	MOVE.L	A1,D0		;A1 = APRES LE CODE DEGENERE
	AND.W	#$FF00,D0
	ADD.L	#256,D0
	MOVE.L	D0,PHYS		;PHYS = ADR D'AFF. 
	
	MOVE.L	#SAVER,A4
	MOVE.W	#49,D1
	
FILL_DIS:	MOVE.L	D0,(A4)+
	MOVE.L	#RRTS,(A4)+
	DBRA	D1,FILL_DIS

	JSR	SWAP
	JSR	CLS1
	
	MOVEM.L	BLEU,D0-D7
	MOVEM.L	D0-D7,$FFFFF8240.W
	
	JSR	SAVE_INT
	JSR	INIT_TRACK
	
LET_P:	;BRA	JOCOOL

*////////////////////// PRESENTATION SIMPLE //////////////
	MOVE.W	#3-1,D7
	MOVE.L	#T1,A0		;TEXTE
	MOVE.L	#LIST,A2
FEW_ONES:	MOVE.L	PHYS,A1		;ADR ECRAN
	MOVE.L	(A2)+,A5		;MASK POUR APPARITION
	MOVE.L	#WHERE_1,A4	;FORME D'AFFICHAGE
	JSR	PRINT_PAGE
	ADD.L	#20*12,A0
	DBRA	D7,FEW_ONES
**************************************************************
*///////////////// PRESENTATION STARBALLS'N'STUFF ////////////
	JSR	VSYNC
	MOVEM.L	PIC+2,D0-D7
	MOVEM.L	D0-D7,$FFFFFFFF8240.W
	MOVE.L	#STAR_VBL,$70.W

JO:	JSR	VSYNC
	CMPI.B	#$39,$FFFFFFC02.W
	BNE	JO

	MOVE.L	#VBL,$70.W
	JSR	VSYNC

*******************************************************************
*///////////////// AKEU JE SOUIS LE HOOLIGAN DE MCS ///////////////
	JSR	CLS1
	MOVEM.L	BLEU,D0-D7
	MOVEM.L	D0-D7,$FFFFFFF8240.W
		
	MOVE.L	#T4,A0		;TEXTE
	MOVE.L	PHYS,A1		;ADR ECRAN
	MOVE.L	#APP_4,A5		;MASK POUR APPARITION
	MOVE.L	#WHERE_1,A4	;FORME D'AFFICHAGE
	JSR	PRINT_PAGE
	
	JSR	NO_PAL
	MOVE.L	#MOA,A0
	MOVE.L	PHYS,A1
	ADD.L	#54*160+32,A1
	MOVE.W	#92-1,D7
ICH_BIN:
NOD	SET	0
	REPT	12
	MOVE.W	(A0)+,NOD(A1)
NOD	SET	NOD+8
	ENDR
	LEA.L	160(A1),A1
	DBRA	D7,ICH_BIN

	MOVE.L	#MOA_SUI,A0
	MOVE.W	#14-1,D0
	JSR	FADE_IN
	MOVE.W	#5*50-1,D0

	JSR	PAUSE
	
	MOVE.L	#MOA_SUI+13*32,A0
	MOVE.W	#14-1,D0
	JSR	FADE_OUT

	JSR	CLS1

********************************************************************
*//////////////// UN JOUR AU FOND D'UNE PISCINE  ///////////////////
	
	MOVEM.L	BLEU,D0-D7
	MOVEM.L	D0-D7,$FFFFFFFF8240
	
	MOVE.L	#T5,A0		;TEXTE
	MOVE.L	PHYS,A1		;ADR ECRAN
	MOVE.L	#APP_5,A5		;MASK POUR APPARITION
	MOVE.L	#WHERE_1,A4	;FORME D'AFFICHAGE
	JSR	 PRINT_PAGE
	
	MOVEM.L	F88+2,D0-D7
	MOVEM.L	D0-D7,$FFFFFFFF8240.W

	MOVE.L	PHYS,A1
	ADD.L	#(100-5*8)*160,A1
	MOVE.L	#POO1,A0
	MOVE.W	#10-1,D0
	
REZ:	MOVE.W	#40,D7
	JSR	HOO1
	LEA.L	8*160(A1),A1
	LEA.L	40(A0),A0
	DBRA	D0,REZ

TOL:	CMPI.B	#$39,$FFFFFFC02.W
	BNE	TOL
	
	JSR	NO_PAL
	JSR	CLS1
	MOVEM.L	BLEU,D0-D7
	MOVEM.L	D0-D7,$FFFF8240.W
	
	MOVE.L	#T6,A0		;TEXTE
	MOVE.L	PHYS,A1		;ADR ECRAN
	MOVE.L	#APP_6,A5		;MASK POUR APPARITION
	MOVE.L	#WHERE_1,A4	;FORME D'AFFICHAGE
	JSR	PRINT_PAGE

;/////////////////////// OVR DANS L'UNION... \\\\\\\\\\\\\\\\\\\\\\

	MOVE.L	#T7,A0
	MOVE.L	PHYS,A1
	MOVE.L	#APP_3,A5
	MOVE.L	#WHERE_1,A4
	JSR	PRINT_PAGE

	MOVE.L	#T8,A0
	MOVE.L	PHYS,A1
	MOVE.L	#APP_2,A5
	MOVE.L	#WHERE_1,A4
	JSR	PRINT_PAGE

 	MOVEM.L	UNION+2,D0-D7
	MOVEM.L	D0-D7,$FFFF8240
	MOVE.L	PHYS,A0
	MOVE.L	#UNION+34,A1
	MOVE.W	#3-1,D1
U2:	MOVE.W	#2080-1,D0
U1:	MOVE.L	(A1)+,(A0)+
	DBRA	D0,U1
	JSR	VSYNC
	JSR	VSYNC
	JSR	VSYNC
	DBRA	D1,U2

	MOVE.W	#50-1,D0
	JSR	PAUSE
	MOVE.W	#11-1,D1
U3:	MOVE.W	#4*40-1,D0	
U4:	MOVE.L	(A1)+,(A0)+
	DBRA	D0,U4
	MOVE.B	#2,$FFFF820A.W
	MOVE.B	#0,$FFFF820A.W
	NOP
	NOP
	MOVE.B	#2,$FFFF820A.W
	NOP
	NOP
	MOVE.B	#0,$FFFF820A.W
	MOVE.B	#0,$FFFF820A.W
	MOVE.B	#2,$FFFF820A.W
	NOP
	MOVE.B	#1,$FFFFF820A.W
	MOVE.B	#0,$FFFFF820A.W
	NOP
	NOP
	MOVE.B	#1,$FFFFF8260.W
	NOP
	NOP
	NOP
	NOP
	MOVE.B	#2,$FFFFFF8260.W
	MOVE.B	#2,$FFFFFF820A.W
	NOP
	MOVE.B	#0,$FFFFFF8260.W
	MOVE.W	#50-1,D0
	JSR	PAUSE
	DBRA	D1,U3

U5:	CMPI.B	#$39,$FFFFFFFC02.W
	BNE	U5
U6:	CMPI.B	#$39+$80,$FFFFFFFFC02.W
	BNE	U6

	JSR	NO_PAL
	JSR	CLS1
	MOVE.B	#0,$FFFFFF8260.W
	MOVE.B	#2,$FFFFFF820A.W

	MOVE.W	#$777,$FFFFFF8242.W
	MOVE.L	#FONT+34+7*16*160,A0
	MOVE.L	PHYS,A1
	MOVE.W	#88*40-1,D0
U7:	MOVE.L	(A0)+,(A1)+
	DBRA	D0,U7
	
U8:	JSR	VSYNC
	ADD.W	#$1,$FFFFFFF8240.W
	MOVE.W	#20000,D0
U9:	DBRA	D0,U9
	ADD.W	#$111,$FFFFF8240.W
	CMPI.B	#$39,$FFFFFFFFC02.W
	BNE.S	U8
	
	JSR	NO_PAL
	JSR	CLS1	

;//////////////// CE POINT N'EST PAS PRECALCULE \\\\\\\\\\\\\\\\
	MOVEM.L	BLEU,D0-D7
	MOVEM.L	D0-D7,$FFFFFF8240.W
	MOVE.W	#4-1,D0
	MOVE.L	#T9,A0
	MOVE.L	#LIST2,A2
PREC:	MOVE.L	PHYS,A1
	MOVE.L	(A2)+,A5
	MOVE.L	#WHERE_1,A4
	JSR	PRINT_PAGE
	LEA.L	20*12(A0),A0
	DBRA	D0,PREC

	JSR	NO_PAL
	MOVE.L	PHYS,A0
	MOVE.W	#8000-1,D0
PREC2:	MOVE.L	#-1,(A0)+
	DBRA	D0,PREC2
	
	JSR	VSYNC
	MOVE.L	#FADE_VBL,$70.W

	MOVE.W	#$111,D0
	MOVEQ	#0,D1
	MOVEQ	#7-1,D2
PREC3:	MOVE.W	D1,PILE
	ADD.W	D0,D1
	JSR	VSYNC
	DBRA	D2,PREC3

	MOVE.W	#160,D0
	MOVE.W	#100,D1
PREC4:	
	MOVE.L	PHYS,A0
	MOVE.W	D1,D2
	MULU.W	#160,D2
	MOVE.W	D0,D3
	MOVE.W	D0,D4
	AND.W	#$FFF0,D4
	LSR.W	#1,D4
	ADD.W	D4,D2
	LEA.L	(A0,D2.W),A0

	AND.W	#$F,D3
	MOVEQ	#15,D4
	SUB.W	D3,D4
	MOVE.W	#-1,D3
	BCLR	D4,D3

	MOVE.W	D3,(A0)
	MOVE.W	D3,2(A0)
	MOVE.W	D3,4(A0)
	MOVE.W	D3,6(A0)

	JSR	VSYNC
	MOVE.L	#-1,(A0)	
	MOVE.L	#-1,4(A0)	
	ADDQ	#1,D0
	CMP.W	#319,D0
	BNE	PREC6
	MOVE.W	#160,D0
PREC6:	ADDQ	#1,D1
	CMP.W	#199,D1
	BNE	PREC7
	MOVE.W	#100,D1
PREC7:	CMP.B	#$39,$FFFFFFC02.W
	BNE	PREC4

	MOVE.W	#$111,D0
	MOVE.W	#$777,D1
	MOVEQ	#7-1,D2
PREC5:	MOVE.W	D1,PILE
	SUB.W	D0,D1
	JSR	VSYNC
	DBRA	D2,PREC5

	MOVE.L	#VBL,$70.W
	JSR	CLS1	
	JSR	VSYNC

;//////////////////////// D'////////////////////
	MOVEM.L	BLEU,D0-D7
	MOVEM.L	D0-D7,$FFFFFF8240.W
	MOVE.W	#5-1,D0
	MOVE.L	#T13,A0
	MOVE.L	#LIST,A2
DPRO:	MOVE.L	PHYS,A1
	MOVE.L	(A2)+,A5
	MOVE.L	#WHERE_1,A4
	JSR	PRINT_PAGE
	LEA.L	20*12(A0),A0
	DBRA	D0,DPRO


;///////////////////// NINE'O'CLOCK NEWS!!!!! \\\\\\\\\\\\\\\\\\	

	MOVEM.L	F88+2,D0-D7
	MOVEM.L	D0-D7,$FFFFFFFF8240.W

	MOVE.L	PHYS,A1
	ADD.L	#36*160,A1
	MOVE.L	#POO2,A0
	MOVE.W	#16-1,D0
	
REZ2:	MOVE.W	#40,D7
	JSR	HOO1
	LEA.L	8*160(A1),A1
	LEA.L	40(A0),A0
	DBRA	D0,REZ2

TOL2:	CMPI.B	#$39,$FFFFFFC02.W
	BNE	TOL2


;//////////////// LA BOULE METAPHYSIQUE \\\\\\\\\\\\\\	
	JSR	NO_PAL
	JSR	CLS1
	MOVEM.L	BLEU,D0-D7
	MOVEM.L	D0-D7,$FFFF8240.W

	MOVE.L	#T18,A0
	MOVE.L	PHYS,A1
	MOVE.L	#APP_3,A5
	MOVE.L	#WHERE_1,A4
	JSR	PRINT_PAGE

	JSR	NO_PAL
	JSR	CLS1
	
	MOVE.L	#META_FI,D0	;ON VIRE LE SURPERFLUE
	AND.W	#$FF00,D0		;ET ON GARDE LE NECESSAIRE!
	ADD.W	#256,D0
	MOVE.L	D0,PHYS
	JSR	CLS1
	JSR	SWAP

	MOVE.L	PHYS,D0
	ADD.L	#32000,D0
	MOVE.L	D0,PHYS2
	JSR	CLS2
	JSR	VSYNC
	
	
	MOVEQ	#0,D0
	MOVEQ	#0,D2
	MOVE.W	#200-1,D1
	MOVE.L	#MUL_260,A4
M1	MOVE.W	D0,D2
	MULU.W	#160,D2
	MOVE.W	D2,(A4)+
	ADDQ	#1,D0
	DBRA	D1,M1

	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVE.W	#320-1,D2
	MOVE.L	#MUL_260+2*200,A4
M2	MOVE.W	D0,D1
	AND.W	#$FF0,D1
	LSR.W	#1,D1
	MOVE.W	D1,(A4)+
	ADDQ	#1,D0
	DBRA	D2,M2
	
	JSR	VSYNC
	MOVEM.L	PAL(PC),D0-D7
	MOVEM.L	D0-D7,$FFFF8240.W

	MOVE.W	#$FFFFFC02,A1
	
	MOVE.W	#10,LX+2
	MOVE.W	#10,LY+2
	MOVE.W	#15,LZ+2
	;MOVE.W	#8,LUM
	;MOVE.W	#16,RAY

FCK:	CMP.B	#$4D,(A1)
	BNE.S	NO_X
	ADDQ	#1,LX+2
	
NO_X:	CMP.B	#$4B,(A1)
	BNE.S	NO_X2
	SUBQ	#1,LX+2


NO_X2:	CMP.B	#$50,(A1)
	BNE.S	NO_Y
	ADDQ	#1,LY+2

NO_Y:	CMP.B	#$48,(A1)
	BNE.S	NO_Y2
	SUBQ	#1,LY+2

NO_Y2:	CMP.B	#$52,(A1)
	BNE.S	NO_Z
	ADDQ	#1,LZ+2

NO_Z:	CMP.B	#$47,(A1)
	BNE.S	NO_Z2
	CMP.W	#$C,LZ+2
	BLS.S	NO_Z2
	SUBQ	#1,LZ+2

NO_Z2:	MOVE.L	PHYS,D0
	MOVE.L	PHYS2,PHYS
	MOVE.L	D0,PHYS2
	JSR	SWAP
		
	JSR	VSYNC		
	JSR	VSYNC		
	JSR	CLSX
	BSR	BALL_TRACE

	CMP.B	#$39,(A1)
	BNE	FCK

STAP:	BRA	QUEEN

CLSX:	MOVE.L	PHYS,A0
	LEA.L	84*160+72(A0),A0
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D2
	MOVEQ	#0,D3
NOD	SET	0
	REPT	32
	MOVEM.L	D0-D3,NOD*160(A0)
NOD	SET	NOD+1
	ENDR
	
	RTS
	
BALL_TRACE:
;A6 LIBRE
	MOVE.L	A1,-(SP)
	
	MOVE.L	#SQR,A2		
	MOVE.L	#CARRE+256*2,A3
	MOVE.L	#MUL_260+100*2,A4
	MOVE.L	#SHIFT_0,A5
	MOVE.L	#MUL_260+200*2+160*2,A1
	MOVE.L	PHYS,A0
	
	MOVE.W	#16*2-1,D6
	MOVE.W	D6,-(SP)
	
	MOVE.W	#16*16,D2		;R^2
	
LOOPX:	MOVE.W	(SP),D7

LOOPY:	MOVEQ	#15,D0
	MOVE.W	D0,D1
	SUB.W	D6,D0		;D0 = X (-R...R)
	MOVE.W	D0,D4
	SUB.W	D7,D1		;D1 = Y (-R...R)
	MOVE.W	D1,D5
	
	ADD.W	D0,D0
	MOVE.W	(A3,D0.W),D0	;D0 = X^2
	ADD.W	D1,D1
	ADD.W	(A3,D1.W),D0	;D0 = X^2+Y^2

	CMP.W	D0,D2		;SUR LE CERCLE?
	BLO	NO_DOT

LZ:	MOVE.W	#-1,D1
	MOVE.W	D2,D3
	SUB.W	D0,D3		;Z^2
	ADD.W	D3,D3		
	SUB.W	(A2,D3.W),D1	;(A2,D3) = Z
	ADD.W	D1,D1
	MOVE.W	(A3,D1.W),D0	;D1 = (LZ-Z)^2
	
LX:	MOVE.W	#-1,D1
	SUB.W	D4,D1
	ADD.W	D1,D1
	ADD.W	(A3,D1.W),D0	;D0 = (LX-X)^2+(LZ-Z)^2
		
LY:	MOVE.W	#-1,D1
	SUB.W	D5,D1
	ADD.W	D1,D1
	ADD.W	(A3,D1.W),D0	;D0 = (LX-X)^2+(LY-Y)^2+(LZ-Z)^2
	
	LSR.W	#5,D0		;D0 = (D0*LUM)/R^2
	SUB.W	#16,D0
	NEG.W	D0		;D0 = 16-(DIST*LUM)/(R^2)

	CMP.W	#15,D0
	BGE.S	DO_15
	TST.W	D0
	BGT.S	JUST_R
	MOVEQ	#1,D0
	BRA.S	JUST_R
DO_15:	MOVEQ	#15,D0
JUST_R:
	
	ADD.W	D5,D5		;COOR Y
	MOVE.W	(A4,D5.W),D3	;D3=*160

	MOVE.W	D4,D5		;D4 = COOR X
	AND.W	#$F,D4		;D4 = DEC DE 16
	ADD.W	D5,D5
	ADD.W	(A1,D5.W),D3	;D5 = OFF DE 16

	LSL.W	#7,D0
	LSL.W	#3,D4
	ADD.W	D0,D4
	MOVEM.L	(A5,D4.W),D0-D1
	OR.L	D0,(A0,D3.W)
	OR.L	D1,4(A0,D3.W)

NO_DOT:		
	DBRA	D7,LOOPY
	DBRA	D6,LOOPX
	
	ADDQ	#2,SP
	MOVE.L	(SP)+,A1
	RTS

		
PAL:	DC.W	0,$100,$200,$300,$400,$500,$600,$700,$711,$722,$733
	DC.W	$744,$755,$766,$777,$777


SHIFT_0:	DCB.W	16*4,0

SHIFT_1:	DC.W	32768,0,0,0
	DC.W	16384,0,0,0
	DC.W	8192,0,0,0
	DC.W	4096,0,0,0
	DC.W	2048,0,0,0
	DC.W	1024,0,0,0
	DC.W	512,0,0,0
	DC.W	256,0,0,0
	DC.W	128,0,0,0
	DC.W	64,0,0,0
	DC.W	32,0,0,0
	DC.W	16,0,0,0
	DC.W	8,0,0,0
	DC.W	4,0,0,0
	DC.W	2,0,0,0
	DC.W	1,0,0,0

SHIFT_2:	DC.W	0,32768,0,0
	DC.W	0,16384,0,0
	DC.W	0,8192,0,0
	DC.W	0,4096,0,0
	DC.W	0,2048,0,0
	DC.W	0,1024,0,0
	DC.W	0,512,0,0
	DC.W	0,256,0,0
	DC.W	0,128,0,0
	DC.W	0,64,0,0
	DC.W	0,32,0,0
	DC.W	0,16,0,0
	DC.W	0,8,0,0
	DC.W	0,4,0,0
	DC.W	0,2,0,0
	DC.W	0,1,0,0

SHIFT_3:	DC.W	32768,32768,0,0
	DC.W	16384,16384,0,0
	DC.W	8192,8192,0,0
	DC.W	4096,4096,0,0
	DC.W	2048,2048,0,0
	DC.W	1024,1024,0,0
	DC.W	512,512,0,0
	DC.W	256,256,0,0
	DC.W	128,128,0,0
	DC.W	64,64,0,0
	DC.W	32,32,0,0
	DC.W	16,16,0,0
	DC.W	8,8,0,0
	DC.W	4,4,0,0
	DC.W	2,2,0,0
	DC.W	1,1,0,0


SHIFT_4:	DC.W	0,0,32768,0
	DC.W	0,0,16384,0
	DC.W	0,0,8192,0
	DC.W	0,0,4096,0
	DC.W	0,0,2048,0
	DC.W	0,0,1024,0
	DC.W	0,0,512,0
	DC.W	0,0,256,0
	DC.W	0,0,128,0
	DC.W	0,0,64,0
	DC.W	0,0,32,0
	DC.W	0,0,16,0
	DC.W	0,0,8,0
	DC.W	0,0,4,0
	DC.W	0,0,2,0
	DC.W	0,0,1,0

SHIFT_5:	DC.W	32768,0,32768,0
	DC.W	16384,0,16384,0
	DC.W	8192,0,8192,0
	DC.W	4096,0,4096,0
	DC.W	2048,0,2048,0
	DC.W	1024,0,1024,0
	DC.W	512,0,512,0
	DC.W	256,0,256,0
	DC.W	128,0,128,0
	DC.W	64,0,64,0
	DC.W	32,0,32,0
	DC.W	16,0,16,0
	DC.W	8,0,8,0
	DC.W	4,0,4,0
	DC.W	2,0,2,0
	DC.W	1,0,1,0


SHIFT_6:	DC.W	0,32768,32768,0
	DC.W	0,16384,16384,0
	DC.W	0,8192,8192,0
	DC.W	0,4096,4096,0
	DC.W	0,2048,2048,0
	DC.W	0,1024,1024,0
	DC.W	0,512,512,0
	DC.W	0,256,256,0
	DC.W	0,128,128,0
	DC.W	0,64,64,0
	DC.W	0,32,32,0
	DC.W	0,16,16,0
	DC.W	0,8,8,0
	DC.W	0,4,4,0
	DC.W	0,2,2,0
	DC.W	0,1,1,0

SHIFT_7:	DC.W	32768,32768,32768,0
	DC.W	16384,16384,16384,0
	DC.W	8192,8192,8192,0
	DC.W	4096,4096,4096,0
	DC.W	2048,2048,2048,0
	DC.W	1024,1024,1024,0
	DC.W	512,512,512,0
	DC.W	256,256,256,0
	DC.W	128,128,128,0
	DC.W	64,64,64,0
	DC.W	32,32,32,0
	DC.W	16,16,16,0
	DC.W	8,8,8,0
	DC.W	4,4,4,0
	DC.W	2,2,2,0
	DC.W	1,1,1,0


SHIFT_8:	DC.W	0,0,0,32768 
	DC.W	0,0,0,16384
	DC.W	0,0,0,8192
	DC.W	0,0,0,4096
	DC.W	0,0,0,2048
	DC.W	0,0,0,1024
	DC.W	0,0,0,512
	DC.W	0,0,0,256
	DC.W	0,0,0,128
	DC.W	0,0,0,64
	DC.W	0,0,0,32
	DC.W	0,0,0,16
	DC.W	0,0,0,8
	DC.W	0,0,0,4
	DC.W	0,0,0,2
	DC.W	0,0,0,1


SHIFT_9:	DC.W	32768,0,0,32768
	DC.W	16384,0,0,16384
	DC.W	8192,0,0,8192
	DC.W	4096,0,0,4096
	DC.W	2048,0,0,2048
	DC.W	1024,0,0,1024
	DC.W	512,0,0,512
	DC.W	256,0,0,256
	DC.W	128,0,0,128
	DC.W	64,0,0,64
	DC.W	32,0,0,32
	DC.W	16,0,0,16
	DC.W	8,0,0,8
	DC.W	4,0,0,4
	DC.W	2,0,0,2
	DC.W	1,0,0,1

SHIFT_10:	DC.W	0,32768,0,32768
	DC.W	0,16384,0,16384
	DC.W	0,8192,0,8192
	DC.W	0,4096,0,4096
	DC.W	0,2048,0,2048
	DC.W	0,1024,0,1024
	DC.W	0,512,0,512
	DC.W	0,256,0,256
	DC.W	0,128,0,128
	DC.W	0,64,0,64
	DC.W	0,32,0,32
	DC.W	0,16,0,16
	DC.W	0,8,0,8
	DC.W	0,4,0,4
	DC.W	0,2,0,2
	DC.W	0,1,0,1

SHIFT_11:	DC.W	32768,32768,0,32768
	DC.W	16384,16384,0,16384
	DC.W	8192,8192,0,8192
	DC.W	4096,4096,0,4096
	DC.W	2048,2048,0,2048
	DC.W	1024,1024,0,1024
	DC.W	512,512,0,512
	DC.W	256,256,0,256
	DC.W	128,128,0,128
	DC.W	64,64,0,64
	DC.W	32,32,0,32
	DC.W	16,16,0,16
	DC.W	8,8,0,8
	DC.W	4,4,0,4
	DC.W	2,2,0,2
	DC.W	1,1,0,1


SHIFT_12:	DC.W	0,0,32768,32768
	DC.W	0,0,16384,16384
	DC.W	0,0,8192,8192
	DC.W	0,0,4096,4096
	DC.W	0,0,2048,2048
	DC.W	0,0,1024,1024
	DC.W	0,0,512,512
	DC.W	0,0,256,256
	DC.W	0,0,128,128
	DC.W	0,0,64,64
	DC.W	0,0,32,32
	DC.W	0,0,16,16
	DC.W	0,0,8,8
	DC.W	0,0,4,4
	DC.W	0,0,2,2
	DC.W	0,0,1,1


SHIFT_13:	DC.W	32768,0,32768,32768
	DC.W	16384,0,16384,16384
	DC.W	8192,0,8192,8192
	DC.W	4096,0,4096,4096
	DC.W	2048,0,2048,2048
	DC.W	1024,0,1024,1024
	DC.W	512,0,512,512
	DC.W	256,0,256,256
	DC.W	128,0,128,128
	DC.W	64,0,64,64
	DC.W	32,0,32,32
	DC.W	16,0,16,16
	DC.W	8,0,8,8
	DC.W	4,0,4,4
	DC.W	2,0,2,2
	DC.W	1,0,1,1



SHIFT_14:	DC.W	0,32768,32768,32768
	DC.W	0,16384,16384,16384
	DC.W	0,8192,8192,8192
	DC.W	0,4096,4096,4096
	DC.W	0,2048,2048,2048
	DC.W	0,1024,1024,1024
	DC.W	0,512,512,512
	DC.W	0,256,256,256
	DC.W	0,128,128,128
	DC.W	0,64,64,64
	DC.W	0,32,32,32
	DC.W	0,16,16,16
	DC.W	0,8,8,8
	DC.W	0,4,4,4
	DC.W	0,2,2,2
	DC.W	0,1,1,1


SHIFT_15:	DC.W	32768,32768,32768,32768
	DC.W	16384,16384,16384,16384
	DC.W	8192,8192,8192,8192
	DC.W	4096,4096,4096,4096
	DC.W	2048,2048,2048,2048
	DC.W	1024,1024,1024,1024
	DC.W	512,512,512,512
	DC.W	256,256,256,256
	DC.W	128,128,128,128
	DC.W	64,64,64,64
	DC.W	32,32,32,32
	DC.W	16,16,16,16
	DC.W	8,8,8,8
	DC.W	4,4,4,4
	DC.W	2,2,2,2
	DC.W	1,1,1,1

	
MUL_260:	DS.W	200
WIRD:	DS.W	320
SQR:
	INCLUDE	RACINE.SQR
CARRE:	
	INCLUDE	CARRE.CAR	


;////////////////////// QUEEN'N'ZE END\\\\\\\\\\\\\\\\\\\

QUEEN:    JSR	CLS1
	JSR	CLS2
	MOVE.L	PHYS,D0
	JSR	SWAP
	JSR	VSYNC
	
	MOVEM.L	BLEU,D0-D7
	MOVEM.L	D0-D7,$FFFFFF8240.W
	MOVEQ	#6-1,D0
	MOVE.L	#T19,A0
	MOVE.L	#LIST2,A2
DPRO2:	MOVE.L	PHYS,A1
	MOVE.L	(A2)+,A5
	MOVE.L	#WHERE_1,A4
	JSR	PRINT_PAGE
	LEA.L	20*12(A0),A0
	DBRA	D0,DPRO2

	JMP	FINISHED **********AAAAARRRRRGGGGGGHHHHHHHH******
*******************************************************************

		
AZERTY:	BRA	AZERTY
LIGNE_MAN:	DC.W	-50*160

	;DC.B	"****************************************"
POO1:	DC.B	"      UN JOUR. AU FOND D:UN TRUST       "
	DC.B	"                                        "
	DC.B	"    UN SERPENT PIQUA ZIGGY STARDUST     "
	DC.B	"                                        "
	DC.B	"     QUE CROYEZ VOUS QU:IL ARRIVA?      "
	DC.B	"                                        "
	DC.B	"      CE FUT LE SERPENT QUI CREVA,,,    "
	DC.B	"                                        "
	DC.B	"                                        "
	DC.B	"                    THE HOOVOLTAIRELIGAN"

POO2:	DC.B	" AFTER MANY COMPLAINS ABOUT THE COMPANY "
	DC.B	"                                        "
	DC.B	" COMMODORE. THE JUDGES DECIDED TO FORCE " 
	DC.B	"                                        "
	DC.B	"COMMODORE TO CHANGE THE BASICS ON AMIGA "
	DC.B	"                                        "
	DC.B	" SO AS TO REPLACE THE INSTRUCTION :RUN: "
	DC.B	"                                        "
	DC.B	"       BY THE INSTRUCTION :WALK:        "
	DC.B	"                                        "
	DC.B	"                                        "
	DC.B	"  IT WAS YOUR CORRESPONDANT IN SIBERIA  "
	DC.B	"                                        "
	DC.B	"MR HOOREPORTERLIGAN FOR THE NINE:O:CLOCK"
	DC.B	"                                        "
	DC.B	"                 NEWS                   "

FINISHED:
	JSR	BACK_INT
	MOVE.B	#$A,$FFFFF8800.W
	MOVE.B	#$0,$FFFFF8802.W
	MOVE.B	#$9,$FFFFF8800.W
	MOVE.B	#$0,$FFFFF8802.W
	MOVE.B	#$8,$FFFFF8800.W
	MOVE.B	#$0,$FFFFF8802.W
	MOVE.W    #$777,$FF8240
	MOVE.W    #$000,$FF8246
		
	CLR.W	-(SP)
	TRAP	#1		;SYS



VSYNC:	TST.B	CL
	BEQ.S	VSYNC
	MOVE.B	#0,CL
RRTS:	RTS		***** NE PAS ENLEVER CE LABEL!

CLS1:	MOVEM.L	A0/D0,-(SP)
	MOVE.L	PHYS,A0
	MOVE.W	#8000-1,D0
CLS_LP:	MOVE.L	#0,(A0)+
	DBRA	D0,CLS_LP
	MOVEM.L	(SP)+,A0/D0
	RTS

CLS2:	MOVEM.L	A0/D0,-(SP)
	MOVE.L	PHYS2,A0
	MOVE.W	#8000-1,D0
CLS_LP2:	MOVE.L	#0,(A0)+
	DBRA	D0,CLS_LP2
	MOVEM.L	(SP)+,A0/D0
	RTS

NO_PAL:	MOVEM.L	A0/D0,-(SP)
	MOVE.L	#$FFFFFF8240,A0
	MOVE.W	#8-1,D0
NOP_LP:	MOVE.L	#0,(A0)+
	DBRA	D0,NOP_LP
	MOVEM.L	(SP)+,A0/D0
	RTS	

FADE_IN:	MOVEM.L	D0-D7/A0/A5,-(SP)
FADE_INL:	JSR	VSYNC
	JSR	VSYNC
	JSR	VSYNC
	MOVEM.L	(A0)+,D1-D7/A5
	MOVEM.L	D1-D7/A5,$FFFFF8240.W
	DBRA	D0,FADE_INL
	MOVEM.L	(SP)+,D0-D7/A0/A5
	RTS

FADE_OUT:	MOVEM.L	D0-D7/A0/A5,-(SP)
FADE_OUL:	JSR	VSYNC
	JSR	VSYNC
	JSR	VSYNC
	MOVEM.L	(A0),D1-D7/A5
	MOVEM.L	D1-D7/A5,$FFFFF8240.W
	LEA.L	-32(A0),A0
	DBRA	D0,FADE_OUL
	MOVEM.L	(SP)+,D0-D7/A0/A5
	RTS

PAUSE:	JSR	VSYNC
	DBRA	D0,PAUSE
	RTS

SWAP:	LSR.L	#8,D0
	MOVE.B	D0,$FFFFF8203.W
	LSR.W	#8,D0
	MOVE.B	D0,$FFFFF8201.W
	RTS



XVBLX:	move.b	#1,$fffff8260.w
	clr.b	$fffff8260.w
	MOVEM.L	D0-D7/A0-A5,-(SP)

	move.l	sdtvar,a5		;lit le buffer
	move.l	(a5),a6		;a jouer cette vbl!

	MOVE.B	#0,$FFFFFFA1B.W
	;MOVE.B	#1,$FFFFFFA21.W
	;MOVE.B	#8,$FFFFFFA1B.W
	;MOVE.L	HLABEL,$120	

	;TST.L	LOAD	
	;BEQ	NO_LOAD
	;MOVE.L	LOAD,A6

NO_LOAD	MOVE.B	#1,CL

	;moveq	#1,d0		; d0 = 1 <=> jouer
	;jsr	player		; prepare zik pour cette vbl
	
	CMPI.B	#$3B,$FFFFFC02.W
	BEQ	FINISHED
	
	MOVEM.L	(SP)+,D0-D7/A0-A5
	RTE
	


VBL:	move.b	#1,$fffff8260.w
	clr.b	$fffff8260.w
	MOVEM.L	D0-D7/A0-A5,-(SP)

	move.l	sdtvar,a5		;lit le buffer
	move.l	(a5),a6		;a jouer cette vbl!

	MOVE.B	#0,$FFFFFFA1B.W
	;MOVE.B	#1,$FFFFFFA21.W
	;MOVE.B	#8,$FFFFFFA1B.W
	;MOVE.L	HLABEL,$120	

	;TST.L	LOAD	
	;BEQ	NO_LOAD
	;MOVE.L	LOAD,A6

	MOVE.B	#1,CL

	moveq	#1,d0		; d0 = 1 <=> jouer
	jsr	player		; prepare zik pour cette vbl
	
	CMPI.B	#$3B,$FFFFFC02.W
	BEQ	FINISHED
BOF:	
	MOVEM.L	(SP)+,D0-D7/A0-A5
	RTE

PILE:	DC.W	0
FADE_VBL:	
	MOVEM.L	D0-D7/A0-A5,-(SP)
	
	move.l	sdtvar,a5		;lit le buffer
	move.l	(a5),a6		;a jouer cette vbl!

	MOVE.B	#0,$FFFFFFA1B.W
	MOVE.B	#1,CL
	MOVE.W	PILE,$FFFFFF825E.W

	moveq	#1,d0		; d0 = 1 <=> jouer
	jsr	player		; prepare zik pour cette vbl
	
	CMPI.B	#$3B,$FFFFFC02.W
	BEQ	FINISHED

	MOVEM.L	(SP)+,D0-D7/A0-A5
	RTE


STAR_VBL:	
	MOVEM.L	D0-D7/A0-A5,-(SP)

	move.l	sdtvar,a5		;lit le buffer
	move.l	(a5),a6		;a jouer cette vbl!

	MOVE.B	#0,$FFFFFFA1B.W
	MOVE.B	#1,CL

; LOGO, LIGNE PAR LIGNE!!!
;62 = CENTRE
B	CMP.W	#76*160,LIGNE_MAN
	BHS	SYNC_NOW

	MOVEQ	#0,D0
	MOVE.W	LIGNE_MAN,D0
	DIVU.W	#160,D0
	MULU.W	#160,D0
	MOVE.W	D0,LIGNE_MAN
	
	MOVE.L	#PIC+34+124*160,A0
	ADD.W	LIGNE_MAN,A0

	MOVE.L	PHYS,A1
	ADD.L	#62*160,A1
	MOVEQ	#0,D0
	MOVE.W	LIGNE_MAN,D0
	ADD.L	D0,A1
	
	MOVE.W	#40-1,D1
LEUM:	MOVE.L	(A0)+,(A1)+	;AKEU SLT 2 PLANS!
	DBRA	D1,LEUM	

SYNC_NOW:	ADD.W	#160,LIGNE_MAN

;POUR LES SPRITES, 1 MOT LONG = ADR DE LA SPR ROUT
;	         1 MOT LONG = ADR DE SA ROUT D'EFF.
;
; SOIT: No * 8   POUR AVOIR UN DES OFFSET 0-15 DU MEME SPRITES
;       No * 128 POUT PASSER AU SPRITES SUIVANT
; LE SPRITE LE PLUS LENT A AFFICHE SE MET 53 FOIS DS LE BORDER HAUT
; (EN CONTANT LE PRECALCULE POUR LA DEFORMATION)!

NB_SPR EQU 50

	MOVEQ.L	#0,D0
	MOVEQ.L	#0,D1
	MOVEQ.L	#0,D2
		
	MOVE.L	#SAVER,A4
	REPT	NB_SPR		;1 = Nbr DE SPRITES
	MOVEM.L	(A4)+,A0-A1
	JSR	(A1)
	ENDR
	
	MOVE.L	#WAVE,A3		;VAGUE...
	ADD.W	SPR_WAVER,A3
	ADD.W	#4*NB_SPR,SPR_WAVER	;1 = Nbr DE SPRITES
	CMP.W	#49*4*NB_SPR,SPR_WAVER
	BLO.S	WAVER_OK
	MOVE.W	#0,SPR_WAVER
WAVER_OK
	MOVE.W	#NB_SPR-1,D7	;Nbr DE SPRITES
	;MOVE.L	PHYS,A0
	;MOVE.L	A0,A1		;SAUVGUARDE
	MOVE.L	#SPR1,A2
	MOVE.L	#MULT_160,A5
	MOVE.L	#SAVER,A4		;SVGUARDE LES DONNES POUR EFFACER
		
SPRITES:	MOVE.L	PHYS,A0
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D2
	MOVE.W	(A3)+,D0		;COOR X  (+000 a +413)
	MOVE.B	(A3)+,D1		;COOR Y  (+000 a +076)
	MOVE.B	(A3)+,D2		;TAILLE  (+000 a +007)

	MOVE.W	D0,D3
	AND.W	#$F,D0		;MODULO 16	
	SUB.W	D0,D3		;OFF DE 16
	LSR.W	#1,D3		;/2
	ADD.W	D1,D1
	MOVE.W	(A5,D1.W),D1	;Y * 160
	ADD.W	D3,D1
	ADD.L	D1,A0		;PLOT ZE SPRITE HERE!	
	MOVE.L	A0,(A4)+
	LSL.W	#7,D2		;D2 = D2 * 128
	LSL.W	#3,D0		;D0 = D0 * 8
	ADD.W	D0,D2
	
	MOVE.L	(A2,D2.W),A1
	MOVE.L	4(A2,D2.W),(A4)+
	JSR	(A1)
	DBRA	D7,SPRITES

	moveq	#1,d0		; d0 = 1 <=> jouer
	jsr	player		; prepare zik pour cette vbl
	
	CMPI.B	#$3B,$FFFFFC02.W
	BEQ	FINISHED
	MOVEM.L	(SP)+,D0-D7/A0-A5
	RTE


HBL:	MOVE.W	(A6)+,$FFFFFFF824E.W
	RTE


;A0 = ADR TEXTE
;A1 = ADR ECRAN
;A4 = ADR DES DONNEES POUR FAIRE APPARAITRE
;A5 = ADR MASK POUR APPARITION
PRINT_PAGE:
	MOVEM.L	D0-D7/A0-A5,-(SP)

	MOVEM.L	START_ALL,D0-D4
	MOVEM.L	D0-D4,K_1

	MOVE.L	A1,D5
	ADD.L	#11*16*160+158,D5
	
	MOVE.W	#240-1,D4
	MOVE.L	A0,D7

SNOF:	MOVE.W	#10-1,D1
	MOVE.L	#K_1,A2
	MOVE.L	A4,A3
	MOVE.L	D7,A0
	
SNIF:	CMP.W	#11*16*160+158,(A3)
	BHI	NO_WRT

	MOVEQ	#0,D0
	MOVE.B	(A0)+,D0

	CMP.B	#"0",D0	;$30
	BLO	TST2
	CMP.B	#"9",D0
	BHI	TST2
	ADD.B	#"Z"-"0"+1,D0

TST2:	CMP.B	#"!",D0
	BNE	TST3
	MOVE.B	#"Z"+11,D0

TST3:	CMP.B	#"+",D0	;+="
	BNE	TST4
	MOVE.B	#"Z"+12,D0

TST4:	CMP.B	#"*",D0
	BNE	TST5
	MOVE.B	#"Z"+13,D0

TST5:	CMP.B	#"(",D0
	BNE	TST6
	MOVE.B	#"Z"+14,D0

TST6:	CMP.B	#")",D0
	BNE	TST7
	MOVE.B	#"Z"+15,D0

TST7:	CMP.B	#"-",D0
	BNE	TST8
	MOVE.B	#"Z"+16,D0
	
TST8:	CMP.B	#"/",D0
	BNE	TST9
	MOVE.B	#"Z"+17,D0

TST9:	CMP.B	#":",D0
	BNE	TST10
	MOVE.B	#"Z"+18,D0
	
TST10:	CMP.B	#";",D0
	BNE	TST11
	MOVE.B	#"Z"+19,D0

TST11:	CMP.B	#"#",D0
	BNE	TST12
	MOVE.B	#"Z"+21,D0

TST12:	CMP.B	#",",D0
	BNE	TST13
	MOVE.B	#"Z"+22,D0

TST13:	CMP.B	#".",D0
	BNE	TST14
	MOVE.B	#"Z"+23,D0

TST14:	CMP.B	#"?",D0
	BNE	TST15
	MOVE.B	#"Z"+24,D0
TST15:
	CMP.B	#" ",D0
	BNE	TST16
	MOVE.B	#50,D0

TST16:	CMP.B	#"'",D0
	BNE	TST17
	MOVE.B	#"Z"+20,D0

TST17:	MOVE.W	(A2),D2
	ADD.W	#1,(A2)+
	MOVE.L	A1,D3
	ADD.L	(A3)+,D3

	CMP.L	D5,D3
	BHI	NO_WRT
	CMP.B	#50,D0
	BEQ	NO_WRT
	
	SUB.B	#"A",D0	
	JSR	PRINT_IT
	MOVE.W	#1,DID_PRINT
NO_WRT:	DBRA	D1,SNIF

	ADDQ	#1,D7
	MOVE.L	D7,A0
	
	CMP.W	#11*16*160+158,(A4)
	BHI	ENFIN
	ADD.L	#4,A4		
ENFIN:	MOVE.L	#K_1,A2

	REPT	9
	MOVE.W	2(A2),(A2)+
	ENDR
	MOVE.W	#1,(A2)
	
	TST.W	DID_PRINT
	BEQ	NO_SYNCRO

	JSR	VSYNC
	MOVE.W	#0,DID_PRINT
		
NO_SYNCRO:DBRA	D4,SNOF
	
	MOVE.W	#400,D0
	JSR	PAUSE

	MOVE.L	#BLEU,A0
	MOVE.W	#8-1,D0
	JSR	FADE_IN
	
	JSR	CLS1

	MOVEM.L	BLEU,D0-D7
	MOVEM.L	D0-D7,$FFFFFF8240.W		
	MOVEM.L	(SP)+,D0-D7/A0-A5
	RTS

DID_PRINT:DC.W	0

;PRINT ROUT:
;CARACTERE DS D0
;ANIMATION DS D2
;ECRAN+POS DS D3
;A5 = MASK!

PRINT_IT:
	MOVEM.L	D0-D7/A0-A5,-(SP)
	MOVE.L	#F_T,A2
	ADD.W	D0,D0
	ADD.W	D0,D0
	MOVE.L	(A2,D0.W),A2

	SUBQ	#1,D2
	CMP.W	#19,D2
	BLO	OK_F_D2
	MOVEQ	#0,D2
OK_F_D2:	MULU.W	#8,D2
	ADD.W	D2,A5

	LEA.L	(A2),A3		;FONT
	MOVE.L	D3,A1		;PHYS

	MOVEQ	#15-1,D0
NOD	SET	0
	REPT	16
	MOVE.L	NOD*160(A2),NOD*160(A1)
	MOVE.L	4+NOD*160(A2),4+NOD*160(A1)
	MOVEM.L	NOD*160(A5),D1-D2
	AND.L	D1,NOD*160(A1)
	AND.L	D2,4+NOD*160(A1)
NOD	SET	NOD+1
	ENDR
	
	MOVEM.L	(SP)+,D0-D7/A0-A5
	RTS



WHERE_1:
NOD	SET	0
	REPT	13
	DC.L	0+NOD,8+NOD,16+NOD,24+NOD,32+NOD,40+NOD,48+NOD,56+NOD,64+NOD,72+NOD
	DC.L	80+NOD,88+NOD,96+NOD,104+NOD,112+NOD,120+NOD,128+NOD,136+NOD,144+NOD,152+NOD
NOD	SET	NOD+160*16
	ENDR

WHERE_2:
NOD	SET	0
	REPT	7
 DC.L 0+NOD,8+NOD,16+NOD,24+NOD,32+NOD,40+NOD,48+NOD,56+NOD,64+NOD,72+NOD
 DC.L 80+NOD,88+NOD,96+NOD,104+NOD,112+NOD,120+NOD,128+NOD,136+NOD,144+NOD,152+NOD
NOD SET NOD+16*160
 DC.L 152+NOD,144+NOD,136+NOD,128+NOD,120+NOD,112+NOD,104+NOD,96+NOD,88+NOD,80+NOD
 DC.L 72+NOD,64+NOD,56+NOD,48+NOD,40+NOD,32+NOD,24+NOD,16+NOD,8+NOD,0+NOD
NOD SET NOD+16*160
	ENDR
	
WHERE_3:	
NOD SET 0
	REPT	20
 DC.L 0+NOD,16*160+NOD,2*16*160+NOD,3*16*160+NOD,4*16*160+NOD,5*16*160
 DC.L 6*16*160+NOD,7*16*160+NOD,8*16*160+NOD,9*16*160+NOD,10*16*160
 DC.L 11*16*160+NOD,12*16*160
NOD SET NOD+8
	ENDR
	
WHERE_4:
NOD SET 0
	REPT	10
 DC.L 0+NOD,16*160+NOD,2*16*160+NOD,3*16*160+NOD,4*16*160+NOD,5*16*160+NOD
 DC.L 6*16*160+NOD,7*16*160+NOD,8*16*160+NOD,9*16*160+NOD,10*16*160+NOD
 DC.L 11*16*160+NOD,12*16*160+NOD
NOD SET NOD+8
 DC.L 12*16*160+NOD,11*16*160+NOD
 DC.L 10*16*160+NOD,9*16*160+NOD,8*16*160+NOD,7*16*160+NOD,6*16*160+NOD
 DC.L 5*16*160+NOD,4*16*160+NOD,3*16*160+NOD,2*16*160+NOD,1*16*160+NOD,NOD 
NOD SET NOD+8
	ENDR

W_L:	DC.L	WHERE_1,WHERE_2,WHERE_3,WHERE_4
	DC.L	WHERE_1,WHERE_2,WHERE_3,WHERE_4
	DC.L	WHERE_1,WHERE_2,WHERE_3,WHERE_4
		
K_1:	DCB.W	10,0
START_ALL:	DC.W	10,9,8,7,6,5,4,3,2,1

	*DC.B	"********************"
T1:
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"  ONCE UPON A TIME  "
	DC.B	"IN SOME SECRET PLACE"
	DC.B	"   WAS DESIGNED A   "
	DC.B	"COMPUTER WICH BECAME"
	DC.B	"THE BEST 68000 USING"
	DC.B	"     MACHINE...     "
	DC.B	"                    "
	DC.B	"    THE ATARI ST    "
	DC.B	"                    "
	DC.B	"                    "

T2:
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"  SOME WIZZ CODERS  "
	DC.B	"  TALENTED GFX MEN  "
	DC.B	"AND AMAZING MUSICANS"
	DC.B	" DECIDED TO SHOW THE"
	DC.B	" WORLD WHAT THIS ST "
	DC.B	"     COULD DO!!     "
	DC.B	"                    "
	DC.B	" THE WORLD OF DEMOS "
	DC.B	"     WAS BORN...    "
	DC.B	"                    "
T3:
	DC.B	"EVER SINCE DEMOS HAD"
	DC.B	"ONLY ONE AIM: TO GET"
	DC.B	"THE MOST OUT OF THIS"
	DC.B	"ST...THEN CAME A NEW"
	DC.B	" KIND OF DEMOS: THE "
	DC.B	"  ORIGINAL DEMOS!!  "
	DC.B	"UNFORTUNATELY,I HATE"
	DC.B	" FUCKING AROUND WITH"
	DC.B	" SPEED LIMITS,AND I "
	DC.B	"AM NOT ORIGINAL...SO"
	DC.B	" I NEEDED SOMETHING "
	DC.B	"       NEW...       "

T4:
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"  YES, LAMER, THE   "
	DC.B	"  HOOLIGAN IS BACK  "
	DC.B	"  WITH HIS LATEST   "
	DC.B	"       SCR...       "
	DC.B	"                    "
	DC.B	"  WHAT DID YOU SAY? "
	DC.B	"   WHO IS DIS GUY?  "  
	DC.B	"                    "
	DC.B	"                    "

T5:	DC.B	"YOU HAVE IT, SUCKER!"
	DC.B	"                    "
	DC.B	"  DID YOU KNOW HOW  "
	DC.B	"MISERABLE LIFE WOULD"
	DC.B	"     BE WITHOUT     "
	DC.B	"LITTERATURE? THIS IS"
	DC.B	"   ONE OF THE MOST  " 
	DC.B	" IMPORTANT WONDER OF"
	DC.B	"ALL-TIME PHILOSOPHY!"
	DC.B	" IT IS ALSO A CLEAN "
	DC.B	" WAY TO INTRODUCE MY"
	DC.B	"       POEM...      "
T6:	
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"ANY RESEMBLANCE WITH"
	DC.B	" ANY EXISTING FACT  "
	DC.B	" IS WANTED, AND THE "
	DC.B	" NAMES HAVEN'T BEEN "
	DC.B	"CHANGED AS NO ONE IS"
	DC.B	"     INNOCENT!      "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "

T7:	
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"THIS HAS NOTHING TO "
	DC.B	"DO WITH THAT, BUT I "
	DC.B	"  MANAGED TO GET A  "
	DC.B	"SNEAKY PREVIEW FROM "
	DC.B	"THE NEXT DEMOS OF ZE"
	DC.B	"  HOPERLANDERS...   "
	DC.B	"D'YA WANT TO SEE IT?"
	DC.B	"                    "
	DC.B	"                    "

T8:	
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"   IT IS CALLED:    "
	DC.B	"+THINGS THAT GO BUMP"
	DC.B	"    IN THE DAY+     "
	DC.B	"     OR WAS IT:     "
	DC.B	"+YOUR ASHTRAY IS MY "
	DC.B	"     MIND+ ???      "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "

T9:	
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"ENOUGH OF PREVIEWS! "
	DC.B	"                    "
	DC.B	" NOW, BELIEVE ME OR "
	DC.B	"DON'T, BUT WHAT YOU "
	DC.B	"ARE ABOUT TO SEE IS "
	DC.B	"NOT PRECALCULATED!!!"
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "

T10:	
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"AND, OF COURSE IT IS"
	DC.B	" -NOT- PACKED PICS  "
	DC.B	" OR SOME KIND OF A  "
	DC.B	" WEIRD TECHNIQUE... "
	DC.B	"IT IS REAL TIME,KID!"
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "

T11:	
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	" HEY MAN, YOU DON'T "
	DC.B	"SEEM TO BELIEVE ME!!"
	DC.B	"I TOLD YOU IT WASN'T"
	DC.B	"   PRECALCULATED!   "
	DC.B	"  NOW, JUST WAIT A  "
	DC.B	"MINUTE,I NEED TO GET"
	DC.B	"      READY...      "
	DC.B	"                    "
	DC.B	"                    "
T12:	
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"OF COURSE, THE FACT "
	DC.B	"  YOU HAVE TO WAIT  "
	DC.B	"  DOESN'T MEAN I'M  "
	DC.B	" DOING CALCULATIONS "
	DC.B	"CAUSE I'M NOT DOING "
	DC.B	"ANY CALCULATIONS...."
	DC.B	"(I WOULD TELL YOU IF"
	DC.B	"  I DID,OF COURSE)  "
	DC.B	"                    "
	DC.B	"                    "
	
T13:	
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	" WHAT YOU JUST SAW  "
	DC.B	"  WAS A 63999 DOT   "
	DC.B	"STARFIELD, ALL ALONG"
	DC.B	"WITH A FUCKING NEAT "
	DC.B	"    AMIGA-TUNE!     "
	DC.B	"HASTA LA VISTA,BAYBE"
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "

T14:	
	DC.B	"                    "
	DC.B	"                    "
	DC.B	" WHAT IS PHILOSOPHY,"
	DC.B	"  AFTER ALL? I AM A "
	DC.B	"  PHILOSOPHER, AS I "
	DC.B	"THINK OF OUR LIFE AS"
	DC.B	"DEMO CODERS. TALKING"
	DC.B	" ABOUT THAT,I AM SAD"
	DC.B	" COZ IT SEEMS TO ME "
	DC.B	"THAT DEMOS WILL STOP"
	DC.B	" AT OUR GENERATIONS."
	DC.B	"                    "

T15:	
	DC.B	"                    "
	DC.B	"IT STARTED WITH OUR "
	DC.B	" GENERATION, ON THE "
	DC.B	"C64, BUT NOW ALL THE"
	DC.B	" KIDS HAVE CONSOLES "
	DC.B	"AND VERY FEW OF THEM"
	DC.B	" WANT COMPUTERS.BUT "
	DC.B	" WHEN THEY DO, THEY "
	DC.B	" EITHER WANT IT COZ "
	DC.B	"  THEY CAN COPY THE "
	DC.B	"GAMES(SO AS TO PLAY)"
	DC.B	"                    "

T16:	
	DC.B	"                    "
	DC.B	" AND THE OTHERS WANT"
	DC.B	"A PC,AND THEIR DREAM"
	DC.B	"IS TO BECOME A LAMER"
	DC.B	"(THEY SAY INFORMATIC"
	DC.B	"INGENIOR ) IN AN IBM"
	DC.B	"COMPANY.THE DEMOS'RE"
	DC.B	"GOING TO DIE,THE FUN"
	DC.B	"IS GOING TO DIE, THE"
	DC.B	"PARTIES ARE GOING TO"
	DC.B	"DIE, AND I'M SAD...."
	DC.B	"                    "

T17:	
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"NOW,THE NINE'O'CLOCK"
	DC.B	"       NEWS!        "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "

T18:	
	DC.B	"HEY, I THINK LIFE IS"
	DC.B	"LIKE A BIG SIMULATOR"
	DC.B	"    WITH PERFECT    "
	DC.B	"RAYTRACED PICTURES!!"
	DC.B	"                    "
	DC.B	" WELL, I COULD TALK "
	DC.B	"    ALL DAY ABOUT   "
	DC.B	"    META-PHYSICAL   "
	DC.B	"  PROBLEMS, BUT ALL "
	DC.B	"   I WANTED WAS TO  "
	DC.B	" INTRODUCE MY BALL! "
	DC.B	"TRY CURSORS,INS,CLRH"


T19:	
	DC.B	"                    "
	DC.B	" MARIO, FONDATOR OF "
	DC.B	" M.C.S JUST DIED OF "
	DC.B	"      A.I.D.S       "
	DC.B	"                    "
	DC.B	"THE CODE MUST GO ON!"
	DC.B	"                    "
	DC.B	" (I HOPE THIS DIDN'T"
	DC.B	"MAKE YOU LAUGH, IT'S"
	DC.B	"    FUCKIN' SAD)    "
	DC.B	"                    "
	DC.B	"                    "

T20:	
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"  WELL,WELL,WELL... "
	DC.B	"  IT'S BEEN ABOUT 5 "
	DC.B	"MONTHS 'TILL WE SAID"
	DC.B	"THE DEMO WAS COMING "
	DC.B	" OUT TOMORROW! AND I"
	DC.B	"GUESS TOMOROW IS THE"
	DC.B	"   RIGHT TOMMOROW   "
	DC.B	"                    "
	DC.B	"                    "

T21:	
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"YOU GOT IT! IT MEANS"
	DC.B	"I HAVE TO FINISH DIS"
	DC.B	"  DEMO FOR TOMORROW "
	DC.B	"MORNING! YOU'D SAY I"
	DC.B	" CAN DO MANY THINGS "
	DC.B	"  IN A NIGHT, BUT I "
	DC.B	"  HAVE ALL MY OTHER "
	DC.B	"SCREENS TO FINISH AS"
	DC.B	"       WELL...      "
	DC.B	"                    "

T22:	DC.B	"                    "
	DC.B	" IT'S A PITY I MUST "
	DC.B	"STOP,COZ I HAD A LOT"
	DC.B	"  OF OTHER GAGS TO  "
	DC.B	"      INCLUDE.      "
	DC.B	"                    "
	DC.B	"WELL, I HOPE I DIDNT"
	DC.B	"  BORE YOU TO MUCH  "
	DC.B	"AND I HOPE YOU DIDNT"
	DC.B	"  TAKE ALL I SAID   "
	DC.B	"     SERIOUSLY!     "
	DC.B	"                    "


T23:	
	DC.B	"                    "
	DC.B	"     -CREDITS-      "
	DC.B	"                    "
	DC.B	"-ALL IDEAS:         "
	DC.B	"-ALL CODING:        "
	DC.B	"-ALL GRAFXXS:       "
	DC.B	"                    "
	DC.B	"   BY THE HOOLIGAN  "
	DC.B	"       OF MCS       "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "

T24:	
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	" SEE YOU IN HEAVEN  "
	DC.B	"     MY BROTHER     "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "
	DC.B	"                    "



F_T:	DC.L	FONT+34,FONT+34+8,FONT+34+16,FONT+34+24,FONT+34+32,FONT+34+40,FONT+34+48
	DC.L	FONT+34+56,FONT+34+64,FONT+34+72,FONT+34+80,FONT+34+88,FONT+34+96
	DC.L	FONT+34+104,FONT+34+112,FONT+34+120,FONT+34+128,FONT+34+136,FONT+34+144
	DC.L	FONT+34+152		
;U...(
	DC.L	FONT+34+2560,FONT+34+2560+8,FONT+34+2560+16,FONT+34+2560+24,FONT+34+2560+32,FONT+34+2560+40,FONT+34+2560+48
	DC.L	FONT+34+2560+56,FONT+34+2560+64,FONT+34+2560+72,FONT+34+2560+80,FONT+34+2560+88,FONT+34+2560+96
	DC.L	FONT+34+2560+104,FONT+34+2560+112,FONT+34+2560+120,FONT+34+2560+128,FONT+34+2560+136,FONT+34+2560+144
	DC.L	FONT+34+2560+152

;)...?
	DC.L	FONT+34+5120,FONT+34+5120+8,FONT+34+5120+16,FONT+34+5120+24,FONT+34+5120+32,FONT+34+5120+40,FONT+34+5120+48
	DC.L	FONT+34+5120+56,FONT+34+5120+64,FONT+34+5120+72,FONT+34+5120+80,FONT+34+5120+88,FONT+34+5120+96
	DC.L	FONT+34+5120+104,FONT+34+5120+112,FONT+34+5120+120,FONT+34+5120+128,FONT+34+5120+136,FONT+34+5120+144
	DC.L	FONT+34+5120+152
;<ESPACE> 
	DC.L	FONT+34+7680
******************* ROUTINE KI NE GENERE PAS DE SPRITES, MAIS KI *******
******************* AFFICHE DES FONTS EN 8*8 **********************
;A0 : TEXTE	
;A1 : ADR OU ECRIRE
;D7 : NB DE CHAR A AFF
HOO1:	MOVEM.L	D0-D7/A0-A5,-(SP)
	MOVE.L	#F88+34,A2	;FONTS
	LSR.W	#1,D7
	SUBQ	#1,D7
	
HOO8:	MOVEQ	#0,D0
	MOVE.B	(A0)+,D0

	CMP.B	#"0",D0
	BLO	HOO3
	CMP.B	#"9",D0
	BHI	HOO3
	SUB.B	#"0",D0
	ADD.B	#"Z"+1,D0
	
HOO3:	CMP.B	#",",D0
	BNE	HOO4
	MOVE.B	#"Z"+11,D0
	BRA	HOO7

HOO4:	CMP.B	#".",D0
	BNE	HOO5
	MOVE.B	#"Z"+12,D0
	BRA	HOO7

HOO5:	CMP.B	#":",D0
	BNE	HOO6
	MOVE.B	#"Z"+13,D0
	BRA	HOO7

HOO6:	CMP.B	#"?",D0
	BNE	HOO7
	MOVE.B	#"Z"+14,D0

HOO7:	SUB.B	#"A",D0

	CMP.B	#" "-"A",D0
	BEQ	HOO10


	MULU.W	#8,D0
	CMP.W	#160,D0
	BLO	HOO9
	ADD.W	#7*160,D0
HOO9:
	
	MOVEQ	#0,D1
NOD	SET	0
	REPT	8

	MOVE.B	0(A2,D0.W),0+NOD(A1)
	MOVE.B	2(A2,D0.W),2+NOD(A1)
	MOVE.B	4(A2,D0.W),4+NOD(A1)
	MOVE.B	6(A2,D0.W),6+NOD(A1)

	ADD.W	#160,D0
NOD	SET	NOD+160
	ENDR

HOO10:	MOVEQ	#0,D0
	MOVE.B	(A0)+,D0

	CMP.B	#"0",D0
	BLO	HOOX3
	CMP.B	#"9",D0
	BHI	HOOX3
	SUB.B	#"0",D0
	ADD.B	#"Z"+1,D0
	BRA	HOOX7
	
HOOX3:	CMP.B	#",",D0
	BNE	HOOX4
	MOVE.B	#"Z"+11,D0
	BRA	HOOX7

HOOX4:	CMP.B	#".",D0
	BNE	HOOX5
	MOVE.B	#"Z"+12,D0
	BRA	HOOX7

HOOX5:	CMP.B	#":",D0
	BNE	HOOX6
	MOVE.B	#"Z"+13,D0
	BRA	HOOX7

HOOX6:	CMP.B	#"?",D0
	BNE	HOOX7
	MOVE.B	#"Z"+14,D0

HOOX7:	SUB.B	#"A",D0
	CMP.B	#" "-"A",D0
	BEQ	HOOX10

	MULU.W	#8,D0
	CMP.W	#160,D0
	BLO	HOOX9
	ADD.W	#7*160,D0
HOOX9:
	
	MOVEQ	#0,D1
NOD	SET	0
	REPT	8

	MOVE.B	0(A2,D0.W),1+NOD(A1)
	MOVE.B	2(A2,D0.W),3+NOD(A1)
	MOVE.B	4(A2,D0.W),5+NOD(A1)
	MOVE.B	6(A2,D0.W),7+NOD(A1)

	ADD.W	#160,D0
NOD	SET	NOD+160
	ENDR

HOOX10:	LEA.L	8(A1),A1

	DBRA	D7,HOO8

	MOVEM.L	(SP)+,D0-D7/A0-A5
	RTS


************* ROUTINE KI (DE)GENERE LE CODE DES STARBALLS ***********
MAKE_BALLS:
	MOVE.L	#PIC+34,A0	;IMAGES
	MOVE.L	#CODE,A1		;ROUTINE
	MOVE.L	#SPR1,A2		;ADR DE CES RS
		
	MOVE.W	#128-1,D0
ZE_LP:	JSR	GET_ONE
	ADD.W	#16,D3
	CMP.W	#160,D3
	BLO.S	DO_BRCH
	MOVE.W	#0,D3
	ADD.W	#8*160,A0
DO_BRCH	DBRA	D0,ZE_LP
	
	MOVE.L	#MULT_160,A5
	MOVE.W	#200,D0
	MOVEQ.W	#0,D1
	MOVEQ.W	#0,D2
MULT_160_BC:
	MOVE.W	D2,D1
	MULU.W	#160,D1
	MOVE.W	D1,(A5)+
	ADDQ.W	#1,D2
	DBRA	D0,MULT_160_BC
	RTS
		
GET_ONE:	MOVEQ.W	#0,D7		;D7 = CONTEUR DE LIGNE
	MOVE.W	D3,D5		;CONTEUR DE LIGNES DU SPR
	MOVEQ.W	#8-1,D6		;NUMERO DE LIGNE 	* NUMERO ET PAS N MERO, CRETIN 
	MOVE.L	A1,(A2)+
	
	MOVE.W	#8-1,D4
ONE_LOOP:	CMP.W	#0,(A0,D5.W)
	BEQ.S	END_WORD
	MOVE.W	#$68,(A1)+
	MOVE.W	(A0,D5.W),(A1)+
	MOVE.W	D7,(A1)+
END_WORD:	ADD.W	#2,D5
	ADD.W	#2,D7
	DBRA	D4,ONE_LOOP

END_LINE:	ADD.W	#160-6*2,D7	;CHANGE
	ADD.W	#160-6*2,D5
	MOVE.W	#6-1,D4
	DBRA	D6,ONE_LOOP	
	MOVE.W	#$4E75,(A1)+	;RTS
	
	MOVEQ.W	#0,D7		;D7 = CONTEUR DE LIGNE
	MOVE.W	D3,D5		;CONTEUR DE LIGNES DU SPR
	MOVEQ.W	#8-1,D6		;N MERO DE LIGNE
	MOVE.L	A1,(A2)+
	
	MOVE.W	#4-1,D4
ONE_LOOP2:CMP.L	#0,(A0,D5.W)
	BEQ.S	END_LG_WORD	

	CMP.W	#0,2(A0,D5.W)
	BEQ	ERASE_WORD
	MOVE.W	#$2140,(A1)+
	MOVE.W	D7,(A1)+
	BRA	END_LG_WORD
	
ERASE_WORD:MOVE.W	#$3140,(A1)+	;MOVE.L D0,-D7-(A0)
	MOVE.W	D7,(A1)+

END_LG_WORD:ADD.W	#4,D5
	ADD.W	#4,D7
	DBRA	D4,ONE_LOOP2

END_LINE2:ADD.W	#160-3*4,D7	;CHANGE
	ADD.W	#160-3*4,D5
	MOVE.W	#3-1,D4
	DBRA	D6,ONE_LOOP2
	MOVE.W	#$4E75,(A1)+	;RTS
	RTS

******** FIN DE LA ROUTINE KI GENERE LE CODE DES STARBALLS *********

********************* INIT INTER ****************
SAVE_INT:
	MOVE.W	#$2700,SR
	MOVE.B	$FFFA07,SA07
	MOVE.B	$FFFA09,SA09
	MOVE.B	$FFFA13,SA13
	MOVE.B	$FFFA21,SA21
	MOVE.B	$FFFA1B,SA1B
	MOVE.B	$FFFA15,SA15
	MOVE.B	$FFFA17,SA17
	MOVE.B	#0,$FFFA07
	MOVE.B	#0,$FFFA09
	MOVE.L	$70,S70
	MOVE.L	$120,S120
	MOVE.L	$118,S118
	MOVE.L	#XVBLX,$70
	clr.b	$fffa1b		* timer B coupe
	;bset	#0,$fffa07
	;clr.b	$fffa13
	;clr.b	$fffa15
	;bset	#0,$fffa13
	;bclr	#3,$fffa17
	MOVE.B	#2,$FF820A
	;MOVE.L	#HBL,$120
	;MOVE.B	#$40,$FFFFFA09.W
	;MOVE.L	#JOYSTICK,$118.W		
	RTS


******************* REMET INTER *****************
BACK_INT:
	MOVE.W	#$2700,SR
	MOVE.B	SA07,$FFFA07
	MOVE.B	SA09,$FFFA09
	MOVE.B	SA13,$FFFA13
	MOVE.B	SA21,$FFFA21
	MOVE.B	SA1B,$FFFA1B
	MOVE.B	SA15,$FFFA15
	MOVE.B	SA17,$FFFA17
	MOVE.L	S70,$70
	MOVE.L	S120,$120
	MOVE.L	S118,$118
	MOVE.L	S_134,$134
	MOVE.W	#$2300,SR
	RTS

************************** INIT SOUNDTRACK ****************
;INIT DE LA SOUNDTRACK
;ROUTINE DE CHECKSUM/EQX
INIT_TRACK:
	Move.l	$4F2,d0
	cmpi.l	#$FC0000,d0
	beq	STF
	move.w	#154,st_attente
	bra.s	suite_demarrage
STF	move.w	#153,st_attente
suite_demarrage

	lea	debmod,a1		;debut du module
	lea	FINMOD,a2		;fin module
	moveq	#0,d0
	jsr	player		;d0 = 0 <=> init
	move.l	a0,sdtvar		;buffer -> sdtvar
	move.l	(a0),a6		;a6 = mt_buffer1

	ori.b	#1,$fffffa07.w
	ori.b	#1,$fffffa13.w

	MOVE.W	#$2300,SR
	jsr	vsync
	RTS

actual_pat	ds.w	1


* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* sous programmes
* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

sdtvar		ds.l	1

player	
* -----------------------------------------------
* ------- Soundtracker V2.4 - playroutine -------
* -----------------------------------------------
* -------     Coded by D.O.C.(AMIGA)     --------
* ------- Improved by CHECKSUM for ATARI --------
* -----------------------------------------------

deb	lea	fnct(pc),a0
	lsl.w	#2,d0
	jmp	(a0,d0.w)
fnct	bra	mt_init
	bra	mt_music
	bra	mt_end

level1	ds.w	1
level2	ds.w	1
level3	ds.w	1
level4	ds.w	1

;call 'mt_init' to initialize the playroutine

mt_init
	lea	mt_data(pc),a0	
	movem.l	a1/a2,(a0)	;store la fin et le dbut du module
	move.l	#$43c,nbr1	;adr pattern 31 instr
	move.l	#$3b8,nbr2	;table des pats pour les 31 instr
	move.l	mt_data(pc),a0	;A0 = DEBUT MODULE
	cmp.l	#"M.K.",1080(a0)	;31 instr?
	beq.s	mt_new_version	;yo! = mt_new_version

	move.l	#$1d8,nbr2	;table pattern pour 16 instr
	move.l	#$258,nbr1	;adr des patterns 16 instr
mt_new_version
	add.l	nbr2(pc),a0	;A0 = pattern a jouer (128 o)
	moveq	#127,d0
	moveq	#0,d1
mt_init1
	move.l	d1,d2
	subq.w	#1,d0
mt_init2
	move.b	(a0)+,d1		;numero du prochain pattern
	cmp.b	d2,d1		
	bgt.s	mt_init1
	dbf	d0,mt_init2
	addq.b	#1,d2		;D2 = nbr de pattern

mt_init3
	move.l	mt_data(pc),a0	;A0 = debut module
	lea	mt_sample1(pc),a1	
	asl.l	#8,d2		;*256
	asl.l	#2,d2		;*4
	add.l	nbr1(pc),d2	
	add.l	a0,d2		;D2 = adr des samples
	moveq	#$1e,d0
mt_init4
	move.l	d2,(a1)+		;mt_sample1 = suite de mot
	moveq	#0,d1		;long des adrs des X samples
	move.w	42(a0),d1		; = longueur des samples
	asl.l	#1,d1		
	add.l	d1,d2		
	add.l	#$1e,a0		;prochaine longeur
	dbf	d0,mt_init4

	move.l	mt_sample1(pc),a0	;A0 = adr premier sample
	move.l	mt_datafin(pc),a1	;A1 = fin module
mt_init5
	move.b	(a0),d1		;octet de son
	eor.b	#128,d1		;de-signe
	tst.b	d1
	bne.s	mt_init6		;si d1 = 0,
	moveq	#1,d1		;d1 = 1 (???)
mt_init6
	move.b	d1,(a0)+		;et on sauve l'octet!
	cmp.l	a0,a1
	bne.s	mt_init5

	lea	mt_sample1(pc),a0	;A0 = adr des samples
	moveq	#30,d0
mt_init7
	add.l	#$8000,(a0)+	;ajoute 32768 a l'adr
	dbf	d0,mt_init7	;de chaque sample...
	clr.l	mt_partnrplay
	clr.l	mt_partnote
	clr.l	mt_partpoint
	move.l	mt_data(pc),a0	;debut module
	add.l	nbr2(pc),a0	;table des pattern
	move.b	-2(a0),mt_maxpart+1	;nbr de position
	move.b	#6,mt_cool+3
	
	;move.b	$fb0001,d7
	;moveq	#0,d0
	;move.l	#no_noise,d1
	;move.l	d0,d2
	;move.l	d1,d3
	;move.l	#mt_tabvolume,d4
	;movem.l	d0-d4,mt_datavoice1
	;movem.l	d0-d4,mt_datavoice2
	;movem.l	d0-d4,mt_datavoice3
	;movem.l	d0-d4,mt_datavoice4
	
	move.l	$134.W,S_134
	move.l	#out_monitor,$134.w		;interupt pour jouer
	lea	$ffff8800.w,a0
	moveq	#10,d0
mt_yamahaclear
	move.b	d0,(a0)			;clear ze 
	clr.b	2(a0)			;yamaha-ha
	dbra	d0,mt_yamahaclear		;et non pas
	clr.b	(a0)			;suzuki-hihi
	clr.b	2(a0)
	move.b	#7,(a0)
	move.b	#$ff,2(a0)

	bclr	#3,$fffa17
	bset	#5,$fffa07		;interupt prepare
	bset	#5,$fffa13
	move.b	#32,$fffa1f
	move.b	#02,$fffa19
	lea	buffer(pc),a0
	move.l	#mt_buffer1,(a0)		;buffer pour store zik
	rts

mt_end
	bclr	#5,$fffa07
	bclr	#5,$fffa13
	clr.b	$fffa19
	clr.b	$fffa1f
	bset	#3,$fffa17
	rts

mt_music
	bsr	calcul_buffer	;prepare le buffer
	addq	#1,mt_counter
mt_cool	cmp.w	#6,mt_counter
	bne.s	mt_notsix
	clr.w	mt_counter
	bra	mt_rout2		;toute 6 VBLs


mt_notsix
	lea	mt_aud1temp(pc),a4
	tst.b	3(a4)
	beq.s	mt_arp1
	lea	 mt_datavoice1(pc),a5
	bsr.s	mt_arprout
mt_arp1
	lea	mt_aud2temp(pc),a4
	tst.b	3(a4)
	beq.s	mt_arp2
	lea	 mt_datavoice2(pc),a5
	bsr.s	mt_arprout
mt_arp2
	lea	mt_aud3temp(pc),a4
	tst.b	3(a4)
	beq.s	mt_arp3
	lea	 mt_datavoice3(pc),a5
	bsr.s	mt_arprout
mt_arp3
	lea	mt_aud4temp(pc),a4
	tst.b	3(a4)
	beq.s	mt_arp4
	lea	 mt_datavoice4(pc),a5
	bra.s	mt_arprout
mt_arp4	rts

mt_arprout
	move.b	2(a4),d0
	and.b	#$f,d0
	tst.b	d0
	beq	mt_arpegrt
	cmp.b	#$01,d0
	beq.s	mt_portup
	cmp.b	#$02,d0
	beq.s	mt_portdwn
	cmp.b	#$0a,d0
	beq.s	mt_volslide
	rts

mt_portup
	moveq	#0,d0
	move.b	3(a4),d0
	sub.w	d0,22(a4)
	cmp.w	#$71,22(a4)
	bpl.s	mt_ok1
	move.w	#$71,22(a4)
mt_ok1
	moveq	#0,d0
	move.w	22(a4),d0
	asl.l	#2,d0
	lea	mt_frequences(pc),a0
	move.l	(a0,d0.l),(a5)
	rts
mt_portdwn
	moveq	#0,d0
	move.b	3(a4),d0
	add.w	d0,22(a4)
	cmp.w	#$358,22(a4)
	bmi.s	mt_ok1
	move.w	#$358,22(a4)
	bra.s	mt_ok1

mt_volslide
	moveq	#0,d0
	move.b	3(a4),d0
	lsr.b	#4,d0
	tst.b	d0
	beq.s	mt_voldwn
	add.w	d0,18(a4)
	cmp.w	#64,18(a4)
	bmi.s	mt_ok3
	move.w	#64,18(a4)
mt_ok3	moveq	#0,d0
	move.w	18(a4),d0
	lea	mt_tabvolume(pc),a0
	lsl.l	#8,d0
	add.l	d0,a0
	move.l	a0,16(a5)
	rts

mt_voldwn
	moveq	#0,d0
	move.b	3(a4),d0
	and.b	#$f,d0
	sub.w	d0,18(a4)
	bpl.s	mt_ok3
	clr.w	18(a4)
	bra.s	mt_ok3

mt_arpegrt
	move.w	mt_counter(pc),d0
	cmp.w	#1,d0
	beq.s	mt_loop2
	cmp.w	#2,d0
	beq.s	mt_loop3
	cmp.w	#3,d0
	beq.s	mt_loop4
	cmp.w	#4,d0
	beq.s	mt_loop2
	cmp.w	#5,d0
	beq.s	mt_loop3
	rts

mt_loop2
	moveq	#0,d0
	move.b	3(a4),d0
	lsr.b	#4,d0
	bra.s	mt_cont
mt_loop3
	moveq	#0,d0
	move.b	3(a4),d0
	and.b	#$f,d0
	bra.s	mt_cont
mt_loop4
	move.w	16(a4),d2
	bra.s	mt_endpart
mt_cont
	add.w	d0,d0
	moveq	#0,d1
	move.w	16(a4),d1
	and.w	#$fff,d1
	lea	mt_arpeggio(pc),a0
mt_loop5
	move.w	(a0,d0),d2
	cmp.w	(a0),d1
	beq.s	mt_endpart
	addq.l	#2,a0
	bra.s	mt_loop5
mt_endpart
	moveq	#0,d0
	move.w	d2,d0
	asl.l	#2,d0
	lea	mt_frequences(pc),a0
	move.l	(a0,d0.l),(a5)
	rts


mt_rout2
	move.l	mt_data(pc),a0	;A0 = debut module
	move.l	a0,a3	
	add.l	#$0c,a3		;A3 = offset pour instr com
	move.l	a0,a2
	add.l	nbr2(pc),a2	;A2 = table des patterns
	add.l	nbr1(pc),a0	;A0 = adr des patterns
	move.l	mt_partnrplay(pc),d0;D0 = position
	moveq	#0,d1
	move.b	(a2,d0.w),d1	;D1 = prochain pattern a joue
	move.w	d1,actual_pat
	asl.l	#8,d1		*256
	asl.l	#2,d1		*4
	add.l	mt_partnote(pc),d1	;D1 = d1 + pos
	move.l	d1,mt_partpoint

	lea	mt_datavoice1(pc),a5;data de la voie
	lea	mt_aud1temp(pc),a4	;data du morceau a joue
	move.w	level1,mt_var	
	bsr	mt_playit		;prepare les prochaines donnes
	move.w	mt_var,level1

	lea	mt_datavoice2(pc),a5
	lea	mt_aud2temp(pc),a4
	move.w	level2,mt_var
	bsr	mt_playit
	move.w	mt_var,level2

	lea	mt_datavoice3(pc),a5
	lea	mt_aud3temp(pc),a4
	move.w	level3,mt_var
	bsr	mt_playit
	move.w	mt_var,level3

	lea	mt_datavoice4(pc),a5
	lea	mt_aud4temp(pc),a4
	move.w	level4,mt_var
	bsr	mt_playit
	move.w	mt_var,level4

	lea	mt_aud4temp(pc),a4
	lea	mt_datavoice4(pc),a5
	cmp.w	#1,14(a4)		;longeur a repeter
	beq.s	no_repeat4	;1 <=> silence
	move.l	10(a4),12(a5)	;instr 2 = adr ou repete
	bra.s	mt_voice3
no_repeat4
	move.l	#no_noise+$8000,12(a5) ;instr2 = silence
mt_voice3
	lea	mt_aud3temp(pc),a4
	lea	mt_datavoice3(pc),a5
	cmp.w	#1,14(a4)
	beq.s	no_repeat3
	move.l	10(a4),12(a5)
	bra.s	mt_voice2
no_repeat3
	move.l	#no_noise+$8000,12(a5)
mt_voice2
	lea	mt_aud2temp(pc),a4
	lea	mt_datavoice2(pc),a5
	cmp.w	#1,14(a4)
	beq.s	no_repeat2
	move.l	10(a4),12(a5)
	bra.s	mt_voice1
no_repeat2
	move.l	#no_noise+$8000,12(a5)
mt_voice1
	lea	mt_aud1temp(pc),a4
	lea	mt_datavoice1(pc),a5
	cmp.w	#1,14(a4)
	beq.s	no_repeat1
	move.l	10(a4),12(a5)
	bra.s	mt_voice0
no_repeat1
	move.l	#no_noise+$8000,12(a5)
mt_voice0
	move.l	mt_partnote(pc),d0		;pos in pattern
	add.l	#$10,d0			;+deja joue
	move.l	d0,mt_partnote
	cmp.l	#$400,d0			;fin pattern?
	bne.s	mt_stop			;no!
mt_higher
	clr.l	mt_partnote		;yo! adr = debut
	addq.l	#1,mt_partnrplay		;+ nvo patern
	moveq	#0,d0
	move.w	mt_maxpart(pc),d0
	move.l	mt_partnrplay(pc),d1
	cmp.l	d0,d1
	bne.s	mt_stop
	clr.l	mt_partnrplay
mt_stop
	tst.w	mt_status			;mt_status negatif
	beq.s	mt_stop2			;<=> next pattern
	clr.w	mt_status
	bra.s	mt_higher
mt_stop2
	rts


mt_playit
	move.l	(a0,d1.l),(a4)	;(A4) = mot lg voie 1
	addq.l	#4,d1		
	moveq	#0,d2
	move.b	2(a4),d2		 
	and.b	#$f0,d2		
	lsr.b	#4,d2		;D2 = Nm de l'instr
	
	;move.b	(a4),d0		 
	;and.b	#$f0,d0		
	;or.b	d0,d2

	;tst.b	d2

	beq	mt_nosamplechange

;CHANGEMENT DE SAMPLE
	moveq	#0,d3
	lea	mt_samples(pc),a1	;adr des sons
	move.l	d2,d4		;D4 = D2 = Nvo instr
	asl.l	#2,d2		;D2 = D2 * 4
	mulu	#30,d4		
	move.l	(a1,d2.w),4(a4)	;4(A4) = adr Nvo instr
	move.w	(a3,d4.l),8(a4)	;8(A4) = lng Nvo instr
	move.w	2(a3,d4.l),18(a4)	;18(A4)= volume Nvo instr
	move.w	4(a3,d4.l),d3	;D3    = repeat

	tst.w	d3
	beq.s	mt_displace

;YA UN REPEAT
	move.l	4(a4),d2		;D2 = adr instr
	add.l	d3,d2		;D2 = adr ou repeater
	move.l	d2,10(a4)		;10(A4) = adr ou repeter
	moveq	#0,d6
	move.w	6(a3,d4.l),d6	;D6 = longeur du repeat
	move.l	d6,d5
	asl.l	#1,d5		;D5 = D6 * 2
	add.l	d3,d5		;D5 = D5 + D3
	asr.l	#1,d5		;D5 = D5 / 2
	sub.w	8(a4),d5		;D5 = ou repeat fini
	bmi.s	mt_out		;si repeat < lng => saut
	sub.w	d5,d6		;D6 = longeur instr-repeat
mt_out
	move.w	d6,08(a4)		;8(A4)  = lng ou  repeter
	move.w	6(a3,d4.l),14(a4)	;14(A4) = lng a repeter
	moveq	#0,d0
	move.w	18(a4),d0		;D0 = volume
	lsl.l	#8,d0		;*256
	add.l	#mt_tabvolume,d0	;D0 = adr
	move.l	d0,16(a5)		;store la table vol
	bra.s	mt_nosamplechange

mt_displace
;PAS DE REPEAT
	move.l	4(a4),d2
	move.l	d2,10(a4)		;adr ou repeter = debut
	move.w	6(a3,d4.l),14(a4)	;longeur a repeter
	moveq	#0,d0		
	move.w	18(a4),d0		;volume
	lsl.l	#8,d0		;*256
	add.l	#mt_tabvolume,d0	;=adr
	move.l	d0,16(a5)		;store la table vol

mt_nosamplechange
	move.w	(a4),d0		;d0 = ligne de comande
	;and.w	#$fff,d0		
	;tst.w	d0
	beq.s	mt_retrout	;si rien,hop!

	move.w	18(a4),mt_var	;mtvar  = volume
	move.w	(a4),16(a4)	;16(A4) = commande
	move.l	4(a4),4(a5)	;store l'instr
	move.l	#$80000000,8(a5)	;pos = 0 (j'espere...)
	moveq	#0,d0
	move.w	8(a4),d0		;D0 = lng a repete
	asl.l	#1,d0		;*2 (= octet)
	add.l	10(a4),d0		;+ adr a repete
lo	and.w	#$fffe,d0		;met d0 pair
	move.l	d0,a1		;A1 = fin du repeat
	sub.l	#$8000+4,a1	*efface dernier mot of repeat
	clr.l	(a1)		*
	moveq	#0,d0		;a la place du AND.L #$FFF
	move.w	(a4),d0		;D0 = note
	;and.l	#$fff,d0
	lsl.l	#2,d0		;D0 = D0 * 4
	lea	mt_frequences(pc),a1;A1 = table des frequences
	ADD.L	D0,A1		*A1 = frequence pour la note
	MOVE.L	(A1),(A5)		*store la vitesse
mt_retrout
	tst.w	(a4)		;note
	beq.s	mt_nonewper	;=0 -> mt_nonewper
	move.w	(a4),22(a4)	;22(A4) = note
mt_nonewper
	move.b	2(a4),d0	
	and.b	#$0f,d0		;D0 = No de commande
	cmp.b	#$0b,d0
	beq.s	mt_posjmp		;position jump
	cmp.b	#$0c,d0
	beq.s	mt_setvol		;set volume
	cmp.b	#$0d,d0
	beq.s	mt_break		;pattern break
	cmp.b	#$0f,d0
	beq.s	mt_setspeed	;set speed
	rts

;SAUT DE POSITON
mt_posjmp
	not.w	mt_status
	moveq	#0,d0
	add.b	3(a4),d0		;parametre de commande
	subq.b	#1,d0
	move.l	d0,mt_partnrplay
	rts

;CHANGE DE VOLUME
mt_setvol
	moveq	#0,d0	
	move.b	3(a4),d0		;parametre de comande
	cmp.w	#64,d0
	bmi.s	mt_ok4
	moveq	#64,d0
mt_ok4
	lsl.l	#8,d0
	add.l	#mt_tabvolume,d0
	move.l	d0,16(a5)
	rts

;BREAK DE PATTERN
mt_break
	not.w	mt_status
	rts

;SET SPEED
mt_setspeed
	move.b	3(a4),d0		;parametre de commande
	and.b	#$0f,d0
	beq.s	mt_back
	clr.w	mt_counter
	move.b	d0,mt_cool+3
mt_back	rts


;ROUTINE DE CALCULE DU BUFFER
;=> DS BUFFER: 1 MOT = VOIE 1 ET 2 / 1 MOT = VOIE 3 ET 4
calcul_buffer
	eor.w	#4,mt_flipbuffer
	move.w	mt_flipbuffer(pc),d0	;swap les
	lea	mt_buffer(pc),a0		;buffer
	add.w	d0,a0			;calcule/joue
	move.l	(a0),buffer

	
	lea	mt_datavoice1(pc),a4
	move.l	(a4)+,d2			;D2 = vit voie 1
	move.l	(a4)+,a0			;A0 = instr voie 1
	move.l	(a4),d0			;D0 = pos voie 1
	move.l	8(a4),a2			;A2 = mt_tabvolume

	lea	mt_datavoice2(pc),a4
	move.l	(a4)+,d3			;D3 = vit voie 2
	move.l	(a4)+,a1			;A1 = instr voie 2 
	move.l	(a4),d1			;D1 = pos voie 2
	move.l	8(a4),a3			;A3 = mt_tabvolume
	moveq	#0,d4
	;moveq	#0,d5
	move.l	buffer(pc),a4		;A4 = ou store
	move.l	#$8000,a5			;A5 = 32768
	move.w	st_attente,d6		
mt_precalc1
	moveq	#0,d5		;1 NOP(S)
	add.l	d2,d0		;2 / d0 = pos1 + speed1
	add.l	d3,d1		;2 / d1 = pos2 + speed2
	swap	d0		;1 / permet de ralentir
	swap	d1		;1 / la frequence!!!!!
	move.b	(a0,d0.w),d4	;3 / d4 = vol octet a joue 1
	beq.s	ini1		;3 
no_ini1	move.b	(a2,d4.w),d4	;3 
	move.b	(a1,d1.w),d5	;3 / d5 = vol octet a joue 2 
	beq.s	ini2		;3 
no_ini2	move.b	(a3,d5.w),d5	;3 
	add.w	d4,d5		;1 / d5 = vol voie 1+2
	move.w	d5,(a4)+		;2 / store d5
	swap	d0		;1
	swap	d1		;1
	dbra	d6,mt_precalc1	;3
	bra.s	yo1
ini1
	moveq	#$7f,d4		    ; fin d'instr * d4 = silence
	move.l	a5,d0		    ; d0 = debut pos 1
	move.l	mt_datavoice1+12(pc),a0 ;a0 = prochain instr
	bra.s	no_ini1
ini2
	moveq	#$7f,d5
	move.l	a5,d1
	move.l	mt_datavoice2+12(pc),a1	
	bra.s	no_ini2
yo1
	move.l	d0,mt_datavoice1+8		;sauve Nell pos1
	move.l	d1,mt_datavoice2+8		;sauve Nell pos2
	move.l	a0,mt_datavoice1+4		;sauve Nv instr1
	move.l	a1,mt_datavoice2+4		;sauve Nv instr2

;********* PAREIL POUR VOIE 3 ET 4 **********

	lea	mt_datavoice3(pc),a4
	move.l	(a4)+,d2
	move.l	(a4)+,a0
	move.l	(a4),d0
	move.l	8(a4),a2
	lea	mt_datavoice4(pc),a4
	move.l	(a4)+,d3
	move.l	(a4)+,a1
	move.l	(a4),d1
	move.l	8(a4),a3
	moveq	#0,d4
*	moveq	#0,d5
	move.l	buffer(pc),a4
	move.l	#$8000,a5
	move.w	st_attente,d6
mt_precalc2
	moveq	#0,d5
	add.l	d2,d0		;2 NOP(S)
	add.l	d3,d1		;2
	swap	d0		;1
	swap	d1		;1
	move.b	(a0,d0.w),d4	;3
	beq.s	ini3		;3
no_ini3	move.b	(a2,d4.w),d4	;3
	move.b	(a1,d1.w),d5	;3
	beq.s	ini4		;3
no_ini4	move.b	(a3,d5.w),d5
	add.w	d4,d5		;1
	add.w	d5,(a4)+		;2
	swap	d0		;1
	swap	d1		;1
	dbra	d6,mt_precalc2	;3
	bra.s	yo2

ini3
	moveq	#$7f,d4	
	move.l	a5,d0	
	move.l	mt_datavoice3+12(pc),a0
	bra.s	no_ini3
ini4
	moveq	#$7f,d5
	move.l	a5,d1
	move.l	mt_datavoice4+12(pc),a1
	bra.s	no_ini4

;-----------------------------------
;                              T=252

yo2
	move.l	d0,mt_datavoice3+8
	move.l	d1,mt_datavoice4+8
	move.l	a0,mt_datavoice3+4
	move.l	a1,mt_datavoice4+4
;**************** FIN DE PAREIL ***********

	rts

out_monitor:
	;NOT.W	$FFFFF8240.W
	MOVEM.L	A5/D7,-(SP)
	;move.l	a5,usp		;4
	lea	$ffff8800.w,a5	;8
	move.w	(a6)+,d7		;8
	lsr.w	#1,d7
	lsl.w	#3,d7
	move.l	digitab+4(pc,d7.w),(a5);26
	move.l	digitab(pc,d7.w),d7	;18
	movep.l	d7,(a5)		;24
	;move.l	usp,a5		;4
	MOVEM.L	(SP)+,A5/D7
	;NOT.W	$FFFFF8240.W
	rte			;64

;----------------------------------
;                              T=168

digitab		incbin	"tab2voic.bin"
st_attente	ds.w	1
mt_var		ds.l	1
nbr1		ds.l	1
nbr2		ds.l	1
buffer		ds.l	1
mt_flipbuffer	dc.w	0
mt_buffer	dc.l	mt_buffer1,mt_buffer2
mt_buffer1	ds.w	307
		dcb.w	70,512
mt_buffer2	ds.w	307
		dcb.w	70,512
mt_datavoice1
		dc.l	0		;vit / frq
		dc.l	no_noise		;adr instr 
		dc.l	0		;pos
		dc.l	no_noise		;instr 2
		dc.l	mt_tabvolume	;table de volume
mt_datavoice2
		dc.l	0
		dc.l	no_noise
		dc.l	0
		dc.l	no_noise
		dc.l	mt_tabvolume
mt_datavoice3
		dc.l	0
		dc.l	no_noise
		dc.l	0
		dc.l	no_noise
		dc.l	mt_tabvolume
mt_datavoice4
		dc.l	0
		dc.l	no_noise
		dc.l	0
		dc.l	no_noise
		dc.l	mt_tabvolume

;mt_aud-temp - 
;1 mot long : instruction
;1 mot long : adr de l'instrument
;1 mot      : longeur de l'instrument
;1 mot long : adr ou repeter (si besoin est)
;2 octet	  : ??
;1 mot      : longeur a repeter
;2 octet    : ??
;1 mot      : volume
;2 octet	  : ??
;1 mot	  : note
mt_aud1temp	ds.w	30
mt_aud2temp	ds.w	30
mt_aud3temp	ds.w	30
mt_aud4temp	ds.w	30
mt_partnote	ds.l	1
mt_partnrplay	ds.l	1
mt_counter	ds.w	1
mt_partpoint	ds.l	1
mt_samples	ds.l	1
mt_sample1	ds.l	31
mt_maxpart	ds.w	1
mt_status	ds.w	1
mt_data		ds.l	1
mt_datafin	ds.l	1
mt_arpeggio	dc.w $0358,$0328,$02fa,$02d0,$02a6,$0280,$025c
	dc.w $023a,$021a,$01fc,$01e0,$01c5,$01ac,$0194,$017d
	dc.w $0168,$0153,$0140,$012e,$011d,$010d,$00fe,$00f0
	dc.w $00e2,$00d6,$00ca,$00be,$00b4,$00aa,$00a0,$0097
	dc.w $008f,$0087,$007f,$0078,$0071,$0000,$0000,$0000
		
no_noise	dcb.b	3000,$7f
	dc.l	0

mt_frequences:	dc.l	0
		incbin	"freq.bin"
mt_tabvolume:	incbin	"voltab.bin"

***********************************************************
SA07:	DC.B	0
SA09:	DC.B	0
SA13:	DC.B	0
SA15:	DC.B	0
SA17:	DC.B	0
SA21:	DC.B	0
SA1B:	DC.B	0
CL:	DC.B	0	
	DC.B	0
	EVEN

S70:	DC.L	0
S120:	DC.L	0
S118:	DC.L	0
S_134:	DC.L	0
PHYS:	DS.L	1
PHYS2:	DS.L	1

S_SR:	DC.W	0
HLABEL:	DC.L	BOF		;RASTER ROUT
LOAD:	DC.L	0		;KE RASTER!

BLEU:	DC.W	0,$077,$067,$057,$047,$037,$027,$017,0,0,0,0,0,0,0,0
	DC.W	0,$066,$056,$046,$036,$026,$016,$006,0,0,0,0,0,0,0,0
	DC.W	0,$055,$045,$035,$025,$015,$005,$005,0,0,0,0,0,0,0,0
	DC.W	0,$044,$034,$024,$014,$004,$004,$004,0,0,0,0,0,0,0,0
	DC.W	0,$033,$023,$013,$003,$003,$003,$003,0,0,0,0,0,0,0,0
	DC.W	0,$022,$012,$002,$002,$002,$002,$002,0,0,0,0,0,0,0,0
	DC.W	0,$011,$001,$001,$001,$001,$001,$001,0,0,0,0,0,0,0,0
	DC.W	0,$000,$000,$000,$000,$000,$000,$000,0,0,0,0,0,0,0,0

MOA_SUI:	DC.W	$000,$000,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DC.W	$000,$111,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DC.W	$000,$000,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DC.W	$000,$222,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DC.W	$000,$000,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DC.W	$000,$333,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DC.W	$000,$000,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DC.W	$000,$444,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DC.W	$000,$000,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DC.W	$000,$555,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DC.W	$000,$000,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DC.W	$000,$666,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DC.W	$000,$000,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DC.W	$000,$777,0,0,0,0,0,0,0,0,0,0,0,0,0,0

FONT:	INCBIN	FONT.PI1
*************************** STARBALLS *************************
	EVEN
SAVER:	DS.L	100


SPR_WAVER:DC.W	0		;OUSKONENEST DS LA TABLE
MULT_160:	DCB.W	210,0

SPR1:	DS.L	32*8		;ENDROIT POUR RANGER LES
				;ADRECHE DE POINTEURS SUR ROUTS

F88:	INCBIN	F88.1IP
debmod:	incbin	"*.mod"
FINMOD:
LIST:	DC.L	APP_1,APP_2,APP_3,APP_4,APP_5,APP_6,APP_5
	DC.L	APP_4,APP_3,APP_2,APP_1,APP_2,APP_3,APP_4
LIST2:	DC.L	APP_5,APP_4,APP_1,APP_3,APP_6,APP_2,APP_3
	DC.L	APP_5,APP_6,APP_2,APP_4,APP_1,APP_5,APP_4
META_FI:
WAVE:	
	INCLUDE	"WAVE.S"		;COORDONNES DES BOULLES
END_WAVE:
	EVEN

PIC:	INCBIN	"SPRITES.PI1"	;FONT
UNION:	INCBIN	UNION.PI1
MOA:	INCBIN	I_AM.HII
CODE:				;+- 11K POUR ROUNTIES GENEREES

END:
APP_1	EQU	FONT+34+48*160
APP_2	EQU	FONT+34+48*160+80
APP_3	EQU	FONT+34+64*160
APP_4	EQU	FONT+34+64*160+80
APP_5	EQU	FONT+34+80*160
APP_6	EQU	FONT+34+80*160+80
