TRANSDSP.INC:

Autor:				Jochen Knaus aka BDCannibal/AURA/Independent
Coderight:			(c) 1993,1994 Jochen Knaus
Anzahl Routinen:	5
Prozessor:			68020, DSP56K

Erlaubt die Transformation und (Zentral-)projektion von Punkten. Ein Bebachter
wird optional berÅcksichtigt.
Die dritte Routine beeinhaltet einen kleinen Polygonhandler, d.h. FlÑchen
werden rÅckenunterdrÅckt und nach mittlerer Tiefe sortiert.

Durch die Rechnerarchitektur des Falcon kann wÑhrend des DSP Betriebes voll-
stÑndig parallel ein 68030-Prozeû abgearbeitet werden.
Diese Parallelverarbeitung wird in ALLEN Routinen des Moduls unterstÅtzt,
allerdings kompliziert sie den kompletten Aufbau, der Programmierer hat sich
an einige Richtlinien zu halten. Es wird davon ausgegangen, daû das Hauptpro-
gramm die bearbeiteten Daten des DSPs zur Weiterverarbeitung braucht, als Pa-
rallelroutine kommen Unterprogramme mit eigenen Daten in Frage (z.B. Screen
lîschen o.Ñ.). Das Unterprogramm wird als autonomer Prozeû verwaltet, d.h. er
behÑlt stÑndig Flag- und Registerstatus bei, es bemerkt nicht, daû er durch
DSP-Interrupts unterbrochen wurde. Der Parallelprozeû wird bei nÑchstem Aufruf
einer Routine des Moduls nach dem zuletzt abgearbeiteten Befehl weitergefÅhrt,
was durchaus sinnvoll ist, da eine komplexe Objektverwaltung mehrmals die DSP-
Transformationen aufrufen muû. Nach Beendung der DSP-Routinen muû das Hauptprg
den Parallelprozeû selber zu Ende laufen lassen oder terminieren.
Eine Stackfunktion muû ebenfalls mit einem eigenen Speicherbereich nachgebildet
werden (aber "link" und "unlk" verboten, da diese den Stackbereich benutzen).

Programmierkonventionen fÅr die Parallelroutine:
================================================

	<d7>, <a6> dÅrfen nicht benutzt werden.
		  <sr> darf nicht verÑndert werden.
		  <sp> darf nicht benutzt werden, da das Parallelprogramm den ISP
		  	   benutzt, was zu Verwirrungen im RÅcksprung ins Hauptprogramm
		  	   fÅhren wÅrde.
	Alle Interrupts mÅssen sr auf $2700 legen, da ein Interrupt, wÑhrend der
	Abarbeitung der Parallelroutine auftritt und seinerseits vom DSP-Interrupt
	unterbrochen wird, mit ziemlicher Sicherheit zu einem Crash fÅhren wÅrde.

	Die Routine muû Åber eine Endlosschleife verfÅgen, die erst durch Flags
	des Hauptprogramms unterbrochen werden kann, um eine Terminierung zu ermî-
	glichen.

----- Routine  1 -----
--- INIT_TRANS_DSP ---

Resettet ggf. DSP und installiert ADS und lÑdt dann System.
Parameter:	DT_INST_ADS = d0	:	 0 - Installation ADS.
								  != 0 - ADS bereits installiert.

	BSP:	bsr		INIT_TRANS_DSP

Register werden nicht gesichert (wegen 030 Stackstruktur unmîglich).

----- Routine 2 -----
----- TRANS_DSP -----

Transformiert Punkte.

Parameter:	DT_TRANS_MODE	= d0.w	- Transformationsmodus:				/*1
									   Kommando | Return | Bemerkungen
									   ---------+--------+------------
											1	|	 3D  | ohne Projektion
											2	|	 2D  | projeziert (px/py)
											4	|	2D,z | proj. (px/py/z')
										--------+--------+------------
			DT_OFF_SOURCE	= d1.w	- Offset auf Sourcekoordinaten nach
									  öbertragen der 3D-Information. Wird
									  benîtigt, sollten z.B. Farbinfor-
									  ationen vorhanden sein.
			DT_OFF_DESTIN	= d2.w	- anaolg DT_OFF_SOURCE, aber Ziel.
			DT_PARABLOCK	= a6.l	- Parameterblock:
								
								0.w	- Anzahl Punkte
								2.l	- Urpunktarray
								6.l - Destinationpunktebuffer
							   10.w - Rotationswinkel a
							   12.w -		"		  b
							   14.w -		"		  c
							   16.w - Additional x
							   18.w - Additional y
							   20.w - Additional z

/*1 Additionals: Im Mode 1 (ohne Projektion) geben die Additionalwerte eine
	Translation NACH der Transformation an, d.h das Objekt wird nachtrÑglich
	komplett verschoben. In allen anderen Modes geben die drei Werte die Koo-
	rdinate des Beobachterstandpunktes (Viewpoint) an.
	Wozu? Ein Raumschiff rotiert um seine Achse, wird dann an seine Koordinaten
	im "Universum" verschoben, anschlieûend wird um den Beobachter gedreht und
	so die endgÅltige Position festgelegt.

	BSP:	moveq	#2,DT_TRANS_MODE	; Nur projezierte Koords ret. / Beo.
			moveq	#2,DT_OFF_SOURCE	; Farbinformationen Åbergehen (2 Bytes)
			moveq	#4,DT_OFF_DESTIN	; nur px/py zurÅck -> 4 Bytes
			lea		paras,DT_PARABLOCK	; Parablock.
			bsr		TRANS_DSP
			...

	paras:	DC.W	2
			DC.L	src
			DC.L	dest
			DC.W	0,0,0
			DC.W	200,300,-100
	src:	DC.W	100,-100,0,20		; x/y/z/add (z.B. Farbe)
			DC.W	-40,50,300,10		; x/y/z/add
	dest:	DS.W	4*2

Register werden nicht gesichert (wegen 030 Stackstruktur unmîglich).

 ----- Routine 2 -----
----- TRANS_WORLD -----

Transformiert Punkte inkl. kleinem FlÑchenhandler.

Register werden nicht gesichert (wegen 030 Stackstruktur unmîglich).

 ----- Routine 3 -----
---- INIT_PARALLEL ----

Installiert Prozeû, der wÑhrend der DSP-Bearbeitung parallel ausgefÅhrt werden
soll.

	Parameter:		STACK		- Adresse des Prozesses.
								- Adr. == 0 => kein P-Prg.
					
					Die Register d0-d6/a0-a5 mÅssen die Registerwerte des
					Parallelproggys enthalten.
	
	BSP:	moveq	#0,d0			; Register der Parallelroutine setzen
			moveq	#1,d1			; (sinnloses Beispiel)
			move.w	#$7fff,d2
			move.w	#%1010101010,d3
			moveq	#127,d6
			lea		a,a0
			lea		b,a1

			pea		routadr(pc)		; push Routinenadresse
			bsr.w	INIT_PARALLEL
	
			...
			...TRANS_WORLD...	; dann lÑuft <rout> parallel.
			...
		
		rout:					; Diese Rout wird parallel ausgefÅhrt.
			add.l	d1,d0		; Die Flags bleiben erhalten...
			move.l	(a0),d4
			beq.s	bla
			eor.w	d3,d4
		bla:
			and.w	d2,d0
			addq.l	#2,d1
			move.l	d1,(a1)
			dbra	d6,rout
		
		ende:
			tst.b	flag		; Terminierungsschleife, "flag" wird vom
			beq.s	ende		; Hauptprogramm gesetzt.
			rts

Register werden nicht gesichert (wegen 030 Stackstruktur unmîglich).

---- Routine 5 ----
---- FIN_P_PRG ----

	Keine Parameter.
	Beendet Parallelproggy, nachdem vom Hauptprogramm das Ende-
	flag gesetzt wurde.

	BSP:	(P-Routine des Beispiels von <INIT_PARALLEL>)
	
		st		flag			; Flag setzen.
		BSR.W	FIN_P_PRG		; Proggy durchlaufenlassen.

Register werden nicht gesichert.
