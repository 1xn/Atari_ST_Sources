GOURAUD.INC:

Autor:				Jochen Knaus aka BDCannibal/AURA/Independent
Coderight:			(c) 1994 Jochen Knaus
Anzahl Routinen:	3
Prozessor:			ab 68020 (68030-Datencache benutzt!)

Erlaubt die Ausgabe eines konvexen Polygons gouraudshaded auf einem High-
Colour (16-Bit Direct-Colour (5:6:5)) Screen.

----------  Routine  1 ----------
---------- DRAW_GOURAUD ---------

Branch 1, Offset 0.

Routine gibt Polygon aus. Darf erst NACH einer Initialisierung aufgerufen
werden.

Parameter:	DG_SCR_BASE		= a0.l - Screenadresse
			DG_POINTS		= a5.l - Pointer auf transformierte und
										projezierte Punkte (8 Bytes:
										x.w/y.w/Farbe.w/0)
			DG_POLY_STRUCT  = a6.l - Polygonstruktur:
									0.l	- 	Pointer auf Farbpalette oder
											(long) 0 (blaues Polygon).
									4.w -	Anzahl Eckpunkte n (minus 1)
								    6.w -	Eckpunkt 0
								    8.w	-	Eckpunkt 1
								   10.w...	Eckpunkt n
								 12+n.w	-	Eckpunkt 0 (NôTIG)

		BSP:	lea		scr_base,DG_SCR_BASE
				lea		polygon,DG_POLY_STRUCT
				bsr		DRAW_GOURAUD
				...
			
			polygon:	DC.L	0		; blaues Polygon
						DC.L	punkte
						DC.W	3-1
						DC.W	0,1,2,0
			punkte:		DC.W	100,100,30,0
						DC.W	200,100,20,0
						DC.W	50,150,10,0
						BSS
			scr_base:	DS.B	BYTES_SCAN*SCR_HIGH

----------  Routine  2 ----------
---------- INIT_GOURAUD ---------

Branch 2, Offset 4.

Initialisiert komplette Gouraudroutine. Absolut nîtig VOR einer Ausgabe.

Parameter:	IG_SCR_WIDE		= d0.w - Bildschirmbreite Pixel
			IG_SCR_HIGH		= d1.w - Bildschirmhîhe Zeilen
			IG_ANZ_COLS		= d2.w - Anzahl zum Shading verwendeter Farben
			IG_SCAN_OFF		= a0.l - Scanlineoffsettabelle					/*1
			IG_LEFT_KOO		= a1.l - Linkes Koordinatenarray (REIHENFOLGE!)
			IG_COL_DIST		= a2.l - Distanzbuffer((4*ANZ_COLS*SCR_WIDE)*4) /*2
			IG_COL_DIST_PO	= a3.l - Distanzpointer ((ANZ_COLS*2+1)*4)		/*2
			IG_CLIPPING		= a4.l - Clippingbox (minx/maxx/miny/maxy)		/*3

/*1 : Tabelle (.l), fÅr jede Bildschirmzeile ein Offset (s. BUILD_SC_OFF)
/*2 : Buffer sind bereitzustellen, Initialisierung berechnet Farbdistanzwerte
	  und legt sie dort ab. In der Klammer steht der Grîûenbedarf. ANZ_COLS
	  entspricht der verwendeten Farbenanzahl, SCR_WIDE der Bildschirmbreite.
		(BSP:	DS.L 4*ANZ_COLS*SCR_WIDE)	
/*3 : Beschreibt den Clippingbereich.
		(BSP:	DC.W 0,319,0,239   - entspricht VGA-Low)

	BSP:		
			SCR_WIDE	EQU		320
			SCR_HIGH	EQU		240
			ANZ_COLS	EQU		32		; 32 Shadingstufen pro Farbe
	
				move.w	#SCR_WIDE,IG_SCR_WIDE
				move.w	#SCR_HIGH,IG_SCR_HIGH
				move.w	#ANZ_COLS,IG_ANZ_COLS
				lea		sc_off,IG_SCAN_OFF
				lea		lkoo,IG_LEFT_KOO
				lea		dist,IG_COL_DIST
				lea		dist_poi,IG_COL_DIST_PO
				lea		clipp,IG_CLIPPING
				bsr		INIT_GOURAUD
				...
			sc_off:	DC.L	0*SCR_WIDE,1*SCR_WIDE,2*SCR_WIDE...
			clipp:	DC.W	0,SCR_WIDE-1	; Ganzer Screen
					DC.W	0,SCR_HIGH-1
				BSS
			lkoo:	DS.W	SCR_H		; { Reihenfolge UNBEDINGT einhalten.
			lcol:	DS.W	SCR_H		
			rkoo:	DS.W	SCR_H
			rcol:	DS.W	SCR_H		;  }
			
			dist_po:
					DS.L	ANZ_COLS*2+1
			dist:	DS.L	4*SCR_WIDE*ANZ_COLS

------------ Routine 3 ----------
---------- BUILD_SC_OFFS ---------

Branch 3, Offset 8

Generiert eine Scanlineoffsettabelle, sollte das Hauptprogramm sich nicht
sowieso eine generieren, da die Gouraudroutine eine solche Rout benîtigt
(s. Initialisierung). Der Aufrufzeitpunkt kann auch nach der Initialisierung
sein (dort muû dann aber die Bufferadresse mitgeteilt werden), aber unbe-
dingt VOR dem ersten Aufruf von DRAW_GOURAUD.

Parameter:	IG_BYTES_SCAN	= d0.w - Grîûe Scanline in Bytes
			IG_SCR_HIGH		= d1.w - Bildschirmhîhe Zeilen
			IG_SCR_OFFS		= a0.l - Bufferadresse (Grîûe: Bildschirmhîhe)

	BSP:
		SCR_WIDE	EQU		320		; Screenbreite in Pixeln
		SCR_HIGH	EQU		240		; Bildschirmhîhe
		
			move.w	#SCR_WIDE*2,IG_BYTES_SCAN	; 2 Bytes / Pixel
			move.w	#SCR_HIGH,IG_SCR_HIGH
			lea		scan_offs,IG_SCR_OFFS
			bsr		BUILD_SC_OFFS
			...

			BSS
		scan_offs:	DS.L	SCR_HIGH