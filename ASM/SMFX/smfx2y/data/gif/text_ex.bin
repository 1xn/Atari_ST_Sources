       ¼¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶½       · Excellence in Art 2010 ·       ¾¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¿            Proudly Presents®¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¯©                                     ©©              TalkTalk2              ©©                                     ©©   The Church of Excellence in Art   ©©                                     ©°¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨±                                ¢¢¢¢¢¢¥  Technical note: if you`re having    £  problems running this from harddisk,£  it`s probably a memory issue. On my £  STE it runs fine with UIS III and   £  QuickST3, but that`s pretty much the£  limit, so consider shutting down all  resident programs if you`re having £problems. Also, when running from £floppy disks, DO leave disk 4 in the £drive after the initial loading, the £demo loads extra data from it during £runtime. On to the actual ReadMe. ¦¢¢¢¢¢¢              ¶¶¨¨¢¢¢¢¨¨¶¶v1.1 release notes:July 2010. The amazing George "GGN"Nakos has finally been able to get thisdemo running on MegaSTE machines byoptimising some (non-blitter, btw!)routines that ran slower on a MegaSTEthan on an STE. So with this version Ihope all MegaSTE owners out there inAtari-land can run it as it was intendedto run.The amount of positive feedbank sincethe initial release at Sommarhack 2010has been quite overwhelming, I`m veryhappy so many people enjoyed my work!So, many thanks to GGN for being clever,kind and generous with his time;without him, this demo would have asmaller audience. Thanks! And now backto the original readme.              ¶¶¨¨¢¢¢¢¨¨¶¶So, an STE demo running at 50Hz. Thatwas about time.Don't get me wrong, I'm as impressed asanyone by the amazing technical featsperformed by wizards like DefJam, but Ithink Mr. Pet of Sanity has a point whenhe expresses concern over trying to makePC demos on other platforms.(commentary track to ^Arte^ on the^Mindcandy vol 2^ DVD)I can certainly see a point to showingthat chunky pixel-effects are possibleon 80's hardware, but once that's beenproven, you've painted yourself into acorner, because you're stuck doing FXfrom the PC scene, only slower, at lowerresolution, with fewer colors and fewerpolygons.It makes a lot more sense to use the STEfor what it does well, and leave the(quite frankly boring) endless 3D scenesto the PC demoscene.Based on these thoughts I startedplanning a new STE demo when I got homefrom Sommarhack 2009.              ¶¶¨¨¢¢¢¢¨¨¶¶By July 19th, I had a plan for a verycrude copper-emulator, that would allowme to change the screen address andhorisontal scroll register individuallyfor every line.I had already decided to use a screenarea of 320x150 pixels, because I thinkit's a prettier x/y relation than thestandard 320x200. Also, it should saveme a bit of memory and CPU for effects.(This isn't the first time I've playedaround with screen formats, if you lookat ^Musique^, that uses only 200x200pixels, even though it's not as visiblethere.)Most of July 19th was spent making itwork in STeem, with help from the AtariCoding forum at http://dhs.nu, and thenrealizing it didn't work on my real STE;neither STeem nor Hatari fully emulateswhat happens when you mess around withthe screen address when the shifter hasalready started outputting the graphicsfor that line...But in the end, I got it working, as youcan see in the demo. Two days later, Ihad the ^raSTErs!^ effect running, and Irealized I had an engine that wouldallow me to do lots of silly effects Ihadn't seen before, like the ^page-flipper^ in the ^Here are some otherthings that you are^ part, and alsonice-looking versions of effects that Ihadn't seen done properly before (atleast not on the STE), like the ^water-drop distortion^ in the ^The worldisn't black and white^ part.So, once I felt confident I had enoughideas to make a full demo, I startedworking on the script.I know some people don't like my kind ofdemos, and that's ok, I don't need toplease everybody, but the one criticismI can't hide from is that my stuff tendsto be pretty preachy. And the second theword ^preachy^ came up, the rest of theconcept fell into place within minutes.I started googling randomly, looking forimages and designs related to religionand churches, and I realized there werea LOT of fantastic photos of churches,and so I borrowed (ok, stole) a bunch ofphotos, mainly from Flickr, and startedplaying around with them.All of a sudden I remembered the C64demo Thief by Civitas, a group I almostjoined in the early 2000's, and I'verealized afterwards that episode s04e21of My Name is Earl contained some moreof the thoughts I had while working onthe script.              ¶¶¨¨¢¢¢¢¨¨¶¶One of my personal favorite coders onthe STE is Empa, who coded demos forZeal, and was one of the main coders onSubStation. He's also a really greatguy, and we've had a lot of fun togetherover the years.If there's one thing I learned fromEmpa, it's the importance of working outa script for a demo, and sticking to it.Sure, if you discover technical reasonsfor changing the script, you have to dowhat you have to do (like if a plannedeffect turned out not to work), but thepoint is that changes to the scriptshould never be done lightly.I guess I've gotten older and a littlesmarter since the early 90's when I lastmade STE demos, because this time Idecided to stick to that rule, and Ithink it paid off. The development ofTalkTalk2 was a LOT smoother than anyother demo I've made, and it shows inthe final production.In terms of storytelling/message orwhatever you want to call it, TalkTalk2is the best demo I think I've made sofar, and I hope I'll get the opportunityto make another demo.As I'm sure you can tell from all myother demos, music has always been thenumber one priority, but that has comeat the cost of coherence, and the designhas always had to take a back seat frommusic. Not so this time.When I started coding STE again I was abit surprised to find that during theyears away from the Atari scene, I hadactually become a much better coder,and stuff that would really have mesweating in the 90's doesn't bother meat all, these days. I guess 80x86, 6510and Z80 assembler was good experience.So that's part of the reason I felt itwas time to make a demo with some moreserious code. But that's only part ofthe story.              ¶¶¨¨¢¢¢¢¨¨¶¶The music was a big question mark. Afterall the hours I worked on Obsession, Iwas really sick of the whole .MOD formatand all its limitations, and with themodern tools (i e maxYMiser), there's somany interesting possibilities.The obvious solution would be to use DMAmusic only, sampling a bunch of 2- and4-bar blocks and just sequence them intoa song. The problem with that approachis pretty obvious when you look at thedemos using it... The music gets reallyrepetitive, and I was pretty sure thiswould be a fairly long demo.What I ended up doing was to write a^piggy-back^ player that attached ontothe maxYMiser replay routine, using themaxYMiser's sync code to trigger samplesthat are basically 1- and 2-bar patternsdivided into quarter notes, to give memore flexibility.And I must say I think it works prettywell, the effect of fat sampled loops(in 25KHz STEREO!) and three channels ofYM leaves a lot more creative freedom.Just a small thing, like varying thelast quarter note in a 1-bar patternmakes a lot difference, I think it`swell worth the extra work.              ¶¶¨¨¢¢¢¢¨¨¶¶During the early 90's, I honestly feltthat I was one of the best musicians onthe STE scene, if not THE best, andthat's simply not true anymore. If itever was, you know?People like gwEm, Cerror, Crazy Q, Damoand especially 505, Dubmood and Dma-Schave done AMAZING work, and I don`tknow if I`m prepared to take the time topick up the glove and take my game tothat level. And besides, who knows if Ieven could?During the development of TalkTalk2, Iactually considered bringing in othermusicians to work on the music, but Iguess a small shard of pride stopped mein the end.So I guess all this added up to where Iam now, in a situation where my demoisn't going to blow you away with thebest music you've ever heard on the STE,so I need to work harder on all theother stuff. 8-)              ¶¶¨¨¢¢¢¢¨¨¶¶As you know, all demo coders are lazybastards, and that goes for me too. So Icontacted a lot of people, a lot of myold ^heroes^ from the Atari and Amigascenes. Out of respect for the peoplethat didn't feel they had the time ormotivation, I'm only going to mentionthe ones that came through. I havenothing but respect for the ones thatdidn't. Making demos is to waste a LOTof time, and making demos for a scenewith probably less than 50 people stillactive (I define ^active^ as actuallyRELEASING stuff) is even more crazy.Also, the more people that knew I wasworking on a new demo, the more people Iwould disappoint if I didn't finish it,and I would feel really horrible if Igot code written just for me, and Iended up never using it. This was partof the plan, to force me to finish thisdemo. 8-)Not surprising to ANYONE in the Atariscene, the first person to come up witha contribution was Evil. I know, I know,amazed gasps from everyone. 8-) Hisroutine, the cool 1-bitplane blob thatsort of looks like a lavalamp is in thebackground of the end-scroller, and yes,I feel a little bad about putting itthere, because it deserves a betterplace, but I just couldn't find anywhereelse to put it. Forgive me Evil!The blob routine was converted from afull-screen 4-bitplane version thatwasn't released at the time I'm writingthis, but I sure hope you get to see it,because it's AMAZING.The next person was Kalms, famous forbeing in my opinion the maker of thebest Amiga demo I've ever seen, Silkcutby The Black Lotus (Well, if you twistmy arm, Desert Dreams by Kefrens is justas good, but it's hard to compare an OCSdemo from 1993 with an AGA demo from2004). Kalms wrote a 1-bitplane lineroutine that is ridiculously fast, andit's thanks to him you don't need towatch a blank screen while I'm loadingthe compulsory raytraced animation. 8-)The lines drawn during that part arehanddrawn from a Blender animation (yes,I learned Blender ONLY to do this damnanimation). I spent 40 hours drawing anddrawing and drawing vector lines. Eitheryou're crazy from the beginning, ormaking demos MAKES you crazy. 8-)              ¶¶¨¨¢¢¢¢¨¨¶¶If I regret one thing about this demo,it's that I didn't research the blitterenough before I started. It probablywouldn't have made any difference, butit annoys me knowing that there is codethat could easily be made faster. Andbefore you ask, no, replacing thesubroutines totally screws up the timingof the parts that were written beforethe brilliant guys at the Atari Codingforum at http://dhs.nu taught me how touse the blitter...The one thing that surprises me, lookingback at the source code, is how muchtime is spent depacking data forupcoming parts. There's hardly a secondof this demo that isn't spent loading ordepacking data.Speaking of loading, Wiztom/Aggressionreally had a point at Sommarhack 2009;the demo I competed with there (^Justwhen I thought I was out / They pull meback in^) contained LONG loading times,and it's not nice to subject youraudience to long loading-screens withabsolutely nothing happening, so thathad to be dealt with. Ideally, I wouldhave come up with something with a bitmore variation than the animation andmusic I finally went with, but at leastit's a lot better than a black screen.Also, I`ve made sure all loading is doneONCE, so there won't be any sections ofwaiting in the middle.Trust me, I've tried to keep the loadingat a minimum, and ICE packed wheneverit's made sense (after all, depacking 100K of data is a lot faster thanloading it from floppy). The downside isthat harddisk loading gets a littleslower, but that's life I guess. Thatsaid, I absolutely recommend runningTalkTalk2 from harddisk if possible.I also discovered a bug that caused diskchanges to behave very strangely, often(but not always) simply not detectingthat a new floppy was in the drive.Thanks to Scott Sanders' excellent AtariCompendium and the Atari Coding forum athttp://dhs.nu I found out it's a fairlywell documented bug in the BIOS functionGetbpb(), and Mr Sanders even supplied asnippet of code to force a correct mediachange. I must admit that for a day ortwo I seriously considered making thedemo harddisk-only. If you want thecode, it's on page 166 of the AtariCompendium, or you can find it in theAtari Coding forum, the thread is called^GEMDOS loading with music^.Or, you could just drop me an e-mail, mycontact information is at the end ofthis document.              ¶¶¨¨¢¢¢¢¨¨¶¶I realize most people find coder`sanecdotes extremely boring, but there`sone I feel I must share.By October 3rd, I had come to the pointwhere basically everything was complete,except the main music and some minorbugs that probably noone but me wouldnotice, so I decided it was time tofinally replace the placeholder musicI used for timing with a track thatsomeone might actually (and hopefully)enjoy.The first thing I did was to add someechoes to a section where I use allthree YM channels to play chords on topof the DMA loop, a very minor addition,really just cosmetic. And here comes theamazing bit: even tho I wasn`t using anytimer effects (like SID or digidrums)the slight increase in CPU consumptionmade an unpacking sequence take too muchtime, and so the entire demo crashed.I had set aside 39 vertical blanks (orVBLs) for the depacking, which workedfine for the placeholder music, butobviously didn't when I added thoseechoes. 8-) Luckily, it was less than 15minutes work to fix.              ¶¶¨¨¢¢¢¢¨¨¶¶I can not praise the maxYMiser enough.It is the best tracker program I`ve everused (well, FT2 for the PC is an equalfirst place, to be honest), it`s stable,it`s fast, it`s clearly made by someonewho`s a real chip musician, with a deepunderstanding of what other musiciansneed.If you`re going to find a fault with it,it`s that to be as flexible as possible,it is by necessity a very technicalprogram, and I know at least onemusician that finds it too technical forhim to feel really comfortable with it.Being a coder myself tho, it suits meperfectly, it`s just how I want to workwith chip music.Also, as a coder, the maxYMiser lets medo amazing things. Using a singlecommand, I can turn on or off timers, soI can use SID sounds in sections of thedemo where it won`t interfere with theeffects on-screen. This is exactly whatI do in TalkTalk2 during the half-temposequence, where I can`t have the copperemulator running because I`m loadingdata from disk. So I take theopportunity to turn on SID on all threechannels, because it sounds nice. 8-)And, as I mentioned earlier, I use themaxYMiser`s sync code (using the Zxxcommand) to let my piggy-back DMA sampleplayer know what sample to play, andwhen. This would be a LOOOOOT of work injust about any other tracker. So themaxYMiser really does deserve all thepraise I give it.              ¶¶¨¨¢¢¢¢¨¨¶¶...back at the keyboard again, havingspent a couple of days finishing thedemo, 8 months after writing all theprevious text in this file.As I`m writing this, Sommarhack 2010 isonly 4 days away, and it`s looking likeit`s going to be a lot of fun! 8-)So anyway, I think I`ve said more thananyone would ever want to read in thisreadme file anyway, so I`ll just cut itshort and starting building the finalrelease floppies.Take care!Let love rule. Always.  Per Almered,    Excellence in Art 2010¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶Contact information:  Per Almered  per@brainfish.net  http://brainfish.net/atari             ÚÏÏÏÏÏÏÏÏÏÏÏÏÛ¶¶¶¶¶¶¶¶¶¨¨ÏÏ× That`s all ÙÏÏ¨¨¶¶¶¶¶¶¶¶¶             ÜÏÏÏÏÏÏÏÏÏÏÏÏÝ                                                     