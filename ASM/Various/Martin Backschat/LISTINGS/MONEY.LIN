001: ; ** MONEY by Martin Backschat (c)1991 ICP **
002: ; **     Assembliert mit Turbo-Ass 1.62    **
003: start:
004:    movea.l 4(SP),A5   ; Basepage
005:    move.l $0C(A5),D0  ; ProgramlÑnge
006:    add.l  $14(A5),D0  ; DatenlÑnge
007:    add.l  $1C(A5),D0  ; BSS-LÑnge
008:    add.l  #$0100,D0   ; Basepage-LÑnge
009:    move.l D0,-(SP)    ; LÑnge und Adr.
010:    pea    (A5)        ; des zu reserv.
011:    pea    $4A0000     ; SETBLOCK
012:    trap   #1
013:    lea    12(SP),SP
014:    tst.l  D0          ; Fehler?
015:    beq.s  main
016: mainexit:
017:    lea    deinitstring(PC),A0
018:    bsr    print
019:    clr.w  -(SP)       ; PTERM0
020:    trap   #1
021: main:       DC.W $A00A ; Maus ausschalten
022:    lea    initstring(PC),A0 ; Meldung ausgeben
023:    bsr    print
024: mainloop:
025:    bsr    readline    ; Eingabe einlesen -> A0
026:    bsr    isempty     ; leere Zeile?
027:    beq.s  cmd_old     ; dann letzer Befehl
028:    bsr    skipwhite   ; Åberliest Spaces&Tabs
029:    bsr    readlower   ; liest Zeichen ((A0)+)
030:    lea    cmds(PC),A1 ; jetzt Befehl finden
031:    lea    1(A1),A2    ; (fÅr spÑter)
032: lgetcmd:
033:    tst.b  (A1)        ; keiner? -> Fehler
034:    beq.s  error
035:    cmp.b  (A1)+,D0    ; stimmt dieser?
036:    bne.s  lgetcmd     ; nein, weiter
037:    suba.l A2,A1       ; Befehlsnummer
038:    move.w A1,defaultcmd
039: execcmd:
040:    adda.l A1,A1       ; fÅr .w-Tabelle
041:    lea    cmdsadr(PC),A2 ; .Dc.w-Tabelle
042:    movea.w 0(A2,A1.w),A1 ; Eintrag auslesen
043:    jsr    start(PC,A1.w) ; Befehl ausfÅhren
044:    bra.s  mainloop    ; zur Eingabe zurÅck
045: error:
046:    lea    errorstr(PC),A0 ; Fehlertext
047:    bsr    print       ; ausgeben
048:    bra.s  mainloop    ; zur Eingabeschleife
049: ; ---- hier steht der Code der Befehle -----
050: ;      (A0 zeigt stets in Eingabezeile)
051: cmd_old:              ; letzten Befehl nochmal
052:    movea.w defaultcmd(PC),A1
053:    bra.s  execcmd
054: ; EXIT: Syntax: x
055: cmd_exit:             ; MONEY EXIT
056:    bra.s  mainexit    ; das ist leicht!
057: ; ------ MEMORY: Syntax: m[b|w|l] [from] [to]
058: cmd_memory:           ; show MEMORY
059:    bsr    readsize    ; Operandenbreite -> d7
060:    bsr    read2args   ; Start/Endadr. -> a5/a6
061:    moveq  #12-1,D2    ; Bis zu 12 Textzeilen
062: lcmdprint:
063:    lea    outline(PC),A0 ; in die Ausgabezeile
064:    move.l A5,D0       ; Adresse ausgeben
065:    bsr    bufprtl
066:    move.b #':',(A0)+
067:    move.b #' ',(A0)+
068:    moveq  #16,D1      ; bei Bytes 16, bei
069:    lsr.w  D7,D1       ; Wort 8 und bei
070:    subq.l #1,D1       ; Langwort 4 Spalten
071: cmdmprint:
072:    cmpa.l A6,A5       ; Endadr. A6 erreicht?
073:    bpl.s  xcmd_m      ; (A5-A6 >= 0) ja -> Ende
074:    bsr    reada5      ; Wert (b,w,l) auslesen
075:    bsr    bufd0print  ; und ausgeben
076:    move.b #',',(A0)+  ; Werte mit ',' trennen
077:    dbra   D1,cmdmprint ; SpaltenzÑhler
078:    bsr    printline   ; Zeile ausgeben
079:    dbra   D2,lcmdprint ; ZeilenzÑhler
080:    move.l A5,defaultadr ;Endadr ist Defaultadr.
081:    rts                ; zur Eigabeschleife
082: xcmd_m:
083:    move.l A5,defaultadr
084:    bra    printline
085: ; ----- ASCII DUMP: Syntax: d [from] [to]
086: cmd_dump:
087:    bsr    read2args   ; Start/Endadr holen
088:    moveq  #0,D7       ; im Byte-Operand
089:    moveq  #12-1,D2    ; max. 12 Zeilen
090: lcmddprint:
091:    lea    outline(PC),A0
092:    move.l A5,D0
093:    bsr    bufprtl     ;Adresse ausgeben
094:    move.b #':',(A0)+
095:    move.b #' ',(A0)+
096:    clr.b  (A0)
097:    lea    outline(PC),A0
098:    bsr    print       ; Zeilenanfang zeigen
099:    moveq  #64-1,D1    ; 64 Zeichen/Zeile
100: cmddprint:
101:    cmpa.l A6,A5       ; Endadr. A6 erreicht?
102:    bpl.s  xcmd_d      ; (A5-A6 >= 0) ja -> Ende
103:    bsr    reada5      ; Byte auslesen
104:    bsr    printchar   ; und anzeigen
105:    dbra   D1,cmddprint ;SpaltenzÑhler
106:    bsr    newline     ; in neue Zeile
107:    dbra   D2,lcmddprint ; ZeilenzÑhler
108:    move.l A5,defaultadr ; Endadr. ist Default
109:    rts                ; zur Eingabeschleife
110: xcmd_d:
111:    move.l A5,defaultadr
112:    bra    newline
113: ; ----- CHANGE: c[b|w|l|a] [to] [val1] [val2]...
114: cmd_change:
115:    bsr    readlower   ; Zeichen lesen?
116:    cmpi.b #'a',D0     ; ASCII Change?
117:    beq.s  cmd_cascii
118:    subq.l #1,A0
119:    bsr.s  readsize    ; Operandenbreite holen
120:    bsr.s  readvalue   ; Zieladr. holen
121:    movea.l D0,A5      ; und nach A5
122: lcmd_c:
123:    bsr    isempty     ; kommt noch ein Wert?
124:    beq.s  xcmd_ready  ; nein, dann Ende
125:    bsr.s  readvalue   ; ansonsten holen
126:    bsr    writea5     ; und schreiben
127:    bra.s  lcmd_c
128: cmd_cascii:
129:    bsr.s  readvalue   ; Zieladr. lesen
130:    movea.l D0,A5
131:    bsr    skipwhite
132:    clr.b  D7          ; Bytes schreiben
133: lcmd_cascii:
134:    move.b (A0)+,D0    ; alle Zeichen schreiben
135:    beq.s  xcmd_ready
136:    bsr    writea5
137:    bra.s  lcmd_cascii
138: xcmd_ready:
139:    bra    newline
140: ; !!!! Ab hier stehen kurze Hilfsroutinen !!!!
141: ; ---- stellt Operandenbreite fest (-> D7)
142: readsize:
143:    move.w D0,-(SP)
144:    bsr    readlower   ; liest Zeichen -> D0
145:    cmpi.b #'b',D0
146:    bne.s  sizeword
147:    moveq  #0,D7       ; Byte -> D7 = 0
148:    bra.s  xreadsize
149: sizeword:
150:    cmp.b  #'w',D0
151:    bne.s  sizelong
152:    moveq  #1,D7       ; Wort -> D7 = 1
153:    bra.s  xreadsize
154: sizelong:
155:    cmp.b  #'l',D0
156:    bne.s  sizedefault
157:    moveq  #2,D7       ; Langwort -> D7 = 2
158:    bra.s  xreadsize
159: sizedefault:
160:    subq.l #1,A0
161:    move.w defaultd7(PC),D7
162: xreadsize:
163:    move.w D7,defaultd7
164:    move.w (SP)+,D0
165:    rts
166: ; ---- liest Start/Endadr -> A5/A6
167: read2args:
168:    bsr.s  readvalue   ; Startadresse lesen
169:    movea.l D0,A5      ; nach A5
170:    lea    $7FFF(A5),A6 ; Default-Endadr.
171:    bsr.s  isempty     ; Endadresse vorhanden?
172:    beq.s  xread2args
173:    bsr.s  readvalue   ; ja, dann holen
174:    movea.l D0,A6      ; und nach A6
175: xread2args:
176:    rts
177: ; ---- liest Åber (A0)+ einen Wert -> D0.L
178: readvalue:
179:    move.l D1,-(SP)    ; D1 retten
180:    bsr.s  skipwhite   ; Spaces Åberspringen
181:    beq.s  xxreadvalue ; Zeilenende?
182:    moveq  #0,D1       ; Wert initialisieren
183: lreadvalue:
184:    bsr.s  readlower   ; Zeichen auslesen
185:    cmp.b  #'$',D0     ; '$' Åberlesen
186:    beq.s  lreadvalue
187:    cmp.b  #'0',D0     ; zwischen '0'-'9'
188:    bmi.s  xreadvalue  ; zu klein...
189:    cmp.b  #'9'+1,D0
190:    bpl.s  readaf      ; zu groû, 'a'-'f'?
191:    sub.b  #'0',D0     ; '0'-'9' - >0-9
192:    bra.s  readnext    ; nÑchstes Zeichen
193: readaf:
194:    cmp.b  #'a',D0     ; zwischen 'a'-'f'?
195:    bmi.s  xreadvalue  ; nein...
196:    cmp.b  #'f'+1,D0
197:    bpl.s  xreadvalue  ; nein...
198:    sub.b  #'a'-10,D0  ; 'a'-'f' -> $a-$f
199: readnext:
200:    lsl.l  #4,D1       ; D1 um ein Nibble
201:    add.b  D0,D1       ; verschieben und Wert
202:    bra.s  lreadvalue  ; hinzuaddieren
203: xreadvalue:
204:    subq.l #1,A0       ; A0 auf letztes Zeichen
205:    move.l D1,D0       ; D1 als RÅckgabewert
206:    move.l (SP)+,D1
207:    move.l D0,defaultadr
208:    rts
209: xxreadvalue:
210:    move.l defaultadr(PC),D0
211:    move.l (SP)+,D1
212:    rts
213: ; ---- testet, ob Zeile (A0) leer ist
214: isempty:
215:    move.l A0,-(SP)
216:    bsr.s  skipwhite
217:    tst.b  D0          ; Zeilenende erreicht?
218:    movea.l (SP)+,A0   ; verÑndert CCR nicht!
219:    rts
220: ; ---- liest Zeichen (A0)+ -> D0.B Kleinbuchst.
221: readlower:
222:    move.b (A0)+,D0    ; Zeilenende?
223:    beq.s  xtolower
224:    cmp.b  #'A',D0     ; A-Z -> a-z
225:    bmi.s  xtolower
226:    cmp.b  #'Z'+1,D0
227:    bpl.s  xtolower
228:    addi.b #'a'-'A',D0 ; in Kleinbuchstaben
229: xtolower:
230:    rts
231: ; ---- Spaces und Tabs Åberlesen, -> D0 Zeichen
232: skipwhite:
233:    move.b (A0)+,D0    ; Zeichen lesen
234:    beq.s  xskipwhite
235:    cmp.b  #' ',D0     ; Leerzeichen?
236:    beq.s  skipwhite
237:    cmp.b  #9,D0       ; Tab-Zeichen?
238:    beq.s  skipwhite
239: xskipwhite:
240:    subq.l #1,A0
241:    rts
242: ; -- liest Byte/Wort/Langwort Åber (A5)+ -> D0
243: reada5:
244:    bsr    super       ; In Supervisor-Modus
245:    move.b D7,D0       ; Operandenbreite
246:    bne.s  reada5word  ; Byte?
247:    move.b (A5)+,D0
248:    bra.s  xreada5
249: reada5word:           ; Word/Langword, dann
250:    bsr.s  evena5      ; Adr. begradigen
251:    subq.b #1,D0
252:    bne.s  reada5long
253:    move.w (A5)+,D0
254:    bra.s  xreada5
255: reada5long:
256:    move.l (A5)+,D0
257: xreada5:
258:    bsr    user        ; in User-Modus
259:    rts                ; und zurÅck
260: ; ---- schreibt B/W/L in D0 nach (A5)+
261: writea5:
262:    bsr    super       ; In Supervisor-Modus
263:    tst.b  D7          ; Byte?
264:    bne.s  writea5word
265:    move.b D0,(A5)+
266:    bra.s  xreada5
267: writea5word:          ; Wort/Langwort, dann
268:    bsr.s  evena5      ; Adresse begradigen
269:    cmp.b  #1,D7
270:    bne.s  writea5long
271:    move.w D0,(A5)+
272:    bra.s  xreada5
273: writea5long:
274:    move.l D0,(A5)+
275:    bra.s  xreada5
276: evena5:               ; --- A5 begradigen
277:    move.l D0,-(SP)
278:    move.l A5,D0
279:    bclr   #0,D0
280:    movea.l D0,A5
281:    move.l (SP)+,D0
282:    rts
283: ; ---- gibt Zeichen in D0 Åber BCONOUT aus
284: printchar:
285:    move.w D0,-(SP)    ; Zeichen
286:    move.w #5,-(SP)    ; GerÑt 5
287:    move.w #3,-(SP)    ; BCONOUT
288:    bsr    do_trap13   ; Bios
289:    addq.l #6,SP
290:    rts
291: ; ---- Gibt Zeile in A0 Åber Gemdos aus
292: printline:
293:    clr.b  -(A0)
294:    lea    outline(PC),A0
295:    bsr.s  print
296:    bra.s  newline     ; und in neue Zeile
297: ; ---- liest Eingabe nach A0
298: readline:
299:    move.w D0,-(SP)
300:    lea    inputline(PC),A0 ; Zeiger auf Zeile
301:    move.l #$4F000000,(A0) ; $4f=79 Spalten
302:    pea    (A0)        ; +2 Infobytes davor
303:    move.w #$0A,-(SP)  ; Funktion Cconrs
304:    bsr.s  do_trap1
305:    addq.l #6,SP
306:    moveq  #0,D0
307:    move.b 1(A0),D0    ; ZeilenlÑnge holen
308:    addq.l #2,A0       ; 2 InfoByte Åberspr.
309:    clr.b  0(A0,D0.w)  ; Zeilenende setzen
310:    move.w (SP)+,D0
311:    rts
312: ; ---- Gibt Zeile in A0 aus
313: print:
314:    pea    (A0)
315:    move.w #9,-(SP)    ; Funktion Cconws
316:    bsr.s  do_trap1
317:    addq.l #6,SP
318:    rts
319: ; ---- Springt in neue Zeile
320: newline:
321:    move.l A0,-(SP)
322:    lea    newlinestr(PC),A0
323:    bsr.s  print
324:    movea.l (SP)+,A0
325:    rts
326: ; ---- In Super/User-Modus wechseln
327: super:
328:    clr.l  ssp_save
329: user:
330:    move.l D0,-(SP)
331:    move.l ssp_save(PC),-(SP)
332:    move.w #$20,-(SP)
333:    bsr.s  do_trap1
334:    addq.l #6,SP
335:    move.l D0,ssp_save
336:    move.l (SP)+,D0
337:    rts
338: ; ---- Trap 1 (Gemdos) und rettet Register
339: do_trap1:
340:    movem.l D1-D2/A0-A2,savereg
341:    move.l (SP)+,backadr ; RÅckspr.adr merken
342:    trap   #1
343:    movem.l savereg(PC),D1-D2/A0-A2
344:    move.l backadr(PC),-(SP) ; RÅckspr. a. Stack
345:    rts
346: ; ---- Trap 13 (Bios) und rettet Reg.
347: do_trap13:
348:    movem.l D1-D2/A0-A2,savereg
349:    move.l (SP)+,backadr
350:    trap   #13
351:    movem.l savereg(PC),D1-D2/A0-A2
352:    move.l backadr(PC),-(SP)
353:    rts
354: ; ---- gibt D0 als Byte/Wort/Langwort nach (A0)
355: bufd0print:
356:    tst.b  D7          ; Operandenbreite Byte?
357:    beq.s  bufprtb     ; Byte D0.B ausgeben
358: bufd0word:
359:    cmp.b  #1,D7       ; Wort?
360:    beq.s  bufprtw     ; Wort D0.L ausgeben
361: ; -- gibt Langwort D0.L als Hexzahl nach (A0)
362: bufprtl:
363:    swap   D0
364:    bsr.s  bufprtw
365:    swap   D0
366:    bra.s  _bufprtw
367: ; -- gibt Wort D0.W als Hexzahl nach (A0) aus
368: bufprtw:
369:    move.b #'$',(A0)+
370: _bufprtw:
371:    move.w D1,-(SP)
372:    move.w D0,D1
373:    lsr.w  #8,D0
374:    bsr.s  _bufprtb
375:    move.b D1,D0
376:    bsr.s  _bufprtb
377:    move.w (SP)+,D1
378:    rts
379: ; -- gibt Byte D0.B als Hexzahl nach (A0) aus
380: bufprtb:
381:    move.b #'$',(A0)+
382: _bufprtb:
383:    move.w D1,-(SP)
384:    move.l A1,-(SP)
385:    lea    hexasciitab(PC),A1
386:    and.w  #$FF,D0     ; Bits 15-8 lîschen
387:    move.w D0,D1
388:    lsr.b  #4,D0
389:    move.b 0(A1,D0.w),(A0)+ ; Hi-Nibble
390:    and.b  #$0F,D1
391:    move.b 0(A1,D1.w),(A0)+ ; Lo-Nibble
392:    movea.l (SP)+,A1
393:    move.w (SP)+,D1
394:    rts
395:             DATA      ; hier stehen die Daten
396: cmds:       DC.B 'x','m','d','c',0
397:             EVEN      ; Adr. begradigen
398: cmdsadr:    DC.W cmd_exit-start,cmd_memory-start
399:             DC.W cmd_dump-start,cmd_change-start
400: defaultadr: DC.L $0400 ; Defaultadr = $400
401: defaultd7:  DC.W 0    ; Defaultoper.breit = Byte
402: defaultcmd: DC.W 1    ; Defaultbefehl: MEMORY
403: hexasciitab:DC.B '0','1','2','3','4','5','6','7'
404:             DC.B '8','9','a','b','c','d','e','f'
405: initstring: DC.B $1B,'E',$1B,'e'
406:             DC.B "*** Money - A Simple Memory"
407:             DC.B " Monitor ***",13,10
408:             DC.B "*** by Martin Backschat (c)"
409:             DC.B "1991 ICP ***",13,10,0
410: deinitstring:DC.B $1B,'E',$1B,'f',0
411: errorstr:   DC.B $1B,'M',7,0
412: newlinestr: DC.B 13,10,0
413:             BSS       ; hier die uninit. Daten
414: outline:    DS.B 82   ; Ausgabezeile
415: inputline:  DS.B 82   ; Eingabezeile
416: ssp_save:   DS.L 1    ; fÅr SP
417: savereg:    DS.L 5    ; D1,D2,A0,A1,A2
418: backadr:    DS.L 1
419:             END
