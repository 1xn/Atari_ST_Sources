SUB-ROUTINE NAME        fadeoff
BRIEF DESCRIPTION       Fades palette colours down to black
FILENAME                FADE_STF, FADE_STE
OTHER RESOURCES
LANGUAGE                Assembler (Devpac)
AUTHOR                  Ralph Lovesy

ENTRY PARAMETERS        Palette store (address $FFFF8240) holds colours
                        System in supervisor mode

EXIT PARAMETERS         All colours set to black

DETAILS-
This source code  allows  smooth  fades  to  and  from  black,  there are
separate routines for ST(FM) and STE machines. After all, it's ridiculous
not to make use of the  enhanced  palette  which contains eight times the
number of colours!

ST(FM) fade routines
====================

Call this subroutine with a "bsr fadeoff" instruction. Since the routines
access protected memory first make sure  that the program is operating in
Supervisor mode before  calling  these  routines  otherwise  you will get
bombs. Control will be  returned  to  the  main  program with all colours
faded to black. Remember that  if  you  replace the vertical blank vector
(address  $70), you must remember to increment the counter ($466).

SUB-ROUTINE NAME        fadeon
BRIEF DESCRIPTION       Fades palette colours up
FILENAMES               FADE_STF, FADE_STE
OTHER RESOURCES
LANGUAGE                Assembler (Devpac)
AUTHOR                  Ralph Lovesy

ENTRY PARAMETERS        Palette store (address $FFFF8240) holds colours
                        System in supervisor mode
                        a2=address of new palette data

EXIT PARAMETERS         Palette holds new colours

DETAILS-
Call this subroutine with  a  "bsr  fadeon"  instruction. Control will be
returned to the main program with all  colours  faded to those of the new
palette, which is pointed to by a2. This is done by something like :-

                   lea     palette,a2
                   bsr     fadeon

STE fade routines
=================
STE Fadeoff  and STE Fadeon  are  very  similar to the above routines but
much smoother than the ST(FM)  routines.  See ST  fadeoff/fadeon routines
for main comments.

The code is not  too  well  commented,  but  the  whole process is pretty
straight-forward. I thought I'd start  off  with something simple, but in
future I  could  contribute  routines  for  hardware  scrolling,  blitter
sprites and DMA sound etc. If you have any problems (or suggestions), you
can call me 0367 241940 anytime. That's all, see you soon!
