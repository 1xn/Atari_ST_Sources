

                           DOCUMENTATION FOR JOYVBL.S

                               By Paul Ditchfield

     This program has been tested and  works  perfectly  on a Falcon 030 it
     should work just as well on any STE  but  I have not been able to test
     this.  The source code  uses  the  macros  supplied  by Peter Hibbs in
     issue 9.


     WHAT THE PROGRAM DOES

     The program JOYVBL.TOS shows how to install the joypad reading routine
     into the VBL  queue  and  how  to  read  and  use  the results.  After
     installing the reading routine into  the  VBL  queue, the program then
     fetches the results from Abuff and  prints  them  on the screen in the
     form of a 32 bit binary number.   You  can see which buttons set which
     bits simply  by  pressing  the  appropriate  buttons  on  a controller
     connected to port A.  The program can easily be changed to display the
     results from port B by passing  the  address  of Bbuff to the printing
     routine instead of or as well as the address of Abuff.

     The  program  will  quit  when  the   buttons  *  and  #  are  pressed
     simultaneously this shows how easy it  now is to test for combinations
     of buttons being pressed (when connected to a Jaguar * and #  causes a
     reset).


     HOW THE PROGRAM WORKS

     The  first piece of code  simply  runs  a  small routine in supervisor
     mode using xbios #38  "Supexec".   The  routine itself simply installs
     the joypad reading routine  into  the  VBL  queue  so  that it will be
     executed at  every  vertical  blank.   The  VBL  queue  is  a  list of
     addresses held at $4ce which is in  protected memory hence the need to
     be in supervisor mode.  These addresses point to routines which are to
     be executed every vertical blank.  There  are  8 slots available (this
     can be expanded) for addresses of routines.  One or more of these will
     already be in use.  The routine looks  for  a slot which is empty i.e.
     equal to zero, then puts the  address  of  the joypad routine into the
     slot and saves the address of the slot we used.

     Now our routine will be executed  every  VBL.   We save the address of
     the slot we used because when  we  quit  our program, the slot must be
     reset to zero otherwise the  machine  will  crash.  The routine called
     "restore" is responsible for resetting the slot back to zero.

     From now on then,  until  we  quit  from  the  program the two buffers
     labelled Abuff and Bbuff are being fed  data from the joypads at 50,60
     or 70 times a second.

     The next section of code loads one of the buffers (in this case Abuff)
     into a data register and tests each bit  in turn.  If the bit is a one
     then the ASCII code for a "1" is sent to a buffer if it is a zero then
     the code for a zero is sent.   What  we are actually doing is building
     up an ASCII string in the buffer which can then be printed out.

     Next we wait  for  a  vertical  blank  to  occur,  then  print out the
     contents of the buffer using GEMDOS  function #9 "Cconws".  The buffer
     has added on to it, some VT52 codes which position the cursor and make
     it invisible.

     The next chunk of code tests to see  if the "*" and "#" keys are being
     pressed on the joypad.  If they are then we reset the VBL slot to zero
     using the routine "restore"  then  we  quit  using  GEMDOS function #0
     "Pterm0" otherwise we loop back and print out whatever value is now in
     Abuff.

     The remaining code is the joypad routine itself.

     WHAT "jtest" DOES

     See note to Dick Teuber before reading more.

     It can be  seen  from  the  description  of  how  the  joypad uses the
     available registers that it  can  be  quite  complicated to find which
     buttons are being pressed at any  given moment.  This is especially so
     if you need to test for different combinations of buttons.

     For a start you have to  be  in  supervisor  mode, then if you want to
     test for combinations of buttons  in  different  columns of the matrix
     you have to mess  about  setting  a  bit,  copying  the registers then
     setting another bit and copying the registers etc, etc.

     It would be  much  better  if  you  only  had  to  deal  with just two
     registers one for each controller  and  if these registers were usable
     in either user or supervisor mode.  This is precisely what the routine
     "jtest" does.  The 21  buttons  of  controller  A  are reported in the
     least  significant  21  bits   of   the   long  word  labelled  Abuff.
     Simultaneously the 21 buttons  of  controller  B  are  reported in the
     least significant 21 bits of  the  long  word labelled Bbuff.  Now any
     button or combination of buttons will have its own unique value making
     it very easy to test for any combination you like.

     Because the "jtest" routine is installed  into  the VBL queue it works
     away in the background, all you have  to  do is to install it into the
     VBL queue. Then to get complete  information  about either pad all you
     have to do is examine Abuff and  Bbuff which are in unprotected memory
     and are updated every 50, 60 or  even  70 times a second (according to
     the sort of monitor attached) which is plenty fast enough!


     FORMAT OF Abuff AND Bbuff

     bit  #                  use
     ----------------------------
     0.......................Up
     1.......................Down
     2.......................Left
     3.......................Right
     4.......................*
     5.......................7
     6.......................4
     7.......................1
     8.......................0
     9.......................8
     10......................5
     11......................2
     12......................#
     13......................9
     14......................6
     15......................3
     16......................Pause
     17......................Fire 0 (labelled A on joypad)
     18......................Fire 1 (labelled B on joypad)
     19......................Fire 2 (labelled C on joypad)
     20......................Option

     Bits 21 to 31 of  Abuff  and  Bbuff  are  unused,  they are set to all
     zeros.

     HOW "jtest" WORKS

     We can only test for one column  in  the  matrix  at a time but we can
     test for both pads at once.  The  first  few chunks of code simply set
     the appropriate bits in FF9202 to  0  and  then moves the results from
     FF9200 and FF9202 into data  registers.   Then  we invert all the bits
     using a logical NOT, this is done  because it seems far easier to work
     with bits which are being set by events rather than cleared by them.

     Now only some of the bits in  FF9200 and FF9202 are used for reporting
     results the rest is rubbish and  must  be masked out, this is achieved
     by using a logical AND.

     Now we have the results for  all  of  the  buttons on both pads safely
     held in data registers and cleaned  up  from any rubbish.  Events from
     the joypad are shown by bits set to one.

     The next few sections of code  copy the results into working registers
     where they are manipulated so that the appropriate bits can be slotted
     into their correct places  in  holding  registers.   When all the bits
     have been slotted in, the holding  registers are copied into Abuff and
     Bbuff and the routine is finished until  the next VBL when the process
     is repeated.


     Here is an example of the way in which the bits are manipulated:

     Note  that  "a"=results  from  pad  A,  "b"=results  from  pad  B  and
     "r"=rubbish

     d0=0000 0000 0000 0000 0000 0000 0000 0000      d0 is clear

     move.w  $ffee,$ff9202                   Test for U,D,L,R,pause, F0

     move.l  $ff9200,d0                      Move result into d0

     d0=0000 0000 0000 0000 rrrr rrrr rrrr bbaa

     swap    d0

     d0=rrrr rrrr rrrr bbaa 0000 0000 0000 0000

     move.w  $ff9202,d0

     d0=rrrr rrrr rrrr bbaa bbbb aaaa rrrr rrrr

     not.l   d0                                      All bits are inverted

     andi.l  #$fff00                                 Mask off the crap

     d0=0000 0000 0000 bbaa bbbb aaaa 0000 0000

     This procedure  is  repeated  until  all  the  results  are  stored in
     registers d0-d3.

     Now the results  are  moved  into  working  registers, manipulated and
     moved into holding registers.

     move.l  d0,d4                           Move into working reg

     d4=0000 0000 0000 bbaa bbbb aaaa 0000 0000

     andi.l  #$30f00                         Mask off pad B results

     d4=0000 0000 0000 00aa 0000 aaaa 0000 0000

     ror.w   #8,d4                           Rotate bits into position

     d4=0000 0000 0000 00aa 0000 0000 0000 aaaa

     eor.l   d4,d5                           Slot them into holding reg

     d5=0000 0000 0000 00aa 0000 0000 0000 aaaa

     The same sort of process is used on all the results in d0-d3 until all
     21 possible events on each pad have been accounted for.
