                        The ST Interrupts

Essential  for coding techniques are the regular interrupts  that 
occur.  These documents will attempt to explain how to use these.

Interrupts are used for: 
     getting rid of the lower border
     playing samples (on FM and STe)

and have many other uses.   So you will need to use them at  some 
point if you're looking to code demos.

I  have included a program called TEST.PRG.   This lets you  play 
around with the interrupts,  and show exactly how frequently they 
occur.   Try  selecting  timer B with values 8  and  1...  almost 
pretty!  Now turn off timer C by selecting it, and using values 0 
and  0.   You  can  see  that the lines on  the  screen  are  now 
perfectly  still!   The  colour changes every time  an  interrupt 
occurs.  Try using different values with timer B.

When  you've  had a play around (and  crashed  the  computer,  no 
doubt), read this next bit...


OK... what the timers are...

The ST generates timing pulses.  When one of these pulses occurs, 
an interrupt occurs,  and the ST executes the code it finds at  a 
certain vector.   Then,  it returns to what it was doing  before.  
You  can  define  where it will jump to  by  altering  a  timer's 
vector, and how often it will jump there, by altering the control 
and the data bytes for that timer.

Regular  interrupts can be very useful (a sample playing  on  the 
STFM, for example - a bit of sound needs to be played regularly).

Here is a complete listing of the addresses you will need.


Byte Registers:

Enable A  $fffffa07
Enable B  $fffffa09

In-Service A   $fffffa0f

Mask A    $fffffa13
Mask B    $fffffa15

Timer A Control     $fffffa19
Timer B control     $fffffa1b

Timer A Data   $fffffa1f
Timer B Data   $fffffa21


Longword Vectors:

Timer A vector $134
Timer B vector $120


The  names given to these by Atari are somewhat  confusing.   The 
Control  and  Data registers do indeed refer to timers  A  and  B 
respectively.  However, the Enable, In-Service and Mask registers 
are named a bit ambiguously.

Enable  A,  for  example,  is used by both Timer A and  timer  B.  
Enable B is used by Timer C!  For these registers, the timers use 
the following bits:

Timer A uses bit 5 of:
     Enable A
     In-Service A
     Mask A
and all of
     Control A
     Data A

Timer B uses bit 0 of:
     Enable A
     In-Service A
     Mask-A
and all of
     Control B
     Data B

Timer C uses bit 5 of:
     Enable B
     In-Service B
     Mask-B
(but mask B is all you will ever use; simply to switch timer C on 
and off)


A  complete  run-down of these addresses and their  uses  can  be 
found in ST INTERNALS, on pages 32-40, 60-61 and 240-244.


Let's take a look at how Timer B works.

I want to install a routine to run on Timer B.   First,  I switch 
it off,  so make sure it doesn't run while I'm changing it.  I do 
this with:
     clr.b     $fffffa1b

Then, I install my routine's address

     move.l    #my_timer,$120

Now,  I set both masks to "ON".   If just one is set to ON,  then 
the routine will not be run.  Set them with:

     bset      #0,$fffffa07
     bset      #0,$fffffa13

Now,  I  tell the ST how many "counts" to make before running  my 
routine.  I put the number of counts in the data register:

     move.b    #100,$fffffa21

Finally, I set the routine off and running by setting the control 
byte to the type of counting that I want...

     move.b    #8,$fffffa1b


Now,  you  might not have understood all of that.   Don't  panic.  
Here's an explanation in more depth.

In order for the routine to be executed,  several conditions have 
to be met.

1.   The timer's counter has to reach the number specified by the 
     user.

2.   The Mask bit for the timer must be set to 1.

3.   The Enable bit for the timer must be set to 1.

4.   The Control Register for the timer contains something  other 
     than 0.

5.   The Status Register allows the interrupt to take place.

When all this is true,  the ST will pick up the address stored at 
$120, and run the code it finds there.

Let's  have a look at what we can put into the Control  and  Data 
registers:


CONTROL REGISTER FOR TIMERS A OR B CAN CONTAIN:

Dec    Binary    Causes
0      0000      Timer Stop
1      0001      Delay mode / 4
2      0010      Delay mode / 10
3      0011      Delay mode / 16
4      0100      Delay mode / 50
5      0101      Delay mode / 64
6      0110      Delay mode / 100
7      0111      Delay mode / 200
8      1000      Event Count mode
9      1001      Pulse Extension mode / 4
10     1010      Pulse Extension mode / 10
11     1011      Pulse Extension mode / 16
12     1100      Pulse Extension mode / 50
13     1101      Pulse Extension mode / 64
14     1110      Pulse Extension mode / 100
15     1111      Pulse Extension mode / 200

The above values are the same for Timer A and Timer B.

Event Count mode is significant to both timers,  but different to 
both.   On Timer B, it occurs every time the ST reaches the start 
of  a new line on the screen.   It can therefore be used to  draw 
bars of colour,  and other similar things.   It is important when 
killing the lower screen border.

On  Timer A,  Event Count mode waits for an external  pulse.   On 
STFM,  you would have to wire one up yourself.   On STes,  it  is 
used when playing samples.

The  best  way  to  demonstrate  the  difference  between   Pulse 
Extension  mode  and Delay mode is for you to see  them  working.  
You can do this by running the TEST.PRG program,  and trying them 
out.   I think that Timer A tends to crash more than Timer B, but 
be warned - you WILL crash the computer more than once!  Turn off 
timers by giving them values of 0 and 0.


THE DATA REGISTER FOR TIMERS A AND B
Working  in  conjunction with the Control Register  is  the  Data 
Register.   In here,  you place a byte between 1 and  255.   This 
will  be  the number of times that the interrupt  has  to  happen 
before the routine is actually called.   For example,  Timer B in 
control  mode  8  will be called every new line  of  the  screen.  
However,  make  the  data register equal to 10,  and it  will  be 
called every ten lines.

The  timers  are very fast,  and if you select a fast  mode  like 
0001,  with  a small count in the Data register,  you will get  a 
crash,  because the ST is trying to call the routine while it  is 
still running!


The  larger the number in the Data Register,  the longer it  will 
take to call the routine.

In Delay mode,  and Pulse Extension mode, Timer A and Timer B are 
identical.



TIMER C
Timer  C  is  in charge of several things,  one  of  those  being 
keyboard repeats.  If you change the Timer C data register or the 
Control register,  and speed it up, then when you press a key, it 
will  repeat about 100 times before you can get your finger  off!  
This is a very good reason to leave timer C well alone.

When  we are doing things on a strict timescale,  the last  thing 
that we want is for Timer C to pop up and put us off.  So when we 
use  timers,  it  is best to disable Timer C.   To  do  this,  we 
simply:

     move.b $fffffa15,old_c   ; store old value
     bclr   #5,$fffffa15      ; disable timer

Then, to turn it back on again when we're done, we do:
     move.b old_c,$fffffa15

That is all I ever do to Timer C!

But, for the record, it's other addresses are:
Enable B   $fffffa09 (bit 5)
Control C  $fffffa1d (bits 4-6)
Data C     $fffffa23

Timer C only uses bits 4-6 of the Control register;  timer D uses 
bits 0-2 (ignore timer D totally).

The Control modes for Timer C are:

Dec  Binary   Causes

0    000      Timer Stop
1    001      Delay mode / 4
2    010      Delay mode / 10
3    011      Delay mode / 16
4    100      Delay mode / 50
5    101      Delay mode / 64
6    110      Delay mode / 100
7    111      Delay mode / 200


THE STATUS REGISTER
The Satus Register (mentioned earlier) is also vital.   To switch 
off all the interrupts occuring, I would write:

     move.w sr,old_sr
     or.w   #$0700,sr

and to restore the original state:
     move.w old_sr,sr

That is all you need be bothered with about the Status  Register.  
Its other uses are to keep track of various flags (overflow etc), 
as well as the mode of execution (user mode or supervisor mode).
You  can  set it to other values,  to switch on and  off  various 
interrupts, but you needn't worry over that.


FINISHING A ROUTINE
There is one more thing to note about using timers - when  you've 
finished,  you have to tell the ST!   To tell it you've finished, 
you  clear the relevant bit on the In-Service register.   So  for 
Timer A, we would do:

     bclr  #5,$fffffa0f  ; finished!
     rte                 ; return from timer

and Timer B would take:

     bclr  #0,$fffffa0f  ; finished!
     rte                 ; return from timer

The  other  vital  thing  is to make  sure  you  return  all  the 
registers as you found them.  So at the start, a simple

     movem.l   d0-7/a0-6,-(a7)

and at the end a

     movem.l   (a7)+,d0-7/a0-6

will ensure all registers are returned as they came in.   If  you 
don't use any registers, then don't bother to save any.


THE $70 VECTOR!
I  have been using the vector at $70 in the scroll  source  code.  
This interrupt occurs every 50th of a second,  when the screen is 
being drawn from the top down on the monitor.   It is ended  with 
just an "rte", without having to clear any bits.

Well,  that is the basics of interrupt processing.  The only real 
way to get to grips with it is to try it out,  so get on to those 
funky source codes, and do some mucking about!


James Ingram, April 23rd 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.



