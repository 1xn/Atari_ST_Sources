                          Small Sprites

Sprites will always be here.   A "sprite",  as you will of course 
know,  is ANYTHING that moves around on screen.   I have drawn an 
awful little ball-type sprite, which you will probably hate.  But 
it will serve as a very good demonstration sprite.

The  ball  is in the top left hand corner of  SPRITE.PI1  in  the 
INCLUDES  directory.   To extract the raw sprite and mask data  I 
have written 0GETBALL.S

Wait a minute!   Mask!   What's that?  If you know, skip the next 
bit.

For the uninitiated, I shall explain why we need a mask.  We want 
to put a sprite onto the screen.   How shall we do this?   Use  a 
MOVE instruction,  surely?   Well, that will destroy whatever was 
behind the sprite on screen,  and we want the sprite to move OVER 
the grahpics on screen, not destroy them!

We could OR it in.   But if we do that, then we can end up mixing 
the sprite with the background, and we don't want that, either.

So we cannot do it with the sprite by itself.   So we use a MASK.  
If you look at SPRITE.PI1, you will see, directly under the ball, 
another ball drawn entirely in white.  This is almost exactly the 
same size and shape as the ball.   Before it is used,  it will be 
inverted,  so  that there is black (0) wherever we want  to  draw 
part of the ball.

To put the sprite on the screen,  we first get the graphics  that 
were ont he screen into a register.   Then, we blank out the area 
that we want the sprite to go into.   This is what the mask does.  
If we AND the mask together with the screen data,  we will get  a 
BLACK  area which our sprite will fill.   We then OR  the  sprite 
data into the screen data,  and we've mixed them without blanking 
out the background we want,  and without mixing the two  together 
by just ORing them.

For example,  the very top part of the ball is just 1 pixel.   So 
in binary it looks like this if it's colour 3
     %000000000000001
     %000000000000001
     %000000000000000
     %000000000000000

Pretend that the area of screen it is going on to contains this:
     %101010010101011
     %101001010010010
     %101010101010011
     %101010010100101


If we just MOVE the sprite onto the screen, we'll get
     %000000000000001
     %000000000000001
     %000000000000000
     %000000000000000

on screen - the background has gone!

If we OR it, then we'll get
     %101010010101011
     %101001010010011
     %101010101010011
     %101010010100101

The  background is intact,  but instead of being  colour  3,  the 
sprite is colour 15, because the background is still there.

The mask for this part of the sprite is:
     %1111111111111100

There are 2 0s, because we want a black bit around the sprite, to 
make  it stand out.   That's just a matter of taste,  of  course.  
So we AND the mask word with all the words on the screen:

     %101010010101000
     %101001010010000
     %101010101010000
     %101010010100100

And the sprite area is now blank.  Then OR in the sprite:
     %101010010101001
     %101001010010001
     %101010101010000
     %101010010100100

And it's there; colour 3 mixed in with the background.

It may seem longwinded at first,  but it can be done pretty  fast 
with the right routines.


To draw a mask is easy;   Cut out the original sprite, then paste 
it  back in at a safe place.   Using DEGELITE,  or another  paint 
package,  you can CHANGE the colours one by one to colour 15  (to 
ensure that all planes have a 1 in the correct  places).   Finish 
off in ZOOM mode, to make sure you've got all the colours OK.  If 
you leave a colour as colour 4, for example, then bitplane 0 will 
not be set, and it won't be set in the mask!

Now, select a different colour (red, or something that will stick 
out).   Go around the edges of the sprite in that colour.   Doing 
it in the same colour as the rest of the mask makes it  difficult 
to know where you've already been.   When you're done, change all 
the red to colour 15, and the mask is complete.



END OF MASK PART




So.   0GETBALL  will extract the sprite and mask data,  and  save 
them as BALL.DAT and BALL_MAS.DAT

It does this simply by getting the address of the top-left of the 
screen,  and storing what it finds there.   Since the mask is the 
same for all 4 planes,  however,  it is only 1/4 of the length of 
the sprite data.

The  mask is inverted as it is stored,  because it is the  "wrong 
way" around at the moment - if we AND the mask as it stands  with 
the screen,  then we'll just be left with the area covered by the 
sprite!  So a NOT is used.


So.   We have out sprite and our mask.   How are we going to  get 
them onto the screen?  Well, remember pre-shifting from the sine-
wave wobbler?   We can do the same here.   Because we need to  be 
able to put the sprite at ANY co-ordinates,  we have to rotate it 
at some point.

As was mentioned in the sine-wobbling, we COULD rotate the sprite 
to the correct position each time,  but this is far too slow  for 
demos.   For  some games it is OK,  but it's much easier to  pre-
shift.   And  with games now running on 1 meg or more  only,  you 
shouldn't have memory worries there, either.

So, we pre-shift our sprite using the custom-written routine that 
we used for the sine-wobbler.   Just pass it the addresses of the 
sprite,  of where to put the shifted data,  and the sprite  width 
(in words per plane) and height (in lines).

Our mask also needs to be pre-shifted, for obvious reasons.  What 
use  would  it  be  to  always take out  the  same  part  of  the 
background if the sprite is somewhere else?!?

The  mask  cannot be pre-shifted in the same way as  the  sprite, 
although  it  is very similar.   The sprite must always  have  0s 
coming in at the left as it is shifted right.  But since the mask 
(as seen above) must preserve the background, we must shift 1s in 
at the left.  Also, since it only has 1 plane, it must be changed 
in that respect too.

But  why  do we need 1s coming in at  the  left?   Remember  from 
above, when we had a sprite like this:
     %0000000000000001
and a mask like this:
     %1111111111111100

When  we shift the sprite right it will be 0,  and the  rightmost 
bit will go into the next word along.  The mask now needs to be:
     %1111111111111110

So we must ensure that 1s are put in, not 0s.

The   routine  "pre_shift_mask"  in  \INCLUDES\PRE_SHFT.S  is   a 
modified  version  of  "pre_shift".    It  stll  takes  the  same 
parameters  in the same registers,  but only shifts 1  bit-plane, 
and ensures that 1s are shifted in.


OK.   We now have our pre-shifted sprites and masks.  When we get 
a  set of co-ordinates,  how do we work out which address to  put 
them at on screen?  And which sprite to use?

Like this:

* d0 = x co-ord
* d1 = y co-ord
* a0 = screen atart address

     mulu      #160,d1
     add.l     d1,a0     ; a0 points to start of correct line

     move.w    d0,d1     ; keep x co-ordinate safe for now

     lsr.w     #1,d1     ; divide by 8 and mult by 4
     and.w     #$fff8,d1 ; as in the sine-wobbler

     add.l     d1,a0     ; a0 now has correct address on screen

     and.w     #$f,d0    ; d0 holds sprite number

so  if we now multiply d0 by the length of a sprite,  we'll  have 
the offset of the sprite to print.  Multiply it by the length of 
the  mask,  and  we have the offset of the mask to use  for  that 
sprite:

     move.w    d0,d1
     mulu      #length_of_sprite,d0
     mulu      #length_of_mask,d1

     move.l    #pre_sprites,a1     ;  get address of  pre-shifted 
                                   ;  sprites
     move.l    #pre_masks,a2       ; address of pre-shifted masks

     add.l     d0,a1
     add.l     d1,a2

* we've got the addresses!

Then, it's just a matter of mixing the screen at a0 with the mask 
and the sprite.  This can be done for this sprite (which has only 
3 words per plane - including the "extra" word for  pre-shifting) 
with a couple of instructions:

     move.w    #no_of_lines-1,d7

line_loop:
     rept 4
     movem.w   (a0),d0-3      ; get all 4 words for screen

     move.w    (a2)+,d4       ; get mask word

     and.w     d4,d0
     and.w     d4,d1
     and.w     d4,d2
     and.w     d4,d3

* now OR in the sprite
     or.w      (a1)+,d0
     or.w      (a1)+,d1
     or.w      (a1)+,d2
     or.w      (a1)+,d3

* put the mixed data back into screen
     movem.w   d0-3,(a0)

     addq.l    #8,a0
     endr

     add.l     #160-8*3,a0
     dbra      d7,line_loop

This is not very optimised,  but mostly for  demonstration.   The 
actual  source 1_SPRITE uses LONGWORDS rather than words,  for  a 
little  extra speed (LONGWORDS can be AND and ORed  quicker  than 
two WORDS).

But  we  still  have  a  problem.   After  the  sprite  has  been 
displayed,  we need to remove it from the screen,  because it  is 
going to appear elsewhere.   The only way to do this is to  store 
the background before we destroy it, and the replace it later.

1_SPRITE follows these rules:

IF we're on the first time, jump to NO_RESTORE
{
     restore the screen we stored last time
}
NO_RESTORE
{
     set flag so that from now on we restore the screen
     get the sprite co-ordinates
     store the backgound for next time
     draw the sprite
}

We don't restore the first time around,  because we have a  blank 
buffer, so we'd just put a black bit on the screen straight away!


In more detail, here is the algorithm to store the screen:

store the address that we take the screen data from
FOR each line of sprite
{
     put screen data into a sprite-sized buffer
}

The algorithm to restore the screen, then, is:

get the address the screen was taken from
FOR each line of sprite
{
     put data from buffer into the screen
}

and  the  screen is like it was never changed,  ready for  us  to 
display a new sprite.


We have one more,  rather finicky,  problem.   We are, of course, 
using screen-swapping techniques.  The normal way of doing things 
is  to  draw the new screen,  put it's address  into  the  screen 
register,  and  let it get displayed next time.   If we use  this 
technique, we will actually see.. nothing.

Why???? Oh why oh why?

Because,  my chums,  the first thing our routine does is  restore 
the screen it ruined last time.   It does this BEFORE that  pasrt 
of the screen is drawn!   So by the time it appears on the TV, it 
has  been  repaired,  and the sprite has been drawn on  the  next 
screen, which we cannot see yet.  Total result = zero.

But since we are only dealing with 1 sprite, our routine is quick 
enough to execute completely BEFOR the top part of the screen  is 
drawn.   So  we  take the slightly unorthodox  step  of  actually 
drawing on the screen that is being displayed,  and repairing the 
one we displayed last time.  Headache yet?


You are now ready to run throught the source code.

There are a few definitions:  no_of_screens is what it says - the 
number of screens we'll be using in the screen-swapping.

speed_x  and speed_y are the number of pixels that the ball  will 
move each time.

max_x  and max_y are the maximum co-ordinates that the ball  will 
go to the right and down the screen.


First,  I  load  in the sprite data,  and set up low-res  etc  as 
usual.   I also call the routine to do the pre-shifting,  and put 
the big sprite on the background of all the screens, to provide a 
nice backgound.  If I just put it on one screen, then when I swap 
screens,  the next one will be blank,  and I will get a  horrible 
flickering background!  Then, I slap in the palette I shall use.

I install my routine, wait for a keypress, and tidy everything up 
again.



MY SPRITE ROUTINE

I store the registers, of course.
The next part of the code is the familiar "get the screen address 
to use" section.   But I take the address being displayed NOW, of 
course (the one I put into the register last time around).

I test "first_flag",  which starts at 0.   The first time, I just 
jump ahead to "no_repair".

The first thing "no_repair" does is:
     st   first_flag
which changes the byte at first_flag to $ff.   It will never be 0 
again.

We're  on  the first time around,  so we go on and  get  the  co-
ordinates of the ball.

The co-ordinates are stored in ball_x and ball_y.

add_x  and  add_y are the numbers to add to  ball_x  and  ball_y.  
Why?   ell,  they will start off as speed_x and speed_y.   If the 
ball  starts  at  0,0  and the speed is 3,2  then  the  next  co-
ordinates will be 3,2.   But when we reach the right hand side of 
the screen,  we must go left again,  so add_x must then become  
-speed_x,  to  subtract the speed every time until we  reach  the 
left hand side again.

To convert between negative and positive, we:
     not.w     d0
     addq.w    #1,d0

Which does the job nicely - 0 becomes $ffff and then 0 again.   1 
becomes $fffe (-2) and then $ffff (-1).


So we've got the co-ordinates and changed the addon values if  we 
needed  to.   Then,  we  get the screen address  from  these,  as 
detailed  above.   The  screen data is stored in  the  buffer  to 
repair the screen next time.

Then I get the sprite and mask addresses,  and put the sprite  on 
screen as described above.


The next time the routine comes around,  first_flag is not 0,  so 
we do the repairing to the screen which can no longer be seen.

I  just get the address on the screen to put the data  into,  and 
just slap it all back in.

That is, finally, that.




James Ingram, May 17th 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.

