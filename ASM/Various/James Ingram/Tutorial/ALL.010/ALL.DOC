                     Putting It All Together


We have learned much throughout these last documents.  It is time 
to  put it all into practice.   ALL.S is a "demo" I  knocked  up, 
which combines the large sine-wobbler,  the ball leaving a trail, 
and a scrolling message at the bottom of the screen.   On top  of 
that, it also gets rid of all the borders.

I have had to modify the GFA basic programs for the sine-wave and 
the  Lorenz strange attractor to make the sprites move  onto  the 
left and right hand borders.   Also, the ball must not go too far 
upwards.

Let's go through the source code.

The  first thing I do,  of course,  is to load in all  the  large 
files I will need (the big sprite,  the font,  the sine-wave  and 
the  oval  shapes).   Then,  I turn off the keyclick so  that  it 
cannot be heard when you press a key to exit.

I fade all the palettes I will use (the current palette to black, 
the sprite palette, and the font palette).

Now, then - notice this next bit - I am going to fade to black to 
start the demo.   This will take a second or two,  and while I am 
fading on the $70 routine, I do all the time-consuming tasks such 
as pre-shifting and decompressing the music.   In this  way,  the 
time spent fading is not wasted,  and we don't get a nasty  pause 
at the start.

Then  I  set the palettes for the sprite and the font  to  be  at 
their darkest.  I set up my $70 routine to start the demo moving, 
and  then comes the code to fade in the palettes.   I need to  go 
back 15 times to reach the brightest palettes.   Each loop,  I go 
back a palette, and then wait for:
     second_fade_speed/50 ths of a second
I  do this by putting #second_fade_speed into a counter which  my 
$70 routine decreases each time.   When it reaches 0 I do the ext 
fade-in.

When  I  am fully faded in,  I just wait for  a  keypress  before 
fading out, turning off the sound, and restoring the keyclick.  I 
had problems, however, when using the TRAP #1 command to wait for 
a  keypress.   The  demo  uses so much porcessor  time  that  the 
keyboard interrupt can cause it to go wrong.   It never recovers, 
and this looked very unprofessional.    Therefore,  I turned  off 
the  keyboard  interrupt (by masking it out at the start  of  the 
demo).  You can then tell if the SPACE bar was pressed by testing 
the  address $fffffc02.   When it contains 57 the space  bar  was 
pressed.  I turn the keyboard interrupts on again when I am done.

To  see  WHY I had to do this,  you can try taking out  the  line 
which masks out the interrupt.   While the demo is running, press 
keys (not space),  and suddenly the whole screen will jump down - 
the top and bottom borders disappear.   Yikes!   And since  there 
are regular timing signals sent from the keyboard,  one of  these 
always trips the demo.


Next  comes the biggy - the actual $70 routine  itself.   It  may 
look horrendous, but we've seen it all before!

The first few lines should be familiar from previous  code.   You 
will  notice that I have put all the decision-making code at  the 
endof  all the code;  tests for the end of the music and  so  on.  
Because this demo will get rid of ALL borders,  we cannot  afford 
to have different times for different decisions until after we've 
busted all the borders.

So,  although  I increase the pointer in the sine-list,  I  don't 
test to see if it is at the end yet.

The  first  part of the sine routine will be  familiar  from  the 
section on sine-wobbling.

Halfway through,  however,  we need to bust the top border.  Then 
we get the processor in sync, as in the full-screen code before.

Now,  remember that while we are busting the borders all the  way 
down  the  screen,  we need 4 registers to  stay  the  same;  two 
address registers,  and two data registers.   This decreases  the 
number of registers we can use while slapping in the sine data.

Notice also,  that the time taken between,  say, busting the left 
hand  border and busting the right hand border MUST  ALWAYS  STAY 
THE SAME.  Just 4 clock cycles out (1 nop), and the entire screen 
will do something unpredictable and look horrible!   So a list of 
instruction times is absolutely essential to this kind of coding.  
There  are  many  sources  for the  instruction  times  of  68000 
instructions;  your local library or bookshop will be able to get 
hold of them.   Get one through the library first, to see if it's 
OK,  and  then buy it.   I recommend "68000 Family Pocket  Book", 
published by Newnes (ISBN 0-7506-0309-7).

I put the rest of the sprite data onto the screen whilst  busting 
left  and right hand borders.   If it looks  complicated,  that's 
because it is.  I had no end of trouble getting it just right.

I  use 2 scanlines for every line of the sprite,  but the  second 
scanline  has  a  lot of NOPs left in.   If I  were  pushing  the 
processor to the limit, I would use these for something else, but 
this is a pretty simple demo.

Also  worth noting is that I have to clear more on each  side  of 
the sprite.   This is because there are more screens on this demo 
than on the 2-screen sine wobbler we had before,  and when we put 
the  sprite  on the screen again,  it's going over a  fairly  old 
sprite which may have been some distance away.   I found that the 
lorenz strange attractor moved too quickly for this routine.


Now I move onto the ball.   I use a complete scanline (with  lots 
of NOPs) to initialise the registers,  and get the  sprite,  mask 
and screen addresses sorted out.

There  is an "exg" at the end of the register sorting  out  part, 
because it is 6 clock cycles long, and I found I needed it to get 
exactly the right amount of processor time from the scanline.   A 
NOP is 4 cycles,  but since I needed 6,  I couldn't use an  extra 
NOP.


Now  the main part of the ball is done.   WHen I pre-shifted  the 
mask,  I made each mask word into a longword.   You will remember 
from the section on sprites that it is quicker to use a  longword 
as a mask.   However,  when it is already a longword,  you do not 
need the:
     move.w    d0,d1
     swap d0
     move.w    d1,d0

The  ball  part of the code should be very easy to  understand  - 
you've seen it before, and you should by now be familiar with the 
process of fitting the border busts around other code.


Then, on to the scrolling message.  Again, for simplicity's sake, 
I have used an entire scanline for setting up the registers.   It 
is simpler to do it this way rather than have part of the  scroll 
code on the rest of the scanline,  becuase then the next scanline 
will  have  to  start  halfway through  a  scroll,  and  it  gets 
complicated.

You  will be familiar with the technique of moving  words  rather 
than bytes for the scroller.

To eake out a _little_ more processor time (and to get the scroll 
code  to fit neatly into 2 scanlines) I have used a  register  in 
the  MOVEMS which I use for busting borders.   Needless  to  say, 
this  must  be restored before the next border bust,  but  I  had 
exactly the right amount of processor time just sitting there  in 
the form of NOPs which I couldn't use.  Great!

Next I define a macro to put in the right hand columns.   It will 
accept the address to take data from, and the offset to put it at 
(0 or 1).  The code should look hautingly familiar.

Now we have a large area of code concerned only with busting  the 
borders.  If it were a real demo, we should try and fit something 
else it here - VU bars,  or another sprite floating freely around 
the screen,  perhaps.  But I think I have demonstrated what I set 
out to.

When I bust the bottom border,  I also change the palette so that 
the font is the correct colour.

WHen  I fade in and out,  I change the actual instruction to  get 
the colours out.

font_pal_addr:
     movem.l   font_pals,d2-7/a3-4

This instruction can be changed, as in the code, by:
     add.l     #32,font_pal_addr+4

because  the  4th byte of the instruction is  where  the  address 
is held.

Remember,  though,  that  techniques like this cannot be used  on 
machines which use instruction caching,  because they won't  know 
the instruction has changed!

Finally, all the decisions are made - do we restart the music? or 
the sine-wave? or the screen number?  or the message? or the ball 
pattern?

And  the last thing to be done is to decrease a counter  so  that 
waiting code (like the fading in and out routines) know that  the 
$70 routine has been done.

And that is that.

Note  that  the OVAL.GFA has been re-written,  because  the  ball 
cannot go to the bottom of the screen,  but it can go further  to 
the left and right!


James Ingram, 30th May 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.


