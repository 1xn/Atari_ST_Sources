                    Moving the entire screen

You are familiar with my "new generation" scroll technique  (from 
the  docs  on scrolling messages and the  ALL  demo  source).   I 
noticed that I could move a number of lines on the screen in  not 
much  more time than it took to draw them.   I wandered - was  it 
possible to do the whole screen in this way?   The answer is yes.  
The  whole screen can be scrolled left or right by a  byte  using 
the same kinds of technique I used in the scroller.


This  source  code  explores  those  techniques.    Incidentally, 
originally I had a VU bar showing in the bottom border,  but  the 
routines  to scroll the screen diagonally took _just_  too  long, 
and I had to scrap them.   Pity.   I could have cheated slightly, 
and held screens in memory which were pre-prepared.   When I  got 
to  the part of the scroll which took too long,  I  could  simply 
display the pre-prepeared screen.   In this way I could have  had 
my VU bars too.  But I am a purist, and wanted _true_ full-screen 
scrolling.


Most of the code will be familiar to you from previous documents.  
There is a new routine which will convert all the pictures loaded 
into the format we can use to MOVEP them onto the screen.


The $70 routine will also be familiar at first - display  screen, 
play music etc.

But  this  is  a  different kind  of  demo.   There  are  several 
different effects I can choose from.   How I do this,  is that  I 
have a list which consists of data in this order:

     address of routine
     counter for the number of times to call it
     a list of all the data it will need

Each  time I enter the $70 routine,  I check to see if I need  to 
get a new routine.   If I do  then I get it;  if I do not, then I 
just  jump  to the old routine again.   There is a  list  of  the 
routines starting at fx_list.  The list looks like this:

     address of routine
     number of times to execute it
     { list of all data needed by the routine }


Some routines,  like init_scroll, immeadiately change the address 
to jump to.   Since the scroller needs only 1 piece of data,  but 
will  run for many frames,  we take the data out the first  time, 
and from then on jump to another part of the routine.


There are several common routines in the code - "move_right"  for 
example.   It moves the entire screen 1 word to the right (taking 
the data from 2 screens ago).   But it is also called to move the 
screen to the left.  "move_left" is just a couple of instructions 
which  alter  the  registers  so that they  move  the  data  from 
different places.

It  is  also called when moving the screen  diagonally.   But  in 
those cases, the registers are altered, and the routine is jumped 
to  some  way in,  so that it does not do the  lines  which  have 
disappeared from the top or the bottom of the screen.

There  are  different  routines for putting  the  data  into  the 
columns  which need to be displayed.   The simplest routines  are 
for the screens moving left or right.   These columns can be  put 
in  by  a simple MOVEM / MOVEP  combination.   Diagonal  screens, 
however,  will need not only the left or right,  but also the top 
or bottom to be done.   On top of this, only a certain amount can 
be put onto the screen, and it must come from certain places.

For  instance,  a screen coming from the top left will  need  the 
bottom  left  of the picture to emerge,  and then "grow"  out  of 
the corner, so each time we display more and more of the picture.  
It gets complex!

I don't use a loop to put in the correct amount.  Instead, I have 
a  long routine which assumes that all the data is going  in.   I 
jump  into the routine some lines in,  so that I skip  the  lines 
which I don't want to display this time.

The demo uses 3 screens to display on.

OK, let's have some detailed analysis of some of the routines:

SCROLLING MESSAGE
-----------------

The  messages  are  double height (see  the  texts  on  scrolling 
messages).   I  did  not bother to write a  seperate  routine  to 
scroll the message area,  I just used the existing code to scroll 
the entire screen!

The  routine  is called  using  init_scroll.   This  immeadiately 
resets the route address to "scroller",  so it is not initialised 
again.  Then, I take the address of the message from the fx_list.

"scroller" is called every 50th of a second from now on.
I call the "move_left" routine,  which moves the entire screen  1 
word to the left.

Then,  we  have code which you should be familiar with  from  the 
scrolling  message  codes.   It inserts the correct part  of  the 
character.   "scroller"  is unlike the other  routines,  in  that 
there  is no counter.   Instead,  when I come to the end  of  the 
message,  I  put  1 into the counter,  so that next  time  a  new 
routine will be installed.



PRINTING
--------

Some  text requires to be printed.   The routine which does  this 
(print_it) takes the position of the text on the screen,  and the 
address of the text,  and just prints it onto the screen. The $ff 
byte indicates a new line.



FADING
------

The fading routine (in_fader) is used for all the different types 
of  fade.   In  the  fx_list,  we simply state  thae  address  of 
in_fader,  the  number of times to execute it,  the speed of  the 
fade,  and then the addresses of all the palettes to display.  So 
to fade in,  we list the palettes forwards,  and to fade out,  we 
list  them  backwards.   Macros  have been set  up  for  all  the 
different types of fade.

After a fade,  the screen number is not altered.   Some  routines 
alter the screen number to go to the next screen.  Some, like the 
fader,  require the screen display to remain the same,  and so do 
not go to the next screen.


PAUSING
-------

Pausing,  quite simply, keeps the screen at the same address.  It 
does  nothing else.   The main handling routine will ensure  that 
this  routine  is executed the correct amount of  times  (50  per 
second),  and  the screen display will remain  static  throughout 
this period.  Hence a pause.


SCROLLING THE ENTIRE SCREEN
---------------------------

Scrolling UP

Scrolling the screen upwards takes no great feats.   Simply go  1 
screen back,  and copy it to the current screen, but copy from 10 
lines  DOWN the old screen.   Then,  put in the bottom 10  lines, 
which are new.

scroll_up is the routine here.  I first of all clear the last_one 
buffer used by the routines which scroll left and right.  This is 
because  I  suffered bugs when I scrolled up or  down  in  betwen 
scrolling left or right.
Next,  I get the address of the new 10 lines of the picture which 
are to go in.

Then, I insert this new data at the bottom of the work screen.
Finally,  I move the old screen onto the work screen, but start a 
few  lines down.   The picture is thus shifted "upwards".   If  I 
have a picture displayed and I want it to vanish from the screen, 
I  simply give a list of addresses which all point to an area  of 
0s.   These  0s are put onto the bottom of the  screen,  and  the 
picture seems to scroll up out of view.

Scrolling down follows the same principles.   Except you put  the 
old  screen onto the work screen 10 lines DOWN,  and put the  new 
data at the TOP of the screen.


Scrolling RIGHT

First I make sure that the "last_one" address points to blanks.

I scroll the entire screen to the right by 1 byte (see below).

Then,  I have to put in the new data at the left hand side of the 
screen.   The address of the column I put at the right last  time 
is stored in "last_one".   I now put this column in the left hand 
of  the  new word.   I take the right hand column from  the  list 
(fx_list).   The  new  right  hand  column's  address  goes  into 
"last_one".

This  is done so that I only ever need to get 1 address from  the 
list, even though I am putting in 2 columns every time!


To scroll the entire screen to the right by 1 byte,  I simply  use 
the  scroll  technique  for my  "new  generation"  scroll  texts.  
Except that I do the whole screen, instead of 32 lines.

It's  a  very simple "rept" loop which MOVEMs  the  entire  32000 
bytes  from 2 screens ago.   Note that 8 bytes per line  are  not 
moved,  as these "drop off",  and are replaced by the new picture 
data.

To put in the new data, I use another simple "rept" loop.  I know 
the  addresses of where I am going to put the  new  columns,  and 
where  the new column data is stored in memory.   I simply  chuck 
the new columns onto the screen,  using MOVEM / MOVEP, as seen in 
the scrolling text source codes.


SCROLLING LEFT

Uses  the same routines as scrolling right!   Why?   Well,  I  am 
moving  the  same amount of data,  and basically doing  the  same 
things,  but  in  different place of the screen.   So if  I  give 
different addresses of where to scroll from, where to put it, and 
where to put the new column data,  I can just use the routines  I 
used before.


SCROLLING UP-RIGHT!

More complicated,  I'm afraid!   As mentioned above,  the  entire 
screen  is  copied  to a position up and right of  where  it  was 
before.    Then,  a  certain  portion  of  the  picture  must  be 
displayed, DEPENDING on where we have got to in the scroll!

First  of all,  I do the copying.   By amending the addresses  of 
where  to copy from and copy to,  I can use the old  "move_right" 
routine.   But I don't need to copy the bottom 10 lines, as these 
will  be replaced by the new picture data.   Since the length  of 
the  code  to copy 1 line is 32 bytes,  I jump into  the  routine 
after 10 lines have been copied.   Hence,  only 190 lines will be 
copied this time around!

To fill in the left hand column, I need to know how much has been 
done already.   "counter" is increased every 50th of a second, so 
I know from that how much I have scrolled so far.  The first time 
I do it,  I want to do just the top corner of the picture (bottom 
5 lines).   Next time,  I want to do 10 lines of the picture, and  
it will look like this (each # is a 5 x 8 block of picture that I 
need to put in.   Each !  is a part of the picture which has been 
copied from 2 screrens back...)

##
##

The third time around, I will want:

##!
###
###

The fourth time it will be:
##!!
##!!
####
####

So I have set up a long routine which ASSUMES that we're starting 
on the last scroll, looking like this:

##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
########################################
########################################

If I just want SOME of the column displaying, I can jump into the 
routine at some point (say halfway through),  and the top of  the 
column will be displayed some way down the screen.   The  routine 
always  starts at the top of the column wherever you jump in  at.  
But  the  screen  addresses  it writes  to  vary  throughout  the 
routine.

The routine is called "new_cols2",  although I calculate where to 
jump in by using the END of the routine "end_new_cols2".

So take the example of being on the 3rd time around.   We need to 
display the top part of the picture, thus:

##!
###
###

The  column routine puts in the new left hand columns.   We  need 
the  new  column  to start 15 lines up from  the  bottom  of  the 
screen;  but  the  picture  data will come from the  top  of  the 
picture, as always.

We multiply 3 (the counter) by 48 (the length of the code to do 1 
line).  Subtract this from the end of the "new_cols" routine, and 
jump in.  New_cols then takes the next picture data (from the top 
of  the  picture) and slaps it in at the bottom 3  lines  of  the 
screen.  Clever, eh?


THE BOTTOM LINES

The bottom lines also need some calculation; depending on how far 
into the scroll we are, we need to put different amounts into the 
bottom  lines.   Here are some diagrams showing where  the  stuff 
needs  to  go in.   As before,  a # represents where we  need  to 
insert  picture data,  and !  shows what has been  scrolled.   In 
addition,  however,  &  represents  picture stuff put in  by  the 
new_col routine!

1st time:

&

2nd time:

&&
&&

3rd time:

&&!
&&!
&&#

4th time:

&&!!
&&!!
&&##
&&##

5th time:

&&!!!
&&!!!
&&!!!
&&###
&&###


As  you can see,  I need to put in 10 rows on the bottom  of  the 
screen,  except once,  when only 5 rows are needed.   How to  get 
round this?   Ignore it.   Always put in 10.  Since the pictute I 
shall erase the first time is the same as the picture I shall  be 
putting in, this is not a problem.

You  can also see that I need do NOTHING the first  2  times,  as 
"new_col" takes care of everything.

So.. breakdown...

First, I go to the bottom 10 rows of the screen, and 2 columns to 
the right (1 "word" to the right).   I am now in postion to do my 
stuff.
        lea     30408(a0),a0

Then,  I see if I am on the first 2 screens.   If I am, then I do 
nothing at all!
        moveq   #0,d0
        move.w  counter,d0
        subq.w  #3,d0
        bmi.s   .nothing        ; branch if 1st 2 screens...

I can then calculate the correct word of the screen I need to  be 
on.   Luckily,  d0  holds the correct number after subtracting  3 
from it, because I went past the 1st column with the "lea" above.

        bclr    #0,d0
        lsl.w   #2,d0           ; d0 x 8 = correct word no
        add.l   d0,a0           ; a0 points to rightmost column

This  routine  needs the address of the rightmost column  of  the 
picture.  This was the first item of data in the fx_list for this 
routine, and the first data item is always stored in first_data.

So  we  get  this  address so that we  can  always  go  from  the 
rightmost picture column.  But how far down the column do we need 
to be?  The 3rd time, we need to skip the first 5 lines.  The 4th 
time,  we  need  to  skip the first 10  lines,  and  so  on.   We 
calculate it like this:

        move.l  (a6),a1         ; get addr of 40th column in pic
        move.w  counter,d0
        subq.w  #2,d0
        mulu    #5*4,d0         ; get addon for height within column
        add.l   d0,a1

Subtract 2 from the counter and multiply by 20 bytes (the  length 
of 5 lines of column data).  This takes us to the correct address 
within the rightmost column.

Now we are presented with a problem.   Every other time,  we need 
to put in a "odd" column.  In other words, we shall happily chuck 
in the bottom lines,  a word at a time.  But, for example, on the 
5th time around we have a column on its own.  The right hand part 
of that word is blank.   In order to deal with this situation,  I 
check to see if we're doing and odd numbered column.   If we are, 
we put in that lonesome column before we carry on:

        move.w  counter,d0
        btst    #0,d0
        beq.s   .not_odd

* we have to put in column 40 in an odd position!
        bsr     do_odd_40

.not_odd:

The 3rd time around, we are ONLY putting in an odd column, so...
        moveq   #0,d0
        move.w  counter,d0
        subq.w  #4,d0
        bmi.s   .nothing        ; don't do a full column 1st time!


As  for  the left hand columns,  the bottom columns have  a  long 
routine  which  ASSUMES that the entire line  is  going  in.   It 
starts  at the left hand side of the picture data,  and slams  it 
into  the left hand side of the screen.   The later we join  this 
routine,  the more to the right our stuff will be taken from  and 
put in at.

To  calculate  where  we jump in at,  we  take  the  counter  and 
subtract 2 (because we miss the first 2 times  around).   Because 
we just subtracted 4 from the counter as a test (above), adding 2 
will give us counter-2.   Then, we divide this number by 2!  Why?  
Because we only want to go onto a new word column every 2  times.  
Because it looks like this time after time:

#

##

###

####

#####

We go to a new BYTE every time,  but not a new word.   Look, I'll 
split it up to show word columns:

#

##

## #

## ##

## ## #

You can also see the "odd" byte sticking out every time.

Anyway,  we get the counter,  subtract 2,  and divide by 2 to get 
which WORD column to do.   Then we multiply by the length of code 
required to do 1 column.   Subtract this from the end address  of 
the routine, and we've got wehere to jump to!

        addq.w  #2,d0           ; like sub #2!
        lsr.w   #1,d0           ; 1 more column every 2 times!

        mulu    #100,d0
        move.l  #end_rest,a6
        sub.l   d0,a6
        jsr     (a6)


ODD BYTES!

As  mentioned  severla  times,  we get  those  odd  sticking  out 
columns.   The  routine  "do_odd_40"  deals  with  these.   Quite 
simply, it puts in 1 column of picture data at the left hand side 
of the word,  and then decreases both the screen pointer and  the 
picture data pointer.

It sends the screen onto the previous word.

It  sends the picture data to the previous column.   All  is  now 
ready to put in the entire next word of data,  using the  routine 
described above.


OTHER DIAGONAL SCROLLING

The  other  diagonals  follow the  same  principals  as  UP-RIGHT 
scrolling,  except,  or course,  they put their data in  slightly 
different areas of the screen,  and take it from different  areas 
of the picture as well.



BLANKING DIAGONALLY

Blanking  to the left and the right is easy;  you just  call  the 
appropriate routine with the data as blank areas.   But to  blank 
diagonally,  this will not do,  because only the corners get  re-
drawn.   The other stuff in the new columns and rows will be left 
untouched, until the screen has been blanked completely.

So to blank diagonally,  I have to scroll the picture  diagonally 
(as above),  and blank out the ENTIRE left and bottom areas  (for 
up-right scrolling).

But it's more complex (groan!)

The first time around,  after I blank,  I have to put in the last 
columns again.  Why???  Well, remember that I am scrolling from 2 
screens back,  to althought the screen was full when the diagonal 
scroll  ended,  2 screens back,  the last columns  were  missing, 
because the picture was only NEARLY on the screen.
So  the  first time I do a diagonal blank,  I put  in  the  final 
columns of the picture again.


THE REST

One other routine deserves a mention;  prep_left.   When a screen 
is scrolled downwards,  but scrolls off the screen to the left, I 
cannot use the technique of getting the data from 2 screens  ago, 
because  then  it  was  moving  downwards.    So  I  insert   the 
"prep_left" routine, which takes the screen being displayed, and, 
using MOVEPs,  puts it 2 screens back,  as it needs to look  when 
scrolling  off.   I know this is cheating a little bit,  but  who 
cares?

The operation cannot be done in 1/50th of a second.  It is broken 
down  into a routine which is exectuted twice;  once for the  top 
and once for the bottom of the screen.

This  routine was only really put in because I wanted screens  to 
be  able to move off the screen in a different direction  to  the 
one they arrived in.   If you want to move them off to the right, 
you will need another routine called "prep_right".   Moving  them 
off diagonally is too much of a headache for me!




 *****************************************************************

That's  just about all there is to explain about this  particular 
bit  of  code.   Nothing  is new here  (in  theory),  except  the 
diagonal  movement  of  a  screen.    It  was  written  just   to 
demonstrate that you CAN move an entire screen horizontally every 
50th of a second.   Well, using the 2-screen optical illusion you 
can, anyway.  I hope you find some use for it!


The  source  code  is very  well  documented,  so  hopefully  you 
shouldn't have too much trouble understanding it.

James Ingram, 30th May 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.

