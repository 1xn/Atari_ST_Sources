                   A Simple Sine-Wave Wibbler

Right.  The first thing we need is a sprite.  Oh, look! we've got 
one  in the file called SPRITE.PI1!   It was kindly  provided  by 
Chris from Maggie (the disk-based magazine).  I have stretched it 
using Degas Elite, so that it is 160 x 75 pixels in size.  A nice 
big sprite for us to use.

I  DO NOT intend to write a lot of useless code like I  did  with 
the  scroller,  to read the sprite from a picture included in  my 
program.  Instead I have written a short piece of code which will 
take  the  picture  file,  and save out a  nice  file  containing 
nothing but sprite data.  This source code is called SPR_CONV.S

You  will,  of  course,  notice that one of the  first  lines  is 
"include \includes\macros".  This is my macros file, which I have 
created  to  save  me having to re-type routines  over  and  over 
again.   The  only  macros used in this source are  super_on  and 
super_off, which speak for themselves.

The  routines  "initialise" and "restore" do the same as  in  the 
scroller  - turn the mouse off and on,  save and restore the  res 
and palettes.

What  my program does first is display the sprite on the  screen.  
As  it is stored in sprite format,  it is inverted,  to show  you 
exactly what part of the screen was done.

After it is displayed, it is put into memory line by line.  It is 
160 pixels long - exactly half the screen width; that's 80 bytes.  
It is 75 pixels high, so that's 80 x 75 = 6000 bytes in length.

Just a short look at this program should be enough to see  what's 
going on.



Wibble Theory

Sine  waves look nice,  don't they?   But how on earth  are  they 
created?   It  is a nightmare to try and do it in  assembly.   My 
advice  is to always use a higher-level language,  such as  BASIC 
(eh? is BASIC really a higher-level language?)

Included with these docs are the files:
     SINE_1.GFA
     SINE_2.GFA
     SINE_3.GFA
for those of you with GFA Basic,  which is what I used to  create 
my  sine-waves.   There are also .TXT versions of the  files  for 
those  of  you who do not have GFA Basic.   But  they  should  be 
simple to translate.

SINE_1.GFA
---------

First I open my file to store the data in.

Then  I  get  the address of the screen - a nice  safe  area  for 
buffering my output!

I then set my parameters:
a is 0 (this is my sine-wave number)
x is 0 (this is the number which will give me my data)
y is 0 (I use this to go down the screen while drawing the  sine-
        wave)


The algorithm then runs like this:

WHILE no key pressed
     plot a point at x+160,y
     increase y by 1
     IF y = 200 THEN y = 0
     x = sin(a)*60
     put x into memory
     save that byte to the file
     increase a by 0.025
END WHILE

When you press a key,  you'll be damn lucky to get x at 0  again.  
We  want  it to be back at 0,  because we will loop back  to  the 
start of the list, and it will look odd if we suddenly jump a few 
pixels.  So there is a short piece of code to get x back to 0.

As  you can see,  I am plotting a graph of SIN*60 (because  sines 
are small numbers - between 0 and 1).  I am increasing the number 
"a" by 0.025 every time.  Try changing the values around, and see 
what happens!


The other two SINE_?  programs are similar,  except that they use 
more sine waves.  SINE_2 uses 2 sine waves combines, while SINE_3 
uses 3 sine waves.

SINE_3
------

Just a quick word - it will look very very dull if you don't know 
this.   The 3 sine waves in this program are called "a",  "b" and 
"c".   You  start off with just "a" working.   To introduce  "b", 
just press the "b" key.   Then press the "c" key to introduce the 
third wave when you feel the time is right.  Then press any other 
key to stop.



LORENZ
------

As  pretty as the sine-waves are,  I really don't think  you  can 
beat the Lorenz Strange Attractor.   However,  copyright problems 
do not allow me to show you how to do it.   If you want to get  a 
Lorenz wave,  then get ST Format coverdisk number 37, and use the 
Lorenz listing from there.   Alter it, so that the X co-ordinates 
are saved to the file, and you get a lovely wobbly pattern.


Enough!   Enough  BASIC  for one day!   We're meant to  be  doing 
assembly!  Anyway, if you're a compentant enough programmer to be 
reading these docs,  you'll have no problems when it comes to the 
BASIC, will you???


On with the assembly part!


GENERAL THEORY


Our  code  takes  a  sprite,  and prints each line  of  it  at  a 
different  x position.   This gives the sprite that  nice  wobbly 
look.   We could,  if we so desired,  take just the normal sprite 
line  and  then  rotate it to  the  correct  position.   However, 
rotating 75 lines each time is going to take too  long.   So,  we 
use...

PRE-SHIFTING
------------

You  must  have heard of this tehnique.   But you  may  not  know 
exactly what it is, or how to do it.

As I have already mentioned, we are going to be drawing the lines 
of our sprite in all sorts of different places.  Rotating them as 
we  do it takes too long,  so we have to rotate them  BEFORE  the 
main routine starts, so that they are ready to just slap onto the 
screen.

Since  the sprite can be at any position on a word (it may  start 
at pixel 0,  1 2 3...  15),  we have to have a copy of the sprite 
for each position it may be at.   16 copies are needed, each copy 
scrolled 1 pixel along.

WAIT!  If we keep the sprite the same length, then we're going to 
lose part of it.  Why?

The  sprite is 160 pixels wide.   Let's pretend that this is  the 
last word:
     1001001001001001

When we rotate it to the right, it becomes:
     0100100100100100    1

So we lose the last bit!  This will never do.  For each rotation, 
we lose 1 bit,  so when we've rotated 15 times, a whole word will 
have vanished!  So we increase the length of our sprite by 1 word 
per plane when we do the pre-shifting.   On the final shift, most 
of that word will contain sprite data.

The algorithm for Pre-shifting:

Get address of original sprite
Get address of pre-shifting area

FOR each line
{
     copy sprite data
     add 4 blank words (1 for each plane)
}

Get address of 1st sprite in pre-shift area
Get address of 2nd sprite

FOR 15 sprites
{
     FOR each line
     {
          copy sprite data from last sprite to this one
          FOR each plane
          {
               rotate the line to the right
          }
     }
}

We now have 16 sprites in memory,  one after the other.   The 1st 
sprite is a copy of the original, and the others following it are 
all shifted to the right by 1 pixel.



THE IMPORTANT BIT
-----------------

Now we get to the important part.   The main routine.   First  of 
all there are a few things you should recognise from the SCROLLER 
docs;  swapping  the  screen  addresses,  setting  a  new  screen 
address; pausing for a bit, then setting the colour to red.


SINE-WAVE ALGORITHM
-------------------

Get pointer for list of sine-numbers
Go to next number in list for next time
Add 1 to the number done
IF done all of list
{
     set number done to 0
     set pointer to start of list
}

set sprite line to 0
FOR all lines
{
     get x co-ord from list (num1)
     copy number (num2)
     get pixel number (num2 AND 15)
     get word number on screen (num1/16*8)

     add word number to screen address

     multiply pixel number by length of sprite
     add to 1st sprite address
     add sprite line

     clear screen to left of sprite
     copy sprite line to screen
     clear screen to right of sprite

     goto next screen line
     set sprite line to sprite line + length of 1 sprite line
}

Oh,  come  on!   It  doesn't  look that bad!   A  bit  of  simple 
explaining should clear up 1 or 2 things at this point.

Calculating the pixel number and word number:  When we get a
number  from the list,  it tells us only what x  co-ordinate  the 
sprite should go at.   In reality, we need to know the address on 
screen,  and  which  sprite we should use  from  our  pre-shifted 
collection.

Which sprite to use is easy.  If x=0, sprite =0
x=1, sprite =1
...
x=15, sprite =15     1111  1111
x=16, sprite =0     10000  0000
x=17, sprite =1     10001  0001

So  the  sprite number is the x co-ordinate with  the  left  part 
chopped off, to keep numbers between 0 and 15 only.

We can then multiply the sprite number by the length of 1 sprite, 
and we'll have the address of the sprite.

This is no good on it's own.   If this is all we use, then we can 
only  ever display the TOP line of the sprite.   So I  also  keep 
a  counter,  which is added on to the address of the  sprite,  to 
give us the address of the line to display.


The word number is a bit more complex.   Again, we start with the 
x co-ordinate.   If we divide this by 16,  we get the word number 
that  we  are to use.   However,  we want the actual  ADDRESS  on 
screen of the word.   So we multiply by 8 (1 word, 4 planes), and 
come out with our answer.  Here's a couple of examples:

PIXEL     /16  *8

0         0    0
1         0    0
15        0    0
16        1    8
17        1    8
31        1    8
32        2    16

As you can see,  the screen address is the same for the first  16 
pixels - as it should be.  It goes up by 8 bytes every 16 pixels.

You will notice that my code runs like this:

        move.b  (a0)+,d7        ; get x co-ord

        ext.w   d7              ; as a word
        
        moveq   #0,d6
        move.w  d7,d6

        and.w   #$f,d6          ; d6 holds pixels in we need to go
        asr.w   #1,d7
        and.b   #$f8,d7         ; equivalent to d7/16*8
                                ; don't believe me?
                                ; try it on paper!
        ext.l   d7

Here is a break-down of how I calculate what I need...

Get a byte from the list to d7 (could be + or a - number)
Turn it into a word whilst keeping the sign (ext.w)

make sure d6 is 0
copy d7 into d6
chop off everything to the left to get number between 0 - 15

divide d7 by 2 BUT KEEP THE SIGN!
chop off everything at the right from 0 - 7
make d7 a longword but keep the sign.

d7  is now ready to be added to the screen address.   The  screen 
address  points  to  the  MIDDLE of the  screen.   So  if  d7  is 
negative,  it  will move left.   If d7 is  positive,  the  screen 
position will go to the right.


If  you can't work out how my d7/16*8 worked,  try it  on  paper!  
Divide by 16 and multiply by 8, and then compare the results with 
my way!  My way is faster than using:
     divu #16,d7
     mulu #8,d7

or
     asr.w #4,d7
     lsl.w #3,d7




We have to calculate each the address of each line of the  sprite 
seperatly.   Why?   Because  each  line  of the sprite  is  at  a 
differerent position on screen.  Therefore, if line 1 is on pixel 
0,  we have to use one sprite.   If line 2 is on pixel 2, then we 
use a different sprite.


Why  do we bother to clear to the left and right of  the  sprite?  
Because some of the previous sprite might be there!  If last time 
we put it at the right of a word,  and this time we're putting it 
at the left of the next word, then we'll leave a bit to the left.  
If you really want to see for yourself,  just take out the  lines 
of code that do the clearing, and you'll understand why we do it!



James Ingram,  9th March 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.



