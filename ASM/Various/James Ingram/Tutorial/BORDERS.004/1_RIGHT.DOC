              Getting rid of the right hand border

You  have seen how to get rid of the top and bottom borders  (see 
the TIMINGS.003 folder).

The  right  hand  border is a bit harder.   To get  rid  of  this 
border,  the  instructions must take place AT EXACTLY  THE  RIGHT 
NANOSECOND!  We cannot use timer B for this!

The  interrupt signal for the interrupt at $70 will always  occur 
at  the same time.   So does this mean we will always  know  what 
microsecond we reach the routine?  No.

This  is  because the signal is received,  but the  processor  is 
still executing an instruction.   If it is executing a NOP,  then 
it  will not take long until it jumps to our routine.   If it  is 
executing a MOVEM.L (a0)+,d0-7/a1-6,  however, it will take a lot 
longer to get to us.

This  is the first problem to overcome.   How to  syncronise  the 
processor and the screen exactly?

I must confess that this is NOT original code from me.  I got the 
idea  for this from source code I saw ages ago,  but  I  couldn't 
work out what it did, or why.  Now I know.

When  the screen is drawn,  the register at $ffff8209 is  updated 
every 3 microseconds.   This is our first clue!   It gives us the 
exact amount of the screen which has been drawn.

So we wait until this starts to count (ie it is not 0).   When it 
starts  to  count,  we  know where we  are.   We  are  still  not 
syncronised, though.  We need to kill exactly the right amount of 
time.  We could do this in more than one way.

We  could have a long list of NOPs,  and calculate which  one  to 
jump  to.   Then  we  would execute a different  number  of  NOPs 
according to how much time we need to kill.

I don't like that; it's messy and complex.  We can do the same if 
we  could  find  an instruction which takes  different  times  to 
execute, according to the parameters.  Is there one?  Yup.

     lsl.w     d1,d0

This executes in 8 + 2n clock cycles,  where "n" is the number in 
d1.   So if d1 = 1,  then it takes 8+2 cycles.   If d1 is  3,  it 
takes 8+6 cycles.

We  need  to calculate exactly how long we need to  execute  this 
instruction for.   We have the counter from the screen.   Take it 
away from 16, and that is the number to put in d1!

EG
     move.w    #$8209,a0      ; this will be sign-extended
                              ; automatically
     moveq     #0,d0
     moveq     #16,d1

.wait:
     move.b    (a0),d0        ; test the screen counter
     beq.s     .wait          ; loop if still 0

     sub.w     d0,d1
     lsl.w     d1,d0

* now in perfect sync!



Phewww!  Complex?  Try out the source code SYNC.S and play around 
with it - it shows exactly how it is done.



Now  we have our timing perfectly in sync.   How do we  kill  the 
right border?   At the correct time,  we just slip into 60Hz, and 
then back into 50Hz.  So it's exactly the same as for getting rid 
of the top border.

In 1_RIGHT, I have got rid of the top border as well as the right 
hand border.

It  is  quickest  if  you keep a0 pointing  to  the  Hz  flicking 
address,  and have d0 and d1 kept ready to be flicked in and  out 
each time.

James Ingram, 23rd April 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.



