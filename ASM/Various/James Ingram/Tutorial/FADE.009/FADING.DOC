                         Fading palettes

Many many moons ago,  before the STe was invented, faded colur on 
the old STFM was well easy.   There were 16 colours.  Each colour 
had a value for RED,  GREEN and BLUE.   Each of these values  was 
between 0 and 7.  So a typical colour might be:

     $334

The lower the number,  the darker the colour.  To fade a colour a 
step nearer to black,  you simply seperated out the RED GREEN and 
BLUE,  decreased each by 1 (unless they were 0 already), and then 
re-combined them.  So the code would be something like this:

* colour in d0
     move.w    d0,d1
     move.w    d0,d2

     and.w     #$007,d0       ; BLUE only
     and.w     #$070,d1       ; GREEN only
     and.w     #$700,d2       ; RED only

* all colours in lowest nybble!
     lsr.w     #4,d1
     lsr.w     #8,d2

     tst.w     d0
     beq.s     .no_sub

     subq.w    #1,d0

.no_sub:
     tst.w     d1
     beq.s     no_sub2

     subq.w    #1,d1

.no_sub2:
     tst.w     d2
     beq.s     .no_sub3

     subq.w    #1,d2

.no_sub3:
* now re-combine the colours!
     lsl.w     #8,d2
     lsl.w     #4,d1

     or.w      d1,d0
     or.w      d2,d0

* d0 has been faded 1 step closer to black...



But  then  the STe arrived.   As we have  seen,  we  had  numbers 
between  0 and 7 (3 bits) for the RGB (or RED GREEN  BLUE).   The 
STe had an enhanced palette, with more colours to choose between.  
These colours had to use 4 bits, for numbers between 0 and 15 for 
the RGB.  A typical colour now might be:

     $3af

You  might  expect that the STe colour would  simply  be  numbers 
between  0  and $f,  in the same way that the  STFM  palette  had 
numbers  between 0 and 7.   So the colours would go (in order  of 
brightness):

     0 1 2 3 4 5 6 7 8 9 a b c d e f

But they don't.   Atari wanted to keep it closely compatable with 
the  old  STFM,  so the numbers 0 - 7 STILL  represent  the  same 
colours they did on the STFM.  The new colours mean:

8    slightly brighter than 0
9    slightly brighter than 1
a    slightly brighter than 2
....
f    slightly brighter than 7

In binary, the new STe palette goes:

     0000      0
     1000      8
     0001      1
     1001      9
     0010      2
     1010      a
     0011      3
     1011      b
     0100      4
     1100      c
     0101      5
     1101      d
     0110      6
     1110      e
     0111      7
     1111      f

As  you can see,  the routine for fading out will be a  bit  more 
complex for STe-compatable routines.

This is how it goes:

seperate out the RGB
FOR each part of the RGB
{
     IF bit 3 is set
     {
          clear bit 3  (go a bit darker)
     }
     ELSE
     {
          IF number is already 0
          {
               do nothing
          }
          ELSE
          {
               subtract 1 from colour (go 2 steps darker)
               set bit 3  (go 1 step lighter)
          }
     }
}


The code,  after seperating out the RGB will look something  like 
this:

     btst      #3,d0
     beq.s     .do_sub

* bit 3 is set!
     bclr      #3,d0
     bra.s     .dun_bit

.do_sub:
     tst.w     d0
     beq.s     .dun_bit

     subq.w    #1,d0
     bset      #3,d0
.dun_bit:


Follow me?

Now,  to fade an entire palette 1 step nearer to black, we simply 
repeat the routine for each colour.

To fade a palette completely to black,  we simply do the fade  16 
times (the largest colour is $f,  so when that has been faded  16 
times, it will be 0).


1_FADE.S will get the current palette,  and then work out the  16 
palettes  needed  to get to complete black.   It is then  just  a 
matter of displaying these palettes one after the other.

SO  we set up a simple $70 routine.   If it put a new palette  in 
EVERY  time,  then the whole fade would be done in 16/50ths of  a 
second;  much less than 1/2 a second.   This is too quick for  my 
liking.   So  I  have set up a counter,  which lets  the  routine 
execute  only  every 2nd time it is called.   You can  alter  the 
counter and see different speeds of fade.

When  the  last  palette has been put in,  a flag  is  set  which 
ensures  that  no  further  palettes will  be  displayed  by  the 
routine.  We are then just waiting for a keypress.

2_FADE.S uses the same principles,  except that it fades back  to 
the normal colours by playing the palettes backwards.  My routine 
checks  when it has completed a fade to see if it has just  faded 
out.   If it has,  then it begins the fade-in again.   If it  has 
just faded in then it will set the finished flag.


There is another type of fade, which can be quite pleasing.  This 
fade starts with all the colours white,  and fades down until  it 
reaches the palette it was given.   It is most effective when you 
have a blank black screen,  and then suddenly flash to white, and 
fade down.  This effect is used in my BIG SCROLLER.

I fade the palettes from their normal colours up to white.  So to 
get the "flash" effect, I play the palettes backwards.

The algorithm for this fade is very similar to that of fading  to 
black, except that you ADD to the colours, until you reach white:

FOR 15 palettes
{
     FOR each colour
     {
          take old colour
          seperate RGB
          FOR each part of the RGB
          {
               IF colour is not white
               {
                    IF bit 3 is 0
                    {
                         set bit 3
                    }
                    ELSE
                         add 1 to colour
                         clear bit 3
                    }
               }
          }
          re-combine RGB
          store new colour
     }
}

Got that?  Good.

3_FADE has a simplified $70 routine, which gives us more control, 
but  also needs more work when not fading.   All the $70  routine 
does is fade 15 times,  and then set the finished flag.   In  our 
main routine,  we set the speed,  starting palette  address,  the 
counter for the number of palettes to show,  and how much to  add 
(32 or -32).

First,  my routine will fade to black.  Then, it will display the 
font.   This  is a good picture to use,  because it has  a  black 
background with plenty of space.   I put the values for the white 
fade  into  the  variables the $70  routine  uses  (remember  all 
colours are black, so nothing is displayed yet).

Then,  I  clear the finished-flag,  so the $70  routine  executes 
again.

Then,  I fade the font palette to black, and finally, I fade from 
black to the normal colours (the reverse of the first fade-out).

James Ingram, 7th June 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.



