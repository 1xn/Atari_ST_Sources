                  Playing more than one sample

Playing one sample over and over again gets tedious.   There must 
be a way to play more than one sample.   Suprise,  suprise, there 
is,  and it isn't all that hard,  either.  When we put the sample 
player  into  "play forever" mode,  it doesn't  necessarily  mean 
forever.   Using Timer A, we can play the sample a certain number 
of times.  This is the proceedure:

Start sample playing

Set  up Timer A in Event Count Mode (mode 8).   Set the data  for 
Timer  A to the number of times we want the sample to  play  (say 
4).

When the sample has been played 4 times, Timer A kicks in.  Then, 
using  Timer A we can get the next sample addresses and  set  the 
playing off again.


2_PLAY.S  is the source code to do this.   You should already  be 
familiar  with  Timer B from the no top and bottom  border  code.  
Timer A is exactly the same, but uses different addresses.

The vector is at $134,  for example, and it uses bit 5 instead of 
bit 0 for the mask and enable registers.


2_PLAY frees memory,  stores the timers and so on,  then loads in 
the samples.   


The "play_em" subroutine doesn't seem like much;  initialise  the 
STe sound chip,  call a routine to play the next sample, and then 
set up Timer A.

To set up Timer A, I:
-    disable Timer A
-    Put in my routine address
-    put  in  the  number  of times I want  to  play  the  sample 
     (returned by "play_next_sample)
-    Put Timer A into Event Count Mode
-    Mask it in!


Let's take a look at "play_next_sample"

I get the position in the sample list,  and get the number of the 
next sample to play (-1 ends the list)

I multiply by 10, which is the length of data for 1 sample:
     Start address       LW
     End address         LW
     Frequency           W

I add this offset to the start of the sample list,  and take  the 
start and end addresses.  These I put into the registers.  I then 
take the sound mode, and put that into the appropriate register.

Then, I turn on the sound to "loop forever".

Finally,  I get a counter from the list of samples to tell me how 
many times to play the sample.  This value is returned in d0 from 
the routine.



Now,  our first sample has been played 4 times,  and Timer A  has 
been activated.  It turns off Timer A, stores all registers, sets 
up the next sample to play,  and then re-enables itself with  the 
new count.  That's it.  Simple.


If you look at "list_start", the list of samples to play, you can 
see that I play sample 0 4 times (that's the BEAT).

"sam_list" holds the start and end addresses of the samples.   In 
addition, I have already put in the type of sound that they are - 
they are all mono, and they all (except SAX) play at 6Khz.


James Ingram, May 17th 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.


