                    Optimised Sample Playing

2_PLAY did the job.  But it was just a stepping stone from 1_PLAY 
to here.  This is sample playing taking less processor time.  How 
can we reduce the amount of time we spend playing sound?

We  can stop using the lookup table if we pre-calculate the  data 
we'll need for each byte of the sample.   There are three ways to 
do this:

1.   Convert  each byte of the sample to a LONGWORD,  giving  the 
     address in the look-up table.

2.   Convert the look-up table so that it holds data ready to  be 
     MOVEMed  straight  into the sound chip.   Then  convert  the 
     sample so that this address is given.

3.   Quickest  of all,  just convert the sample into  a  straight 
     list of data ready to be MOVEMed into the soundchip.  Yikes!  
     Memory will be gobbled!

Nevertheless,  since our sample is pretty small,  I went for  the 
third,  fastest,  option.   If you are short on memory,  then the 
second option would be better.   Again,  we see the trade-off you 
have to make; speed or memory?


WHAT HAS CHANGED?

The  changes from 2_PLAY aren't that many.   I call a routine  to 
expand  the sample after it is loaded.   This routine  gets  each 
byte  of the sample,  and gets it ready for a MOVEM to the  sound 
chip.   These  lists are stored in memory,  ready to  be  slapped 
straight in.

I also clear bit 3 of the "vector" register of the timers.   This 
means  that  I  don't  have to do a "bclr"  at  the  end  of  the 
interrupt (talk about scraping for porcessor time!)

The playing of the sample has been vastly optimised.  I only need 
to  store a6 on the stack,  because that is all the  registers  I 
use.   Instead  of using a MOVEM,  I just do 3  MOVE.L  commands.  
This is quicker, because I don't have to store and retrieve d5 d6 
and d7.


And that is that - much quicker!

James Ingram, May 15th 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.




