                Playing samples using Interrupts

1_PLAY  demonstrated how to output the sample to the sound  chip.  
But  you can't do much else while that is going on.   So  if  you 
want to do something else (eg move a scroll-line),  then you  can 
use  Timer A or Timer B to output the sound at regular  intervals 
automatically.

Whether you use Timer A or B is up to you.  I prefer Timer B.

The program starts in much the same way;  free memory, supervisor 
mode on.  Then I call "initialise".  I don't need low-res, or the 
palette saved,  but this routine does turn off the mouse, which I 
need to do.   If the mouse is left active, then when it moves, it 
distorts the sample terribly!

Then I keep all the Timers' data using the "keep_timers" macro.

Then, I turn of Timer C, so it can't interfere.

Next,  I  load and de-sign the sample.   I store the address  and 
length  twice  - once as a pointer to the address to play  and  a 
counter,  and again elsewhere, so I can reset these values when I 
reach the end of the sample.

Initialising  the  sound chip is now a macro in  MACROS.S  called 
"init_chip".

The  next part of the code should be familiar from the  documents 
introducing timers.   Turn off timer B,  put my address at  Timer 
B's  vector,  mask  the  timer in,  and then  turn  it  on.   The 
control  and data values were arrived at after trial  and  error, 
and several nasty crashes.

I wait for a keypress (my sample is now playing happily).

Then, I turn off Timer B, and set all the voice volumes to 0.

Timer C is turned back on, all the other timers are restored, and 
I quit.



MY SAMPLE PLAYING ROUTINE

I turn the colour to red,  of course, to show the processor time.  
Then, I save all the registers I am to use.

I  get the address of the next byte of the sample,  and  get  the 
byte  into d7 and multiply by 4.   I take 1 away from the  sample 
length.   If this has reached 0, then I set "pointer" back to the 
start of the sample, and "len" back to the sample length.

I add d7 to the start of the table, and get 3 bytes out, and into 
the sound data.

Then,  simply move the sound data to the sound chip with a  coule 
of MOVEMs.

Clear the interrupt in-service bit, and "rte".

There it is.

James Ingram, May 15th 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.



