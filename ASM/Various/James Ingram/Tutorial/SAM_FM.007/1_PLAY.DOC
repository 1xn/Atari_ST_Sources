                        Samples on the FM

Make  sure  you understand the basics of the  sound  chip  before 
reading  this.   You can find the necessary basic details in  the 
documents on CHIP music.

Samples  differ from chip music in a very  important  way;   Chip 
music  is  played every 50th of a second,  but  samples  must  be 
played  many times per second.   A sample playing  at  6Khz,  for 
example,   needs  to  output  sound  6000  times  every   second.  
Therefore,  the  $70 vector cannot be used.   But Timers A and  B 
can.   This first program,  1_PLAY,  will NOT use timers,  but is 
just an introduction to how samples output their sound.


Playing samples through the sound chip is a complicated business.  
Each byte of the sample must be converted,  so that it can be put 
into  the sound chip as volume data for all  three  voices.   The 
quickest way to do this is to use a look-up table.   Take a  byte 
of a sample,  multiply it by a number, jump into a lookup list of 
values, and get the data you need for the soundchip.

I have not worked out the values needed myself.   My lookup table 
is a variation of one which appeared in PLAYBACK.S,  which was on 
an  ST FORMAT coverdisk.   The lookup  table  provided,  however, 
needed further processing when the data was got out - a  rotation 
and  an AND instruction were needed,  to seperate out two of  the 
channels,  which shared a byte.   I have converted this table  to 
make it easier (and quicker) to use.  The format of my table is:

{
     byte for channel A
     byte for channel B
     byte for channel C
     blank byte
}

why  a blank byte?   Well,  it's quicker to multiply by 4  rather 
than 3.  To multiply a number by 4, simply:

     add.w     d0,d0
     add.w     d0,d0

whereas to get a muliplication by 3 needs:
     move.w    d0,d1
     add.w     d0,d0
     add.w     d1,d0

so I save myself a bit of time by wasting a few bytes.

The  samples provided in the INCLUDES directory are  all  signed, 
because  this  is  how the STe likes  them.   The  lookup  table, 
however, wants un-signed samples.  To de-sign a byte of a sample, 
I simply:

     eor.b     #$80,d0

So the algorithm to play a sample is like this:

FOR all sample data
{
     get next byte
     de-sign it
     multiply by 4
     get data from lookup table
     put data into soundchip
}

If  we  leave it at that it  will  almost  work.   Almost?   Yes, 
almost.   You  see,  it will go through the sample as fast as  it 
can,  and the sample will come out far too quickly.   So we pause 
for a bit after playing each byte of the sample,  so that we  can 
actually hear it.

The  algorithm  is still not perfect,  however.   All  the  time, 
interrupts are occuring.   The $70 interrupt,  and timer  C,  for 
example.  They will occur in odd places, and throw out the timing 
of our sample playing.  To get rid of these disturbances, we turn 
off ALL interrupts while we are playing:

     move.w    sr,-(a7)       ; keep old interrupt status
     or.w      #$0700,sr      ; all interrupts now off

     play the sample here

     move.w    (a7)+,sr       ; interrupts back on, so the ST
                              ; works OK again

Disabling  the interrupts can interfere with the  keyboard  after 
the sample has been played,  but this is only a simple program to 
introduce  you  to sample playing.   You may notice  the  program 
pausing  until you press a key,  or getting a "key repeat"  sound 
until you press a key.


THE PROGRAM 1_PLAY

The  program starts by freeing memory,  clearing the screen  (cls 
macro),  and turning on supervisor status.  Then, it loads in the 
sample SAMPLE_1.AVR,  and de-signs it.  The routine "load_unsign" 
is in the SAMPLES.S file in the INCLUDES directory.   It loads in 
a sample, and then de-signs it, so we don't have to bother later, 
whilst playing it.

Then, I store the address and the length of the sample.

Next,  the soundchip is initialised.   If we don't do this,  then 
the sample could be distorted, because there may be random values 
in the soundchip to start with.

The routine just sets registers 0 - 6 and $d to 0, and register 7 
to  %1111111.   Register  7 controls the noise and  tone  of  the 
sound.   To  prevent interference,  these are turned off for  all 
channels  (a bit value of 1 turns it off!).   ALso,  we  have  an 
extra 1 at the left.   If this is 0,  then for some  reason,  the 
disk drive stops responding!

Now the actual playing bit.   I get the length of the sample, and 
turn off all interrupts.   Then, I get the address of colour 0 in 
a4  (so I can show red lines when I am playing).   d2 is used  to 
store the old colour, and d1 is set up to RED.


THE PLAY LOOP

I set the colour to RED.
Then,  I wipe d7,  to make sure it is 0.   Then I get a byte from 
the sample.   Multiply it by 4,  and add it to the address of the 
lookup table.   Get out the 3 bytes I find,  and put them into  a 
data list I will use to pass them to the sound chip.

Then, I get the list of soundchip data in registers d4 d5 and d6, 
and  slap them straight into the sound chip.   This is  the  same 
technique  used in playing chip music,  by using MOVEMs  to  slap 
data into the sound chip.

I set the colour to white again,  and the red line indicates  how 
much processor time was used.

Then,  I pause for a bit (I worked out exactly how long by  trial 
and error).

Then I loop back to play the rest of the sample.

Then I turn the interrupts back on.

Set all channels to 0 volume,  to prevent sound carrying on,  and 
sounding like a "whine".

That's it.

James Ingram, May 16th 1994

     I do not mind you using any parts of my code,  or any  ideas 
     of  mine.   All  I ask is that you give me a credit  for  my 
     ideas or code.  Cheers.

