                    --------------------------------------
                    | Routine de plot(x,y) en assembleur |
                    --------------------------------------

 Voila une routine de points en assembleur.L' article sera divise en 2 parties
dans un premier temps j' expliquerai comment on fait pour afficher un point et
comment marche la gestion graphique en basse resolution ( identique que le 256
couleurs sur FALCON).A la fin, vous trouverez  un source semi-commente et dans
le fichier 68000 vous trouverez le source qui marche. J' expliquerai en detail
la prochaine fois le fonctionnement du source,car il y a  pas mal d' optimisa-
-tions et je mettrai  30 pages a tout expliquer.  Mais vous  comprendrez quand
meme comment cette routine marche,meme si vous ne comprennez pas tout.
Attention,j'ai pas la pretention de vous donnez la plus rapide des routines de
points.J'aimerai bien la faire d'ailleurs.


 I) Gestion Graphique sur ST et FALCON :
-----------------------------------------

En basse resolution,le codage ce fait comme le represente ce schemas:

1er mot (plan numero 1): 0000 0000 0000 0000 <=>1er au 16em points du 1er plan
			 ^			  
                         |_ Ce 0 represente 1 bit et 1 point du plan 1.

2em mot (plan numero 2): 0000 0000 0000 0000 <=>1er au 16em points du 2em plan
3em mot (plan numero 3): 0000 0000 0000 0000 <=>1er au 16em points du 3em plan
4em mot (plan numero 4): 0000 0000 0000 0000 <=>1er au 16em points du 4em plan
5em mot (plan numero 1): 0000 0000 0000 0000 <=>16em a 32em points du 1er plan
6em mot (plan numero 2): 0000 0000 0000 0000 <=>16em a 32em points du 2em plan


On a donc 4 mots (2 mots long)pour 16 points,d'ou la complexite de preparation
pour un BSET.

Comme vous le voyez,les plans et les mots sont entrelaces ce qui permet d'avoir
des plans. En effet en TRUE COLOR cette notion de plan n'existe pas sauf sur la
JAGUAR , avec un octet definissant la profondeur du sprite.

  La notion de plan  est tres importante , par exemple pour le masquage de nos
sprites.Mais ici,je vais pas vous expliquer ca, je vais vous expliquer a  quoi
servent ces plans  pour les couleurs. Comme vous le savez , il y a 16 couleurs
en basse resolution et il y a 4 plans, donc 4 mots entrelaces donc 4 bits pour
chaque point. Donc il y a 16 combinaisons qui sont:

0000 0001 0010 0011 0100 0101 0110 0111 
1000 1001 1010 1011 1100 1101 1110 1111   
^^^^
||||_ 1 er  plan
|||_  2 eme plan
||_   3 eme plan
|_    4 eme plan

Chacune  de ces  combinaisons  representent une couleur. Ainsi, on  doit faire
attention losque l'on choisit les couleurs de l' ordre dans lequel on les met.

Par extention,tous les modes du FALCON marchent comme ca ( sauf le TRUE COLOR)
Ainsi en 256 couleurs, on a 8 plans, ce qui represente 8 mots entrelaces. Vous
pouvez  aussi regarder l' excellent article sur le VIDEL de DMO  qui est aussi
inclu dans ce mag.


 II) Moyens utilises pour allumer un point :
---------------------------------------------

Il y a bien sur pas mal de moyens pour allumer un point mais je vais parler du
plus simple ( pour moi).
En fait pour allumer un point a l' ecran, il suffit  de mettre le bit a 1 d'un
mot precis qui se trouve dans la memoire ecran.Et cette operation se fait avec
l'instruction BSET.Il existe d'autres methodes pour mettre a 1 un bit, mais je
trouve que celle-ci est la plus pedagogique (voir methode du OR qui est plus 
rapide avec quelques precalculs ).
Mais voila, il y a des problemes(sinon tout le monde coderait).En effet 8 bits
peuveut etre allumes avec bset en 68000(le BSET n'agit que sur un octet)on met
le numero du bit que l' on veut allumer, puis l' adresse ou ce trouve l' octet
ou il y a le bit.  Ainsi   ->  BSET    #7,(a1)   <-  allume le bit numero 7 de
l'octet dont l'adresse et en (a1).Simple non ??? Oui mais voila en 68030 c'est
simle,mais en 68000 c'est le bordel.Comme vous le savez,on a 16 bits ( 1 mot )
qui se suivent, mais le BSET n'allume que sur 8 bit. Donc il faut une division
par 8 pour voir s' il y a un reste, si oui on rajoute 1 octet. Donc il faut s'
avoir si on doit allumer l'octet faible ou l'octet fort du mot.Cependant,ce n'
pas tout.Regardez ce schemas ->
1er octet de l'adresse ecran:   0000 0000  . 
Si on fait bset #0,(a1) , on a ce schemas ->
1er octet de l'adresse ecran:   0000 0001  .
En fait on allume le 8eme point, et pour allumer le premier il faudrait faire:
bset #7,(a1) et on aurait ->
1er octet de l'adresse ecran:   1000 0000  .
C'est pour cela que je soustrais 15 a d2 ca me donne le bit a allumer ,faites
le test.



  III) Transformation des coordonnee X,Y en coordonnees pour le BSET:
----------------------------------------------------------------------
 
Ces faciles dans un premier temps si vous voulez le faire lentement,mais c'est
cette etapes que normalement il faut optimiser.Donc ca peut devenir  complique
et la routine ici presente n' est pas tres difficile. Admettons que nous avons
X (0 a 319) et Y (0 a 199) et le debut de l'adresse ecran ( Ac ).

    Pour 1 ligne vertical ( Y ) nous avons 160 octets ( 320/16*4*2 ) donc nous
pouvons faire   -> Ac = Ac + y*160 <-   et nous sommes places sur la ligne que
nous voulons.

    Maintemant pour connaitre dans quel mot  est ce point ,nous allons diviser
X par  16 car dans chaque mot il y a 16 points,puis nous allons multiplier par
8 car il y a 4 mots pour tout les 16 points.( n' oubliez pas que les mots sont
entrelaces ).Je sais que cette notion de mots entrelaces  est difficile, et je
vous conseille de refaire une routine simple pour mieux comprendre.
-> Ac = Ac + ( x / 16 )*8 <-  et on ne peut pas inverser les operations, sinon
on aurait le reste de cette dision par 16 qui interviendrait.

    Nous connaissons le mot dans lequel se trouve  le bit a allumer ,  il nous
reste qu'a connaitre le numero du bit a allumer.Ce numero est facile car c'est
le reste de la division par 16.Mais paf, comme je l' explique il ne suffit pas
de connaitre ce numero du bit,il faut le mettre a la sauce BSET.Pour cela nous
faisons   -> N = 15 - reste <-  N etant le numero du bit a allumer. Il ne nous
reste qu' a savoir si ce numero est > a 7 , si c' est le cas  le bit se trouve
dans l' octet fort du mot et dans ce cas, on ajoute 1  a L'Ac ( espace memoire
de  l'octet ),si le bit est inferieur ou egal a 8 on ne touche pas a l'Ac.


 IV) Source commentee :
--------------------------

; Pour la souce complete voir dans le dossier 68000 ;
; Dans d0 on met la valeur de X (0-319) ;
; Dans d2 on met la valeur de Y (0-199)	;


plotxy:

; Met l'adresse de tableau des multiple de 160 dans a0 ;

	lea	tableau,a0

; met le debut de l'adresse de l'ecran dans a1 ;

	movea.l $44e,a1           
		
; addition la d2 eme case de a0 dans a1 qui est l'adresse ecran. Ainsi on va
; connaitre la ligne ou se trouve le mot a allumer.
; grace a ce move et a la table de multiplication ca permet d' economiser un 
;  mulu #160,d2  ,  qui est fait gagner du temps facilement , j' expliquerai 
; ulterieurement pourquoi  on doit multiplier par deux  le registre d2  pour  
; utiliser  cette technique. (voir dans le source).
	
	add	(a0,d2),a1		

; Cette addition choisi le 4eme mot donc le 4eme plan ;

	add.l	#6,a1		
	
; Division de x par 16 ( sans reste ) puis on multiplie par 8.On divisise par
; 16 car il y a 16 points par mot, puis on multiplie par 8 car  il y a 4 mots
; pour les quatre plans,enfin on multiplie par 2 car un mot a 2 octets,c' est
; une question de memoire. Ainsi on connait l' adresse du mot ou se trouve le
; bit a allumer.
; (La routine ci dessous est optimisee, mais fait ce qui est dis au-dessus. )

	move.l	d0,d1
	lsr	d1
	and	#248,d1
	add.l	d1,a1

; Reste de la division par 16 pour savoir  quel bit du mot il faut mettre a 1 
; a 1 pour allumer le point correspondant ( optimisation ) ;

	and	#15,d0

; Encore un probleme d'utilisation du bset,voir commentaires   ;

	move	#15,d2
	sub	d0,d2
	lsr	#3,d0      ; Division par 8 ;

; 8 bits peuveut etre allumes avec bset en 68000 ( il n'agit que sur un octet
; or comme on en a 16 ( 1 mot) il faut faire une division par 8 et voir s' il 
; y a un reste,si oui on rajoute 1 octet.

	beq.s	SoGood   ; d0=0 <=> d0<8 sinon d0>=8        ;
	add.l	#1,a1	 ; a1 est l'adresse point a l'ecran ;
                         ; on augmente d'un octet si d0 >8  ;

SoGood	
	bset	d2,(a1)  ; allume le d2eme point a l'ecran ;
	rts

; construction de la table des multiples de 160 ;

	lea	tableau,a0
	clr	d0
	move	#199,d1
turlututu
	move	d0,(a0)+
	add	#160,d0
	dbra	d1,turlututu

; Reserve 400 octet pour y mettre la table des multiple de 160 ;

tableau	dcb.w	200


 Il vous reste a voir le prochain numero de HOW TO CODE pour connaitre toutes
les optimisations que j'ai utilise dans ce programme et je ferais si j' ai le
temps une routine speciale pour le FALCON en 68030.Il sera alors interressant
de comparer... Si vous avez des idees ou d'autres trucs, vous pouvez faire un
article... 

                              Signed:
                                           --> LITHIUM <--
