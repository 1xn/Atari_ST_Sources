*****************************************************************************
*                                                                           *
*                         Optimisations en 68000                            *
*                       --------------------------                          *
*                                                                           *
*        Je ne sais pas qui a ecris cet article,ni d'ou il vient.Ca fait un *
* moment que je l'avais,et comme il est extrement interressant,je vous l'ai *
* mis. Remarque: Si vous avez des trucs ou des optimisations qui n' ont pas *
* ete ecrites pour ST ou FALCON  ecrivez nous quelque chose dessus.En outre *
* je lance un grand concours :                                              *
*       -> Comment effacer un ecran le plus rapidement possible <-          *
* Le gagnant gagnera BEAUCOUP d'argent,et en plus sera reconnu par TOUTE la *
* scene...  Grosses gruges acceptees  ... Avis aux amateurs.                *
*                                                                           *
*                                                                           *
*****************************************************************************



METTRE LES INDICATIONS :
	[nb octets,nb cycles]

CF ST MAG 17/18

1 cycle = 125 nanoseconde =125.10^(-9) secondes a 8Mhz
4 cycles = 500 ns
donc en 1 seconde, le 68000 peut executer (au maximum) 2 millions
 d'instructions !!

PETIT MANUEL A L'USAGE DE CEUX QUI VOUDRAIENT OPTIMISER DU 68000


	optimisations locales :


MODES D'ADRESSAGE :

- Quand on peut remplacer une portion de code par une autre
   qui prennent autant de cycle l'une que l'autre
   Il faut choisir la solution qui prend le moins d'octets
    ou celle qui transfere le moins de memoire
	(‡a va plus vite, le processeur ne travaillant
	  a pleine vitesse que quand il execute une instruction,
	   ENTRE LES INSTRUCTIONS, IL PERD DU TEMPS)

- Les assembleurs rajoutent seuls les I et les A dans les ADD,SUB ...

- UTILISER AU MAXIMUM LES REGISTRES.
	Dans le cas de calculs repetitifs, stocker les
	 constantes les plus utilisees dans les registres.

- LES MODES D'ADRESSAGE DANS L'ORDRE DE PREFERENCE :

	Adressage	 cycles 	cycles
			.W ou .B	  .L
	Dn		0		0
	An		0		0
	#xxxx		4		8
	(An)		4		8
	(An)+		4		8
	-(An)		6		10
	d(An)		8		12
	xxxx.W		8		12
	d(PC)		8		12	(READ ONLY)
	d(An,Ri)	avec Ri=An.W,An.L,Dn.W ou Dn.L
			10		14
	d(PC,Ri)	10		14	d=8 bits signes
	xxxx.L		12		16


- UTILISER AU MAXIMUM L'ADRESSAGE ABSOLU COURT pour la zone BSS
  cela signifie qu'il faut empecher tout acces a la ROM
   parce que les 32 premiers K sont utilises par la ROM
   en tant que variables systeme.

 On gagne 2 octets et 4 cycles avec un adressage court
  au lieu d'un adressage long.
  Ex :     	move $118,d0

 Certains assembleurs (ALCYON 4.03 et FASTASM) l'assemblent ainsi :
		MOVE.W	$00000118.L,D0

 Le SEKA 1.6 et le DEVPAC 2.0 font de meme sauf si on indique :
		move $118.W,d0

 Le GSTASM 1.0 et le MEGAMAX 1.1 assemblent comme il faut :
		MOVE.W	$0118.W,D0

 Ceci est valable pour les 32 premiers Ko et les 32 derniers Ko:
		MOVE.W	$FFFF8240.W,D0

- UTILISER AU MAXIMUM L'ADRESSAGE INDEXE PAR RAPPORT A (PC)
   POUR LA ZONE DATA OU CODE.
  SI LE CODE FAIT PLUS DE 32 K UTILISER d(An).

 PLUTOT QUE DE FAIRE :

	LEA	DATA(PC),A0
	MOVE.W	10(A0,D0.W),D1

 UTILISER :
	MOVE.W	DATA+10(PC,D0.W),D1

 QUI PERMET D'ECONOMISER LE REGISTRE A0
 MAIS PAR CONTRE IL FAUT REUSSIR A CASER DATA DANS UNE LIMITE
  DE 128 OCTETS AVANT OU APRES (PC) !!

- (An)+ etant plus rapide que -(An), les zones de stockage
   devraient etre remplies par incrementation (pas comme un pile).

- Le mode immediat prenant 4 cycles de plus que les registres,
   il vaut mieux stocker les constantes dans les registres
   quand ces constantes sont souvent utilisees dans une routine.

- Toutes les instructions concernant les registres An
   (comme MOVEA,ADDA,SUBA,etc..) affectent les 32 bits quand
   on travaille en .W.
  Exemple :
	MOVE.W	#$8,A0    =	LEA.L	$8.W,A0 (pas de difference)

	ADDQ.W	#$1,A0    =	ADDQ.L	#$1,A0	(pas de difference)

	MOVE.W	D0,A0	  =	MOVE.W	D0,A0
				"EXT.L	A0"	(instruction inexistante)

	ADD.W	#-100,A0  =	ADD.L	#-100,A0 (gain=2 octets)

- Les instructions suivantes doivent etre bannies du repertoire
   du programmeur 68000 (sauf si on gagne des octets avec...)

  Instructions (trop) utilisees par les compilateurs :

	EXT.W et EXT.L
	LINK et UNLK
	AND.W #$FF,Dn et AND.L #$FFFF,Dn
	(a remplacer par MOVEQ #0,Dn avant le transfert dans Dn)
	TST inutile derriere une operation
	 (ADD/SUB/AND/EOR/OR/MUL/DIV/SWAP/EXT)
	CMP.x #0, = TST.x

- Attention aux bugs :

	ADDX	bit Z inchange
	ASL.W #n,memoire (avec n>1) n'existe pas
	MOVEM.W	mode,An/An... etend le bit 15
	OR.W #1,CCR n'existe pas (OR.B #1,CCR)
	MOVEP 0(An) a transformer en MOVEP 65536(An)
			sur certain assembleur
	MOVEM ne positionne pas les bits de CCR
	 (contrairement a MOVE)
	MOVEM peut empiler et depiler 0 octets !!!
	LSL est equivalent a ASL !

- Liste des instructions avec description de leur utilisation optimale :

* 		MOVE.L	#adresse,An
mieux :		LEA	adresse(PC),An	suivant le cas
	ou :	LEA	adresse.W,An

*		MOVE.L	#adresse.W,An
mieux :		MOVE.W	#adresse.W,An
	ou :	LEA	adresse.W,An

*		MOVE.L	#nn,Dn
mieux :		MOVEQ	#nn,Dn		si -128<=nn<=127
mieux :		MOVEQ	#nn-128,Dn	si 128<=nn<=255
		TAS	Dn

*		MOVE.W	#nn,Dn
mieux :		MOVEQ	#nn,Dn	meme chose qu'au-dessus
				mais on perd les bits 16 a 31

*		MOVE.x	#0,MODE
mieux :		CLR.x	MODE

*		MOVE.B	#$FF,MODE
mieux :		ST	MODE

*		ADD.x	#n,MODE
mieux :		ADDQ.x	#n,MODE

*		MOVE.L	#nnnn,-(SP)	;SP=A7
mieux :		PEA	nnnn.W	si -$8000<=nnnn<$7FFF

*		MOVE.L	#adresse,-(SP)
mieux :		PEA	adresse.W	suivant le cas
		PEA	adresse(PC)

*		MOVE.L	An,-(SP)
mieux :		PEA	(An)		(mieux en 68008)

*		MOVEM.L	An/An,-(SP)
mieux :		PEA	(An)		gain 2 cycles
		PEA	(An)

*		MOVEM.L	An,-(SP)
mieux :		PEA	(An)
	ou :	MOVE.L An,-(SP)

*		MOVE.L	An,-(SP)
		MOVE.L	An,-(SP)
		MOVE.L	An,-(SP)
mieux :		MOVEM.L	An/An/An,-(SP)

		les MOVEM sont interessants
		quand il y a plus de 2 registres a transferer

	ex :	MOVEM.L	D0-D1,-(SP)	CCR non modifie
mieux :		MOVE.L	D0,-(SP)	gain 4 cycles
		MOVE.L	D1,-(SP)	attention CCR modifie

*		MOVE.x	adresse,MODE
mieux :		MOVE.x	adresse.W,MODE    suivant le cas
	ou :	MOVE.x	adresse(PC),MODE

*		ASL.x	#1,Dn
mieux :		ADD.x	Dn,Dn

*		ASL.x	#2,Dn
mieux :		ADD.x	Dn,Dn
		ADD.x	Dn,Dn

*		ROXL.x	#2,Dn
mieux :		ADDX.x	Dn,Dn
		ADDX.x	Dn,Dn

*		ROXL.x	#1,Dn
mieux :		ADDX.x	Dn,Dn	attention bit Z inchange

*		AND.x	Dn,Dn
est equivalent a :
		TST.x	Dn

*		AND.L	#$7FFFFFF,Dn
mieux :		BCLR	#31,Dn
		astuce valable pour tous les bits de 16 a 31
		si un seul bit different des autres

*		EOR.L	#$8000000,Dn
mieux :		BCHG	#31,Dn
		cf au-dessus

*		OR.L	#$8000000,Dn
mieux :		BSET	#31,Dn
		cf au-dessus

*		OR.x	#$80,MODE
	ou :	BSET	#7,MODE
mieux :		TAS	MODE

*		AND.x	#0,Dn
mieux :		CLR.x	Dn

*		CLR.x	Dn
		OR.x	#nn,Dn
mieux :		MOVE.x	#nn,Dn

*		AND.x	#aa,Dn		avec aa=NOT(bb)
		OR.x	#bb,Dn
mieux :		OR.x	#bb,Dn		(AND inutile)

*		AND.B	#$FF,Dn
	ou :	AND.W	#$FFFF,Dn
	ou :	AND.L	#$FFFFFFFF,Dn
mieux :		rien !!

*		AND.W	#$FF00,Dn
mieux :		CLR.B	Dn

*		AND.L	#$FFFF0000,Dn
mieux :		CLR.W	Dn

*		AND.L	#$FFFFxxxx,Dn
mieux :		AND.W	#$xxxx,Dn

*		AND.W	#$FFxx,Dn
mieux :		AND.B	#$xx,Dn

*		OR.L	#$0000xxxx,Dn
mieux :		OR.W	#$xxxx,Dn

*		OR.W	#$00xx,Dn
mieux :		OR.B	#$xx,Dn

*		EOR.L	#$0000xxxx,Dn
mieux :		EOR.W	#$xxxx,Dn

*		EOR.W	#$00xx,Dn
mieux :		EOR.B	#$xx,Dn

*		AND.L	#$0000FFFF,Dn
	ou :	MULU	#1,Dn		(2 octets gagnes, 20 cycles perdus)
mieux :		SWAP	Dn
		CLR	Dn
		SWAP	Dn

*		BRA	LABEL
mieux :		BRA.S	LABEL	(pas automatique dans tous les assembleurs)

*		JMP	LABEL
mieux :		BRA	LABEL

*		JSR	LABEL
mieux :		BSR.S	LABEL		si limite 128 octets
		JSR	LABEL(PC)	si limite 32 K
		BSR.W	LABEL		si limite 32 K

*		CLR.L	Dn
mieux :		MOVEQ	#0,Dn

*		MOVE.W	#0,Dn
mieux :		CLR.W	Dn

*		CMP	#n,Dn
mieux :		SUBQ	#n,Dn	si Dn n'a pas besoin d'etre conserve

*		CMP.L	#0,An
mieux :		MOVE.L	An,Dn	positionne Z

*		SUBQ	#1,Dn
		BNE	LABEL
mieux :		DBRA	Dn,LABEL	Dn doit etre decremente de 1
					au debut de la boucle
					en sortie de boucle Dn.W=-1

*		AND.L	#$FFFFFFFE,Dn
mieux :		AND.W	#$FFFE,Dn	si bits 16 a 31=1
	ou :	BCLR	#0,Dn		si un seul bit touche

*		OR.L	#$0000F000,Dn
mieux :		OR.W	#$F000,Dn	si bits 16 a 31=0

*		EOR.L	#$0000F000,Dn
mieux :		EOR.W	#$F000,Dn	si bits 16 a 31=0

*		ADDA.L	#nnnn,An
mieux :		ADDQ.L	#n,An		si n<9
		ADDA.W	#nnnn,An	si Abs(nnnn)<$8000
	encore mieux :	LEA.W	nnnn(An),An


* PENSEZ A MOVEM POUR LES TRANSFERTS RAPIDES DE BLOCS DE MEMOIRE
		MOVEM.L	(A0)+,D0-D7
		MOVEM.L	D0-D7,(A1)
		LEA	8*4(A1),A1

* MOVEP PEUT ETRE UTILE POUR DES TRANSFERTS AVEC DECALAGES DE 8

*		MULU	Dm,Dn
	MULU travaille avec Dm.W et Dn.W
	 donc on n'a pas besoin d'effacer les bits 16 a 31

*		DIVU	Dm,Dn
	DIVU travaille avec Dm.W et Dn.L
	  donc on n'a pas besoin d'effacer les bit 16 a 31 de Dm

*		MULU	#2^n,Dn
mieux :		ASL.x	#n,Dn		attention aux bits >15

*		MULU	#value,Dn
mieux :		decalages-additions dans certains cas :

	ex:	MULU	#160,D0		avec D0*160<65536
mieux :		ASL	#5,D0
		MOVE	D0,D1
		ADD	D0,D0
		ADD	D0,D0
		ADD	D1,D0

*		DIVU	#2^n,Dn
mieux :		LSR.x	#n,Dn		attention au reste (cf suivant)

*		DIVU	#2^n,Dn
		SWAP	Dn
mieux :		AND	#2^n-1,Dn

*		DIVS	#2^n,Dn
mieux :		ASR.x	#n,Dn

*		EOR.x	#-1,MODE
mieux :		NOT.x	MODE

*		NOT.x	MODE
		ADDQ.x	#1,MODE
mieux :		NEG.x	MODE

*		JSR	LABEL1
		JMP	LABEL2
mieux :		PEA	LABEL2		avec optimisation de PEA et JMP
		JMP	LABEL1

*		MOVE.L	#0,An
	ou :	MOVE.W	#0,An
	ou :	LEA	0,An
	ou :	LEA	0.W,An
mieux :		SUB.L	An,An
	ou :	SUB.W	An,An		(extension du signe)

*		CMP.x	#0,MODE
mieux :		TST.x	MODE

*		TST.x	MODE
mieux :		MOVE.x	MODE,Dn		charge Dn avec la valeur de MODE

	ex :	TST.B	d(PC)		interdit
	devient	MOVE.B	d(PC),D0	autorise

*		AND.B	#$EF,CCR	=CLX and CLC
mieux :		SUB.x	Dn,Dn

*		CMP.L	#0,An
mieux :		MOVE.L	An,Dm		scratch Dm

*		OR.B	#1,CCR		=SEC
	ou :	MOVE	#1,CCR		=SEC
mieux :		NEG	Dn		Dn doit etre different de 0

	positionne en meme temps Dn :
		MOVE.L	#$81,D0
mieux :		MOVEQ	#$7F,D0
		NEG.B	D0

*	si on desire faire une JuMP table :

		LEA	TABLE,A0
		MOVE.L	0(A0,D0.W),A0
		JMP	(A0)
	TABLE:	DC.L	ADRESSE1
		DC.L	...

	ou :
		JMP	TABLE(PC,D0.W)
	TABLE:	BRA	ADRESSE1
		BRA	...

*	si on veut calculer une puissance de 2,
	il vaut mieux utiliser BSET que faire une boucle :

ex :	D1=2^D0

	MOVEQ	#0,D1
	BSET	D0,D1

*	si on veut tester le bit 7, il vaut mieux utiliser
	TST que BTST #7,

	ex :
		BTST	#7,D0
		BEQ	ZERO

mieux :		TST.B	D0
		BPL	ZERO

	ex :
		BTST	#7,MEMORY
		BEQ	ZERO

mieux :		TST.B	MEMORY+1
		BPL	ZERO

*	CMPA,ADDA,SUBA ne modifient pas X
	ca peut etre utile dans une boucle de decalage

*	penser a DBcc pour une boucle avec test de fin

*	pour mettre un bit a 1, on peut utiliser ADD
	 si le bit concerne est a 0 avant l'operation.

ex :		AND	#$F0,D0
		OR	#1,D0
mieux :		AND	#$F0,D0
		ADDQ	#1,D0

*	meme chose pour le mettre a 0 (utiliser SUBQ)

*		op.L	#$xxxx0000,D0
mieux :		SWAP	D0
		op.W	#$xxxx,D0
		SWAP	D0

	op peut etre :
		ADD,SUB,AND,EOR,OR

*	certains assembleurs n'optimisent pas :
		CLR	0(A0)
	en	CLR	(A0)

*	instructions non mentionnees :
		BTST	Dn,#$xxxx
		BTST	Dn,d(PC)
		BTST	Dn,d(PC,Ri)

	OPTIMISATIONS GLOBALES

- restructurer le source pour avoir le moins de sous-programmes
   (enlever le maximum de BSR/JSR)

- optimiser les boucles
   (calculs minimum a l'interieur, le plus gros de calcul doit etre
     fait a l'exterieur de la boucle)

- eviter les redondances (cf code genere par Compilateur C)

- utiliser au maximum l'adressage .W ou d(An)

