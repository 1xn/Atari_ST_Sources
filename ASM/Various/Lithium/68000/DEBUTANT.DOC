                   -------------------------------
                   | PROGRAMMATION EN ASSEMBLEUR |
                   -------------------------------

         J'ai fait cet article pour les debutants,ceux qui ne connaissent
pas l'assembleur.J'essaies d'expliquer comment ca marche en gros,alors je
risque de choquer certain puriste. Excusez-moi pour ca et pour mes fautes
d'orthographe.Mais sachez que j' ai fais ca pour le plaisir. Si vous avez
des problemes,car c' est trop complique ou vous ne comprenez pas tout,ben
ecrivez moi. Mais je vous conseille d' ecrire en salon *PATA 2 sur RTEL1,
la il y a toujours quelqu' un pour vous expliquez ce qu' il faut faire.Ca
ira plus vite que de m ' ecrire , car je vois  Alexis que toutes les deux
semaines.En outre si vous savez deja programmer en assembleur, et si vous
pensez que je suis a cote de la plaque pour certaines de mes explications
rien ne vous empeche d' ecrire un bout de l'article pour que je puisse l'
inserer dans l' article. Ce qui est bien dans ce mag, c' est que c'est un
bon vecteur pour faire bouger la scene. ( Vecteur glissant ... )




          ---------------------------------------------------
          | INTRODUCTION sur la Programmation en ASSEMBLEUR |
          ---------------------------------------------------
	   		     By Mr Corto
                           ---------------



	
1) Le Debuger :
________________
----------------

Pour moi,les personnes desirant coder en assembler (=asm) sont obligees
de savoir utiliser un DEBUGER.Le plus simple est d'utiliser MONST .  En
effet grace au debuger vous allez  pouvoir acquerir les notions de base
de la programmation en asm.Si vous maitrisez parfaitement le debuger de
genst ( Monst ) , vous pouvez commencer a faire de petits programmes et 
les assembler et les debugger (Alternate + D)pour voir l'effet qu'a une
instruction et son mode d' adressage sur un registre ou sur la memoire.
  Remarquez que je vous conseille Monst car c'est tres simple de passer
de Genst a Monst. A-debug me sert surtout pour faire du bon debugage de
programme,avec plein d'interruptions etc... 
Cependant BRAINSTORM a sorti son KIT developpeur et peux etre qu'il est
possible d'appeler A-debug dirrectement avec ASSEMBLE... J' attends qu'
ils veuillent bien m' en envoyer un  (ALEXIS me le fera passer) ou bien
peuvent peut etre faire un bref expose de leur produits pour:
                          HOW TO CODE.... 


2) Convention servant a la programmation en ASM:
__________________________________________________
--------------------------------------------------

    

      A)Binaire,decimal et hexadecimal:
      ---------------------------------

    Une notion importante en assembleur est cette notion de base binaire
decimal et hexadecimal... C'est simple vous allez voir:
Nous avons 10 chiffres avant de rajouter une dizaine, nous comptons donc 
en base decimal.C'est chiffres sont le 0,1,2,3,4,5,6,7,8 et le 9.Le mode
binaire est constitue de 2 chiffres qui sont le 0 et le 1. Avec ces deux
chiffres ont arrive a faire tous les chiffres du decimal.Par exemple, 3
se represente:
%0 => 0 , %1=>1 , %10=>2 ,%11=>3,%101=>5 et %11001=>19
Le signe % sert a differencier en assembleur les decinaux et les nombres 
binaires.Ainsi losrque l'on a:   Move.w #%01,d0 ; c'est qu'on met 2 dans
d0. En  memoire ( par le debugeur ) vous allez pourvoir remarquer qu ' a 
l' assemblage il met tout dans la meme unite qui est l ' hexadecimal qui 
est la base de 16. Toutes la memoire et meme le contenu des registes est
dans ce mode car il y a des facilite a programmer en hexadecimal.
En  effet dans un ordinateur , toutes les  adresses  sont representes en 
hexadecimal. On peux remarquer que comme avec le % pour le binaire , l '
hexadecimal ce represente avec un $.
Il y a 16 nombres dans l'hexadeciamal qui sont : 1,2,3,4,5,6,7,8,9,A,B,C
,D,E,F .  
On peut avoir par exemple:
$7=7 , $A=10 , $B=11 , $C=12 ,$F=15 $10=16 , $155=341.    

       Voila si vous ne comprennez pas cette notion de base qui est tres
importante, laissez un message en *PATA 2, sachez que toute calculatrice 
fais ca,alors pendant les cours de math ...



      B)Systeme metrique d'un ordinateur:
      ------------------------------------

       En assembleur,il y a 4 quantites de memoire qui sont importantes.
La premiere est le bit :   Un bit est en fait un 0 ou un 1. On peut donc
mettre 2 valeur dans un bit. C ' est tres important surtout au niveau du
graphisme.On y accede par des instructions speciales. Voir la routine de 
points qui est explique dans ce mag... 

Le second est l'octet  :   Un octet est en fait 8 bits l'un a cote de l'
autre.Ainsi on ne peut avoir que 256 valeurs dans un octet , ce qui veut
dire que le nombre ira de 0 a 255  ( 256 valeurs car 2 exp 8 ).En asm on 
note le bit par un label qui se met a la fin de l'instrution: - C'est le
label  .b -. L' instruction n'agira que sur 1 octet. ( .b car en anglais 
OCTET=BYTE  a ne pas confondre avec bit).En hexadecimal le chiffre maxi-
-mum que peut contenir un bit est $FF.

Le troisieme est le Mot : 1 mot est represente en 2 octets soit 16 bits.
En asm on le represente par le label - .w - (word) qui se met a la fin d
une instruction.Il y a  2 exp 16 valeurs dans un mots.Pour simplifier l'
utilisation du mot on l'a divise en 2 partie:  l'octet fort  et l 'octet 
faible... En effet le mot se divisant en 2 octets il y a l'octet du haut
et l'octet du bas (Comme l'on dit dans les Pyrenees).
$ffff est la valeur maximum d'un mot en hexadecimal.
 ^ ^ 
 | --- Octet faible.
 ----- Octet fort.

Ainsi dans le mots $a1e5, $a1 et l'octet fort et $e5 est l'octet faible.
Et dans le mot $0001 , $01 est l'octet faible et $00 est l'octet fort.


Le quatrieme est le mot-long: Ce mot long est represente par 2 mots,4 .b
et donc 32 bits !!!! Il est represente par le label - .l -  et sa valeur
maximum est $ffffffff.Il est divise en 2 partie qui son le mot faible et
le mot fort (Voir meme chose pour le mot avec les octets).

    Attention $00000001 est un mot-long, un mot et un octet, cela depend 
comment est le label de votre instruction.
 

      C)Les principaux registres du 68000:
      ------------------------------------
    Bon on commence a nous plonger dans la structure du 68000 . Donc les 
registres du 68000  'sont de la memoire'  qu'utilise le programmeur pour 
simplifier ses programmes et ne pas acceder a la ram sans arret. Grace a
ces registres le 68000 va pouvoir augmenter la vitesse des  instructions
et ca simplifie la tache du programmeur. Ainsi , nous allons constamment 
utiliser ces registres dans nos programmes.

Ces registres sont:

Les registres de donnees:
--------------------------

Ils sont au nombre de 8.Ils s'appellent -  D0 , D1 , D2 , D3 , D4 , D5 ,
D6 et D7  -.  On les utilise surtout pour les calculs  ou pour garder un
nombre (compteur etc... ).Ils ont pour taille 32 bits ou un mot long.

Les registres d'adresse:
-------------------------
Ils sont aux nombre de 7.Ils s'appellent -  A0 , A1 , A2 , A3 , A4 , A5 ,
et A6.  -.On les utilise surtout pour stocker les adresses de la RAM  par
exemple on stocke le debut de l'adresse ecran.On les appelle comme ca car
il y a un mode d'adressage special,qui ne s'utilise qu'avec les registres
d'adresse. ( En 68000 )...

Pointeur de Pile:
------------------
 La pile est une place memoire tres utilisee par les programmeur .  On la 
represente par A7. Dans A7 il y a une adresse et ce qui est  interressant
c'est l' utilisation qu 'on fait de la pile plus que son contenu. Je vais
essayer de vous expliquer l'utilisation de la pile,mais sachez que c 'est
l'aspect de l'asm que j'ai mis le plus de temps a comprendre.Donc si vous
ne comprenez pas c'est normal , je reexpliquerai en detail une autre fois
(surement la prochaine fois quand je traiterai des modes d'adressage).
Donc A7 contient une adresse memoire,pour l'instant cette adresse on s'en
tape.Par contre a cette adresse,dans la memoire il y a un contenu.On peut
y ecrire et la lire grace a A7.On appelle pile par ce que ce qu' on y lit
et se qu'on y ecrit ce fais comme si on traitait un tas de papier. On met
un 1er papier sur le tas,puis un 2d ,un 3eme etc... Et ainsi lorsque l'on
a fini de les empiler, le premier papier que l'on prend sur le tas est le
dernier que l'on a pose, et le dernier papier lu est  le 1er pose. C' est
en fait l'utilite de la pile qui est difficile a voir. Enfin vous prennez
Monst et vous allez voir ca va devenir d'une simplicite !!!!    Attention
pour utiliser la pile,il faut connaitre deja certain modes d'adressage...
En effet :
MOVE.L #$05555,a7 ne met pas $05555 dans la pile,met ca dit que la pile se 
situe maintemant a l'adresse $05555 ( qui est equivalente a $5555).

      D)Les modes d' adressage:
      ---------------------------

 Je ne vous explique pas comment ca marche,car il faut faire ca d'un coup
(dans HOW TO CODE 2),je vous direz seulement qu'on peut les utiliser pour
tirer pleinement  partie des registres. En effet il n ' existe pas que le
mode:  =>  Move.w #$1526,d0 

Vous rendez-vous compte de la complexite et de la longueurs des prg s' il
n' existait que ce mode... D 'ailleur une grande partie de l'optimisation 
pour un debutant est de mettre le bon mode d'adressage au bon moment.
Je sais que comme explication c' est sommaire, mais si vous voulez a tout 
pris savoir comment ca marche,mettez le en *PATA 2 sur RTEL...


      E)Le mode superviseur du 68000:
      --------------------------------
  Il existe 2 modes d'etat dans le 68000.La il n'a pas de questions a ce 
poser pour les debutants qui lisent cet articles,il vaut mieux se mettre
en mode SUPERVISEUR . Pour cela  vous pouvez  utiliser  la fonction  $20
du GEMDOS et faire: ( Voir aussi doc sur le GEMDOS )

  Move.w  #$20,-(sp)
  Trap	  #1
  Addq.l  #6,sp   
  
  Voila pour les curieux , l'autre mode est le mode UTILISATEUR. Le mode 
superviseur est un mode dans lequel on peut appeller  avoir  acces a une
partie des principaux vecteurs permettant la programmation avancee. Donc
mieux vaut mettre ca au debut de vos programmes...Question  d'habitudes.
	

 
3) Instrucions type de base:
_________________________________
--------------------------------- 


Bon alors ca c'est le passage que tout le monde va lire. Mais sachez que
connaitre des instructions et savoir ce qu'elles font ce n'est pas coder
en ASM. En effet, le passage sur les modes d'adressage , que nous voyons
plus loin est tout aussi important mais il est plus balaise a comprendre
Voyons chaque instruction de base dans un ordre croissant (vous avez les
instructions du 68030 dans un autre article ... )

  L'instruction MOVE:
  -------------------
   (MOVE .b.w.l) est l 'intruction de l 'assembleur,elle en est sa base.
L'instruction MOVE veut dire 'bouge' quelque chose dans autre chose ...

Exemples:
   Move un chiffre dans une adresse => move.w #10,$150
A l'adresse $150 de la memoire le mot ( car ya .w )  00000010 a ete mis.
Ainsi l'ancienne valeur de $150 a ete effacee...
 Move un chiffre > 65536 (2 exp 16) dans l'adresse appele: ADDI de votre
programme => move.l #65537,ADDI
	     dans la section data de votre programme vous avez:
	  => ADDI:  dc.l 0
  La valuer 0 de ADDI a ete remplacee par 65537.
  Si votre nombre est inferieur a 256 alors vous pouvez utiliser move.b
          => move.b #$16,d0
     Le nombre $16 (22) est mis dans d0.

  ATTENTION,l'intruction move est interressante par la suite qu'avec les  
differents modes d'addressage.  
                   

  Les instructions conditionnelles:
  --------------------------------- 
   Dans tout les langages de programmations vous avez des instrutions de 
condition.Par exemple en Pascal c'est   : IF a>b then
En asm nous avons des instruction de comparaison (CMP  .b.w.l)et de test
(TST .b.w.l).

Nous allons nous interresser a l'instrution CMP qui est bien utile aux 
programmeurs .Nous allons aussi nous interresser aux instructions  Bcc 
qui sont des instructions qui  permettent au programmeur  de faire les
differentes  actions  apres  les comparaisons . Ces  instrutions  vont
brancher le programmeur vers une adresse suivant la comparaison que l'
on viens juste de faire... ( Voir exercices et surtout les debuger ).

Exemples:

  On a deja dans mis dans D0 la valeur 19.
  => move.l #$19,d0 (ou move.w #$19,d0 ou move.b #$19,d0)  
  On compare d0 et $19
  => cmp.l  #$19,d0  
  Si #$19 et d0 a la meme valeur on va en Touche
  => beq Touche		(beq=branch if equal) 

Pour bien comprendre comment reagit le 68000,il vaut mieux prendre Monst
et  tracer les petits  programmes qui sont a la fin de l' article. Ainsi
vous allez voir le chemin que l'on fait.
    
    ATTENTION , un compare ne s'utilise qu'une fois ainsi on ne peut pas
mettre plusieurs Bcc pour 1 test:
	
	cmp.l  #$17,d0
  	beq	lola
	bne	loli	* a ne pas faire !!!
    


       Tableau des Bcc suivant le compare place precedemment:
     ----------------------------------------------------------

**************************************************************************
* BEQ * EQual                     * Egal                                 *
* BNE * Not Equal                 * Different                            *
* BMI * MInus                     * Negatif                              *
* BPL * PLus                      * Positif                              *
* BHI * HIgh                      * Superieur                            *
* BLS * Low or Same               * Inferieur ou egal                    *
* BGE * Greater or Equal          * Superieur ou egal                    *
* BLT * Less Than                 * Inferieur                            *
* BGT * Greater Than              * Superieur                            *
* BLE * Less or Equal             * Inferieur ou egal                    *
* BCC * Carry Clear               * Retenue a zero                       *
* BCS * Carry Set                 * Retenue a un                         *
* BVC * oVerflow Clear            * Depassement a zero                   *
* BVS * oVerflow Set              * Depassement a un                     *
**************************************************************************
        

  Les instructions Arithmetiques:
 ---------------------------------

Add:  Cette instruction est en fait l'addition.On peut l'utiliser avec des
octets,des mots ou des mots long. => Add(.b .w .l) 
  Add.l	d0,d1 => d1=d0+d1 (On additionne D0 a d1).

Remarque:  
Ainsi pour la multiplication par 2 il suffira de faire - add.w d0,d0 -. En
effet l'addition est beaucoup plus rapide que la multiplication...


Sub:  Cette instruction est en fait la soustraction.On peut l'utilise avec
des octets,des mots ou des mots long. => Sub(.b .w .l)    
  Sub.b	d0,d1 => d1=d1-d0 (On soustrait D0 a d1).


Mulu: Cette instruction est en fait la multiplication. On l ' utilise avec
des mots en 68000 ou mots et mots long en 68030.Le resultat est un motlong
en 68000 ou 2 mots long en 68030.

Mulu.w d0,d1  => d1=d1*d0 (On multiplie d0 a d1).  
( 16 * 16 --> 32  bits en 68000 et 68030)
Juste en 68030 on a en plus:
Mulu.l d0,d1  => d1=d1*d0 (On multiplie d0 a d1).     
( 32 * 32 --> 32  bits en 68030)
( 32 * 32 --> 64  bits en 68030)

Mulu est la multiplication non signee.En effet meme s'il y a -5 dans d0,le
resultat restera quand meme positif.
Muls est la multiplication signee.Elle s' utilise comme Mulu mais le signe
des registres compte pour le resultat final.


Divu: Cette instruction est en fait la division.On l'utilise avec des mots
en 68000 ou des mots et mots long en 68030.Le resultat est un mot en 68000
ou 2 mots long en 68030.
Divu.w d0,d1  => d1=d1/d0 (On divise d1 par d0).  
( 32 / 16 --> reste sur 16 et quotient sur 16 en 68000 et 68030) 
Juste en 68030 on a en plus:
Divu.l d0,d1  => d1=d1*d0 (On divise d1 par d0).  
( 32 / 32 --> q=32 bits )
( 64 / 32 --> q=32 bits et r=32 bits )

Etat du registre.

    31<---- 1 mot ---->15<------ 1 mot ------>0
   --------------------------------------------
d1 | Reste sur 16 bits | Quotient sur 16 bits |                  
   --------------------------------------------

Divu est la division non signee et s'il y a -5 dans d0 le resultat restera
quand meme positif.
Divs est la division signee. Elle s ' utilise comme Divu mais le signe des 
registres compte pour le resultat final.
 
Remarque: Pour la multiplication et la division (signee ou pas signee) ,le 
registre qui recoit le resultat doit etre forcement un registre de donnee.

Mulu x,d1
	^
        ----- Oblige d'avoir Dn
divs x,d1
	^
        ----- Oblige d'avoir Dn

Remarque: La multiplication et la division prennent du temps au 68000.Donc
ce qui  est bien pour un programmeur c' est d'en avoir  le moins possible.
Mais ne faites pas cas de cette remarque, car pour l' instant vous en etes 
encore loin de l'optimisation.  


EXERCICES:
----------

      Ainsi se termine notre premier cours d' asm et pour ne pas que vous ne
vous embetiez jusqu'au prochaine article voila des exercices que vous pouvez
tracer sous MONST pour vous donner une idee de l' utilisation de ce que nous
venons de voir:

1)
Debut:
      Move.w #$120,d0
      Move.w #$128,d2
      cmp.w  d0,d2
      beq    ici
      cmp.w  d0,d2
      bls    ici
Ici:
      cmp.w  d2,d0	*attention a l'ordre des resgistres !!!
      bgt    debut

      cmp.w  d0,d2	
      bgt    debut


2)
      Attention   -1=ffffffff en hexadecimal et regardez bien la valeur des
registres apres avoir fait les move et decouvrez une des principales fautes
que l'on fait en assembleur...

      move.l #$ffffffff,d0
      move.l #-1,d2		
      cmp.b  d0,d2  
      ble    ok
bob
      move.l #0,d0	* voir la difference lors du passage sur Monst
ok
      move.w #0,d0
      move.l #0,d2
      cmp.l  d2,d0
      bne    lola
      bra    ok		* Branchement sans aucune condition
     
     Pour  les instructions arithmetique , c' est a vous de vous faire des
exercices. Si vous voulez calculer le reste d' une division , vous  pouvez
utiliser l'instruction- SWAP d0 -qui sert a inverser le mot fort et le mot
faible...  Je pense que si vous voulez programmer en assembleur vous devez
faire un minimum d'effort et de decouverte par vous meme ...
