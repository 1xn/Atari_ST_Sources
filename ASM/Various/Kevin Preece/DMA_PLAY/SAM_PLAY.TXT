
                           Sound Sample Play Routine

                                by Kevin Preece

     The routine as it stands  will  only  play  raw unsigned data that has
     been sampled at rates of 3 - 30kHz.  If your sampler saves its samples
     as signed bytes (-128 ... +127) you will need to alter the sample data
     by adding 128 to all bytes before  calling this routine.  If you don't
     you'll get a very noisy replay.

     Samples taken at 13kHz and  lower  are replayed using interrupts, thus
     the calling program can get on  with  other  things whilst it is doing
     so.  At higher rates the amount of  CPU  time this takes is too great,
     the machine slows to a crawl, so these are played in a tight CPU loop.
     The interrupt service routine does no more than set a flag to say that
     an interrupt has occurred, and clears  the MFP interrupt pending flag.
     The replay loop sits waiting for the  flag  to  be set.  When it is it
     sends the next sample byte to the YM2149 sound chip.

     I haven't done any  timings  to  see  how  much  CPU  time  is lost to
     replaying the sample, but at higher rates the machine slows visibly.

     .SAM Sample Files

     These are stored as just the sample  data, there are no headers.  Data
     is unsigned (Pro Sound Designer).

     .AVR Samples

     The sample data is preceeded by a 128 byte header:

     long    magic           0x32424954              ('2BIT')
     char    name[8]         the name of the sample
     short   mode            0 = mono, -1 = stereo
     short   signed          0 = data is unsigned, -1 = it is signed
     short   looping         0 = sample does not loop, -1 = it does
     short   midi_note       the midi not assigned to the sample
     ulong   frequency       the sample frequency
     ulong   length          samples length
     ulong   loop_first      the offset of the start of the loop
     ulong   loop_end        the offset of the end of the loop
     char    reserved[6]     reserved
     char    xname[20]       name extension area
     char    user[64]        user area
