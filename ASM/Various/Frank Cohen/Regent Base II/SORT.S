***********************************
* Regent Base 2: 4GL SQL Database *
* Sorting Program by Frank Cohen  *
* (c) 1988 Regent Software        *
***********************************

 TEXT

*---------------SQL PARAMETER VARIABLES---------------

BUFSIZE EQU 12000 ;Maximum table disk buffer space

MAX_SEL EQU 200 ;Maximum # of expressions
SIZ_SEL EQU 20000

MAX_AGG EQU 25  ;Maximum # of aggregate expressions
SIZ_AGG EQU 30*MAX_AGG

MAX_TBL EQU 8 ;Maximum # of tables
SIZ_TBL EQU 32*MAX_TBL

MAX_WHERE EQU 50 ;Maximum # of where expressions
SIZ_WHERE EQU 8000

MAX_ORD EQU 10 ;Maximum # of order by expressions
SIZ_ORD EQU 32*MAX_ORD

MAX_GRP EQU 10 ;Maximum # of group by expressions
SIZ_GRP EQU 32*MAX_GRP

MAX_REOR EQU MAX_SEL ;Maximum # of reorganize fields
MAX_INDX EQU MAX_SEL ;Maximum # of index fields

MAX_VARS EQU 50  ;Maximum # of variables
SIZ_VAR EQU 8000

PRNTBLN EQU 68   ;Page buffer line count
PRNTBCR EQU 200  ;Page buffer character count
SHOWLINE EQU 20  ;# of lines in Show screen
SHOWCHAR EQU 74  ;# of characters in Show screen

MAXLINE EQU 800  ;Max # of lines in editor

PMAX EQU 250  ;# of format structures
PBSIZE EQU 4000  ;Size of format buffer

MAX_LABELS EQU 200 ;Maximum # of labels
SIZ_LABELS EQU 4000

START MOVE.L A7,A5
 MOVE.L 4(A5),A5
 MOVE.L $C(A5),D0
 ADD.L $14(A5),D0
 ADD.L $1C(A5),D0
 ADD.L #$100,D0
 MOVE.L D0,-(A7)
 MOVE.L A5,-(A7)
 MOVE D0,-(A7)
 MOVE #$4A,-(A7)
 TRAP #1
 ADD.L #12,A7

 MOVE #GEMEND-GEMSTART,D0
 SUB #1,D0
 LEA GEMSTART,A0
CLRGEM CLR.B (A0)+
 DBF D0,CLRGEM
 CLR ACTFLAG

*--------------INIT GEM VARIABLES-------------

 CLR.L AP1RESV   ;APPL_INIT
 CLR.L AP2RESV
 CLR.L AP3RESV
 CLR.L AP4RESV
 CLR.L APPTREE
 MOVE #10,CONTRL
 CLR CONTRL+2
 MOVE #1,CONTRL+4
 CLR CONTRL+6
 CLR CONTRL+8
 JSR AES

 MOVE #77,CONTRL  ;GRAF_HANDLE
 CLR CONTRL+2
 MOVE #5,CONTRL+4
 CLR CONTRL+6
 CLR CONTRL+8
 JSR AES
 MOVE INTOUT,DRHANDLE

 MOVE #100,CONTRL ;OPEN_VWORK
 CLR CONTRL+2
 MOVE #11,CONTRL+6
 MOVE DRHANDLE,CONTRL+12
 MOVE #1,INTIN
 MOVE #1,INTIN+2
 MOVE #1,INTIN+4
 MOVE #1,INTIN+6
 MOVE #1,INTIN+8
 MOVE #1,INTIN+10
 MOVE #1,INTIN+12
 MOVE #1,INTIN+14
 MOVE #1,INTIN+16
 MOVE #1,INTIN+18
 MOVE #2,INTIN+20
 JSR VDI

 MOVE CONTRL+12,GRHANDLE

 MOVE #104,OPCODE     ;DETERMINE WORK STORAGE
 MOVE #2,SINTIN       ;OF THE DESKTOP WINDOW
 MOVE #5,SINTOUT
 CLR SADDRIN
 CLR SADDROUT
 CLR INTIN
 MOVE #4,INTIN+2
 JSR AES
 MOVE INTOUT+2,GEMXPOS
 MOVE INTOUT+4,GEMYPOS
 MOVE INTOUT+6,GEMWIDTH
 MOVE INTOUT+8,GEMHOEHE

 MOVE #2,D0
 JSR SHWMOUSE

 MOVE #3,-(A7)
 TRAP #14
 ADD.L #2,A7
 MOVE.L D0,SCREEN

 CLR D0
 JSR SHWMOUSE

 MOVE.L #DISKBUFF,-(A7)  ;SET UP DISK I/O BLOCK
 MOVE #26,-(A7)
 TRAP #1
 ADD.L #6,A7

 JSR CLS
 JSR GETPATH

*----------------LOAD RESOURCE FILE------------------

 MOVE #110,CONTRL
 CLR CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 LEA RSCNAME,A0
 JSR ADDPATH
 MOVE.L A0,ADDRIN
 JSR AES
 TST INTOUT
 BEQ NORSRC

 MOVE #CHOSETBL,D0
 JSR GADDR
 MOVE.L A0,CHSADR

 MOVE #CHOSEFLD,D0
 JSR GADDR
 MOVE.L A0,MAINADR

 MOVE #DISKERR,D0
 JSR GADDR
 MOVE.L A0,ERRDLG

 MOVE #ERROR,D0
 JSR GADDR
 MOVE.L A0,ERRADR

 MOVE #IOERRS,D0
 JSR GADDR
 MOVE.L A0,IOERRADR

*-----------Check graphic mode----------

 MOVE #4,-(A7)
 TRAP #14
 ADD #2,A7
 MOVE D0,GRMODE
 TST D0
 BNE GOODMD
 JMP BADREZ

*-----------MONOCHROME----------

GOODMD CMP #2,GRMODE
 BNE DOMEM

 MOVE #MONO,D0
 JSR GADDR
 MOVE.L A0,MONOADR

 MOVE.L MONOADR,A0
 ADD.L #MICON1*OBSIZE,A0
 MOVE.L ERRDLG,A1
 ADD.L #ICON1*OBSIZE,A1
 MOVE.L OB_SPEC(A0),OB_SPEC(A1)

 MOVE.L MONOADR,A0
 ADD.L #MICON2*OBSIZE,A0
 MOVE.L ERRDLG,A1
 ADD.L #ICON2*OBSIZE,A1
 MOVE.L OB_SPEC(A0),OB_SPEC(A1)

*-----------GET SOME MEMORY-------------

DOMEM MOVE.L #-1,-(A7)  ;MALLOC
 MOVE #$48,-(A7)
 TRAP #1
 ADD.L #6,A7
 SUB.L #32000,D0
 MOVE.L D0,D4

 MOVE.L D0,-(A7)  ;MALLOC
 MOVE #$48,-(A7)
 TRAP #1
 ADD #6,A7

 MOVE.L D0,D1

 MOVE.L D4,D2  ;Move stack pointer
 ADD.L D0,D2
 MOVE.L D2,A7

*------------SQL VARIABLE ALLOCATION-------------

*Field, Table & Index storage
 MOVE.L D0,CACHET
 ADD.L #48*CACTBL,D0
 MOVE.L D0,CACHEF
 ADD.L #65*CACFLD,D0
 MOVE.L D0,CACIND
 ADD.L #65*CACIDX,D0

*Select field expression storage
 MOVE.L D0,STR_SEL
 ADD.L #MAX_SEL*EV_FSZ,D0
 MOVE.L D0,BUF_SEL
 ADD.L #SIZ_SEL,D0

*Where expression storage
 MOVE.L D0,STR_WHERE
 ADD.L #MAX_WHERE*EV_FSZ,D0
 MOVE.L D0,BUF_WHERE
 ADD.L #SIZ_WHERE,D0

*Table definition storage
 MOVE.L D0,STR_TBL
 ADD.L #MAX_TBL*EV_FSZ,D0
 MOVE.L D0,BUF_TBL
 ADD.L #SIZ_TBL,D0

*Order by storage
 MOVE.L D0,STR_ORD
 ADD.L #MAX_ORD*EV_FSZ,D0
 MOVE.L D0,BUF_ORD
 ADD.L #SIZ_ORD,D0

*Reorganize definition storage
 MOVE.L D0,STR_REOR
 ADD.L #MAX_REOR*EV_FSZ,D0
 MOVE.L D0,STR_INDX
 ADD.L #MAX_INDX*EV_FSZ,D0

 MOVE.L D0,D2
 SUB.L D1,D2
 SUB.L D2,D4
 CMP.L #50000,D4
 BLT NOMEM

*Quick Sort storage
 OR.L #1,D0
 AND.L #$FFFFFFFE,D0
 MOVE.L D0,Q_HEAP

 SUB.L #4000,D4
 AND.L #$FFFFFFFE,D4
 MOVE.L D4,Q_SIZE

*------------LOAD TABLE INFO-------------

 MOVE #1,CACHE
 JSR LDCACHE

 CLR FILEY
 CLR FILECNT
 MOVE.L #TBLINFO,POINTER

 MOVE.L #TBLLEN*TBLMAX,D0
 SUB #1,D0
 LEA TBLINFO,A0
LORETTE CLR.B (A0)+
 DBF D0,LORETTE

 LEA TBLSPEC,A0
 JSR ADDPATH
 JSR F_OPEN
 TST D0
 BMI DISKERR
 MOVE D0,FHANDLE

LORI2 MOVE FHANDLE,A0
 MOVE.L POINTER,A1
 MOVE.L #TBLLEN,D0
 JSR F_READ
 TST.L D0
 BMI DISKERR
 CMP.L #TBLLEN,D0
 BNE LORI3

 MOVE.L POINTER,A1
 TST.B (A1)
 BEQ LORI2
 CMP.B #' ',(A1)
 BEQ LORI2
 MOVE.L POINTER,D0
 ADD.L #TBLLEN,D0
 MOVE.L D0,POINTER
 ADD #1,FILECNT
 JMP LORI2

LORI3 MOVE FHANDLE,A0
 JSR F_CLOSE

*-----------SORT TABLE NAMES----------

SORT1 LEA TBLINFO,A0
 MOVE.L A0,A2
 LEA TBLINFO,A1
 ADD.L #48,A1
 MOVE.L A1,A3
 CLR FLAG

SORT2 CMP.B #' ',(A1)
 BEQ SORT6
 TST.B (A1)
 BEQ SORT6

SORT3 TST.B (A0)
 BEQ SORT4
 MOVE.B (A0)+,D0
 MOVE.B (A1)+,D1
 CMP.B D0,D1
 BEQ SORT3
 BCC SORT4

 MOVE.L A2,A0
 MOVE.L A3,A1
 MOVE.L #47,D3
SORT5 MOVE.B (A0),D0
 MOVE.B (A1),D1
 MOVE.B D1,(A0)+
 MOVE.B D0,(A1)+
 DBF D3,SORT5
 MOVE #1,FLAG

SORT4 ADD.L #48,A2
 ADD.L #48,A3
 MOVE.L A2,A0
 MOVE.L A3,A1
 JMP SORT2

SORT6 TST FLAG
 BNE SORT1

*---------------INIT AND SETUP----------------

 MOVE.L CHSADR,DRAWADR

 MOVE.L CHSADR,A0
 MOVE #-1,D0
 JSR SHOWPANL

 JSR SHOWFILE

*---------------------WAIT FOR EVENT------------------

GETEVENT JSR WAITMOUSE

 MOVE #TTHUMB,D0
 JSR OBJCFIND
 CMP #TTHUMB,INTOUT
 BEQ MVTHUMB

 MOVE #TSLIDER,D0
 JSR OBJCFIND
 CMP #TSLIDER,INTOUT
 BEQ PAGED

 MOVE #TUPARW,D0
 JSR OBJCFIND
 CMP #TUPARW,INTOUT
 BEQ ARROWUP

 MOVE #TDNARW,D0
 JSR OBJCFIND
 CMP #TDNARW,INTOUT
 BEQ ARROWDN

 MOVE #TCANCEL,D0
 JSR OBJCFIND
 CLR GOTO
 CMP #TCANCEL,INTOUT
 BEQ QUITZ

 MOVE #43,CONTRL  ;OBJC_FIND
 MOVE #4,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 CLR INTIN
 MOVE #30,INTIN+2
 MOVE MOUSEX,INTIN+4
 MOVE MOUSEY,INTIN+6
 MOVE.L CHSADR,ADDRIN
 JSR AES
 TST INTOUT
 BMI GETEVENT

 CMP #TBL1,INTOUT
 BCS GETEVENT
 CMP #TBL8+1,INTOUT
 BCC GETEVENT

 MOVE INTOUT,HOLDIT
 CLR.L D0
 MOVE INTOUT,D0
 MULU #OBSIZE,D0
 ADD.L CHSADR,D0
 MOVE.L D0,A0
 MOVE #1,OB_STATE(A0)
 MOVE INTOUT,D0
 JSR OBJCDRAW

 MOVE HOLDIT,INTOUT
 CLR.L D0
 MOVE INTOUT,D0
 MULU #OBSIZE,D0
 ADD.L CHSADR,D0
 MOVE.L D0,A0
 MOVE.L OB_SPEC(A0),A0
 MOVE.L TE_PTEXT(A0),A0
 MOVE.L #TBLNAME*OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A1
 MOVE.L A0,OB_SPEC(A1)

 MOVE.L STR_TBL,A1
 MOVE.L A1,A4
 MOVE #EV_FSZ-1,D0
DOSORT2 CLR.B (A1)+
 DBF D0,DOSORT2

 MOVE.L BUF_TBL,A3
 MOVE.L A3,FNAME(A4)
 LEA TNAMEZ,A1

 MOVE #19,D0
DOSORT3 CMP.B #' ',(A0)
 BEQ DOSORT4
 CMP.B #'_',(A0)
 BEQ DOSORT4
 TST.B (A0)
 BEQ DOSORT4
 MOVE.B (A0),(A3)+
 MOVE.B (A0)+,(A1)+
 DBF D0,DOSORT3

DOSORT4 CLR.B (A3)+
 CLR.B (A1)

 MOVE.L A3,BUF_TBL2
 MOVE #1,S_TBLCNT

*----------------SHOW FIELD SELECT WINDOW--------------

 MOVE #51,CONTRL  ;FORM_DIAL (SHRINK)
 MOVE #9,CONTRL+2
 MOVE #1,CONTRL+4
 CLR CONTRL+6
 CLR CONTRL+8
 MOVE #2,INTIN
 MOVE #10,INTIN+2
 MOVE #10,INTIN+4
 MOVE #50,INTIN+6
 MOVE #10,INTIN+8
 MOVE DIALX,INTIN+10
 MOVE DIALY,INTIN+12
 MOVE DIALW,INTIN+14
 MOVE DIALH,INTIN+16
 JSR AES

 MOVE.L MAINADR,A0
 MOVE #-1,D0
 JSR SHOWPANL

*------------LOAD FIELD INFO-------------

 CLR FILEY
 CLR FILECNT
 CLR ASCDES

 MOVE.L #FLDLEN*FLDMAX,D0
 SUB #1,D0
 LEA FLDINFO,A0
AUDRY2 CLR.B (A0)+
 DBF D0,AUDRY2

 MOVE.L #FLDINFO,POINTER

 LEA FLDSPEC,A0
 JSR ADDPATH
 JSR F_OPEN
 TST D0
 BMI DISKERR
 MOVE D0,FHANDLE

TRYAGAIN MOVE FHANDLE,A0
 LEA DBUFF,A1
 MOVE.L #FLDLEN,D0
 JSR F_READ
 TST.L D0
 BMI DISKERR
 CMP.L #FLDLEN,D0
 BNE NOMRFLDS

 LEA TNAMEZ,A0
 LEA DBUFF+20,A1
 JSR MMATCHER
 TST D0
 BMI TRYAGAIN
 ADD #1,FILECNT

 LEA DBUFF,A0
 MOVE.L POINTER,A1
 MOVE.L #64,D0
KAREN MOVE.B (A0)+,(A1)+
 DBF D0,KAREN
 ADD.L #65,POINTER
 JMP TRYAGAIN

NOMRFLDS MOVE FHANDLE,A0
 JSR F_CLOSE

FSORT1 LEA FLDINFO,A0  ;NOW SORT FIELDS
 MOVE.L A0,A2
 LEA FLDINFO,A1
 ADD.L #65,A1
 MOVE.L A1,A3
 CLR FLAG

FSORT2 CMP.B #' ',(A1)
 BEQ FSORT6
 TST.B (A1)
 BEQ FSORT6

FSORT3 TST.B (A0)
 BEQ FSORT4
 MOVE.B (A0)+,D0
 MOVE.B (A1)+,D1
 CMP.B D0,D1
 BEQ FSORT3
 BCC FSORT4

 MOVE.L A2,A0
 MOVE.L A3,A1
 MOVE.L #64,D3
FSORT5 MOVE.B (A0),D0
 MOVE.B (A1),D1
 MOVE.B D1,(A0)+
 MOVE.B D0,(A1)+
 DBF D3,FSORT5
 MOVE #1,FLAG

FSORT4 ADD.L #65,A2
 ADD.L #65,A3
 MOVE.L A2,A0
 MOVE.L A3,A1
 JMP FSORT2

FSORT6 TST FLAG
 BNE FSORT1

*------------RUN FIELD SELECT WINDOW-------------

 MOVE.L MAINADR,DRAWADR
 MOVE #1,SELECTED

 JSR SHOWFLDS

 JSR CLEARSL
 MOVE #1,SELECTED

 MOVE.L #PRIMARY*OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 MOVE #1,OB_STATE(A0)
 MOVE #PRIMARY,D0
 JSR OBJCDRAW

*---------------------WAIT FOR EVENT------------------

EVENT2 JSR WAITMOUSE

 MOVE #BEGIN,D0
 JSR OBJCFIND
 CMP #BEGIN,INTOUT
 BEQ SORTIT

 MOVE #ASCBUTN,D0
 JSR OBJCFIND
 CMP #ASCBUTN,INTOUT
 BEQ ASCEND

 MOVE #DESBUTN,D0
 JSR OBJCFIND
 CMP #DESBUTN,INTOUT
 BEQ DESCEND

 MOVE #CASE,D0
 JSR OBJCFIND
 CMP #CASE,INTOUT
 BEQ NOCASE

 MOVE #NULLS,D0
 JSR OBJCFIND
 CMP #NULLS,INTOUT
 BEQ NONULLS

 MOVE #CLEAR,D0
 JSR OBJCFIND
 CMP #CLEAR,INTOUT
 BEQ FCLEAR

 MOVE #FTHUMB,D0
 JSR OBJCFIND
 CMP #FTHUMB,INTOUT
 BEQ FMVTHUMB

 MOVE #FSLIDER,D0
 JSR OBJCFIND
 CMP #FSLIDER,INTOUT
 BEQ FPAGED

 MOVE #FUPARW,D0
 JSR OBJCFIND
 CMP #FUPARW,INTOUT
 BEQ FARROWUP

 MOVE #FDNARW,D0
 JSR OBJCFIND
 CMP #FDNARW,INTOUT
 BEQ FARROWDN

 MOVE #FCANCEL,D0
 JSR OBJCFIND
 CLR GOTO
 CMP #FCANCEL,INTOUT
 BEQ QUITM

 MOVE #43,CONTRL  ;OBJC_FIND
 MOVE #4,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 CLR INTIN
 MOVE #30,INTIN+2
 MOVE MOUSEX,INTIN+4
 MOVE MOUSEY,INTIN+6
 MOVE.L MAINADR,ADDRIN
 JSR AES
 TST INTOUT
 BMI EVENT2

 CMP #PRIMARY,INTOUT
 BEQ BUTN1
 CMP #SECONDRY,INTOUT
 BEQ BUTN2
 CMP #TRIMARY,INTOUT
 BEQ BUTN3

 CMP #FLD1,INTOUT
 BCS EVENT2
 CMP #FLD8+1,INTOUT
 BCC EVENT2

 MOVE INTOUT,HOLD2

 CLR.L D0
 MOVE HOLD2,D0
 MULU #OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 MOVE #1,OB_STATE(A0)
 MOVE HOLD2,D0
 JSR OBJCDRAW

 CLR.L D0
 MOVE HOLD2,D0
 MULU #OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 MOVE.L OB_SPEC(A0),A0
 MOVE.L TE_PTEXT(A0),A0

 CLR.L D0
 MOVE #PRIMARY,D0
 CMP #1,SELECTED
 BEQ THATSIT
 MOVE #SECONDRY,D0
 CMP #2,SELECTED
 BEQ THATSIT
 MOVE #TRIMARY,D0

THATSIT MOVE.L D0,D1
 MULU #OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A1
 MOVE.L OB_SPEC(A1),A1
 MOVE.L TE_PTEXT(A1),A1

 MOVE.L #19,D0
FLYNN MOVE.B (A0)+,(A1)+
 DBF D0,FLYNN

 MOVE D1,D0
 JSR OBJCDRAW

 JSR WAITUP

 CLR.L D0
 MOVE HOLD2,D0
 MULU #OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 CLR OB_STATE(A0)

 MOVE #FLDNAMES,D0
 JSR OBJCDRAW
 JSR SHOWFLDS

 CMP #1,SELECTED
 BEQ BUTN2
 CMP #2,SELECTED
 BEQ BUTN3
 JMP BUTN1

*---------------------DO THE SORT---------------------

SORTIT MOVE.L #PRIMARY,D0  ;ANY FIELDS DEFINED? NO->QUIT
 MOVE.L D0,D1
 MULU #OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A1
 MOVE.L OB_SPEC(A1),A1
 MOVE.L TE_PTEXT(A1),A1
 TST.B (A1)
 BEQ QUITIT
 CMP.B #' ',(A1)
 BEQ QUITIT

 MOVE.L #BEGIN*OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 MOVE #1,OB_STATE(A0)
 MOVE #BEGIN,D0
 JSR OBJCDRAW

 JSR WAITUP

 MOVE.L #BEGIN*OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 CLR OB_STATE(A0)
 MOVE #BEGIN,D0
 JSR OBJCDRAW

* Find key field names

 MOVE.L STR_ORD,A4
 MOVE.L BUF_ORD,A3
 MOVE #MAX_SEL,D7

 MOVE.L MAINADR,A2
 ADD #PRIMARY*OBSIZE,A2

GS_LOOP MOVE.L A4,A0
 MOVE #EV_FSZ-1,D0
GS_100 CLR.B (A0)+
 DBF D0,GS_100

 MOVE.L OB_SPEC(A2),A0
 MOVE.L TE_PTEXT(A0),A0
 TST.B (A0)
 BEQ GS_QUIT
 CMP.B #' ',(A0)
 BEQ GS_QUIT

 MOVE.L A3,FNAME(A4)
 MOVE #5,FTYPE(A4)
 MOVE #19,FCONN(A4)
 MOVE CASEFLAG,FIFIL(A4)  ;NOCAPS
 MOVE ASCDES,FRECN(A4)  ;DESC

 MOVE #19,D0
GS_101 TST.B (A0)
 BEQ GS_102
 CMP.B #' ',(A0)
 BEQ GS_102
 MOVE.B (A0)+,(A3)+
 DBF D0,GS_101
GS_102 CLR.B (A3)+
 MOVE.L A4,HOLDER

 ADD #OBSIZE,A2
 ADD #EV_FSZ,A4
 ADD #1,S_OCOUNT
 CMP #3,S_OCOUNT
 BNE GS_LOOP

GS_QUIT MOVE.L HOLDER,A0
 CLR FCONN(A0)

 MOVE #1,ACTFLAG

*----------------Process Sort----------------

 MOVE.L STR_TBL,A0  ;Open all tables
 MOVE.L BUF_TBL2,A1
 JSR OPENTBLS
 TST D0
 BMI SQL_ERROR

 MOVE.L STR_TBL,A0
 JSR CLOSTBLS
 TST D0
 BMI SQL_ERROR

 MOVE.L STR_WHERE,A0 ;Establish table buffers and pointers
 CLR D0
 MOVE.L STR_TBL,A1
 MOVE.L STR_ORD,A2
 CLR D1
 MOVE #1,D2
 JSR SETEXPRESS
 TST D0
 BMI SQL_ERROR

 MOVE.L STR_ORD,A0
 MOVE.L STR_TBL,A1
 JSR SORT
 TST D0
 BMI SQL_ERROR

 MOVE.L STR_TBL,A0
 JSR QS_SAVE
 TST D0
 BMI SQL_ERROR

 JMP COMPLETE

****************************************
* OPEN ALL DEFINED TABLES              *
* --------input----------------------- *
* A0 Pointer to table structure        *
* A1 Pointer to storage area           *
* --------output---------------------- *
* D0 -1 if error D7 = Error Code       *
****************************************

*Errors
*260 Table not found
*261 Disk error

OPENTBLS MOVE.L A0,OP_TABLE
 MOVE.L A0,A4
 MOVE.L A1,A3

OP_LOOP CMP #1,FAGGR(A4)
 BEQ OP_RCRS

 MOVE.L FNAME(A4),A0

 MOVE.L CACHET,A1
 MOVE #CACTBL-1,D4
OP_101 JSR MMATCHER
 TST D0
 BEQ OP_102
 ADD.L #48,A1
 DBF D4,OP_101
 MOVE #260,D7
 MOVE.L FNAME(A4),A0
 JMP R_ERROR

OP_102 MOVE.L A1,A2
 MOVE.L A1,A0
 ADD.L #20,A0

 MOVE.L A3,FVAL2(A4)

 MOVE #18,D0
OP_110 TST.B (A0)
 BEQ OP_103
 MOVE.B (A0)+,(A3)+
 DBF D0,OP_110

OP_103 MOVE #18,D0

OP_104 TST.B (A1)
 BEQ OP_105
 MOVE.B (A1)+,(A3)+
 DBF D0,OP_104

OP_105 MOVE.B #'.',(A3)+
 MOVE.B #'T',(A3)+
 MOVE.B #'B',(A3)+
 MOVE.B #'L',(A3)+
 CLR.B (A3)+

OP_150 TST FBOOL(A4)  ;Sorted table in memory
 BNE OP_300

 MOVE.L FVAL2(A4),A0
 JSR F_OPEN
 TST D0
 BPL OP_200
 MOVE.L FVAL2(A4),A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ OP_150
 MOVE #261,D7
 JMP OP_ERROR

OP_200 MOVE D0,FDISP(A4)
 MOVE #1,FAGGR(A4)

OP_300 CMP #1,FTYPE(A4)  ;Open index file
 BNE OP_RCRS

 MOVE.L A2,A1
 MOVE.L A2,A0
 ADD.L #20,A0

 MOVE.L A3,FIFIL(A4)

 MOVE #18,D0
OP_202 TST.B (A0)
 BEQ OP_203
 MOVE.B (A0)+,(A3)+
 DBF D0,OP_202

OP_203 MOVE #18,D0
OP_204 TST.B (A1)
 BEQ OP_205
 MOVE.B (A1)+,(A3)+
 DBF D0,OP_204

OP_205 MOVE.B #'.',(A3)+
 MOVE.B #'I',(A3)+
 MOVE.B #'N',(A3)+
 MOVE.B #'D',(A3)+
 CLR.B (A3)+

OP_206 TST FBOOL(A4)  ;Sorted table in memory
 BNE OP_RCRS

 MOVE.L FIFIL(A4),A0
 JSR F_OPEN
 TST D0
 BPL OP_207
 MOVE.L FVALU(A4),A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ OP_206
 MOVE #261,D7

 MOVE.L FDISP(A4),D0
 JSR F_CLOSE
 CLR FAGGR(A4)
 JMP OP_ERROR

OP_207 MOVE D0,FIHND(A4)

OP_RCRS TST FCONN(A4)
 BEQ OP_DONE
 ADD.L #EV_FSZ,A4
 JMP OP_LOOP

OP_ERROR MOVE.L OP_TABLE,A0
 JMP CLOSTBLS

OP_DONE CLR D0
 RTS

OP_TABLE DC.L 0 ;Structure pointer

****************************************
* CLOSE ALL DEFINED TABLES             *
* --------input----------------------- *
* A0 Pointer to table structure        *
* --------output---------------------- *
* D0 -1 if error D7 = Error Code       *
****************************************

*Close file errors
*270 Disk error

CLOSTBLS MOVE.L A0,A4

CL_LOOP TST FAGGR(A4)
 BEQ CL_RCRS
 CLR FAGGR(A4)
 MOVE FDISP(A4),A0
 JSR F_CLOSE
 TST D0
 BMI CL_ERROR

 TST FTYPE(A4)
 BEQ CL_RCRS
 MOVE FIHND(A4),A0
 JSR F_CLOSE
CL_RCRS TST FCONN(A4)
 BEQ CL_DONE
 ADD.L #EV_FSZ,A4
 JMP CL_LOOP
CL_DONE CLR D0
 RTS
CL_ERROR MOVE #-1,D0
 RTS

*************************************
* LOAD FIELD AND VARIABLE DEFS      *
* --Inputs--                        *
* A0 = Where structure              *
* A1 = Table structure              *
* A2 = Field structure              *
* D0 # of Where expressions         *
* D1 1-Assign table & where info    *
* D2 # of Table expressions         *
* --Returns--                       *
* D0 = -1 IF ERROR D7= ERROR #      *
*************************************

* ERRORS
* 210 Field not defined (A0 points to field name)
* 211 Table not defined (A0 points to table name)
* 212 Variable not defined (A0 points to variable name)

SETEXPRESS MOVE.L A0,SE_WHERE
 MOVE D0,SE_WCNT
 MOVE D1,SE_LEVEL
 MOVE D2,SE_TBLCNT
 MOVE.L A1,SE_TBL
 MOVE.L A2,SE_SEL

*-----------ASSIGN TABLE DISK I/O BUFFERS-----------

SE_TNVRS MOVE.L SE_TBL,A4
 MOVE.L FNAME(A4),SET_DEFLT
 MOVE.L #TBLBUFRS,SE_BUFF

SE_T100 MOVE #211,D7
 MOVE.L FNAME(A4),A0
 CLR D1
 JSR CAL_ROW
 CMP #2,D0
 BNE SE_T102
 MOVE #211,D7
 MOVE.L FNAME(A4),A0
 JMP SE_ERROR
SE_T102 MOVE D0,FSIZE(A4)
 MOVE.L SE_BUFF,FVALU(A4)
 MOVE.L SE_BUFF,D1
 ADD.L D0,D1
 OR.L #1,D1
 AND.L #$FFFFFFFE,D1
 MOVE.L D1,SE_BUFF

 CLR FTYPE(A4)
 MOVE.L FNAME(A4),A0
 MOVE #1,D1
 JSR CAL_ROW
 CMP #2,D0
 BLE SE_T101
 MOVE D0,FEXTR(A4)
 MOVE #1,FTYPE(A4)
 MOVE.L SE_BUFF,FINDX(A4)
 MOVE.L SE_BUFF,D1
 ADD.L D0,D1
 OR.L #1,D1
 AND.L #$FFFFFFFE,D1
 MOVE.L D1,SE_BUFF

SE_T101 TST FCONN(A4)
 BEQ SE_T199
 ADD.L #EV_FSZ,A4
 JMP SE_T100

*-----------SET DEFAULT TABLE NAME-----------

SE_T199 TST SE_LEVEL
 BNE SE_T210

 MOVE.L SE_SEL,A4
SE_T200 TST.L FTABL(A4)
 BNE SE_T201
 CMP #5,FTYPE(A4)
 BNE SE_T201
 MOVE.L SET_DEFLT,FTABL(A4)
SE_T201 TST FCONN(A4)
 BEQ SE_T210
 ADD.L #EV_FSZ,A4
 JMP SE_T200

SE_T210 TST SE_WCNT
 BEQ SE_T400
 MOVE.L SE_WHERE,A4
SE_T202 TST.L FTABL(A4)
 BNE SE_T203
 MOVE.L SET_DEFLT,FTABL(A4)
SE_T203 TST FCONN(A4)
 BEQ SE_T400
 ADD.L #EV_FSZ,A4
 JMP SE_T202

*----------DETERMINE IF INDEXED OPERATION-----------

SE_T400 CLR INDXFLAG

 TST SE_WCNT
 BEQ SE_FLIN

 MOVE.L SE_TBL,A2

SE_TLP MOVE.L SE_WHERE,A3

 CLR SE_FLAG
 CLR FCALC(A2)

SE_T401 TST FTYPE(A2)
 BEQ SE_T405

 TST FOBJN(A3)
 BNE SE_T404
 CMP #5,FTYPE(A3)
 BNE SE_T404

 MOVE.L FNAME(A2),A0
 MOVE.L FTABL(A3),A1
 JSR MMATCHER
 TST D0
 BMI SE_T404

 MOVE.L CACIND,A4
 MOVE #CACIDX,D4

SE_T402 MOVE.L FNAME(A2),A0
 MOVE.L A4,A1
 ADD.L #20,A1
 JSR MMATCHER
 TST D0
 BMI SE_T403

 MOVE.L FNAME(A3),A0
 MOVE.L A4,A1
 JSR MMATCHER
 TST D0
 BMI SE_T403

 MOVE #1,SE_FLAG
 JMP SE_T404

SE_T403 ADD.L #65,A4
 SUB #1,D4
 BNE SE_T402
 JMP SE_T405

SE_T404 TST FCONN(A3)
 BEQ SE_T420
 ADD.L #EV_FSZ,A3
 JMP SE_T401

SE_T420 TST SE_FLAG
 BEQ SE_T405
 MOVE #1,FCALC(A2)
 MOVE #1,INDXFLAG

SE_T405 TST FCONN(A2)
 BEQ SE_PTRS
 ADD #EV_FSZ,A2
 JMP SE_TLP

*------------SET INDEXED WHERE POINTERS-----------

SE_PTRS MOVE.L SE_TBL,A2

SE_PLP MOVE.L SE_WHERE,A3

SE_P401 TST FCALC(A2)
 BEQ SE_P405
 TST FOBJN(A3)
 BNE SE_P404
 CMP #5,FTYPE(A3)
 BNE SE_P404

 MOVE.L FNAME(A2),A0
 MOVE.L FTABL(A3),A1
 JSR MMATCHER
 TST D0
 BMI SE_P404

 MOVE.L CACIND,A4
 MOVE #CACIDX,D4

SE_P402 MOVE.L FNAME(A2),A0
 MOVE.L A4,A1
 ADD.L #20,A1
 JSR MMATCHER
 TST D0
 BMI SE_P403

 MOVE.L FNAME(A3),A0
 MOVE.L A4,A1
 JSR MMATCHER
 TST D0
 BMI SE_P403

 JSR SE_SET2
 JMP SE_P404

SE_P403 ADD.L #65,A4
 SUB #1,D4
 BNE SE_P402
 JMP SE_P405

SE_P404 TST FCONN(A3)
 BEQ SE_P405
 ADD.L #EV_FSZ,A3
 JMP SE_P401

SE_P405 TST FCONN(A2)
 BEQ SE_NIW
 ADD #EV_FSZ,A2
 JMP SE_PLP

*-------SET NON INDEXED WHERE POINTERS TO DISK BUFFERS--------

SE_NIW MOVE.L SE_TBL,A2

SE_PILP MOVE.L SE_WHERE,A3

SE_PI401 TST FCALC(A2)
 BNE SE_PI405
 TST FOBJN(A3)
 BNE SE_PI404
 CMP #5,FTYPE(A3)
 BNE SE_PI404

 MOVE.L FNAME(A2),A0
 MOVE.L FTABL(A3),A1
 JSR MMATCHER
 TST D0
 BMI SE_PI404

 MOVE.L CACHEF,A4
 MOVE #CACFLD,D4

SE_PI402 MOVE.L FNAME(A2),A0
 MOVE.L A4,A1
 ADD.L #20,A1
 JSR MMATCHER
 TST D0
 BMI SE_PI403

 MOVE.L FNAME(A3),A0
 MOVE.L A4,A1
 JSR MMATCHER
 TST D0
 BMI SE_PI403

 JSR SE_SETUP
 JMP SE_PI404

SE_PI403 ADD.L #65,A4
 SUB #1,D4
 BNE SE_PI402

 MOVE #210,D7
 MOVE.L FNAME(A3),A0
 JMP SE_ERROR

SE_PI404 TST FCONN(A3)
 BEQ SE_PI405
 ADD.L #EV_FSZ,A3
 JMP SE_PI401

SE_PI405 TST FCONN(A2)
 BEQ SE_FLIN
 ADD #EV_FSZ,A2
 JMP SE_PILP

*---------Set field pointers---------

SE_FLIN TST SE_LEVEL
 BNE SE_DONE

 MOVE.L SE_TBL,A2

SE_F107 MOVE.L SE_SEL,A3

SE_F100 TST FOBJN(A3)
 BNE SE_F109
 CMP #5,FTYPE(A3)
 BNE SE_F109

 MOVE.L FNAME(A2),A0
 MOVE.L FTABL(A3),A1
 JSR MMATCHER
 TST D0
 BMI SE_F109

SE_F101 MOVE.L CACHEF,A4
 MOVE #CACFLD,D4

SE_F102 MOVE.L A4,A0
 ADD.L #20,A0
 MOVE.L FTABL(A3),A1
 JSR MMATCHER
 TST D0
 BMI SE_F103

 MOVE.L A4,A0
 MOVE.L FNAME(A3),A1
 JSR MMATCHER
 TST D0
 BMI SE_F103

 JSR SE_SETUP
 JMP SE_F109

SE_F103 ADD.L #65,A4
 SUB #1,D4
 BNE SE_F102

 MOVE.L FNAME(A3),A0
 MOVE #210,D7
 JMP SE_ERROR

SE_F109 TST FCONN(A3)
 BEQ SE_108
 ADD.L #EV_FSZ,A3
 JMP SE_F100

SE_108 TST FCONN(A2)
 BEQ SE_KROQ
 ADD.L #EV_FSZ,A2
 JMP SE_F107

*----------Set index pointers----------

SE_KROQ MOVE.L SE_TBL,A2

SE_F207 MOVE.L SE_SEL,A3

SE_F200 MOVE FTYPE(A3),D0
 CMP.B #'A',D0
 BEQ SE_F218
 CMP.B #'E',D0
 BEQ SE_F218
 CMP.B #'S',D0
 BEQ SE_F218
 CMP.B #'L',D0
 BEQ SE_F218
 CMP.B #'D',D0
 BEQ SE_F218
 CMP.B #'I',D0
 BEQ SE_F218
 CMP.B #'C',D0
 BNE SE_F209

SE_F218 MOVE.L FNAME(A2),A0
 MOVE.L FTABL(A3),A1
 JSR MMATCHER
 TST D0
 BMI SE_F209

SE_F201 MOVE.L CACIND,A4
 MOVE #CACIDX,D4

SE_F202 MOVE.L A4,A0
 ADD.L #20,A0
 MOVE.L FTABL(A3),A1
 JSR MMATCHER
 TST D0
 BMI SE_F203

 MOVE.L A4,A0
 MOVE.L FNAME(A3),A1
 JSR MMATCHER
 TST D0
 BMI SE_F203

 MOVE.L A4,A0
 ADD.L #42,A0
 JSR CVAL
 MOVE.L FINDX(A2),D2
 ADD.L D1,D2
 MOVE.L D2,FINDX(A3)

 JMP SE_F209

SE_F203 ADD.L #65,A4
 SUB #1,D4
 BNE SE_F202

SE_F209 TST FCONN(A3)
 BEQ SE_208
 ADD.L #EV_FSZ,A3
 JMP SE_F200

SE_208 TST FCONN(A2)
 BEQ SE_400
 ADD.L #EV_FSZ,A2
 JMP SE_F207

* Check for unknown fields

SE_400 MOVE.L SE_SEL,A4

SE_401 TST FOBJN(A4)
 BNE SE_402
 CMP #5,FTYPE(A4)
 BNE SE_402

SE_AGG6 MOVE.L FNAME(A4),A0
 MOVE #210,D7
 JMP SE_ERROR

SE_402 TST FCONN(A4)
 BEQ SE_DONE
 ADD.L #EV_FSZ,A4
 JMP SE_401

SE_DONE CLR D0
 RTS

SE_ERROR MOVE #-1,D0
 RTS

SE_SETUP CLR D0  ;Load field info
 MOVE.B 40(A4),D0
 MOVE D0,FTYPE(A3)

 MOVE.L A4,A0
 ADD.L #42,A0
 JSR CVAL
 MOVE D1,FDISP(A3)

 ADD.L FVALU(A2),D1
 MOVE.L D1,FVALU(A3)

 MOVE.L A4,A0
 ADD.L #47,A0
 JSR CVAL
 MOVE D1,FSIZE(A3)

 CLR D0
 MOVE.B 52(A4),D0
 SUB.B #'0',D0
 MOVE D0,FEXTR(A3)
 RTS

SE_SET2 CLR D0  ;Load index field info
 MOVE.B 40(A4),D0
 MOVE D0,FTYPE(A3)

 MOVE.L A4,A0
 ADD.L #42,A0
 JSR CVAL
 MOVE D1,FDISP(A3)

 MOVE.L FINDX(A2),D2
 ADD.L D1,D2
 MOVE.L D2,FVALU(A3)

 MOVE.L A4,A0
 ADD.L #47,A0
 JSR CVAL
 MOVE D1,FSIZE(A3)

 CLR D0
 MOVE.B 52(A4),D0
 SUB.B #'0',D0
 MOVE D0,FEXTR(A3)
 RTS

****************************************
* ORDER BY PROCESSING                  *
* --------input----------------------- *
* A0 Pointer to order by structure     *
* A1 Pointer to table def structure    *
* --------output---------------------- *
* D0 -1 if error D7 = Error Code       *
****************************************

*-----QuickSort Parameter Block-----

QTYPE EQU 0 ;Field Type
QDISP EQU 2 ;Displacement
QSIZE EQU 4 ;Size
QDESC EQU 6 ;Descending order
QCAPS EQU 8 ;Ignore capitalization

QSZ EQU 10  ;Parameter block size

*Sort Errors
*230 Table disk file not found
*231 Table is too large to sort
*232 Escape key pressed
*233 Disk I/O error
*234 There are no field definitions for this table
*235 Could not create temporary files
*236 Table not defined
*237 Field not defined

SORT MOVE.L A0,Q_ORD
 MOVE.L A1,Q_TBL

*--------Assign Default Table Name---------

QT_100 TST.L FTABL(A0)
 BNE QT_101
 MOVE.L SET_DEFLT,FTABL(A0)
QT_101 TST FCONN(A0)
 BEQ QT_200
 ADD.L #EV_FSZ,A0
 JMP QT_100

*--------Assign Field Definitions----------

QT_200 MOVE.L Q_TBL,A2

QT_201 MOVE.L Q_ORD,A3

QT_202 MOVE.L CACHEF,A4
 MOVE #CACFLD,D4

QT_203 MOVE.L A4,A0
 ADD.L #20,A0
 MOVE.L FTABL(A3),A1
 JSR MMATCHER
 TST D0
 BMI QT_204

 MOVE.L A4,A0
 MOVE.L FNAME(A3),A1
 JSR MMATCHER
 TST D0
 BMI QT_204

 CLR D0  ;Load field info
 MOVE.B 40(A4),D0
 MOVE D0,FTYPE(A3)

 MOVE.L A4,A0
 ADD.L #42,A0
 JSR CVAL
 MOVE D1,FDISP(A3)

 MOVE.L A4,A0
 ADD.L #47,A0
 JSR CVAL
 MOVE D1,FSIZE(A3)

QT_204 ADD.L #65,A4
 SUB #1,D4
 BNE QT_203

 TST FCONN(A3)
 BEQ QT_205
 ADD.L #EV_FSZ,A3
 JMP QT_202

QT_205 TST FCONN(A2)
 BEQ QT_300
 ADD.L #EV_FSZ,A2
 JMP QT_201

*-------Establish Parameter Block---------

QT_300 LEA Q_PARAM,A4
 MOVE.L Q_TBL,A3
 MOVE.L Q_ORD,A2
 CLR D5

QT_302 MOVE.L FNAME(A3),A0
 MOVE.L FTABL(A2),A1
 JSR MMATCHER
 TST D0
 BMI QT_303

 MOVE #237,D7
 MOVE.L CACHEF,A0
 ADD.L #20,A0
 MOVE #CACFLD-1,D4
QT_CKFLD MOVE.L FTABL(A2),A1
 JSR MMATCHER
 TST D0
 BEQ QT_FLD2
 ADD.L #65,A0
 DBF D4,QT_CKFLD
 JMP Q_ERROR

QT_FLD2 MOVE.L FNAME(A2),A1
 SUB.L #20,A0
 JSR MMATCHER
 TST D0
 BEQ QT_PARMA
 ADD.L #20+65,A0
 DBF D4,QT_CKFLD
 JMP Q_ERROR

QT_PARMA MOVE FTYPE(A2),QTYPE(A4)
 MOVE FDISP(A2),QDISP(A4)
 MOVE FSIZE(A2),QSIZE(A4)
 MOVE FRECN(A2),QDESC(A4)
 MOVE FIFIL(A2),QCAPS(A4)

 ADD.L #QSZ,A4
 MOVE #1,D5

QT_303 TST FCONN(A2)
 BEQ QT_304
 ADD.L #EV_FSZ,A2
 JMP QT_302

QT_304 TST D5
 BEQ QT_305

 CLR QTYPE(A4)

 MOVE #1,D0
 TST FCONN(A2)
 BNE QT_306
 CLR D0
QT_306 MOVE.L FNAME(A3),A0
 MOVE FTYPE(A3),D1 ;Indexed table flag
 JSR Q_SORT
 TST D0
 BMI QT_ERROR
 BNE QT_305

 MOVE.L Q_TBL,A3
 MOVE #1,FBOOL(A3)
 MOVE D1,FPARN(A3)

QT_305 MOVE.L Q_TBL,A3
 TST FCONN(A3)
 BEQ QT_DONE
 ADD.L #EV_FSZ,A3
 MOVE.L A3,Q_TBL
 JMP QT_300

QT_DONE CLR D0
 RTS

QT_ERROR MOVE #-1,D0
 RTS

****************************************
* SORT A TABLE                         *
* D0 = 1 Force file to disk            *
* A0 = Table name                      *
* D1 = 1 Table is indexed              *
* --Returns--                          *
* D0 = 0 - Pointer is to pointer table *
*      1 - Sorted info saved to table  *
* D1 = # of records                    *
* A1 = Pointer                         *
****************************************

Q_SORT MOVE D0,Q_FLAG
 MOVE D1,Q_INDEX
 MOVE.L A0,Q_NAME

 MOVE.L CACHET,A1
 MOVE #CACTBL-1,D4
Q_S10 JSR MMATCHER
 TST D0
 BEQ Q_S11
 ADD.L #48,A1
 DBF D4,Q_S10
 MOVE #236,D7
 JMP Q_ERROR

Q_S11 ADD.L #20,A1

 LEA Q_TABL,A2
 LEA Q_PATH,A3
 MOVE #18,D0
Q_12 TST.B (A1)
 BEQ Q_13
 MOVE.B (A1),(A3)+
 MOVE.B (A1)+,(A2)+
 DBF D0,Q_12

Q_13 CLR.B (A3)

 MOVE #12,D0
 MOVE.L Q_NAME,A1
Q_14 TST.B (A1)
 BEQ Q_15
 MOVE.B (A1)+,(A2)+
 DBF D0,Q_14

Q_15 MOVE.B #'.',(A2)+
 MOVE.B #'T',(A2)+
 MOVE.B #'B',(A2)+
 MOVE.B #'L',(A2)+
 CLR.B (A2)

 JSR F_SETDTA
 MOVE #230,D7
 LEA Q_TABL,A0
 JSR F_SFIRST
 TST D0
 BMI Q_ERROR

* Calculate # of records to sort in memory =
* (Filesize/(Recordsize+10+4))/(heapsize/(Recordsize+10+4))
* 10 - Stack space  4 - Pointer table space

 MOVE #234,D7
 MOVE.L Q_NAME,A0
 CLR D1
 JSR CAL_ROW
 MOVE D0,Q_RECSZ
 CMP #2,D0
 BEQ Q_ERROR

 MOVE.L DTA+26,D1
 TST.L D1
 BEQ Q_ERROR
 AND.L #$FFFF,D0
 DIVU D0,D1
 MOVE D1,Q_TTLRECS

 AND.L #$FFFF,D0
 ADD #14,D0
 MOVE.L Q_SIZE,D1
 DIVU D0,D1
 AND.L #$FFFF,D1
 MOVE.L D1,Q_MAXREC

 CLR.L D0
 MOVE Q_TTLRECS,D0
 CMP.L Q_MAXREC,D0
 BCS Q_102
 MOVE #1,Q_INMEM

Q_102 LEA Q_TABL,A0
 JSR F_OPEN
 MOVE D0,FHNDL

 TST D0
 BPL Q_103
 LEA Q_TABL,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ Q_102
 MOVE #230,D7
 JMP Q_ERROR

Q_103 CLR Q_BLOCK

*----------Sort a block------------

Q_LOOP CLR.L D0   ;Where do we load the data?
 MOVE Q_TTLRECS,D0
 TST Q_INMEM
 BEQ Q_105
 MOVE.L Q_MAXREC,D0
Q_105 MULU #4,D0
 ADD.L #4,D0
 ADD.L Q_HEAP,D0
 MOVE.L D0,A1

 MOVE.L Q_HEAP,A0  ;Init the pointer table
 CLR.L D2
 MOVE Q_RECSZ,D2
 CLR.L D1
 MOVE Q_TTLRECS,D1
 TST Q_INMEM
 BEQ Q_106
 MOVE.L Q_MAXREC,D1
Q_106 MOVE.L D0,(A0)+
 ADD.L D2,D0
 SUB.L #1,D1
 TST.L D1
 BPL Q_106

 MOVE.L Q_MAXREC,D0  ;Read the data
 MULU Q_RECSZ,D0
 MOVE FHNDL,A0
 JSR F_READ
 TST.L D0
 BEQ Q_LEVEL2
 BPL Q_108

 LEA Q_DIS1,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ Q_LOOP
 MOVE FHNDL,A0
 JSR F_CLOSE
 MOVE #233,D7
 JMP Q_ERROR

Q_108 DIVU Q_RECSZ,D0
 MOVE D0,Q_RECS

 AND.L #$FFFF,D0
 SUB #1,D0
 MOVE D0,-(A7)
 MOVE D0,-(A7)
 CLR -(A7)
 MOVE.L Q_HEAP,-(A7)
 JSR QUICK_SORT
 ADD.L #10,A7

 MOVE #255,D7
 JSR KEYSTOP
 TST D0
 BNE Q_DISKER

 TST Q_INMEM
 BEQ Q_107

*----Save block to temporary file-----

Q_701 CLR.L D0
 MOVE Q_BLOCK,D0
 MULU #14,D0
 ADD.L #QS_NAME,D0
 MOVE.L D0,A0
 MOVE.L D0,A2
 JSR Q_ADDPTH
 JSR F_CREATE
 MOVE D0,Q_FTEMP
 TST D0
 BPL Q_700

 MOVE.L A2,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ Q_701
 MOVE #235,D7
 JMP Q_ERROR

Q_700 CLR Q_COUNT
 MOVE.L Q_HEAP,Q_POINT

Q_200 MOVE.L Q_POINT,A1
 MOVE.L (A1),A1
 ADD.L #4,Q_POINT
 CLR.L D0
 MOVE Q_RECSZ,D0
 MOVE.L D0,D6
 MOVE Q_FTEMP,A0
 JSR F_WRITE
 TST.L D0
 BMI Q_702
 CMP.L D6,D0
 BEQ Q_201

Q_702 LEA Q_DIS2,A0
 JSR DISK_ERR

 MOVE Q_FTEMP,A0
 JSR F_CLOSE
 MOVE FHNDL,A0
 JSR F_CLOSE
 MOVE #233,D7
 JMP Q_DISKER

Q_201 ADD #1,Q_COUNT
 MOVE Q_COUNT,D0
 CMP Q_RECS,D0
 BNE Q_200

 MOVE Q_FTEMP,A0
 JSR F_CLOSE

 MOVE #232,D7
 JSR KEYSTOP
 TST D0
 BNE Q_DISKER

Q_NESC MOVE #231,D7
 ADD #1,Q_BLOCK
 CMP #8,Q_BLOCK
 BNE Q_LOOP
 JMP Q_ERROR

*--------Sort temporary files----------

Q_LEVEL2 MOVE FHNDL,A0
 JSR F_CLOSE

Q_303 LEA QS_FIN,A0
 JSR Q_ADDPTH
 JSR F_CREATE
 MOVE D0,FHNDL
 TST D0
 BPL Q_302

 LEA QS_FIN,A0
 JSR Q_ADDPTH
 JSR DISK_ERR
 CMP #-2,D0
 BEQ Q_303
 MOVE #233,D7
 JMP Q_DISKER

Q_302 MOVE #7,D0
 LEA Q_FDONE,A0
 LEA Q_HANDLE,A1
Q_300 CLR (A0)+
 MOVE #-1,(A1)+
 DBF D0,Q_300

 CLR Q_COUNT
Q_301 CLR.L D0
 MOVE Q_COUNT,D0
 MULU #14,D0
 ADD.L #QS_NAME,D0
 MOVE.L D0,A0
 MOVE.L D0,Q_ERRNM
 JSR Q_ADDPTH
 JSR F_OPEN
 TST D0
 BPL Q_304

 MOVE.L Q_ERRNM,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ Q_301
 MOVE #233,D7
 JMP Q_DISKER

Q_304 CLR.L D1
 MOVE Q_COUNT,D1
 LSL #1,D1
 ADD.L #Q_HANDLE,D1
 MOVE.L D1,A0
 MOVE D0,(A0)

 ADD #1,Q_COUNT
 MOVE Q_COUNT,D0
 CMP Q_BLOCK,D0
 BNE Q_301

*-------Read records from temporary files-------

 CLR.L D0
 MOVE Q_RECSZ,D0
 ADD #5,D0
 AND #$FFFE,D0
 MOVE D0,Q_EVEN

 CLR Q_COUNT

Q_430 CLR.L D0
 MOVE Q_COUNT,D0
 LSL #1,D0
 ADD.L #Q_HANDLE,D0
 MOVE.L D0,A1
 MOVE (A1),D0
 MOVE D0,A0

 CLR.L D0
 MOVE Q_EVEN,D0
 MULU Q_COUNT,D0
 ADD.L Q_HEAP,D0
 MOVE.L D0,A1

 CLR.L D0
 MOVE Q_RECSZ,D0
 MOVE.L D0,D5
 JSR F_READ
 CMP.L D0,D5
 BEQ Q_432

 LEA Q_DIS1,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ Q_430
 JSR Q_CLOSE
 MOVE FHNDL,A0
 JSR F_CLOSE
 MOVE #233,D7
 JMP Q_DISKER

Q_432 ADD #1,Q_COUNT
 MOVE Q_COUNT,D0
 CMP Q_BLOCK,D0
 BNE Q_430

*-------Find greatest/least record-------

Q_SISORT CLR Q_SEQ
 LEA Q_SEQ,A0
 LEA Q_FDONE,A1
 CLR D0
Q_451 TST (A1)+
 BNE Q_452
 MOVE D0,(A0)+
Q_452 ADD #1,D0
 CMP #8,D0
 BNE Q_451

 CMP #1,Q_BLOCK
 BLE Q_407

 MOVE #1,Q_J  ;DO Q_J=2 TO N

Q_DO12 CLR.L D0   ;A=ARR(Q_J)
 MOVE Q_J,D0
 LSL #1,D0
 ADD.L #Q_SEQ,D0
 MOVE.L D0,A0
 MOVE (A0),Q_A

 MOVE Q_J,Q_I     ;DO I=J-1 TO 1 STEP -1
 SUB #1,Q_I

Q_DO11 CLR.L D0   ;IF ARR(I)<=A THEN Q_10
 MOVE Q_I,D0
 LSL #1,D0
 ADD.L #Q_SEQ,D0
 MOVE.L D0,A0
 CLR.L D0
 MOVE (A0),D0
 MULU Q_EVEN,D0
 ADD.L Q_HEAP,D0
 MOVE.L D0,A0

 CLR.L D0
 MOVE Q_A,D0
 MULU Q_EVEN,D0
 ADD.L Q_HEAP,D0
 MOVE.L D0,A1

 JSR LITLSORT
 TST D0
 BEQ Q_10

 CLR.L D0   ;ARR(I+1)=ARR(I)
 MOVE Q_I,D0
 LSL #1,D0
 ADD.L #Q_SEQ,D0
 MOVE.L D0,A0
 MOVE (A0),2(A0)

 TST Q_I
 BEQ Q_DO11B
 SUB #1,Q_I
 JMP Q_DO11

Q_DO11B CLR Q_I  ;I=0
 CLR.L D0
 JMP Q_11

Q_10 CLR.L D0  ;ARR(I+1)=A
 MOVE Q_I,D0
 ADD #1,D0
Q_11 LSL #1,D0
 ADD.L #Q_SEQ,D0
 MOVE.L D0,A0
 MOVE Q_A,(A0)

 ADD #1,Q_J
 MOVE Q_J,D0
 CMP Q_BLOCK,D0
 BNE Q_DO12

*---------Save greatest record--------

Q_407 MOVE #232,D7  ;ESC Key pressed?
 JSR KEYSTOP
 TST D0
 BNE Q_DISKER

Q_460 CLR.L D0
 MOVE Q_SEQ,D0
 MULU Q_EVEN,D0
 ADD.L Q_HEAP,D0
 MOVE.L D0,A1

 MOVE FHNDL,A0
 CLR.L D0
 MOVE Q_RECSZ,D0
 MOVE.L D0,D6
 JSR F_WRITE
 CMP.L D6,D0
 BEQ Q_461

 LEA Q_DIS2,A0
 JSR DISK_ERR
 MOVE FHNDL,A0
 JSR F_CLOSE
 JMP Q_DISKER

Q_461 CLR.L D0
 MOVE Q_SEQ,D0
 LSL #1,D0
 ADD.L #Q_HANDLE,D0
 MOVE.L D0,A0
 CLR.L D0
 MOVE (A0),D0
 MOVE D0,A0

 CLR.L D0
 MOVE Q_SEQ,D0
 MULU Q_EVEN,D0
 ADD.L Q_HEAP,D0
 MOVE.L D0,A1

 CLR.L D0
 MOVE Q_RECSZ,D0
 MOVE.L D0,D6
 JSR F_READ
 CMP.L D6,D0
 BEQ Q_SISORT

 CLR.L D0
 MOVE Q_SEQ,D0
 LSL #1,D0
 ADD.L #Q_FDONE,D0
 MOVE.L D0,A0
 MOVE #1,(A0)

 SUB #1,Q_BLOCK
 TST Q_BLOCK
 BNE Q_SISORT

*--------CLOSE ALL FILES------

Q_FINAL MOVE FHNDL,A0
 JSR F_CLOSE
 JSR Q_CLOSE
 JMP Q_REP1

*---------CLOSE & DELETE ALL TEMPORARY FILES----------

Q_CLOSE CLR Q_COUNT
Q_501 CLR.L D1
 MOVE Q_COUNT,D1
 LSL #1,D1
 ADD.L #Q_HANDLE,D1
 MOVE.L D1,A0
 MOVE (A0),D0
 TST D0
 BMI Q_503
 MOVE D0,A0
 JSR F_CLOSE
Q_503 ADD #1,Q_COUNT
 CMP #8,Q_COUNT
 BNE Q_501

 CLR Q_COUNT
Q_502 CLR.L D0
 MOVE Q_COUNT,D0
 MULU #14,D0
 ADD.L #QS_NAME,D0
 MOVE.L D0,A0
 JSR Q_ADDPTH
 JSR F_DELETE
 ADD #1,Q_COUNT
 CMP #8,Q_COUNT
 BNE Q_502
 RTS

*------All records fit into memory-----

Q_107 MOVE FHNDL,A0
 JSR F_CLOSE

 TST Q_FLAG
 BEQ Q_MEMORY

Q_DE3 LEA QS_FIN,A0
 JSR Q_ADDPTH
 JSR F_CREATE
 MOVE D0,FHNDL
 TST D0
 BPL Q_DE2

 LEA QS_FIN,A0
 JSR Q_ADDPTH
 JSR DISK_ERR
 CMP #-2,D0
 BEQ Q_DE3
 JMP Q_DISKER

Q_DE2 CLR Q_COUNT
 MOVE.L Q_HEAP,A4

Q_500 MOVE.L (A4)+,A1
 CLR.L D0
 MOVE Q_RECSZ,D0
 MOVE.L D0,D5
 MOVE FHNDL,A0
 JSR F_WRITE
 CMP.L D5,D0
 BNE Q_DICK
 TST.L D0
 BPL Q_NDKER

Q_DICK LEA Q_DIS2,A0
 JSR DISK_ERR
 JMP Q_DISKER

Q_NDKER ADD #1,Q_COUNT
 MOVE Q_COUNT,D0
 CMP Q_RECS,D0
 BNE Q_500

 MOVE FHNDL,A0
 JSR F_CLOSE

Q_REP1 LEA Q_TABL,A0
 JSR F_DELETE
 TST D0
 BPL Q_REP2

 LEA Q_TABL,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ Q_REP1
 JMP Q_DISKER

Q_REP2 LEA QS_FIN,A0
 JSR Q_ADDPTH
 MOVE.L A0,A1
 LEA Q_TABL,A0
 JSR F_RENAME
 TST D0
 BPL Q_REP3

 LEA Q_DIS3,A0
 JSR DISK_ERR
 JMP Q_DISKER

Q_REP3 TST Q_INDEX
 BEQ Q_REP4
 MOVE.L Q_NAME,A0
 JSR REORGANIZE
 TST D0
 BMI Q_ERROR

Q_REP4 MOVE Q_TTLRECS,D1
 MOVE #1,D0
 RTS

Q_MEMORY MOVE.L Q_HEAP,A0
 MOVE Q_TTLRECS,D1
 CLR D0
 RTS

Q_ADDPTH LEA PTHNM,A2  ;Add path to file name
 LEA Q_PATH,A3
 MOVE #20,D0
Q_ADD2 TST.B (A3)
 BEQ Q_ADD3
 MOVE.B (A3)+,(A2)+
 DBF D0,Q_ADD2
Q_ADD3 MOVE #20,D0
Q_ADD4 TST.B (A0)
 BEQ Q_ADD5
 MOVE.B (A0)+,(A2)+
 DBF D0,Q_ADD4
Q_ADD5 CLR.B (A2)+
 LEA PTHNM,A0
 RTS

Q_DISKER JSR Q_CLOSE

Q_ERROR MOVE #-1,D0
 RTS

Q_DIS1 DC.B 'Sort: Disk Read Error',0
Q_DIS2 DC.B 'Sort: Disk Write Error',0
Q_DIS3 DC.B 'Sort: Could not rename files',0
 EVEN

*************************************
* QUICK SORT                        *
* by Charles Johnson 12/3/87        *
* Modified by Frank Cohen 12/9/87   *
* --------------------------------- *
* Enter with the following on stack *
* # of records, -(A7)               *
* End Rec #,-(a7)                   *
* Start Rec #,-(a7)                 *
* Adr of table in memory,-(A7)      *
*************************************

QUICK_SORT link a6,#-8
 move 12(a6),-2(a6) ; low=start
 move 14(a6),-4(a6) ; high=end
 clr d0
 move 12(a6),d0
 add 14(a6),d0
 lsr #1,d0
 lsl #2,d0
 move.l 8(a6),a0
 add d0,a0
 move.l (a0),-8(a6) ; list_separator
l2 jmp l5
l6 add #1,-2(a6)
l5 move -2(a6),d0 ; Low
 lsl #2,d0
 move.l 8(a6),a0  ; Add to start of array
 add d0,a0
 move.l (a0),-(a7)    ; Push this pointer on the stack
 move.l -8(a6),-(a7)  ; list_separator
 jsr COMP_ASCEN
 add #8,a7
 tst d0
 bne l6
l7 jmp l8
l9 subq #1,-4(a6)
l8 move.l -8(a6),-(a7)
 move -4(a6),d0
 lsl #2,d0
 move.l 8(a6),a0
 add d0,a0
 move.l (a0),-(a7)
 jsr COMP_ASCEN
 add #8,a7
 tst d0
 bne l9

l10 move -2(a6),d0
 cmp -4(a6),d0
 bge l11
 move -4(a6),d0
 subq #1,-4(a6)
 lsl #2,d0
 move.l 8(a6),a0
 add d0,a0

 move -2(a6),d0
 add #1,-2(a6)
 lsl #2,d0
 move.l 8(a6),a1
 add d0,a1

 move.l (a0),d0    ; Exchange pointers
 move.l (a1),(a0)
 move.l d0,(a1)
 jmp l12

l11 move -2(a6),d0
 cmp -4(a6),d0
 bne l13
 add #1,-2(a6)
l13 tst d0
l12 tst d0
l3 move -2(a6),d0
 cmp -4(a6),d0
 ble l2
l4 move 12(a6),d0
 cmp -4(a6),d0
 bge l14
 move -4(a6),-(a7)
 move 12(a6),-(a7)
 move.l 8(a6),-(a7)
 jsr QUICK_SORT
 add #8,a7
l14 move -2(a6),d0
 cmp 14(a6),d0
 bge l15
 move 14(a6),-(a7)
 move -2(a6),-(a7)
 move.l 8(a6),-(a7)
 jsr QUICK_SORT
 add #8,a7
l15 tst d0
l1 unlk a6
 rts

********************
* SORT TWO RECORDS *
********************

LITLSORT MOVE.L A0,COMPA0
 MOVE.L A1,COMPA1
 JMP CO_STRT

COMP_ASCEN MOVE.L 4(A7),COMPA0
 MOVE.L 8(A7),COMPA1

CO_STRT LEA Q_PARAM,A4

CO_LOOP MOVE.L COMPA0,A0
 MOVE.L COMPA1,A1

 CLR.L D0
 MOVE QDISP(A4),D0
 ADD.L D0,A0
 ADD.L D0,A1

 MOVE QSIZE(A4),D1

 MOVE QTYPE(A4),D0
 CMP.B #'C',D0
 BEQ CO_TXT
 CMP.B #'D',D0
 BEQ CO_NUM
 CMP.B #'I',D0
 BEQ CO_NUM

CO_DATE TST QDESC(A4)
 BNE CO_DATE2

 MOVE.B 4(A1),D0
 CMP.B 4(A0),D0
 BLT CO_SWAP
 BGT CO_OK
 MOVE.B 5(A1),D0
 CMP.B 5(A0),D0
 BLT CO_SWAP
 BGT CO_OK

 MOVE.B (A1),D0
 CMP.B (A0),D0
 BLT CO_SWAP
 BGT CO_OK
 MOVE.B 1(A1),D0
 CMP.B 1(A0),D0
 BLT CO_SWAP
 BGT CO_OK

 MOVE.B 2(A1),D0
 CMP.B 2(A0),D0
 BLT CO_SWAP
 BGT CO_OK
 MOVE.B 3(A1),D0
 CMP.B 3(A0),D0
 BLT CO_SWAP
 BGT CO_OK
 JMP CO_NEXT

CO_DATE2 MOVE.B 4(A1),D0
 CMP.B 4(A0),D0
 BLT CO_SWAP
 BGT CO_OK
 MOVE.B 5(A1),D0
 CMP.B 5(A0),D0
 BGT CO_SWAP
 BLT CO_OK

 MOVE.B (A1),D0
 CMP.B (A0),D0
 BGT CO_SWAP
 BLT CO_OK
 MOVE.B 1(A1),D0
 CMP.B 1(A0),D0
 BGT CO_SWAP
 BLT CO_OK

 MOVE.B 2(A1),D0
 CMP.B 2(A0),D0
 BGT CO_SWAP
 BLT CO_OK
 MOVE.B 3(A1),D0
 CMP.B 3(A0),D0
 BGT CO_SWAP
 BLT CO_OK
 JMP CO_NEXT

CO_NUM TST QDESC(A4)
 BEQ CO_NUM1

CO_NUM2 CMP.B (A0)+,(A1)+
 BGT CO_SWAP
 BLT CO_OK
 SUB #1,D1
 BNE CO_NUM2
 JMP CO_NEXT

CO_NUM1 CMP.B (A0)+,(A1)+
 BLT CO_SWAP
 BGT CO_OK
 SUB #1,D1
 BNE CO_NUM1
 JMP CO_NEXT

CO_TXT TST QCAPS(A4)
 BNE CO_TXT2
 TST QDESC(A4)
 BNE CO_TXT3

CO_100 CMP.B (A0)+,(A1)+
 BLT CO_SWAP
 BGT CO_OK
 SUB #1,D1
 TST D1
 BNE CO_100
 JMP CO_NEXT

CO_TXT3 CMP.B (A0)+,(A1)+   ;Descending order
 BGT CO_SWAP
 BLT CO_OK
 SUB #1,D1
 TST D1
 BNE CO_TXT3
 JMP CO_NEXT

CO_TXT2 TST QDESC(A4)  ;Ignore caps
 BNE CO_TXT4

CO_1 MOVE.B (A0)+,D0
 CMP.B #'a',D0
 BLT CO_2
 CMP.B #'z',D0
 BGT CO_2
 SUB.B #32,D0

CO_2 MOVE.B (A1)+,D2
 CMP.B #'a',D2
 BLT CO_3
 CMP.B #'z',D2
 BGT CO_3
 SUB.B #32,D2

CO_3 CMP.B D0,D2
 BLT CO_SWAP
 BGT CO_OK
 SUB #1,D1
 TST D1
 BNE CO_1
 JMP CO_NEXT

CO_TXT4 MOVE.B (A0)+,D0 ;Descending order Ignore caps
 CMP.B #'a',D0
 BLT CO_8
 CMP.B #'z',D0
 BGT CO_8
 SUB.B #32,D0

CO_8 MOVE.B (A1)+,D2
 CMP.B #'a',D2
 BLT CO_9
 CMP.B #'z',D2
 BGT CO_9
 SUB.B #32,D2

CO_9 CMP.B D0,D2
 BGT CO_SWAP
 BLT CO_OK
 SUB #1,D1
 TST D1
 BNE CO_TXT4

CO_NEXT ADD.L #QSZ,A4
 TST (A4)
 BNE CO_LOOP

CO_OK CLR D0
 RTS
CO_SWAP MOVE #1,D0
 RTS

QS_NAME DC.B 'SORTING1.$$$',0,0
 DC.B 'SORTING2.$$$',0,0
 DC.B 'SORTING3.$$$',0,0
 DC.B 'SORTING4.$$$',0,0
 DC.B 'SORTING5.$$$',0,0
 DC.B 'SORTING6.$$$',0,0
 DC.B 'SORTING7.$$$',0,0
 DC.B 'SORTING8.$$$',0,0
QS_FIN DC.B 'SORTED.$$$',0,0
 EVEN

**************************************
* SAVE SORTED TABLE TO DISK          *
* A0 = Ptr to Table structure        *
* ---returns------------------------ *
* D0 = -1 if error D7 = error code   *
**************************************

*233 Disk I/O error

QS_SAVE MOVE.L A0,A4

 TST FBOOL(A4)
 BEQ QS_SDONE

QS_S100 LEA QS_FIN,A0
 JSR Q_ADDPTH
 JSR F_CREATE
 MOVE D0,FHNDL
 TST D0
 BPL QS_S101

 LEA QS_FIN,A0
 JSR Q_ADDPTH
 JSR DISK_ERR
 CMP #-2,D0
 BEQ QS_S100
 JMP Q_DISKER

QS_S101 CLR Q_COUNT
 MOVE.L Q_HEAP,A3
 MOVE FPARN(A4),Q_RECS
 MOVE #233,D7

QS_S102 MOVE.L (A3)+,A1
 CLR.L D0
 MOVE FSIZE(A4),D0
 MOVE.L D0,D6
 MOVE FHNDL,A0
 JSR F_WRITE
 CMP.L D6,D0
 BEQ QS_S103

 LEA Q_DIS2,A0
 JSR DISK_ERR
 MOVE FHNDL,A0
 JSR F_CLOSE
 JMP QS_SERR

QS_S103 ADD #1,Q_COUNT
 MOVE Q_COUNT,D0
 CMP Q_RECS,D0
 BNE QS_S102

 MOVE FHNDL,A0
 JSR F_CLOSE

QS_S104 MOVE.L FVAL2(A4),A0
 JSR F_DELETE
 TST D0
 BPL QS_S105
 LEA Q_TABL,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ QS_S104
 JMP Q_DISKER

QS_S105 LEA QS_FIN,A0
 JSR Q_ADDPTH
 MOVE.L A0,A1
 MOVE.L FVAL2(A4),A0
 JSR F_RENAME
 TST D0
 BPL QS_S106

 LEA Q_DIS3,A0
 JSR DISK_ERR
 JMP Q_DISKER

QS_S106 CLR FBOOL(A4)
 CLR FAGGR(A4)

 TST FTYPE(A4)
 BEQ QS_SDONE

 MOVE.L FNAME(A4),A0
 JSR REORGANIZE
 TST D0
 BMI Q_ERROR

QS_SDONE CLR D0
 RTS

QS_SERR MOVE #-1,D0
 RTS

**************************************
* REORGANIZE A TABLE & REBUILD INDEX *
* A0 = Table name                    *
* ---returns------------------------ *
* D0 = -1 if error D7 = error code   *
**************************************

*Errors
* 250 Table not found
* 251 Disk I/O Error
* 252 No field definitions found for that table
* 253 Table disk file not found
* 254 Index disk file not found
* 255 ESC key pressed

REORGANIZE MOVE.L A0,R_TABLE

 JSR LDCACHE
 TST D0
 BMI R_ERROR

 MOVE.L CACHET,A1
 MOVE #CACTBL-1,D4
 MOVE.L R_TABLE,A0
R_10 JSR MMATCHER
 TST D0
 BEQ R_11
 ADD.L #48,A1
 DBF D4,R_10
 MOVE #250,D7
 JMP R_ERROR

R_11 ADD.L #20,A1
 MOVE.L A1,A4

 LEA R_FILE,A2
 LEA R_INDEX,A3
 MOVE #18,D0
R_12 TST.B (A1)
 BEQ R_13
 MOVE.B (A1),(A2)+
 MOVE.B (A1)+,(A3)+
 DBF D0,R_12

R_13 MOVE #12,D0
 MOVE.L R_TABLE,A1
R_14 TST.B (A1)
 BEQ R_15
 MOVE.B (A1),(A2)+
 MOVE.B (A1)+,(A3)+
 DBF D0,R_14

R_15 MOVE.B #'.',(A2)+
 MOVE.B #'T',(A2)+
 MOVE.B #'B',(A2)+
 MOVE.B #'L',(A2)+
 CLR.B (A2)

 MOVE.B #'.',(A3)+
 MOVE.B #'I',(A3)+
 MOVE.B #'N',(A3)+
 MOVE.B #'D',(A3)+
 CLR.B (A3)

 LEA R_TFILE,A2
 LEA R_TIFILE,A3
 MOVE #18,D0
R_20 TST.B (A4)
 BEQ R_21
 CMP.B #' ',(A4)
 BEQ R_21
 MOVE.B (A4),(A2)+
 MOVE.B (A4),(A3)+
 ADD.L #1,A4
 DBF D0,R_20

R_21 LEA R_TEMPF,A0
 LEA R_TEMPI,A1
 MOVE #18,D0
R_22 MOVE.B (A0)+,(A2)+
 MOVE.B (A1)+,(A3)+
 DBF D0,R_22

 CLR D1
 MOVE.L R_TABLE,A0
 JSR CAL_ROW
 MOVE #252,D7
 CMP #2,D0
 BEQ R_ERROR
 MOVE D0,R_SIZE

 CLR R_SIZE2
 MOVE #1,D1
 MOVE.L R_TABLE,A0
 JSR CAL_ROW
 CMP #2,D0
 BEQ R_NOINDX
 MOVE D0,R_SIZE2

*--------Assign Field Definitions----------

R_NOINDX TST R_SIZE2
 BEQ R_NOPE

 CLR R_FLDCNT
 MOVE.L STR_REOR,A3

R_201 MOVE.L CACHEF,A4
 MOVE #CACFLD,D4

R_203 MOVE.L A4,A0
 ADD.L #20,A0
 MOVE.L R_TABLE,A1
 JSR MMATCHER
 TST D0
 BMI R_204

 ADD #1,R_FLDCNT
 MOVE.L A1,FTABL(A3)
 MOVE.L A4,FNAME(A3)

 MOVE.L A4,A0
 ADD.L #42,A0
 JSR CVAL
 MOVE D1,FDISP(A3)

 MOVE.L A4,A0
 ADD.L #47,A0
 JSR CVAL
 MOVE D1,FSIZE(A3)

 CLR D0
 MOVE.B 52(A4),D0
 SUB.B #'0',D0
 MOVE D0,FEXTR(A3)

 ADD.L #EV_FSZ,A3

R_204 ADD.L #65,A4
 SUB #1,D4
 BNE R_203

*-------Assign Index Definitions-------

 MOVE.L STR_INDX,A3
 CLR R_INDCNT

R_301 MOVE.L CACIND,A4
 MOVE #CACIDX,D4

R_303 MOVE.L A4,A0
 ADD.L #20,A0
 MOVE.L R_TABLE,A1
 JSR MMATCHER
 TST D0
 BMI R_304

 ADD #1,R_INDCNT
 MOVE.L A1,FTABL(A3)
 MOVE.L A4,FNAME(A3)

 MOVE.L A4,A0
 ADD.L #42,A0
 JSR CVAL
 MOVE D1,FDISP(A3)

 ADD.L #EV_FSZ,A3

R_304 ADD.L #65,A4
 SUB #1,D4
 BNE R_303

*-------Do some computn'--------

R_NOPE CLR.L D0
 MOVE R_SIZE,D0
 MULU #2,D0
 ADD R_SIZE2,D0
 MOVE.L Q_SIZE,D1
 DIVU D0,D1
 MOVE D1,R_MAXREC

 JSR F_SETDTA
 MOVE #253,D7
 LEA R_FILE,A0
 JSR F_SFIRST
 TST D0
 BMI R_ERROR
 MOVE.L DTA+26,D0
 DIVU R_SIZE,D0
 MOVE D0,R_TTLRECS

*---------Open Tables & Load---------

R_OPAGN MOVE #251,D7
 LEA R_FILE,A0
 JSR F_OPEN
 TST D0
 BPL R_OPEND
 LEA R_FILE,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ R_OPAGN
 JMP R_ERROR

R_OPEND MOVE D0,FHNDL

R_CRTAGN LEA R_TFILE,A0
 JSR F_CREATE
 TST D0
 BPL R_CRTMP
 LEA R_TFILE,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ R_CRTAGN
 MOVE FHNDL,A0
 JSR F_CLOSE
 JMP R_ERROR

R_CRTMP MOVE D0,FHNDL+2

 TST R_SIZE2
 BEQ R_NOCRT

R_CRAGN LEA R_TIFILE,A0
 JSR F_CREATE
 TST D0
 BPL R_CRIT
 LEA R_INDEX,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ R_CRAGN

 MOVE FHNDL,A0
 JSR F_CLOSE
 MOVE FHNDL+2,A0
 JSR F_CLOSE
 JMP R_ERROR

R_CRIT MOVE D0,FHNDL+4

*---------Parse tables--------

R_NOCRT CLR R_FINRECS

 MOVE.L Q_HEAP,A1
 MOVE FHNDL,A0
 CLR.L D0
 MOVE R_MAXREC,D0
 MULU R_SIZE,D0
 JSR F_READ
 TST.L D0
 BPL R_PARSE
 LEA R_DIS1,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ R_NOCRT
 JSR R_CLOSER
 JMP R_ERROR

R_PARSE TST.L D0
 BEQ R_END
 MOVE.L D0,D1

 DIVU R_SIZE,D0
 MOVE D0,R_RECS

 OR.L #1,D1
 AND.L #$FFFFFFFE,D1
 MOVE.L D1,D2
 ADD.L Q_HEAP,D1
 MOVE.L D1,R_DESTPTR  ;Table destination pointer
 MOVE.L D1,R_DESTPTR+4

 ADD.L D2,D1
 MOVE.L D1,R_INDXPTR  ;Index destination pointer
 MOVE.L D1,R_INDXPTR+4

 MOVE.L Q_HEAP,R_SOURCE ;Source pointer

*-----------Remove Deleted Records------------

R_LOOP MOVE.L R_SOURCE,A0
 MOVE R_SIZE,D0
 SUB #3,D0
R_CHECK TST.B (A0)+
 BNE R_SCORED
 DBF D0,R_CHECK
 JMP R_FAILED

R_SCORED MOVE.L R_SOURCE,A0
 MOVE.L R_DESTPTR,A1
 MOVE R_SIZE,D0
 SUB #1,D0
R_MOVE MOVE.B (A0)+,(A1)+
 DBF D0,R_MOVE

 ADD #1,R_FINRECS

 CLR.L D0
 MOVE R_SIZE,D0
 ADD.L R_DESTPTR,D0
 MOVE.L D0,R_DESTPTR

 TST R_SIZE2
 BEQ R_FAILED

 CLR.L D0
 MOVE R_SIZE2,D0
 SUB #2,D0
 ADD.L R_INDXPTR,D0
 MOVE.L D0,A0
 MOVE.B #13,(A0)
 MOVE.B #10,1(A0)

 MOVE.L STR_REOR,A2
 MOVE R_FLDCNT,D5

R_NEXT MOVE.L STR_INDX,A3
 MOVE R_INDCNT,D4

R_NUTR MOVE.L FNAME(A2),A0
 MOVE.L FNAME(A3),A1
 JSR MMATCHER
 TST D0
 BMI R_INDAGN

 CLR.L D0
 MOVE FDISP(A2),D0
 ADD.L R_SOURCE,D0
 MOVE.L D0,A0

 CLR.L D0
 MOVE FDISP(A3),D0
 ADD.L R_INDXPTR,D0
 MOVE.L D0,A1

 CLR.L D0
 MOVE FSIZE(A2),D0
 SUB #1,D0
R_MOVE2 MOVE.B (A0)+,(A1)+
 DBF D0,R_MOVE2
 JMP R_NXTFLD

R_INDAGN ADD.L #EV_FSZ,A3
 SUB #1,D4
 BNE R_NUTR

R_NXTFLD ADD.L #EV_FSZ,A2
 SUB #1,D5
 BNE R_NEXT

 MOVE #255,D7  ;ESC Key pressed?
 JSR KEYSTOP
 TST D0
 BEQ R_NESC2
 JSR R_CLOSER
 JMP R_ERROR

R_NESC2 CLR.L D0
 MOVE R_SIZE2,D0
 ADD.L R_INDXPTR,D0
 MOVE.L D0,R_INDXPTR

R_FAILED CLR.L D0
 MOVE R_SIZE,D0
 ADD.L R_SOURCE,D0
 MOVE.L D0,R_SOURCE

 SUB #1,R_RECS
 TST R_RECS
 BNE R_LOOP

 MOVE.L R_DESTPTR+4,A1
 MOVE FHNDL+2,A0
 CLR.L D0
 MOVE R_FINRECS,D0
 MULU R_SIZE,D0
 JSR F_WRITE
 TST.L D0
 BPL R_WTBL
 LEA R_DIS1,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ R_NOCRT
 JSR R_CLOSER
 JMP R_ERROR

R_WTBL TST R_SIZE2
 BEQ R_NOCRT

 MOVE.L R_INDXPTR+4,A1
 MOVE FHNDL+4,A0
 CLR.L D0
 MOVE R_FINRECS,D0
 MULU R_SIZE2,D0
 JSR F_WRITE
 TST.L D0
 BPL R_NOCRT
 LEA R_DIS1,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ R_NOCRT
 JSR R_CLOSER
 JMP R_ERROR

R_END JSR R_CLOSER

R_FINAL1 LEA R_FILE,A0  ;Delete original table
 JSR F_DELETE
 TST D0
 BPL R_FINAL2
 LEA R_FILE,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ R_FINAL1
 JMP R_ERROR

R_FINAL2 TST R_SIZE2
 BEQ R_FINAL3

 LEA R_INDEX,A0  ;Delete index table
 JSR F_DELETE
 TST D0
 BPL R_FINAL3
 LEA R_FILE,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ R_FINAL2
 JMP R_ERROR

R_FINAL3 LEA R_FILE,A0
 LEA R_TFILE,A1
 JSR F_RENAME
 TST D0
 BPL R_FINAL4

 LEA R_DIS3,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ R_FINAL3
 JMP R_ERROR

R_FINAL4 TST R_SIZE2
 BEQ R_DONE

 LEA R_INDEX,A0
 LEA R_TIFILE,A1
 JSR F_RENAME
 TST D0
 BPL R_DONE

 LEA R_DIS3,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ R_FINAL4
 JMP R_ERROR

R_CLOSER MOVE FHNDL,A0
 JSR F_CLOSE
 MOVE FHNDL+2,A0
 JSR F_CLOSE
 TST R_SIZE2
 BEQ R_DONE
 MOVE FHNDL+4,A0
 JMP F_CLOSE

R_DONE CLR D0
 RTS

R_ERROR MOVE #-1,D0
 RTS

R_DIS1 DC.B 'Reorganize: Disk Read Error',0
R_DIS2 DC.B 'Reorganize: Disk Write Error',0
R_DIS3 DC.B 'Reorganize: Renaming files',0
R_TEMPF DC.B 'REORGT.$$$',0
R_TEMPI DC.B 'REORGI.$$$',0
 EVEN

*----------ABORT SORT-----------

SQL_ERROR MOVE D7,D0
 LEA ERRMES1+7,A3
 JSR CONV2DEC

 MOVE.L ERRADR,A0
 ADD #ERRCODE*OBSIZE,A0
 MOVE.L #ERRMES1,OB_SPEC(A0)

 MOVE.L ERRADR,A0
 MOVE #-1,D0
 JSR FORMDO
 JMP ABORTIT

ERRMES1 DC.B 'Error #0000',0
 EVEN

ABORTIT MOVE.L #ACTNUM*OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 MOVE.L OB_SPEC(A0),A0
 MOVE.L #ABRT,(A0)
 MOVE #ACTNUM,D0
 JSR OBJCDRAW
 JMP QUITIT

ABRT DC.B 'Abort',0
 EVEN

************************************
* CONVERT THE VALUE IN D0 TO ASCII *
* A3 POINTS TO ASCII BUFFER        *
************************************

CONV2DEC AND.L #$FFFF,D0
 DIVU #1000,D0
 MOVE.L D0,D1
 AND.L #15,D0
 ADD.B #'0',D0
 MOVE.B D0,(A3)

 SWAP D1
 AND.L #$FFFF,D1
 DIVU #100,D1
 MOVE.L D1,D0
 AND.L #15,D1
 ADD.B #'0',D1
 MOVE.B D1,1(A3)

 SWAP D0
 AND.L #$FFFF,D0
 DIVU #10,D0
 MOVE.L D0,D1
 AND.L #15,D0
 ADD.B #'0',D0
 MOVE.B D0,2(A3)

 SWAP D1
 AND.L #$FFFF,D1
 AND.L #15,D1
 ADD.B #'0',D1
 MOVE.B D1,3(A3)
 RTS

*-----------SHOW ACTIVITY-----------

ACTIVITY TST ACTFLAG
 BEQ NOACT
 MOVEM.L A0-A4/D0-D7,-(A7)

 ADD #1,ACTNUMB
 CLR.L D1
 CLR.L D3
 CLR.L ACTS
 LEA ACTS,A0

 MOVE ACTNUMB,D1
 DIVU #10000,D1
 MOVE.L D1,D0
 AND.L #15,D1
 BNE ACT101
 TST D3
 BEQ ACT102
ACT101 ADD.B #'0',D1
 MOVE.B D1,(A0)+
 MOVE #1,D3

ACT102 SWAP D0
 AND.L #$FFFF,D0
 DIVU #1000,D0
 MOVE.L D0,D1
 AND.L #15,D0
 BNE ACT103
 TST D3
 BEQ ACT104
ACT103 ADD.B #'0',D0
 MOVE.B D0,(A0)+
 MOVE #1,D3

ACT104 SWAP D1
 AND.L #$FFFF,D1
 DIVU #100,D1
 MOVE.L D1,D0
 AND.L #15,D1
 BNE ACT105
 TST D3
 BEQ ACT106
ACT105 ADD.B #'0',D1
 MOVE.B D1,(A0)+
 MOVE #1,D3

ACT106 SWAP D0
 AND.L #$FFFF,D0
 DIVU #10,D0
 MOVE.L D0,D1
 AND.L #15,D0
 BNE ACT107
 TST D3
 BEQ ACT108
ACT107 ADD.B #'0',D0
 MOVE.B D0,(A0)+

ACT108 SWAP D1
 AND.L #$FFFF,D1
 AND.L #15,D1
 ADD.B #'0',D1
 MOVE.B D1,(A0)+

 MOVE.L #ACTNUM*OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 MOVE.L OB_SPEC(A0),A0
 MOVE.L #ACTS,(A0)

 MOVE #ACTNUM,D0
 JSR OBJCDRAW

 MOVEM.L (A7)+,A0-A4/D0-D7
NOACT RTS

ACTNUMB DC 0
ACTS DC.B '     ',0
 EVEN

WAIT_KEY MOVE #7,-(A7)
 TRAP #1
 ADD #2,A7
 RTS

**************************
* CREATE AND OPEN FILE   *
* A0 POINTS TO FILE NAME *
* D0 RETURNS HANDLE      *
**************************

F_CREATE CLR -(A7)
 MOVE.L A0,-(A7)
 MOVE #60,-(A7)
 TRAP #1
 ADD #8,A7
 JMP ACTIVITY

**************************
* RENAME A FILE          *
* A0 NEW FILE NAME       *
* A1 OLD FILE NAME       *
* D0 RETURNS HANDLE      *
**************************

F_RENAME MOVE.L A0,-(A7)
 MOVE.L A1,-(A7)
 CLR -(A7)
 MOVE #86,-(A7)
 TRAP #1
 ADD.L #12,A7
 JMP ACTIVITY

**************************
* DELETE FILE            *
* A0 POINTS TO FILE NAME *
* D0 RETURNS HANDLE      *
**************************

F_DELETE MOVE.L A0,-(A7)
 MOVE #65,-(A7)
 TRAP #1
 ADD #6,A7
 JMP ACTIVITY

**************************
* SET DTA BUFFER ADRESS  *
* A0 POINTS TO BUFFER    *
**************************

F_SETDTA MOVE.L #DTA,-(A7)
 MOVE #26,-(A7)
 TRAP #1
 ADD.L #6,A7
 RTS

**************************
* FIND FIRST FILE DEF    *
* A0 POINTS TO FILE NAME *
* D0 RETURNS HANDLE      *
**************************

F_SFIRST CLR -(A7)
 MOVE.L A0,-(A7)
 MOVE #78,-(A7)
 TRAP #1
 ADD #8,A7
 JMP ACTIVITY

**************************
* OPEN DISK FILE         *
* A0 POINTS TO FILE NAME *
* D0 RETURNS HANDLE      *
**************************

F_OPEN MOVE #2,-(A7)
 MOVE.L A0,-(A7)
 MOVE #$3D,-(A7)
 TRAP #1
 ADD #8,A7
 JMP ACTIVITY

*************************
* MOVE TO START OF FILE *
* A0 = FILE HANDLE      *
*************************

F_START CLR -(A7)  ;F_seek
 MOVE A0,-(A7)
 CLR.L -(A7)
 MOVE #66,-(A7)
 TRAP #1
 ADD.L #10,A7
 JMP ACTIVITY

*************************
* SEEK FILE POINTER     *
* A0 = FILE HANDLE      *
* D0 = BYTE OFFSET      *
*************************

F_SEEK CLR -(A7)
 MOVE A0,-(A7)
 MOVE.L D0,-(A7)
 MOVE #66,-(A7)
 TRAP #1
 ADD.L #10,A7
 JMP ACTIVITY

*************************
* SEEK TO END OF FILE   *
* A0 = FILE HANDLE      *
* D0 = RETURN # OF BYTES*
*************************

F_END MOVE #2,-(A7)
 MOVE A0,-(A7)
 CLR.L -(A7)
 MOVE #66,-(A7)
 TRAP #1
 ADD.L #10,A7
 JMP ACTIVITY

*************************
* READ DISK FILE        *
* A0 = FILE HANDLE      *
* A1 = WHERE TO LOAD IT *
* D0 = NUMBER OF BYTES  *
*************************

F_READ MOVE.L A1,-(A7)
 MOVE.L D0,-(A7)
 MOVE A0,-(A7)
 MOVE #$3F,-(A7)
 TRAP #1
 ADD #12,A7
 JMP ACTIVITY

*************************
* WRITE DISK FILE       *
* A0 = FILE HANDLE      *
* A1 = BUFFER ADRESS    *
* D0 = NUMBER OF BYTES  *
*************************

F_WRITE MOVE.L A1,-(A7)
 MOVE.L D0,-(A7)
 MOVE A0,-(A7)
 MOVE #$40,-(A7)
 TRAP #1
 ADD #12,A7
 JMP ACTIVITY

*********************
* CLOSE DISK FILE   *
* A0 = FILE HANDLE  *
* D0 = ERROR CODE   *
*********************

F_CLOSE MOVE A0,-(A7)
 MOVE #$3E,-(A7)
 TRAP #1
 ADD #4,A7
 JMP ACTIVITY

*--------------NEW FIELD--------------

BUTN1 MOVE #1,SELECTED
 MOVE #PRIMARY,D0
 JMP BUTNDN

BUTN2 MOVE #2,SELECTED
 MOVE #SECONDRY,D0
 JMP BUTNDN

BUTN3 MOVE #3,SELECTED
 MOVE #TRIMARY,D0
 JMP BUTNDN

BUTNDN MOVE D0,HOLDIT
 JSR CLEARSL
 CLR.L D0
 MOVE HOLDIT,D0
 MULU #OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 MOVE #1,OB_STATE(A0)
 MOVE HOLDIT,D0
 JSR OBJCDRAW

 JSR WAITUP
 JMP EVENT2

*--------------OPTIONS--------------

ASCEND MOVE.L #ASCBUTN,D0
 JSR CHECKIT
 MOVE.L #DESBUTN,D0
 JSR UNCHECK
 CLR ASCDES
 JMP EVENT2

DESCEND MOVE.L #DESBUTN,D0
 JSR CHECKIT
 MOVE.L #ASCBUTN,D0
 JSR UNCHECK
 MOVE #1,ASCDES
 JMP EVENT2

NOCASE MOVE CASEFLAG,D0
 ADD #1,D0
 AND #1,D0
 MOVE D0,CASEFLAG

 MOVE.L #CASE,D0
 TST CASEFLAG
 BEQ UNCKD
 JMP CKD

NONULLS MOVE NULLFLAG,D0
 ADD #1,D0
 AND #1,D0
 MOVE D0,NULLFLAG

 MOVE.L #NULLS,D0
 TST NULLFLAG
 BEQ UNCKD
CKD JSR CHECKIT
 JMP EVENT2
UNCKD JSR UNCHECK
 JMP EVENT2

CHECKIT MOVE #4,D1
 JMP OBCHNG

UNCHECK CLR D1
 JMP OBCHNG

OBCHNG MOVE D0,D2

 MULU #OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 MOVE D1,OB_STATE(A0)

 MOVE D2,D0
 JMP OBJCDRAW

*------------SHOW FIELDS-------------

FCLEAR MOVE.L #CLEAR*OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 MOVE #1,OB_STATE(A0)
 MOVE #CLEAR,D0
 JSR OBJCDRAW

 MOVE #1,SELECTED

 MOVE.L #PRIMARY,D0
 JSR CALC2
 MOVE.L OB_SPEC(A0),A0
 MOVE.L (A0),A0
 MOVE.B #' ',(A0)+
 CLR.B (A0)

 MOVE.L #SECONDRY,D0
 JSR CALC2
 MOVE.L OB_SPEC(A0),A0
 MOVE.L (A0),A0
 MOVE.B #' ',(A0)+
 CLR.B (A0)

 MOVE.L #TRIMARY,D0
 JSR CALC2
 MOVE.L OB_SPEC(A0),A0
 MOVE.L (A0),A0
 MOVE.B #' ',(A0)+
 CLR.B (A0)

 JSR CLEARSL

 JSR WAITUP

 MOVE.L #CLEAR*OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 CLR OB_STATE(A0)
 MOVE #CLEAR,D0
 JSR OBJCDRAW

 JMP BUTN1

*------------SHOW FIELDS-------------

SHOWFLDS CLR.L D0
 MOVE FILEY,D0
 MULU #65,D0
 ADD.L #FLDINFO,D0
 MOVE.L D0,A2

 CLR COUNT

TALKN CLR.L D0
 MOVE COUNT,D0
 ADD #FLD1,D0
 MULU #OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A1
 MOVE.L OB_SPEC(A1),A1
 MOVE.L TE_PTEXT(A1),A1

 MOVE.L A2,A0

 MOVE.L #19,D0
TUBES TST.B (A0)
 BEQ WATER
 CMP.B #' ',(A0)
 BEQ WATER
 MOVE.B (A0)+,(A1)+
 DBF D0,TUBES
 JMP JAMES

WATER MOVE.B #' ',(A1)+
 DBF D0,WATER

JAMES ADD #65,A2

 ADD #1,COUNT
 CMP #8,COUNT
 BNE TALKN

 MOVE #FLD1,D0
 JSR OBJCDRAW
 MOVE #FLD2,D0
 JSR OBJCDRAW
 MOVE #FLD3,D0
 JSR OBJCDRAW
 MOVE #FLD4,D0
 JSR OBJCDRAW
 MOVE #FLD5,D0
 JSR OBJCDRAW
 MOVE #FLD6,D0
 JSR OBJCDRAW
 MOVE #FLD7,D0
 JSR OBJCDRAW
 MOVE #FLD8,D0
 JMP OBJCDRAW

*--------FIELD SELECT SLIDE BAR ACTION-------------

FPAGED MOVE.L #FTHUMB,D0
 JSR CALC2

 CLR.L D0
 MOVE OB_Y(A0),D0
 ADD #75,D0
 CMP MOUSEY,D0
 BCC FPAGEUP

FPAGEDN CMP #8,FILECNT
 BCS GETEVENT

 CLR.L D0
 MOVE FILEY,D0
 ADD #16,D0
 CMP FILECNT,D0
 BCC FPAGEBOT
 ADD #8,FILEY
 JMP FKINKY

FPAGEBOT CLR.L D0
 MOVE FILECNT,D0
 SUB #8,D0
 MOVE D0,FILEY
 JMP FKINKY

FPAGEUP CMP #8,FILEY
 BCS FPAGETOP
 SUB #8,FILEY
 JMP FKINKY
FPAGETOP CLR FILEY
 JMP FKINKY

FARROWUP TST FILEY
 BEQ EVENT2
 SUB #1,FILEY
 JMP FKINKY

FARROWDN CMP #8,FILECNT
 BCS EVENT2
 CLR.L D0
 MOVE FILECNT,D0
 SUB #9,D0
 CMP FILEY,D0
 BCS EVENT2
 ADD #1,FILEY
 JMP FKINKY

FMVTHUMB MOVE #76,CONTRL  ;GRAF_SLIDBOX  DRAG IT
 MOVE #3,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 MOVE #FSLIDER,INTIN
 MOVE #FTHUMB,INTIN+2
 MOVE #1,INTIN+4
 MOVE.L MAINADR,ADDRIN
 JSR AES

 CMP #8,FILECNT
 BCS EVENT2

 MOVE INTOUT,HOLDER

 MOVE #FLDNAMES,D0
 JSR OBJCDRAW

 MOVE.L #FSLIDER,D0
 JSR CALC2

 CLR.L D0
 MOVE FILECNT,D0
 MOVE.L #1000,D1
 DIVU D0,D1
 AND.L #$FFFF,D1
 CLR.L D2
 MOVE HOLDER,D2
 DIVU D1,D2
 AND.L #$FFFF,D2

 MOVE.L D2,D0
 ADD #16,D0
 CMP FILECNT,D0
 BCC FPAGEBOT

 MOVE D2,FILEY

FKINKY JSR SHOWFLDS

 CLR SLIDEPOS
 CLR.L D1
 MOVE FILECNT,D1
 CMP #8,D1
 BCS FKINKTOP
 SUB #8,D1

 CLR.L D0
 MOVE FILEY,D0
 MULU #1000,D0
 DIVU D1,D0
 AND.L #$FFFF,D0
 MOVE D0,SLIDEPOS

FKINKTOP MOVE.L #FTHUMB,D0
 JSR CALC2
 CLR.L D3
 MOVE OB_HEIGHT(A0),D3

 MOVE.L #FSLIDER,D0
 JSR CALC2

 CLR.L D0
 MOVE OB_HEIGHT(A0),D0
 SUB D3,D0
 MOVE.L #1000,D1
 DIVU D0,D1
 AND.L #$FFFF,D1
 CLR.L D2
 MOVE SLIDEPOS,D2
 DIVU D1,D2
 AND.L #$FFFF,D2

 MOVE.L #FTHUMB,D0
 JSR CALC2
 MOVE D2,OB_Y(A0)

FREPLOT MOVE #FSLIDER,D0
 JSR OBJCDRAW
 MOVE #FTHUMB,D0
 JSR OBJCDRAW
 JMP EVENT2

*------------CLEAR SELECTED FIELD-------------

CLEARSL CLR.L D0
 MOVE #PRIMARY*OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 CLR OB_STATE(A0)

 CLR.L D0
 MOVE #SECONDRY*OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 CLR OB_STATE(A0)

 CLR.L D0
 MOVE #TRIMARY*OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 CLR OB_STATE(A0)

 MOVE #PRIMARY,D0
 JSR OBJCDRAW

 MOVE #SECONDRY,D0
 JSR OBJCDRAW

 MOVE #TRIMARY,D0
 JMP OBJCDRAW

*--------------SHOW TABLES-------------

SHOWFILE JSR TRANSOFF
 CLR.L D0
 MOVE FILEY,D0
 MULU #48,D0
 ADD.L #TBLINFO,D0
 MOVE.L D0,A2

 CLR COUNT

TALKING CLR.L D0
 MOVE COUNT,D0
 ADD #TBL1,D0
 MULU #OBSIZE,D0
 ADD.L CHSADR,D0
 MOVE.L D0,A1
 MOVE.L OB_SPEC(A1),A1
 MOVE.L TE_PTEXT(A1),A1

 MOVE.L A2,A0

 MOVE #19,D0
HEADS TST.B (A0)
 BEQ HEADSR
 CMP.B #' ',(A0)
 BEQ HEADSR
 MOVE.B (A0)+,(A1)+
 DBF D0,HEADS
 JMP RICK

HEADSR MOVE.B #' ',(A1)+
 DBF D0,HEADSR

RICK ADD #48,A2

 ADD #1,COUNT
 CMP #8,COUNT
 BNE TALKING

 MOVE #TBL1,D0
 JSR OBJCDRAW
 MOVE #TBL2,D0
 JSR OBJCDRAW
 MOVE #TBL3,D0
 JSR OBJCDRAW
 MOVE #TBL4,D0
 JSR OBJCDRAW
 MOVE #TBL5,D0
 JSR OBJCDRAW
 MOVE #TBL6,D0
 JSR OBJCDRAW
 MOVE #TBL7,D0
 JSR OBJCDRAW
 MOVE #TBL8,D0
 JMP OBJCDRAW

*--------------SLIDE BAR ACTION-------------

PAGED MOVE.L #TTHUMB,D0
 JSR CALC

 CLR.L D0
 MOVE OB_Y(A0),D0
 ADD #85,D0
 CMP MOUSEY,D0
 BCC PAGEUP

PAGEDN CMP #8,FILECNT
 BCS GETEVENT

 CLR.L D0
 MOVE FILEY,D0
 ADD #16,D0
 CMP FILECNT,D0
 BCC PAGEBOT
 ADD #8,FILEY
 JMP KINKY

PAGEBOT CLR.L D0
 MOVE FILECNT,D0
 SUB #8,D0
 MOVE D0,FILEY
 JMP KINKY

PAGEUP CMP #8,FILEY
 BCS PAGETOP
 SUB #8,FILEY
 JMP KINKY
PAGETOP CLR FILEY
 JMP KINKY

ARROWUP TST FILEY
 BEQ GETEVENT
 SUB #1,FILEY
 JMP KINKY

ARROWDN CMP #8,FILECNT
 BCS GETEVENT
 CLR.L D0
 MOVE FILECNT,D0
 SUB #9,D0
 CMP FILEY,D0
 BCS GETEVENT
 ADD #1,FILEY
 JMP KINKY

MVTHUMB MOVE #76,CONTRL  ;GRAF_SLIDBOX  DRAG IT
 MOVE #3,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 MOVE #TSLIDER,INTIN
 MOVE #TTHUMB,INTIN+2
 MOVE #1,INTIN+4
 MOVE.L CHSADR,ADDRIN
 JSR AES

NADA CMP #8,FILECNT
 BCS GETEVENT

 MOVE INTOUT,HOLDER

 MOVE #TTABLES,D0
 JSR OBJCDRAW

 MOVE.L #TSLIDER,D0
 JSR CALC

 CLR.L D0
 MOVE FILECNT,D0
 MOVE.L #1000,D1
 DIVU D0,D1
 AND.L #$FFFF,D1
 CLR.L D2
 MOVE HOLDER,D2
 DIVU D1,D2
 AND.L #$FFFF,D2

 MOVE.L D2,D0
 ADD #16,D0
 CMP FILECNT,D0
 BCC PAGEBOT

 MOVE D2,FILEY

KINKY JSR SHOWFILE

 CLR SLIDEPOS
 CLR.L D1
 MOVE FILECNT,D1
 CMP #8,D1
 BCS KINKTOP
 SUB #8,D1

 CLR.L D0
 MOVE FILEY,D0
 MULU #1000,D0
 DIVU D1,D0
 AND.L #$FFFF,D0
 MOVE D0,SLIDEPOS

KINKTOP MOVE.L #TTHUMB,D0
 JSR CALC
 CLR.L D3
 MOVE OB_HEIGHT(A0),D3

 MOVE.L #TSLIDER,D0
 JSR CALC

 CLR.L D0
 MOVE OB_HEIGHT(A0),D0
 SUB D3,D0
 MOVE.L #1000,D1
 DIVU D0,D1
 AND.L #$FFFF,D1
 CLR.L D2
 MOVE SLIDEPOS,D2
 DIVU D1,D2
 AND.L #$FFFF,D2

 MOVE.L #TTHUMB,D0
 JSR CALC
 MOVE D2,OB_Y(A0)

REPLOT MOVE #TSLIDER,D0
 JSR OBJCDRAW
 MOVE #TTHUMB,D0
 JSR OBJCDRAW
 JMP GETEVENT

CALC MULU #OBSIZE,D0
 ADD.L CHSADR,D0
 MOVE.L D0,A0
 RTS

CALC2 MULU #OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 RTS

*---------------FIND OBJECT UNDER MOUSE----------------

OBJCFIND MOVE #43,CONTRL  ;OBJC_FIND
 MOVE #4,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 MOVE D0,INTIN
 CLR INTIN+2
 MOVE MOUSEX,INTIN+4
 MOVE MOUSEY,INTIN+6
 MOVE.L DRAWADR,ADDRIN
 JMP AES

*-------------------WAIT FOR MOUSE DOWN--------------------

WAITMOUSE MOVE #21,CONTRL
 MOVE #3,CONTRL+2
 MOVE #5,CONTRL+4
 CLR CONTRL+6
 CLR CONTRL+8
 MOVE #1,INTIN
 MOVE #1,INTIN+2
 MOVE #1,INTIN+4
 JSR AES
 MOVE INTOUT+2,MOUSEX
 MOVE INTOUT+4,MOUSEY
 RTS

MOUSEX DC 0
MOUSEY DC 0

*-----------------WAIT FOR MOUSE UP--------------------

WAITUP MOVE #21,CONTRL
 MOVE #3,CONTRL+2
 MOVE #5,CONTRL+4
 CLR CONTRL+6
 CLR CONTRL+8
 MOVE #1,INTIN
 MOVE #1,INTIN+2
 CLR INTIN+4
 JMP AES

*-----------------------CLEAR SCREEN------------------------

CLS DC $A00A
 MOVE.L #$FFFFFFFF,D1
 CMP #2,GRMODE
 BNE CLS2
 CLR.L D1
CLS2 MOVE.L SCREEN,A0
 MOVE.L #8000-1,D0
BEER MOVE.L D1,(A0)+
 DBF D0,BEER
 DC $A009
 RTS

*-----------------------BAD RESOLUTION------------------------

BADREZ MOVE #REZMES,D0
 JSR GADDR2
 MOVE.L A0,ADDRIN
 MOVE #52,CONTRL
 MOVE #1,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 MOVE #1,INTIN
 JSR AES
 JMP QUITZ

*------------------------DRAW OBJECT--------------------------

OBJCDRAW MOVE #42,CONTRL ;OBJC_DRAW
 MOVE #6,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 MOVE D0,INTIN
 CLR INTIN+2
 MOVE GEMXPOS,INTIN+4
 MOVE GEMYPOS,INTIN+6
 MOVE GEMWIDTH,INTIN+8
 MOVE GEMHOEHE,INTIN+10
 MOVE.L DRAWADR,ADDRIN
 DC $A00A
 JSR AES
 DC $A009
 RTS

DRAWADR DC.L 0

*--------------------------QUIT----------------------------

QUITM CLR.L D0
 MOVE INTOUT,D0
 MULU #OBSIZE,D0
 ADD.L MAINADR,D0
 MOVE.L D0,A0
 MOVE #1,OB_STATE(A0)
 MOVE INTOUT,D0
 JSR OBJCDRAW
 JSR WAITUP
 JMP QUITIT

QUITZ CLR.L D0
 MOVE INTOUT,D0
 MULU #OBSIZE,D0
 ADD.L CHSADR,D0
 MOVE.L D0,A0
 MOVE #1,OB_STATE(A0)
 MOVE INTOUT,D0
 JSR OBJCDRAW
 JSR WAITUP

QUITIT MOVE #51,CONTRL  ;FORM_DIAL (SHRINK)
 MOVE #9,CONTRL+2
 MOVE #1,CONTRL+4
 CLR CONTRL+6
 CLR CONTRL+8
 MOVE #2,INTIN
 MOVE #10,INTIN+2
 MOVE #10,INTIN+4
 MOVE #50,INTIN+6
 MOVE #10,INTIN+8
 MOVE DIALX,INTIN+10
 MOVE DIALY,INTIN+12
 MOVE DIALW,INTIN+14
 MOVE DIALH,INTIN+16
 JSR AES

 JSR CLS

 MOVE #3,INTIN   ;FORM_DIAL (FREES)
 JSR AES

 MOVE #121,CONTRL
 MOVE #3,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #2,CONTRL+6
 MOVE #0,CONTRL+8
 MOVE #1,INTIN
 MOVE #1,INTIN+2
 MOVE #1,INTIN+4
 LEA GOMENU,A0
 JSR ADDPATH
 MOVE.L A0,ADDRIN
 MOVE.L #INFILE,ADDRIN+4
 JSR AES

 MOVE #101,CONTRL  ;Close Virtual Workstation
 CLR CONTRL+2
 CLR CONTRL+6
 MOVE GRHANDLE,CONTRL+12
 JSR VDI

 MOVE #19,CONTRL  ;Appl_exit
 CLR CONTRL+2
 MOVE #1,CONTRL+4
 CLR CONTRL+6
 CLR CONTRL+8
 JSR AES

 CLR -(A7)  ;P_term
 TRAP #1

GOMENU DC.B 'MENU.PRG',0
INFILE DC.B 0,0
 EVEN

************************
* PROCESS A DIALOG BOX *
* A0=DIALOG TREE       *
* D0=EDIT FIELD        *
************************

FORMDO MOVE.L A0,FORMDIAL
 MOVE D0,FORMEDIT

 MOVE #54,CONTRL   ;FORM_CENTER
 CLR CONTRL+2
 MOVE #5,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 MOVE.L FORMDIAL,ADDRIN
 JSR AES
 MOVE INTOUT+2,DIALX
 MOVE INTOUT+4,DIALY
 MOVE INTOUT+6,DIALW
 MOVE INTOUT+8,DIALH

 MOVE #51,CONTRL  ;FORM_DIAL
 MOVE #9,CONTRL+2
 MOVE #1,CONTRL+4
 CLR CONTRL+6
 CLR CONTRL+8
 CLR INTIN
 MOVE #10,INTIN+2
 MOVE #10,INTIN+4
 MOVE #50,INTIN+6
 MOVE #10,INTIN+8
 MOVE INTOUT+2,INTIN+10
 MOVE INTOUT+4,INTIN+12
 MOVE INTOUT+6,INTIN+14
 MOVE INTOUT+8,INTIN+16
 JSR AES

 MOVE #1,INTIN   ;FORM_DIAL (EXPAND)
 JSR AES

 MOVE #42,CONTRL ;OBJC_DRAW
 MOVE #6,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 CLR INTIN
 MOVE #100,INTIN+2
 MOVE GEMXPOS,INTIN+4
 MOVE GEMYPOS,INTIN+6
 MOVE GEMWIDTH,INTIN+8
 MOVE GEMHOEHE,INTIN+10
 MOVE.L FORMDIAL,ADDRIN
 JSR AES

 MOVE #50,CONTRL  ;FORM_DO
 MOVE #1,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 MOVE FORMEDIT,INTIN
 MOVE.L FORMDIAL,ADDRIN
 JSR AES
 MOVE INTOUT,SAVERTRN

 MOVE #51,CONTRL  ;FORM_DIAL (SHRINK)
 MOVE #9,CONTRL+2
 MOVE #1,CONTRL+4
 CLR CONTRL+6
 CLR CONTRL+8
 MOVE #2,INTIN
 MOVE #10,INTIN+2
 MOVE #10,INTIN+4
 MOVE #50,INTIN+6
 MOVE #10,INTIN+8
 MOVE DIALX,INTIN+10
 MOVE DIALY,INTIN+12
 MOVE DIALW,INTIN+14
 MOVE DIALH,INTIN+16
 JSR AES

 MOVE #3,INTIN   ;FORM_DIAL (FREES)
 JMP AES

FORMDIAL DC.L 0
FORMEDIT DC 0

*--------------------SHOW PANEL-------------------

SHOWPANL MOVE.L A0,FORMDIAL
 MOVE D0,FORMEDIT

 DC $A00A

 MOVE #54,CONTRL   ;FORM_CENTER
 CLR CONTRL+2
 MOVE #5,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 MOVE.L FORMDIAL,ADDRIN
 JSR AES
 MOVE INTOUT+2,DIALX
 MOVE INTOUT+4,DIALY
 MOVE INTOUT+6,DIALW
 MOVE INTOUT+8,DIALH

 MOVE #51,CONTRL  ;FORM_DIAL
 MOVE #9,CONTRL+2
 MOVE #1,CONTRL+4
 CLR CONTRL+6
 CLR CONTRL+8
 MOVE #1,INTIN
 MOVE #10,INTIN+2
 MOVE #10,INTIN+4
 MOVE #50,INTIN+6
 MOVE #10,INTIN+8
 MOVE INTOUT+2,INTIN+10
 MOVE INTOUT+4,INTIN+12
 MOVE INTOUT+6,INTIN+14
 MOVE INTOUT+8,INTIN+16
 JSR AES

 MOVE #42,CONTRL ;OBJC_DRAW
 MOVE #6,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 CLR INTIN
 MOVE #100,INTIN+2
 MOVE GEMXPOS,INTIN+4
 MOVE GEMYPOS,INTIN+6
 MOVE GEMWIDTH,INTIN+8
 MOVE GEMHOEHE,INTIN+10
 MOVE.L FORMDIAL,ADDRIN
 JSR AES
 DC $A009
 RTS

********************************
* GET ADDRESS OF TREE RESOURCE *
* D0 = TREE NUMBER             *
* A0 RETURNS ADDRESS           *
********************************

GADDR CLR INTIN
 JMP GADDR3

GADDR2 MOVE #5,INTIN

GADDR3 MOVE #112,CONTRL  ;RSRC_GADDR
 MOVE #2,CONTRL+2
 MOVE #1,CONTRL+4
 CLR CONTRL+6
 MOVE #1,CONTRL+8
 MOVE D0,INTIN+2
 JSR AES
 MOVE.L ADDROUT,A0
 RTS

****************************
* SET MOUSE IMAGE AND SHOW *
* D0 = IMAGE               *
****************************

SHWMOUSE MOVE #78,CONTRL ;GRAF_MOUSE
 MOVE #1,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 MOVE D0,INTIN ;MOUSE IMAGE
 CLR.L ADDRIN
 JSR AES
 DC $A009  ;SHOW MOUSE
 RTS

AES MOVE.L #AESPB,D1  ;CALL AES
 MOVE.L #$C8,D0
 TRAP #2
 RTS

VDI MOVE.L #VDIPB,D1  ;CALL VDI
 MOVE.L #$73,D0
 TRAP #2
 RTS

*-------------GEM PARAMETER BLOCKS--------------

AESPB DC.L CONTRL,GLOBAL,INTIN,INTOUT,ADDRIN,ADDROUT
VDIPB DC.L CONTRL,INTIN,PTSIN,INTOUT,PTSOUT

*--------------GEM RELATED EQUATES-------------------

OBSIZE EQU 24  ;BYTES PER OBJECT STRUCTURE

OB_NEXT EQU 0  ;OBJECT OFFSETS
OB_HEAD EQU 2
OB_TAIL EQU 4
OB_TYPE EQU 6
OB_FLAGS EQU 8
OB_STATE EQU 10
OB_SPEC EQU 12
OB_X EQU 16
OB_Y EQU 18
OB_WIDTH EQU 20
OB_HEIGHT EQU 22

TEDSIZE EQU 28   ;SIZE OF EACH TEDINFO STRUCTURE

TE_PTEXT EQU 0   ;TEDINFO OFFSETS
TE_PTMPLT EQU 4
TE_PVALID EQU 8
TE_FONT EQU 12
TE_RESVD EQU 14
TE_JUST EQU 16
TE_COLOR EQU 18
TE_RESV2 EQU 20
TE_THICK EQU 22
TE_TXLEN EQU 24
TE_TMPLN EQU 26

*----------NO RESOURCE FILE---------

NORSRC MOVE #52,CONTRL
 MOVE #1,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 MOVE #1,INTIN
 MOVE.L #NORSC,ADDRIN
 JSR AES
 JMP QUITZ

RSCNAME DC.B 'SORT.RSC',0
 EVEN

NORSC DC.B '[3][Cannot find the|resource file: SORT.RSC]'
 DC.B '[CONTINUE]',0,0
 EVEN

*-------ERROR ALERTS--------

COMPLETE MOVE #FIN,D0
 JSR GADDR2
 MOVE.L A0,ADDRIN
 JMP ALERT

*-------NO MEMORY ERROR--------

NOMEM MOVE #MEMERR,D0
 JSR GADDR2
 MOVE.L A0,ADDRIN

ALERT MOVE #52,CONTRL
 MOVE #1,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 MOVE #1,INTIN
 JSR AES
 CLR GOTO
 JMP QUITIT

*--------------------------PATH ROUTINES----------------------------

******************
* LOAD PATH INFO *
******************

GETPATH MOVE.L #39,D0
 LEA PATHNAME,A0
FPATHC CLR.B (A0)+
 DBF D0,FPATHC

 LEA FPATH,A0
 JSR F_OPEN
 TST D0
 BPL FPATHNE

FPTERR MOVE #52,CONTRL
 MOVE #1,CONTRL+2
 MOVE #1,CONTRL+4
 MOVE #1,CONTRL+6
 CLR CONTRL+8
 MOVE #1,INTIN
 MOVE.L #NOPATH,ADDRIN
 JSR AES
 JMP QUITZ

NOPATH DC.B '[3][Cannot find the|PATH.TBL file!]'
 DC.B '[RETURN TO DESKTOP]',0,0
 EVEN

FPATHNE MOVE D0,HANDLE0

 MOVE HANDLE0,A0
 MOVE.L #PATHNAME,A1
 MOVE.L #39,D0
 JSR F_READ

 MOVE.B PATHNAME,D0
 CMP.B #10,D0
 BNE FPATHE

 MOVE.L #38,D0
 LEA PATHNAME,A0
FPATHD MOVE.B 1(A0),(A0)
 ADD.L #1,A0
 DBF D0,FPATHD

FPATHE MOVE HANDLE0,A0
 JMP F_CLOSE

FPATH DC.B 'PATH.TBL',0
 EVEN

HANDLE0 DC 0

*******************************
* ADD PATH TO FILE NAME IN A0 *
*******************************

ADDPATH MOVEM.L A1-A4/D0-D2,-(A7)

 LEA PTHNM,A1
 MOVE.L #39,D0
ADDP100 CLR.B (A1)+
 DBF D0,ADDP100

 MOVE.L #39,D1
 LEA PATHNAME,A1
 LEA PTHNM,A2
ADDP101 MOVE.B (A1)+,D0
 CMP.B #' ',D0
 BEQ ADDP102
 CMP.B #13,D0
 BEQ ADDP102
 TST.B D0
 BEQ ADDP102
 MOVE.B D0,(A2)+
 DBF D1,ADDP101

ADDP102 MOVE.B (A0)+,D0
 CMP.B #13,D0
 BEQ ADDP103
 TST.B D0
 BEQ ADDP103
 MOVE.B D0,(A2)+
 DBF D1,ADDP102

ADDP103 LEA PTHNM,A0
 MOVEM.L (A7)+,A1-A4/D0-D2
 RTS

******************************
* CHECK FOR MATCHING STRINGS *
* A0 POINTS TO FIRST         *
* A1 POINTS TO SECOND        *
* D0 RETURNS MINUS IF NO     *
******************************

MATCHER CMP.L #0,A0
 BEQ MATBAD
 CMP.L #0,A1
 BEQ MATBAD

 MOVE.L A0,MHOLD1
 MOVE.L A1,MHOLD2

MAT1 TST.B (A0)
 BEQ MAT2
 MOVE.B (A0)+,D0
 CMP.B (A1)+,D0
 BEQ MAT1
 JMP MAT3

MAT2 TST.B (A1)
 BNE MAT3
 MOVE.L MHOLD1,A0
 MOVE.L MHOLD2,A1
 CLR D0
 RTS

MAT3 MOVE.L MHOLD1,A0
 MOVE.L MHOLD2,A1
MATBAD MOVE #-1,D0
 RTS

* CHECK FOR MATCH REGARDLESS OF CASE

MMATCHER CMP.L #0,A0
 BEQ MATBAD
 CMP.L #0,A1
 BEQ MATBAD

 MOVE.L A0,MHOLD1
 MOVE.L A1,MHOLD2

XMAT1 CMP.B #' ',(A0)
 BEQ XMAT2
 TST.B (A0)
 BEQ XMAT2
 MOVE.B (A0)+,D0
 CMP.B #'a',D0
 BCS XEM1
 CMP.B #'z'+1,D0
 BCC XEM1
 SUB.B #32,D0

XEM1 MOVE.B (A1)+,D1
 CMP.B #'a',D1
 BCS XEM2
 CMP.B #'z'+1,D1
 BCC XEM2
 SUB.B #32,D1
XEM2 CMP.B D0,D1
 BEQ XMAT1
 JMP XMAT3

XMAT2 CMP.B #' ',(A1)
 BEQ XMAT2Z
 TST.B (A1)
 BNE XMAT3
XMAT2Z MOVE.L MHOLD1,A0
 MOVE.L MHOLD2,A1
 CLR D0
 RTS

XMAT3 MOVE.L MHOLD1,A0
 MOVE.L MHOLD2,A1
 JMP MATBAD

MHOLD1 DC.L 0
MHOLD2 DC.L 0

***********************
* CALCULATE ROW SIZES *
* A0 = Table name     *
* D1 = 1 - Indexes    *
* --Returns---        *
* D0 = Rowsize        *
***********************

CAL_ROW MOVE.L A0,A3
 CLR.L D3
 CLR.L D5

 MOVE.L #CACFLD,D4
 MOVE.L CACHEF,D2
 TST D1
 BEQ CAL_100
 MOVE.L #CACIDX,D4
 MOVE.L CACIND,D2

CAL_100 CLR.L D0
 MOVE D5,D0
 MULU #65,D0
 ADD.L D2,D0
 MOVE.L D0,A2

 ADD.L #20,D0
 MOVE.L D0,A1

 MOVE.L A3,A0
 JSR MMATCHER
 TST D0
 BMI CAL_105

 MOVE.L A2,A0
 ADD.L #47,A0
 JSR CVAL
 ADD D1,D3

CAL_105 ADD #1,D5

 SUB #1,D4
 BNE CAL_100

 ADD #2,D3
 MOVE D3,D0
 AND.L #$FFFF,D0
 RTS

**************************************
* CONVERT 4 DIGIT ASCII TO HEX VALUE *
* A0 POINTS TO ASCII D1 RETURNS VAL  *
**************************************

CVAL CLR.L D0
 CLR.L D1
 MOVE.B (A0)+,D0
 SUB.B #'0',D0
 MULU #1000,D0
 ADD D0,D1
 CLR.L D0
 MOVE.B (A0)+,D0
 SUB.B #'0',D0
 MULU #100,D0
 ADD D0,D1
 CLR.L D0
 MOVE.B (A0)+,D0
 SUB.B #'0',D0
 MULU #10,D0
 ADD D0,D1
 CLR.L D0
 MOVE.B (A0)+,D0
 SUB.B #'0',D0
 ADD D0,D1
 AND.L #$FFFF,D1
 RTS

*********************
* ESCAPE KEY SENSOR *
*********************

KEYSTOP MOVE #11,-(A7)
 TRAP #1
 ADD #2,A7
 TST D0
 BEQ DONTSTOP

 JSR WAIT_KEY
 CMP.B #27,D0
 BNE DONTSTOP
 MOVE #1,D0
 RTS
DONTSTOP CLR.L D0
 RTS

********************
* SET WRITING MODE *
********************

TRANSOFF MOVE #32,CONTRL
 CLR CONTRL+2
 MOVE #1,CONTRL+6
 MOVE GRHANDLE,CONTRL+12
 MOVE #1,INTIN
 JMP VDI

*********************************
* LOAD CACHE BUFFERS            *
*********************************

CACTBL EQU 64
CACFLD EQU 300
CACIDX EQU 64

LDCACHE TST CACHE
 BEQ LDC_999
 CLR CACHE

 MOVE #48*CACTBL,D0
 SUB #1,D0
 MOVE.L CACHET,A0
LDC_100 CLR.B (A0)+
 DBF D0,LDC_100

 MOVE #65*CACFLD,D0
 SUB #1,D0
 MOVE.L CACHEF,A0
LDC_101 CLR.B (A0)+
 DBF D0,LDC_101

 MOVE #65*CACIDX,D0
 SUB #1,D0
 MOVE.L CACIND,A0
LDC_102 CLR.B (A0)+
 DBF D0,LDC_102

 LEA FLDNAME,A0   ;LOAD FIELDS
 JSR ADDPATH
 MOVE.L A0,A4
 JSR F_OPEN
 TST D0
 BPL LDC_103
 LEA FLDNAME,A0
 JSR ADDPATH
 JSR DISK_ERR
 JMP QUITIT

LDC_103 MOVE D0,FHNDL

 MOVE FHNDL,A0
 MOVE.L #65*CACFLD,D0
 MOVE.L CACHEF,A1
 JSR F_READ
 TST.L D0
 BMI LDC_106

 MOVE FHNDL,A0
 JSR F_CLOSE

 LEA INDNAME,A0  ;LOAD INDEXES
 JSR ADDPATH
 MOVE.L A0,A4
 JSR F_OPEN
 TST D0
 BPL LDC_104
 LEA INDNAME,A0
 JSR ADDPATH
 JSR DISK_ERR
 JMP QUITIT

LDC_104 MOVE FHNDL,A0
 MOVE.L #65*CACIDX,D0
 MOVE.L CACIND,A1
 JSR F_READ
 TST.L D0
 BMI LDC_106

 MOVE FHNDL,A0
 JSR F_CLOSE

 LEA TNAME,A0 ;LOAD TABLE INFO
 JSR ADDPATH
 MOVE.L A0,A4
 JSR F_OPEN
 TST D0
 BPL LDC_105
 LEA TNAME,A0
 JSR ADDPATH
 JSR DISK_ERR
 JMP QUITIT

LDC_105 MOVE FHNDL,A0
 MOVE.L #48*CACTBL,D0
 MOVE.L CACHET,A1
 JSR F_READ
 TST.L D0
 BMI LDC_106

 MOVE FHNDL,A0
 JSR F_CLOSE

 MOVE #CACTBL,D2
 MOVE.L CACHET,A1
 MOVE.L #48,D3
 JSR LDC_SCOR
 MOVE #CACFLD,D2
 MOVE.L CACHEF,A1
 MOVE.L #65,D3
 JSR LDC_SCOR
 MOVE #CACIDX,D2
 MOVE.L CACIND,A1
 MOVE.L #65,D3
 JSR LDC_SCOR

LDC_999 CLR D0
 RTS

LDC_106 MOVE #1,CACHE
 MOVE.L A4,A0
 JSR DISK_ERR
 CMP #-2,D0
 BEQ LDCACHE

 MOVE #-1,D0
 RTS

LDC_SCOR MOVE.L A1,A2
 JSR LDC_SC2
 MOVE.L A1,A2
 ADD.L #20,A2
 JSR LDC_SC2
 ADD.L D3,A1
 SUB #1,D2
 BNE LDC_SCOR
 RTS

LDC_SC2 MOVE #18,D0
LDC_200 TST.B (A2)
 BEQ LDC_201
 CMP.B #' ',(A2)
 BEQ LDC_201
 ADD #1,A2
 DBF D0,LDC_200
LDC_201 CLR.B (A2)
 RTS

TNAME DC.B 'TABLES.TBL',0
FLDNAME DC.B 'FIELDS.TBL',0
INDNAME DC.B 'INDEXES.TBL',0
 EVEN

*------------------------DISK I/O ERROR--------------------------

DISK_ERR MOVEM.L A0-A4,-(A7)

 MOVE.L ERRDLG,A1
 ADD.L #ERMES2*OBSIZE,A1
 MOVE.L A0,OB_SPEC(A1)

 TST D0
 BEQ DE6

 CLR.L D1
 SUB.L D0,D1
 CMP #18,D1
 BCC DE2

 SUB #1,D1
 ADD #IOERR1,D1
 JMP DEPRINT

DE2 CMP #32,D1
 BCS DE3
 CMP #41,D1
 BCC DE3
 SUB #32,D1
 ADD #IOERR2,D1
 JMP DEPRINT

DE3 CMP #64,D1
 BCS DE4
 CMP #68,D1
 BCC DE4
 SUB #64,D1
 ADD #IOERR5,D1
 JMP DEPRINT

DE4 CMP #46,D1
 BNE DE5
 MOVE #IOERR3,D1
 JMP DEPRINT
DE5 CMP #49,D1
 BNE DE6
 MOVE #IOERR4,D1
 JMP DEPRINT

DE6 MOVE #IOERR6,D1

DEPRINT MOVE.L ERRDLG,A0
 ADD.L #ERMES*OBSIZE,A0

 MULU #OBSIZE,D1
 ADD.L IOERRADR,D1
 MOVE.L D1,A1
 MOVE.L OB_SPEC(A1),OB_SPEC(A0)

 MOVE.L ERRDLG,A0
 ADD.L #ERRETRY*OBSIZE,A0
 CLR OB_STATE(A0)

 MOVE.L ERRDLG,A0
 ADD.L #ERCANCEL*OBSIZE,A0
 CLR OB_STATE(A0)

 CLR D0
 JSR SHWMOUSE

 MOVE.L ERRDLG,A0
 MOVE #-1,D0
 JSR FORMDO

 MOVE #-2,D0
 CMP #ERRETRY,SAVERTRN
 BEQ DE7
 MOVE #-1,D0

DE7 MOVEM.L (A7)+,A0-A4
 RTS

NOERRMES DC.B '---',0
 EVEN

*-------------TEXT STRINGS--------------

TBLSPEC DC.B 'TABLES.TBL',0
FLDSPEC DC.B 'FIELDS.TBL',0
 EVEN

STRING MOVE.L A0,-(A7)
 MOVE #9,-(A7)
 TRAP #1
 ADD #6,A7
 RTS

 BSS

*-------------GEM PARAMETER BLOCKS--------------

GEMSTART DS 1
CONTRL DS 1
OPCODE EQU CONTRL
SINTIN DS 1
SINTOUT DS 1
SADDRIN DS 1
SADDROUT DS.L 5
GLOBAL DS 1
APCOUNT DS 1
APID DS 1
APPRIVATE DS.L 1
APPTREE DS.L 1
AP1RESV DS.L 1
AP2RESV DS.L 1
AP3RESV DS.L 1
AP4RESV DS.L 1
INTIN DS.L 80
PTSIN DS.L 32
INTOUT DS.L 32
PTSOUT DS.L 32
ADDRIN DS.L 32
ADDROUT DS.L 32

GRHANDLE DS 1
DRHANDLE DS 1

GEMXPOS DS 1
GEMYPOS DS 1
GEMWIDTH DS 1
GEMHOEHE DS 1

GEMEND DS 1

*-----------Other Variables------------*

DISKBUFF DS.L 40

PTHNM DS.B 40
PATHNAME DS.B 40
GRMODE DS 1
SCREEN DS.L 1
DIALX DS 1
DIALY DS 1
DIALH DS 1
DIALW DS 1
SAVERTRN DS 1

CHSADR DS.L 1  ;Resource pointers
MAINADR DS.L 1
ERRDLG DS.L 1
MONOADR DS.L 1
ERRADR DS.L 1
IOERRADR DS.L 1

STR_WHERE DS.L 1 ;Where
BUF_WHERE DS.L 1
BUF_W2 DS.L 1

*---------Cache Memory Variables---------
CACHET DS.L 1 ;Pointer to table info
CACHEF DS.L 1 ;Field info
CACIND DS.L 1 ;Index info
CACHE DS 1 ;Flag
FHNDL DS 8 ;File handles
DTA DS.B 44 ;Disk transfer storage area

*-------------BUFFER POINTERS-------------
STR_SEL DS.L 1 ;Fields
BUF_SEL DS.L 1
BUF_SEL2 DS.L 1

STR_TBL DS.L 1 ;Tables
BUF_TBL DS.L 1
BUF_TBL2 DS.L 1

STR_ORD DS.L 1 ;Order by
BUF_ORD DS.L 1

STR_REOR DS.L 1 ;Reorganize
STR_INDX DS.L 1

*--------------Table Buffers---------------
INDXFLAG DS 1
SET_DEFLT DS.L 1
TBLBUFRS DS.B BUFSIZE
 EVEN

*------------Select Variables-------------
S_TBLCNT DS 1 ;# of tables defined
S_FLDCNT DS 1 ;# of fields defined
S_PAREN1 DS 1 ;Parenthesis defined
S_PAREN2 DS 1
S_TABLE DS.L 1 ;Table pointer
S_WCOUNT DS 1 ;Where expr
S_WPAREN DS 1 ;Parenthesis
S_OCOUNT DS 1 ;Order by stuff
S_OPAREN DS 1
S_FIRST DS 1 ;Load first flag
FRMTNBR DS 1 ;Use format number

*-----------QUICK SORT VARIABLES----------
Q_ORD DS.L 1
Q_TBL DS.L 1
Q_TABLE DS.L 1
Q_PARAM DS.B MAX_ORD*QSZ
 EVEN

Q_NAME DS.L 1 ;Table name pointer
Q_FLAG DS 1 ;Flag
Q_INDEX DS 1 ;Table is indexed
Q_HEAP DS.L 1  ;Sorting buffer
Q_SIZE DS.L 1  ;Size of buffer
Q_RECSZ DS 1   ;Record size
Q_TTLRECS DS 1 ;Total # of records in a table
Q_MAXREC DS.L 1 ;Maximum number of records that will fit into Q_HEAP
Q_RECS DS 1 ;# of records in memory
Q_INMEM DS 1 ;In memory sort flag
Q_COUNT DS 1 ;Counter
Q_BLOCK DS 1 ;Block counter
Q_BLOCK2 DS 1
Q_EVEN DS 1 ;Modified record size
Q_HANDLE DS 8 ;File handles
Q_FDONE DS 8 ;File data done flags
Q_FTEMP DS 1 ;Temporary file handle
Q_SEQ DS.L 8 ;Sequence storage
Q_TABL DS.B 50 ;File name
Q_PATH DS.B 40 ;Temporary file path
Q_ERRNM DS.L 1 ;Temporary file pointer
Q_POINT DS.L 1 ;Temporary pointer

Q_I DS 1
Q_J DS 1
Q_A DS 1

COMPA0 DS.L 1 ;Storage
COMPA1 DS.L 1

*------------Reorganize Variables-------------
R_TABLE DS.L 1 ;Table name
R_SIZE DS 1 ;Record size
R_SIZE2 DS 1 ;Index record size
R_FILE DS.B 40 ;Table file name
R_INDEX DS.B 40 ;Index file name
R_TFILE DS.B 40 ;Temporary file name
R_TIFILE DS.B 40 ;Index temporary file name
R_RECS DS 1 ;Record count
R_TTLRECS DS 1 ;Total records in table
R_MAXREC DS 1 ;Maximum # of records that will fit into memory
R_FINRECS DS 1 ;Destination record count
R_DESTPTR DS.L 2 ;Table destination pointer
R_INDXPTR DS.L 2 ;Index destination pointer
R_SOURCE DS.L 1 ;Source pointer
R_INDCNT DS 1 ;# of indexed fields
R_FLDCNT DS 1 ;# of fields

*------Information Finder Variables-------
SE_STRCT DS.L 1
SE_COUNT DS 1 ;Counter
SE_CNT2 DS 1  ;Secondary counter
SE_INDEX DS 1 ;Index flag
SE_MAX DS 1   ;Maximum structure
SE_WHERE DS.L 1 ;Pointers
SE_TBL DS.L 1
SE_SEL DS.L 1
SE_WCNT DS 1
SE_TBLCNT DS 1 ;# of tables
SE_BUFF DS.L 1 ;Buffer
SE_FLAG DS 1 ;Index flag
SE_LEVEL DS 1 ;Table & Where flag

*    Other Misc Variables

FHANDLE DS 1
FILEY DS 1
FILECNT DS 1
SLIDEPOS DS 1
FLAG DS 1
COUNT DS 1
GOTO DS 1
CNTSTORE DS 1
TBLPTR DS.L 1
POINTER DS.L 1
POINTER2 DS.L 1
ASCDES DS 1
HOLDIT DS 1
SELECTED DS 1
HOLD2 DS 1
HOLDER DS.L 1
ACTFLAG DS 1

CASEFLAG DS 1
NULLFLAG DS 1

TBLLEN EQU 48
FLDLEN EQU 65
TBLMAX EQU 50
FLDMAX EQU 300
TBLINFO DS.B TBLLEN*TBLMAX
 EVEN
FLDINFO DS.B FLDLEN*FLDMAX
 EVEN
DBUFF DS.B FLDLEN
 EVEN
TNAMEZ DS.B 40
 EVEN

*---------------------FIELDS TABLE-----------------------

* STRUCTURE EQUATES

FNAME EQU 0  ; FIELD NAME
FTABL EQU 4  ; TABLE NAME
FTYPE EQU 8  ; TYPE
FDISP EQU 10 ; DISPLACEMENT
FSIZE EQU 12 ; SIZE
FEXTR EQU 14 ; DECIMAL SIZE
FVALU EQU 16 ; FIELD CONTENTS
FVAL2 EQU 20 ; EVALUATED FIELD CONTENTS
FCONN EQU 24 ; CONNECTOR 0=LAST EXPRESSION
FPARN EQU 26 ; PARENTHESIS LEVEL
FAGGR EQU 28 ; AGGREGATE FUNCTION NUMBER
FPOSI EQU 30 ; CHAR POSITION IN PROCEDURAL PROGRAM
FCALC EQU 32 ; CALCULATED FLAG
FBOOL EQU 34 ; CALCULATED BOOLEAN VALUE
FINDX EQU 36 ; POINTER TO INDEX DISK BUFFER
FIFIL EQU 40 ; INDEX FILE NAME
FIHND EQU 44 ; INDEX FILE HANDLE
FRECN EQU 46 ; RECORD NUMBER
FRFND EQU 48 ; RECORDS FOUND
FOBJN EQU 50 ; OBJECT #

EV_FSZ EQU 52 ; SIZE OF ONE EXPRESSION STRUCTURE

*-----------------MISCELLANEOUS-----------------

BUFSPACE EQU 2048
DBUFFER DS.B BUFSPACE
DBUFFER2 DS.B BUFSPACE
 EVEN

*--------------EQUATES--------------

CHOSETBL = 0;  REM ---TREE---
CHOSEFLD = 1;  REM ---TREE---
TUPARW = 12;  REM ---OBJECT in TREE #0---
TTABLES = 3;  REM ---OBJECT in TREE #0---
TDNARW = 13;  REM ---OBJECT in TREE #0---
TCANCEL = 17;  REM ---OBJECT in TREE #0---
BEGIN = 16;  REM ---OBJECT in TREE #1---
FCANCEL = 17;  REM ---OBJECT in TREE #1---
TBLNAME = 23;  REM ---OBJECT in TREE #1---
ASCBUTN = 19;  REM ---OBJECT in TREE #1---
DESBUTN = 20;  REM ---OBJECT in TREE #1---
CASE = 21;  REM ---OBJECT in TREE #1---
NULLS = 22;  REM ---OBJECT in TREE #1---
FUPARW = 2;  REM ---OBJECT in TREE #1---
FDNARW = 3;  REM ---OBJECT in TREE #1---
FSLIDER = 4;  REM ---OBJECT in TREE #1---
FTHUMB = 5;  REM ---OBJECT in TREE #1---
CLEAR = 41;  REM ---OBJECT in TREE #1---
TTHUMB = 15;  REM ---OBJECT in TREE #0---
TSLIDER = 14;  REM ---OBJECT in TREE #0---
DISKERR = 2;  REM ---TREE---
ERRETRY = 6;  REM ---OBJECT in TREE #2---
ERCANCEL = 7;  REM ---OBJECT in TREE #2---
ERMES = 8;  REM ---OBJECT in TREE #2---
ERMES2 = 9;  REM ---OBJECT in TREE #2---
ICON2 = 4;  REM ---OBJECT in TREE #2---
MONO = 3;  REM ---TREE---
MICON2 = 1;  REM ---OBJECT in TREE #3---
MICON1 = 2;  REM ---OBJECT in TREE #3---
ICON1 = 16;  REM ---OBJECT in TREE #0---
TBL1 = 4;  REM ---OBJECT in TREE #0---
TBL2 = 5;  REM ---OBJECT in TREE #0---
TBL3 = 6;  REM ---OBJECT in TREE #0---
TBL4 = 7;  REM ---OBJECT in TREE #0---
TBL5 = 8;  REM ---OBJECT in TREE #0---
TBL6 = 9;  REM ---OBJECT in TREE #0---
TBL7 = 10;  REM ---OBJECT in TREE #0---
TBL8 = 11;  REM ---OBJECT in TREE #0---
FLDNAMES = 6;  REM ---OBJECT in TREE #1---
FLD1 = 7;  REM ---OBJECT in TREE #1---
FLD2 = 8;  REM ---OBJECT in TREE #1---
FLD3 = 9;  REM ---OBJECT in TREE #1---
FLD4 = 10;  REM ---OBJECT in TREE #1---
FLD5 = 11;  REM ---OBJECT in TREE #1---
FLD6 = 12;  REM ---OBJECT in TREE #1---
FLD7 = 13;  REM ---OBJECT in TREE #1---
FLD8 = 14;  REM ---OBJECT in TREE #1---
ERROR = 4;  REM ---TREE---
ERRCODE = 7;  REM ---OBJECT in TREE #4---
ACTNUM = 42;  REM ---OBJECT in TREE #1---
PRIMARY = 37;  REM ---OBJECT in TREE #1---
SECONDRY = 38;  REM ---OBJECT in TREE #1---
TRIMARY = 39;  REM ---OBJECT in TREE #1---
IOERRS = 5;  REM ---TREE---
IOERR1 = 1;  REM ---OBJECT in TREE #5---
IOERR2 = 18;  REM ---OBJECT in TREE #5---
IOERR3 = 27;  REM ---OBJECT in TREE #5---
IOERR4 = 28;  REM ---OBJECT in TREE #5---
IOERR5 = 29;  REM ---OBJECT in TREE #5---
IOERR6 = 33;  REM ---OBJECT in TREE #5---
MEMERR = 0;  REM ---STRING---
REZMES = 1;  REM ---STRING---
FIN = 2;  REM ---STRING---

 END
