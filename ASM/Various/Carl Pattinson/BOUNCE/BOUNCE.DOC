SUB-ROUTINE NAME        Bounce
BRIEF DESCRIPTION       Calculate pixel position of bouncing sprite
FILENAME                BOUNCE.S
OTHER RESOURCES         None
LANGUAGE                Assembler (Devpac)
AUTHOR                  Carl Pattinson

ENTRY PARAMETERS        d0.w holds original X position of sprite 
                        d1.w holds original Y position of sprite
                        d2.w holds original DX value
                        d3.w holds original DY value

EXIT PARAMETERS         d0.w = new X position of sprite
                        d1.w = new Y position of sprite
                        d2.w = new DX value
                        d3.w = new DY value

DETAILS.
The routine takes the DX value in d2.w and adds it to the X value 
in d0.w. It then checks to see whether X is greater than the max 
value and if it is it makes DX negative. After the X values are 
sorted out it alters the Y values. If DY is less than the max 
DY value then it will increment the DY value. It will then add 
the DY value in d3.w to the Y value in d1.w. After this is done 
it makes a check on the Y value to see if it has become to large 
to actually be on the screen. If it is larger than the max Y value 
then DY is made negative.

On exit the new values are placed in the data registers 0-3.

* NOTE * 
     This routine only calculates the pixel coordinates for the 
     sprite but does not actually draw the sprite on the screen. 
     That has to be done with another routine.
  
A typical example code is shown below :-

        movem.w sprite_xydxdy,d0-3    ;load values in to d0-3
        bsr     bounce                ;calculate position
        movem.w d0-3,sprite_xydxdy    ;save new values
        bsr     drawsprite            ;draw sprite
        ..

        DATA
sprite_xydxdy                         ;label for values 
sprite_x        dc.w    20            ;X value
sprite_y        dc.w    20            ;Y value
sprite_dx       dc.w    4             ;DX value
sprite_dy       dc.w    1             ;DY value


Note that when loading the values into the data registers, 
sprite_xydxdy is used instead of sprite_x. They both point to 
the same value but 
            movem.w sprite_xydxdy,d0-3 
makes more sense than
            movem.w sprite_x,d0-3
 

The routine was converted from a STOS basic listing by Billy 
Allen in ST FORMAT #55 Febuary 1994. For those who would like the 
STOS basic listing but dont have that issue, the routine is 
included below.


        10 key off : hide : curs off : mode 0
        20 X=20 : Y=20 : SX=4 : SY=0
        30 sprite 1,X,Y,1
        40 X=X+SX : if X>300 or X<4 then SX=-SX
        50 if SY<19 then inc SY
        60 Y=Y+SY
        70 if Y>184 then Y=184 : SY=-SY
        80 wait vbl
        90 if inkey$<>" " then goto 30
  
