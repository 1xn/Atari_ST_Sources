
                               USING POP-UP MENUS
                               ==================

                                 By Peter Hibbs

     The latest version of the AES  allows  the programmer to use sub-menus
     and pop up menus  in  GEM  programs.  The  sub-routine supplied in the
     POP_UP.S file on this disk  provides  a  pop-up  menu routine which is
     similar (but not identical) to the Atari version. Unfortunately I have
     not been able to provide a  sub-menu  routine because it would seem to
     involve changing the 'evnt_multi' GEM function and I cannot see how to
     do this at present,  if  anyone  else  can  provide any information on
     this, please let me know.

     Before a pop-up menu can be used, the menu form must first be designed
     using a Resource file editor such  as WERCS, examine the resource file
     (POP_UPS.RSC) for the demo program provided  to  see how it works. The
     routine can be used for a  text  menu  or a graphics menu although the
     operation is very similar for both modes.

     For a text menu, first create a  new  form  and give it a name and set
     the border width to 1. Set the 'shadowed' flag and the 'disabled' flag
     for the main box. This will give  a shadowed effect when displayed and
     also prevent the main box  being  highlighted  if  there is a disabled
     menu item. Next  enter  the  menu  entries  as  'strings', each string
     should be immediately  below  the  previous  one  and  all the entries
     should fill the box. Each string  should  also  be allocated a name as
     normal.

     For a graphics icon menu, the  operation  is virtually the same except
     that 'images' should be designed and placed in the box instead of text
     strings. They can be above or to  the  side  of each other as the demo
     program shows. Note that the 'shadowed'  flag  need  not be set if the
     shadow effect is not required.

     When the menus have been completed  the  file  should be saved and the
     various menu/image names should be noted for use in the main program.


     Using the routine.
     ------------------
     The pop-up routine (pop_up) is called  when  a menu is to be displayed
     and a selection made. To make the source code easier to follow a MACRO
     has been defined called 'pop_up_menu' which takes four parameters. The
     MACRO format is as follows :-

                     pop_up_menu     form_id,x,y,buffer.L

     where form_id is the ident of the pop up menu form.
           x is the x co-ordinate of the top left corner of the menu form.
           y is the y co-ordinate of the top left corner of the menu form.
           buffer.L is the address of a 16 byte temporary buffer.

     A typical call would look like :-

                     pop_up_menu     #COLOUR_SELECT,#50,#100,#pop_up_buffer
                     tst             d0
                     bne             error
                     cmp             #-1,pop_up_buffer
                     beq             main
                     ..

     pop_up_buffer   ds.b            16


     where COLOUR_SELECT is the name of  the  form and pop_up_buffer is the
     label for the buffer. Any information  concerning the menu is returned
     in the buffer store. The  layout  and  functions  of  the store are as
     follows :-

     Offset  Size    Function

     0        W      Ident of selected object or -1 if none selected.
     2        W      Ident of parent object.
     4        L      Address of selected objects string or image data.
     8        W      Status of keyboard ALT, SHIFT and CONTROL keys.
     10       W      String length or image width (bytes).
     12       W      Image height (scan lines).
     14       W      Not used.

     On return from the routine register d0 is  set to zero if there was no
     error or -1 if there was an  error.  An error could occur if there was
     not enough RAM available in the TPA to store the screen area under the
     menu. Assuming there is no error,  the  program should first check the
     first word of the buffer to see  if  a  menu item has been selected, a
     value of -1 indicates  that  no  item  has  been selected. The program
     should then take the  appropriate  action  depending  on the menu item
     selected.

     The second word of the  buffer  holds  the  ident of the parent object
     (i.e. COLOUR_SELECT in the example above).  This would not normally be
     needed since the program usually  knows  which  menu is being used but
     may be useful in a multi-menu type program.

     The fourth longword holds  the  address  of  the  text  string for the
     selected menu item in the  resource  file  data block. This allows the
     program to copy that  string  into  another  object  on screen to show
     which menu item is currently selected  (as shown in the demo program).
     If the object is an image,  the  address  is  the start address of the
     image data in the resource file block.

     The eighth word holds the status  of  the ALTERNATE, SHIFT and CONTROL
     keys in the same format as the GEM vq_key_s function.

     The tenth word holds the length of  the text string less any following
     spaces plus 1. For example, the menu  item ' Red     ' would be stored
     as 5 (that is one  leading  space,  three  characters and one trailing
     space). This allows the program  to  easily  calculate the size of the
     current selection box on  the  main  screen.  Notice  that in the demo
     program, the box showing the  currently  selected item varies in width
     depending on the length of  the  string  of  the selected item. If the
     menu item is an image, this word holds the width of the image in bytes
     which can be used to copy the  image  to another object for display on
     the main screen.

     The twelfth word holds  the  height  of  the  image (if applicable) in
     pixels (or scan lines). By  multiplying  this  value with the previous
     word value the total image size in bytes can be obtained. See the demo
     program for an example of how  to  use this information in a practical
     program.


     Programming pop-ups.
     --------------------
     Before the  pop_up_menu  routine  is  called  there  are  a  number of
     programming considerations  which  must  be  addressed.  Obviously the
     routine uses a number of AES  and  VDI  calls so the GEM system should
     first be properly initialised (although it  is not necessary to have a
     menu bar).


     The programmer must ensure that  there  is sufficient memory available
     in the memory  pool  to  save  the  area  under  the  menu  when it is
     displayed. This amount will vary, of  course, depending on the size of
     the box but about 32Kb should  be  enough. The required RAM is grabbed
     with a m_alloc call at the start of the routine and is returned at the
     end so that the memory pool remains unchanged.

     Before a pop-up menu can be displayed, the x and y co-ordinates of the
     box must be determined. It is usual to  set the position of the box so
     that the current menu item appears  at  the same y co-ordinates as the
     current selection. This means that the  x and y co-ordinates passed to
     the routine will need to be  calculated  each  time the pop-up menu is
     displayed. This can be done by  first fetching the co-ordinates of the
     current selection box (the box on the main that is showing the current
     selection) and then subtracting the co-ordinates of the same menu item
     string from them. For example, the code fragment below (taken from the
     demo program) shows the technique.

     loop    evnt_multi      etc,etc,etc             main loop (if reqd)
             ..


             objc_locate     #FORM_MAIN,#0           get addr of main in a3
             objc_offset     a3,#COLOUR_SELECT       get co-ords of box
             move            int_out+2,d6            fetch x co-ords
             move            int_out+4,d7            fetch y co-ords
             objc_locate     #FORM_COLOURS,current   set a0 to objc addr
             sub             16(a0),d6               calc x co-ord
             sub             18(a0),d7               calc y co-ord
             pop_up_menu     #FORM_COLOURS,d6,d7,#buffer     show menu
             tst             d0                      error ?
             bne             mem_error               looks like it
             cmp             #-1,buffer              any item selected ?
             beq             loop                    apparently not
             move            buffer,current          save selected item
             ..                                      take any action reqd

     current ds.w            1                       current selection
     buffer  ds.b            16                      temp buffer


     In this example,  the  'objc_locate'  MACRO  sets  register  a3 to the
     address of the form passed as the first parameter and sets register a0
     to the address  of  the  object  in  that  form  passed  as the second
     parameter (see the demo source code for further details).

     Note that the x/y co-ordinates calculation in this example assume that
     the menu form will always appear wholly on screen since the programmer
     will know where the menu is going to be shown. However, if the menu is
     to be displayed wherever the mouse happens  to be on screen (as in the
     EasyDraw program for example), the  programmer  will also need to test
     the calculated x and y co-ordinate  values together with the width and
     height of the menu box and the  screen  size and adjust the x/y values
     passed to the routine accordingly if any part of the menu box could be
     drawn off the edge of the screen.

     On return from the pop-up menu routine  it  is usual that the new menu
     selection is copied into the main  screen  object box to show what has
     currently been selected. The example below shows one way of doing this
     for a text string and would normally follow immediately after the code
     shown above.

             objc_locate     #FORM_MAIN,#0           fetch main box addr
             move.l          buffer+4,a4             fetch string addr
             move            #COLOUR_SELECT,d3       d3=box ident
             bsr             set_tedinfo             copy string to objc
             objc_offset     a3,#COLOUR_SELECT       fetch objc co-ords
             objc_locate     #FORM_MAIN,#COLOUR_SELECT   set a0 to addr
             move            buffer+10,d0            fetch string length
             lsl             #3,d0                   calc width in pixels
             move            d0,20(a0)               change objc width
             objc_draw       a3,#0,#5,int_out+2,int_out+4,#110,#20
             bra             loop


     The 'set_tedinfo' sub-routine copies the  string  pointed  at by a4 to
     the object string defined by a3  and  the  object ident in d3 (see the
     demo source code for further details on this sub-routine).

     The code above  copies  the  text  string  defined  by the pop_up_menu
     routine (address at  buffer+4)  into  the  object  string  of the main
     screen box. The dimensions of  the  box  are  then changed so that the
     string just fits neatly into it and then the box is redrawn on screen.
     Note that in this example, the width  and  height of the box (#110 and
     #20) are known although these  values  could  be  read from the object
     array if required.

     A similar technique is used for  graphics except that it not necessary
     to change  the  size  of  the  box.  See  the  demo  source  code  for
     information on how to do this.


     POP_UP.S sub-routine file.
     --------------------------
     The sub-routine itself  together  with  the  MACRO  definition and RAM
     stores are  contained in  the  POP_UP.S  file.  This routine should be
     imported  into  the  programmers  source   code  and  then  the  MACRO
     definition moved to the start of the  source code file (or it could be
     copied to your main MACRO file if  you intend to use it regularly) and
     the RAM stores moved to the BSS section of the source file.

     A quick reference data file  called  POP_MENU.DOC  is also provided in
     this folder.


     Conclusion.
     -----------
     This code has not been tested  on  a  multi-tasking system or with any
     TOS version other than 1.04. It  should  work  on any system but if it
     doesn't, please let  me  know.  If  any  member  has  any  comments or
     enhancements concerning this code I would  be interested to hear about
     them.
