SUB-ROUTINE NAME        rnd_scale
BRIEF DESCRIPTION       Returns random number within predefined limits
FILENAME                RNDSCALE.S
OTHER RESOURCES         None
LANGUAGE                Assembler (Devpac)
AUTHOR                  Peter Hibbs

ENTRY PARAMETERS        In line data defines range.
                        seed = 16 bit random number.

EXIT PARAMETERS         d0.w = random number within set range.
                        seed = new 16 bit random number.
DETAILS -

This routine returns a pseudo-random  number  which  is within the limits
defined by the in-line data. This  sort  of routine is often required for
games programs which need to generate  a  random number between two fixed
values. Although this is  not  a  'real'  random  number  generator it is
usually  good  enough  for  most  applications.  A  pseudo-random  number
generator returns a different number each time  it is called and will not
repeat itself until all combinations have been used, i.e. 65535 different
values for a 16 bit number. Note that  the sequence is always the same so
that if a given value is known  in  the seed, the resulting random number
can be calculated. This  can  be  useful  for  the programmer for testing
purposes since a known value can be  loaded  into the 'seed' and the same
'random' number will be generated every time.

The routine  is  in  two  basic  parts,  a  16  bit  pseudo-random number
generator and the code to  proportionally  re-scale  the random number to
within the predefined limits. The section which generates a 16 bit random
number is marked with  stars  and  could  be  written  as a separate sub-
routine, if required.

Before the sub-routine is called the 16 bit 'seed' should have some value
written into it (once near the  beginning  of  the program) since the RAM
area is normally preset to zero which would always give the same sequence
of 'random' numbers. Any simple  method  of  generating  a number will do
i.e. the value of the first key pressed or the current x or y co-ordinate
of the cursor or the current value of the 200Hz system counter.

The lower and upper limits of the  required number are defined by the two
longwords immediately following  the  sub-routine  call.  For example, to
generate a number between  10  and  50  inclusive  the  code  would be as
follows :-
                ...
                bsr     rnd_scale
                dc.l    10,50           define limits 10-50 inclusive
                ...

The 16 bit pseudo-random number is  returned  in the d0.w register and is
within the values 10 to  50  inclusive.  The  'seed' store contains a new
value after each call. If the range  of numbers required needs to vary on
each  call,  the  in-line  data  longwords   after  the  'bsr  rnd_scale'
instruction should be omitted and the lower and upper limit values loaded
into registers d0 and  d1  respectively.  In  the  sub-routine itself the
instructions marked with a hash should also be omitted.

See the book 'Microprocessor Programming  for Computer Hobbyists (p 161)'
for more information on how the random number generator code works.
