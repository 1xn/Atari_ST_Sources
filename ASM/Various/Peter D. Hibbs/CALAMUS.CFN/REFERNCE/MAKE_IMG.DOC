SUB-ROUTINE NAME        make_image
BRIEF DESCRIPTION       Generates a bit image of a Calamus character in RAM
FILENAME                CFN_CODE.S
OTHER RESOURCES         GEM, VDI & AES Library files
LANGUAGE                Assembler (Devpac)
AUTHOR                  Peter Hibbs

ENTRY PARAMETERS        a0=start address of the font buffer
                        d7=character code (0-224 i.e. ASCII value-32)
                        (font_size)=divide value
                        (chr_addr)=start address if bit image RAM
                        (char_width)=width of chrs (in bytes)  } (set by)
                        (font_height)=height in scan lines     } (calc_top)
                        (t_edge)=offset value from top of cell } (S/R)
                        (max_width)=current maximum width in pixels
                        'up_list' and 'down_list' buffers defined

EXIT PARAMETERS         (chr_addr)=last address+1 of bit image RAM
                        (max_width)=new width in pixels (if relevant)
                        d0=0 if there were no errors
                        d0=1 if the character is invalid
                        d0=3 if there is a 'sort' error

DETAILS -

This routine is used to generate a bit image of a valid character in a font
at a specified point size. The  character  can then be quickly displayed on
screen using the 'blit_char' (NOT the 'show_char') sub-routine or copied to
a printer buffer for subsequent printing.

To use the routine first allocate  a  block  of  RAM  in which to store the
character bit image, this can be either a  'fixed' buffer or a block of RAM
allocated using the 'malloc'  GEM  function.  The  size  of the buffer will
depend on the point size of the  font  and can be calculated by multiplying
the 'font_height' and 'char_width' variables together  and adding 8 for the
header block. The buffer must first be  cleared (all bytes set to 0) before
the routine is called.  Copy  the  start  address  of  the  buffer into the
'chr_addr' variable.

Set register a0 to the start of  the  buffer holding the font data and copy
the  required  'divide  value'  into  the  'font_size'  variable  (see  the
CFN_CODE.DOC document file for information on calculating this value).

Two more buffers called 'up_list'  and  'down_list' must also be allocated,
the size of  the  buffers  will  depend  on  the  point  size  used and the
complexity of the  character  data,  see  the  CFN_CODE.DOC  file  for more
information.

The 'char_width', 'font_height'  and  't_edge'  variables  should  first be
initialised by calling  the  'calc_top'  sub-routine  (see the CALC_TOP.DOC
data sheet). The 'max_width' variable can  be  ignored when this routine is
called on its own  since  this  is  only  relevant  when  each character is
formatted in sequence such as in the 'make_char_set' routine.

Call the 'make_image' sub-routine and on return check the value of register
d0, if it is not zero an error has occurred as mentioned above.

Providing there was no error the  'chr_addr'  variable holds the address of
the next byte after the end of the bit image data.
