SUB-ROUTINE NAME        make_chr_set
BRIEF DESCRIPTION       Generates a bit image of a Calamus font in RAM
FILENAME                CFN_CODE.S
OTHER RESOURCES         GEM, VDI & AES Library files
LANGUAGE                Assembler (Devpac)
AUTHOR                  Peter Hibbs

ENTRY PARAMETERS        (chr_addr)=start address of image buffer
                        Bit image buffer cleared to zeros
                        a0=address of buffer which holds font data
                        a5=address of ca_table buffer
                        (max_ram)=address of end of bit image buffer
                        (font_size) holds divide value
                        'up_list' and 'down_list' buffers defined

EXIT PARAMETERS         (chr_addr)=last address+1 of bit image RAM
                        (t_edge)=top edge offset value in pixels
                        (font_height)=height of tallest chr in pixels
                        (max_width)=width of widest chr in pixels
                        (base_line)=offset from top of chr in pixels
                        (chr_count)=number of chrs actually used in font
                        d0=0 if there were no errors
                        d0=1 if the Calamus font file is invalid
                        d0=2 if there is insufficient bit image RAM
                        d0=3 if there is a 'sort' error
                        Most other registers are corrupted

DETAILS -

This routine is used to generate a bit image of all the valid characters in
a font at  a  specified  point  size.  Any  character  can  then be quickly
displayed on  screen  using  the  'show_char'  (NOT  the  'blit_char') sub-
routine.

To use the routine first allocate  a  block  of  RAM  in which to store the
character bit images, this can be either a 'fixed' buffer or a block of RAM
allocated using the 'malloc'  GEM  function.  The  size  of the buffer will
depend on the point size of the font  and the number of valid characters in
the  font.  See  the  CFN_CODE.DOC   for   further  information  on  memory
allocation. The RAM must be cleared (all bytes set to 0) before the routine
is called. Copy  the  start  address  of  the  buffer  into  the 'chr_addr'
variable and the end address into the 'max_ram' variable.

Set register a5 to the start  of  a  896  byte (224 longwords) buffer which
will be used to store  the  start  addresses  of  each of the character bit
images. This buffer is also accessed by the 'show_char' sub-routine.

Set register a0 to the start of  the  buffer holding the font data and copy
the  required  'divide  value'  into  the  'font_size'  variable  (see  the
CFN_CODE.DOC document file for information on calculating this value).

Two more buffers called 'up_list'  and  'down_list' must also be allocated,
the size of  the  buffers  will  depend  on  the  point  size  used and the
complexity of the  character  data,  see  the  CFN_CODE.DOC  file  for more
information.

Call the 'make_char_set'  sub-routine  and  on  return  check  the value of
register d0, if it is not zero an error has occurred as mentioned above.

A number of other parameters are also  returned by the routine which can be
used within the program.

Providing there was no error the  'chr_addr'  variable holds the address of
the next byte after the end of the bit  image data and could be used as the
start address of a new buffer. Make  sure,  however, that the address is an
even value before storing any more bit image data.

The 't_edge' variable holds the number  of  blank scan lines that have been
chopped off the top of  the  character  cells,  this information is used by
other routines but would not normally be  of  any use to the programmer and
can, therefore, be ignored.

The 'font_height' variable holds the height  in pixels (i.e. scan lines) of
the character cells. All the character  cells  in  a  font will be the same
height and will be the height of  the tallest character plus one extra scan
line at the top and bottom. Note  that  in practice the height could be the
tallest character but usually the top line  is set by the highest character
and the bottom line is set by the lowest character.

The 'max_width' variable holds the width  of the widest character in pixels
and is usually (although not necessarily)  the  'W'  or  the 'M'. As in the
height value, one pixel is added  to  the  left  and  right edges so that a
character image does not actually  touch  the  edge  of the character cell.
This information could be useful in a program which needs to align a number
of character images in a column or in boxes, etc.

The 'base_line' variable holds the distance  in pixels between the top edge
of the character cell and the base  line  as defined by the font data. This
value can be used to align a  number of characters of different point sizes
on the same base line.

The 'chr_count' variable holds the actual  number of characters used in the
font.
