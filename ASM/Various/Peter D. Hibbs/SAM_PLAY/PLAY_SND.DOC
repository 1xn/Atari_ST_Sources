SUB-ROUTINE NAME        play_snd  (Also stop_snd, init_snd)
BRIEF DESCRIPTION       Plays sampled sound via PSG
FILENAME                PLAY_SND.S
OTHER RESOURCES         INTMATH.I Macro file by S Rigby
LANGUAGE                Assembler (Devpac)
AUTHOR                  Peter Hibbs

ENTRY PARAMETERS        d0=number of sound sample to play
                        Sampled Sound Block data file inc at 'snd_data'
                        Sound look up table included at 'snd _table'
                        Supervisor mode enabled
                        PSG initialised

EXIT PARAMETERS         Interrupts enabled (Sound played during interrupts)
                        (samp_addr) holds start address of sound data
                        (samp_len) holds length of sound data in bytes

DETAILS -

This routine is based on one written  by  'Powerman' of the Wild Boys group
and is used to play sampled sounds  in  .SAM format through the PSG chip on
STFM/STE machines. Normally a  program  would  need  to  be  able to play a
number of different sounds within the program  and this is done by building
a block of separate  sound  samples  with  a  program called SND_EDIT. This
program loads a number of sound samples  in  .SAM format (8 bit signed) and
combines them into a single file  called  a Sampled Sound Block file (.SSB)
which is then saved back to disk.  The user program then includes this file
in the user  program  with  the  'incbin'  pseudo-op  command  so  that the
'play_snd' sub-routine can play any of the sound samples in the data block.

When the various sound samples are loaded into the sound editor program the
identification number of each sample  should  be  noted (starting at 0). To
replay any of the stored  sounds  the  user  program  should first call the
'init_snd' sub-routine to initialise the PSG  and then just set register d0
to the required sample number  (0-nn)  and call the sub-routine 'play_snd'.
The sound is played back during interrupts and automatically stops when the
whole sample has been played. Providing  the  PSG  is not used for anything
else, the 'init_snd' sub-routine only needs to  be called once at the start
of the program.

The replay sequence can be terminated  early by calling the 'stop_snd' sub-
routine. Note also that if a new  sound sample is started while another one
is playing, the new one will take over and the original one ceases.

Note that the file STABLE4.DAT  must  be  included  in the program with the
label 'snd_table'. Also the sub-routine  'hz_to_timer'  (by Simon Rigby) is
used to calculate the PSG values for different frequencies and this routine
uses the INTMATH.I macro file  published  in  issue  9. However, if all the
samples use the same frequency,  the  code  could be simplified by omitting
the sub-routine call  and  loading  the  required  value  into  the timer A
register direct. For example :-

        play_snd4       move.l          (a0),samp_len
                        add             #20,a0
                        move.l          a0,samp_addr
                        move.l          #play_snd0,$134
                        move.b          #$1,$ffffa19
                        move.b          #$28,$ffffa1f   set freq value
                        bset            #5,$ffffa07
                        ..
The sound data itself must be 'included'  at a label called 'snd_data'. Two
stores, 'samp_len' and 'samp_addr'  should  also  be  defined as longwords.
Since the  code  which  starts  the  sound  sampling  writes  to  protected
addresses (the PSG registers, etc) the  program  must be in supervisor mode
when the 'play_snd' routine is  called.  This  proviso  also applies to the
'init_snd' and 'stop_snd' sub-routines.  On  return  from  the routines the
program can switch back to user  mode  since  the interrupt program runs in
supervisor mode anyway. The code to  enable and disable the supervisor mode
(which are shown as macros in the  example  below) could be included in the
routines themselves, if required,  it  really  depends  on whether the main
program itself is running in  supervisor  or  user  mode. A typical program
which uses a sound file  called  SOUNDS.SSB  as  the  sampled sound data is
shown below :-

                        include         INTMATH.I       (if required)

        prog_start      ..
                        normal program
                        initialisation
                        code here
                        ..
                        super_on                        enable supervisor
                        bsr             init_snd        initialise PSG
                        super_off                       disable supervisor
                        ..

        ;Play sound sample number 3
                        super_on                        enable supervisor
                        move            #3,d0           play sample 3
                        bsr             play_snd        start playing snd
                        super_off                       disable supervisor
                        ..
                        ..

                        section         DATA

        snd_table       incbin          stable4.dat     sound look-up table
        snd_data        incbin          sounds.ssb      sound data

                        section         BSS

        samp_addr       ds.l            1               sample addr store
        samp_len        ds.l            1               sample length
