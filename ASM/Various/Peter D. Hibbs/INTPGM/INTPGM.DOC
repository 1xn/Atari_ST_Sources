SUB-ROUTINE NAME        install_int (also de_install and int_pgm)
BRIEF DESCRIPTION       Install an interrupt program in VBL queue
FILENAME                INTPGM.S
OTHER RESOURCES         -
LANGUAGE                Assembler (Devpac)
AUTHOR                  Peter Hibbs

ENTRY PARAMETERS        None

EXIT PARAMETERS         Interrupt routine installed

DETAILS -

This routine installs an interrupt routine  in  the 20mS VBL queue. There
are actually three parts to this code,  the install routine which sets up
the interrupt, the de-install routine which  removes the interrupt at the
end of the program and the interrupt routine itself.

The 'install_int' sub-routine should be  called  somewhere near the start
of the program once the various  variables  have been initialised and the
interrupts are ready to be enabled. Note  that the vbl queue has normally
got five interrupt slots available and  this  routine assumes that one of
those will be free. If it is  possible  that other programs have used all
five the code will need  to  check  for  this  and use the extended queue
system as described in any good  reference book. Alternatively  a counter
could count the number of  slots  that  are  checked  and return an error
signal if all five are in use.

When the install routine has  been  called,  any code after label int_pgm
will be executed every 20 mS. This code should be kept as short and quick
as possible or the system will  go  haywire  if  it stays too long in the
interrupt routine. Do not use  any  VDI/AES/BIOS  functions as these will
corrupt the main program settings and are usually too slow. Any registers
can be used since these are  saved  and  restored by the BIOS itself, any
data that needs to be read from or transferred to the main program should
be done in memory stores since  data  in  registers cannot be accessed by
the main program. The interrupt  routine  should  terminate with an 'rts'
instruction.

Before the main program terminates  the  interrupts should be disabled by
calling the 'de_install'  sub-routine  or  else  the  interrupt code will
continue to function after the program has finished.

A typical program could look like this -

start_of_pgm    initialise GEM etc
                initialise interrupt stores as required
                ..
                bsr     install_int             start interrupts
                .
                .                               main program code
                .
                bsr     de_install              disable interrupts
                .
                exit program


int_pgm         interrupt code (executed every 20 mS)
                .
                rts
