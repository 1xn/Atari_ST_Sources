SUB-ROUTINE NAME        compare
BRIEF DESCRIPTION       Compare value in d0.W  with  in-line  table and jump
to new address if match found
FILENAME                COMPARE.S
OTHER RESOURCES         None
LANGUAGE                Assembler (Devpac)
AUTHOR                  Peter Hibbs

ENTRY PARAMETERS        d0.W holds value to be tested.
                        In-line data follows BSR instruction (see below)

EXIT PARAMETERS         Program jumps to new address if match found
                        or next instruction if no match found
                        No registers changed.

DETAILS -

This routine allows a  program  to  jump  to  one  of  a number of different
addresses in the program if  the  value  in  register d0.W matches a similar
value in a look-up table. The table  of values and addresses follows the BSR
instruction as in-line data. For  example,  suppose  the keyboard routine is
called and returns with a key value in d0.W. The program then is required to
jump to one of three different addresses if  the keys A, Q or Z are pressed,
i.e. labels 'address_a, address_q and  address_z.  If  no match is found the
program continues with the next instruction after the table.

The in-line table consists of a 'word'  which defines the number of tests to
be made, the values to be tested and the  addresses to jump to if a match is
found. The above example would be coded as follows :-

        bsr     keybrd          fetch value into d0.W (or other code)
        bsr     compare         call 'compare' S/R
        dc.w    3               number of tests (3 in this case)
        dc.w    'A'             first value to test
        dc.l    address_a       first address
        dc.w    'Q'             second value to test
        dc.l    address_q       second address
        dc.w    'Z'             third value to test
        dc.l    address_z       third address
        ..      ..              next instruction

If no match is found the  program  continues with the next instruction after
the end of the in-line data.

This system is preferable  when  the  program  has  to  jump  to a number of
different addresses depending on  the  value  of  a  register  rather than a
series of cmp instructions.

