SUB-ROUTINE NAME        redraw, save_scrn, restore_scrn
BRIEF DESCRIPTION       Redraws corrupted window from GEM rectangle list
FILENAME                REDRAW.S
OTHER RESOURCES         HiSoft GEMMACRO & AES/VDI library files included
LANGUAGE                Assembler (Devpac)
AUTHOR                  Peter Hibbs

ENTRY PARAMETERS        (s_buffer..) holds copy of screen
                        (w_handle) holds window handle of corrupted window

EXIT PARAMETERS         Screen image redrawn

DETAILS -

This routine redraws any corrupted part of  a  window on screen as a result
of an accessory or other program  window  being displayed and then removed.
This version works in any of the  three standard resolutions and for normal
size screens only. The  way  in  which  it  works,  however,  is a bit non-
standard and may not be suitable for all types of programs, i.e. ones which
display multiple windows or which write  continuous data to the screen RAM.
However for most straightforward  programs  it  should  be  OK  and has the
advantage that screen redraws are done very quickly.

The routine works by keeping a copy of the screen in a 32K buffer to update
the main screen whenever a screen redraw  message is received from the AES.
All the main program has to do is to copy the screen complete to the buffer
every  time  the  screen  image  is  changed  in  ANY  way.  A  sub-routine
'save_scrn' is  used  to  copy  the  screen  data  and  only  takes  a  few
milliseconds which is not normally noticeable by the user. If the screen is
being changed very frequently though,  this  delay  will probably slow down
the program too much. It  would  be  possible,  however, to write a routine
which only copies the part  of  the  screen  to  the  buffer which has been
changed. For example, if text  is  being  typed  from the keyboard and also
being displayed on screen, the character image could also be written to the
appropriate position in the buffer. This method  would be a lot faster than
copying the whole screen each time.

Another sub-routine 'restore_scrn' copies the  buffer  complete back to the
screen and while this is  not  used  by  the  'redraw' routine it is useful
sometimes for restoring the screen image after a dialog box has been used.

The routine works in  conjunction  with  the  AES  'evnt_multi' function to
allow access  to  accessory  programs  which  might  be  present.  When  an
accessory program is closed  (but  not  when  opened unfortunately) the AES
generates a 'message event'  which  allows  the  user program (and possibly
other accessories) to update the screen and remove any windows which are no
longer required. To do this the  AES  provides  a rectangle list which is a
list of screen co-ordinates of the  rectangles  on  screen which need to be
redrawn. The user program has to go  through  the list one by one restoring
any areas of  the  screen  that  have  been  'corrupted'  by  the accessory
programs.

For the routine to work correctly,  therefore,  a number of conditions must
first be fulfilled by the user program.

1.  When the program is first run  a  window  must be created and opened on
screen because the evnt_multi function will not generate a message event if
there is no open window. Also the start address of the screen RAM should be
fetched (with the 'logbase' XBIOS call) and stored in the (screen) store.

2.  As mentioned  above,  the  screen  image  should  be  saved  to the 32K
's_buffer' when the initial screen  has  been  displayed and every time the
screen data is changed using the 'save_scrn' sub-routine.

3.  The evnt_multi function should be called as the main method of handling

messages, keyboard events, mouse events, etc  so  that a redraw message can
be detected during the program.

4.  The window handle code returned  from the 'w_create' function should be
stored in the (w_handle) store which is then used by the redraw routine.

5.  The DevPac GEMMACRO and AES/VDI libraries must be included as normal as
some of these are used within the routine.

A typical program code outline is shown below :-

program_start   initialise GEM, etc, etc
                load resource file
                fetch screen address and store in (screen)
                display menu bar
                create main window
                copy window ident to (w_handle)
                open window on screen
                display program data in window
                ..
                bsr             save_scrn       initialise buffer
main_loop       evnt_multi      #16+2+1,#2,#1,#1,,,,,,,,,,,#msg_buffer,#-1
                move            int_out,d0      fetch event message
                btst            #4,d0           message event (=16) ?
                bne             message_evnt    yes so jump
                ..
                check for other types of events i.e. button/keybrd/etc
                ..
                bra             main_loop

message_evnt    move            msg_buffer,d0   fetch message type code
                cmp             #20,d0          is it a redraw message ?
                beq             msg_redraw      apparently yes
                ..
                check for other types of        usually window gadgets
                message if reqd                 i.e. close, scrollbar, etc
                ..
                bra             main_loop

msg_redraw      bsr             redraw          redraw screen
                bra             main_loop       loop when done

program_code    ..
                write new data to window        window info changed
                bsr             save_scrn       update buffer also
                bra             main_loop

                section         BSS

msg_buffer      ds.w            16              evnt message buffer
screen          ds.l            1               screen address store
w_handle        ds.w            1               window handle
srce_mfdb       ds.w            10              source mfdb
dest_mfdb       ds.w            10              destination mfdb
s_buffer        ds.b            32000           screen buffer

A brief description of the 'redraw' routine is as follows :-

The routine uses the BitBlit  GEM  function  'vro_cpyfm' to copy the buffer
data to the screen so it first has to determine the width and height of the
screen in pixels. The first  few  lines  calculate  the width and height by
using the 'vq_extend' function  which  returns  the current resolution and,
from this, the size of the screen  area  can be determined. This version of
the routine assumes that  the  screen  will  be  one  of the three standard
sizes, however, it should be  possible  to  rewrite  the  code to allow for
larger screen areas using the  information  returned  by the 'v_opnvwk' GEM
function. Just copy the width and height (in pixels) to registers d5 and d3
respectively and  the  number  of  colour  planes  into  register  d4.  The
'save_scrn' and 'restore_scrn' sub-routines will  also  need to be amended,
see later.

The routine then hides the mouse  (if  it  is showing) and inhibits the AES
from performing any screen activity while  the  redraw is taking place with
function 'wind_update'  (code  #1).  Function  'wind_get'  (code  #11) then
fetches the first rectangle width  and  height  (from  int_out+6 and 8), if
both values are zero, the list has been completed and the routine can exit.
The rest  of  the  routine  just  calculates  the  source  and  destination
rectangles from the values in  int_out+2  to  int_out+8 for the 'vro_cpyfm'
function which then blits the image from the appropriate part of the screen
buffer to the screen itself.

The next rectangle is then fetched from the rectangle list using 'wind_get'
(code #12) and the  process  repeated  until  all  the rectangles have been
processed.

When the routine exits the AES is re-enabled and the mouse re-displayed.

The 'save_scrn' routine copies the screen data to the 's_buffer' as quickly
as possible. However, if the  screen  RAM  is  larger than 32000 bytes, the
routine will need to be  amended  to  allow  for  this  and the buffer size
increased accordingly.  It  would  also  be  possible  to  use  the BitBlit
function to do the copying although I  don't think this would be any faster
unless the Blitter was in use.

It will be apparent from  the  above  notes  that,  while the routine works
quite well for a lot of programs, there  are a few limitations. It will not
work on larger screen  formats  or  the  higher  resolution  screens of the
Falcon, it may be difficult to use  on multiple window type programs and on
programs with fast changing screen displays.  If any member amends the code
to overcome any of these limitations, please  send  it in to ICTARI so that
other members may benefit.
