SUB-ROUTINE NAME        wait_init  (and wait_step)
BRIEF DESCRIPTION       Initialises bar graph display form and variables
FILENAME                WAIT_BAR.S
OTHER RESOURCES         DevPac AES/VDI & GEMMACRO libraries included
LANGUAGE                Assembler (Devpac)
AUTHOR                  Peter Hibbs

ENTRY PARAMETERS        (wait_max) holds maximum number of steps used.
                        Resource file definitions included.

EXIT PARAMETERS         (wait_count) set to zero.
                        (wait_x1) holds co-ordinate of left edge of bar.
                        (wait_y1) holds co-ordinate of top edge of bar.
                        (wait_y2) holds co-ordinate of bottom edge of bar.
                        Waiting form displayed on screen ready for use.

DETAILS -

This routine (together with  'wait_step')  displays  a  moving bar graph on
screen while some internal program  operation is taking place. Occasionally
a program is required to perform  a  lengthy calculation or operation which
may take a few minutes.  Some  programs  just  leave  the user staring at a
static screen while the data is  being  processed (which is bad programming
practice) while  other  programs  show  some  sort  of  graphical  image to
indicate the progress of the operation  which  is  much more helpful to the
user.

The most common type is the horizontal bar graph which starts off blank and
fills up from left to  right  as  the  operation continues and this routine
uses this method. Since the routines use  various GEM VDI/AES calls the GEM
system must be initialised and the  two (AES/VDI) libraries included at the
end of the source code as  normal  as  well  as the standard GEMMACRO file.
Also a resource file  should  be  loaded  at  the  start  of the program to
provide the 'Waiting' form display.  A  typical resource file (WAITING.RSC)
with its associated files  is  included  with  this  document  which can be
imported into the users program  resource  file, if required. The 'Waiting'
form has  the  name  'WAIT_FORM'  and  the  bar  object  itself  is  called
'WAIT_FORM1', these can be changed, if required, of course but don't forget
to change the names  in  the  'wait_init'  sub-routine  as  well. The other
objects in the form do not need to be named since the program does not need
to access them. The routines  will  work  in all three resolutions although
some parameters will need altering  depending  on  the mode being used, see
end of this document for further details.

To use the routines the programmer must  first decide on how many steps are
required to complete the operation  and  load  this value into the variable
store (wait_max). For example,  suppose  a  picture  file  is being decoded
where the picture consists of 400 lines,  the bar graph could be updated at
the end of each raster line which would  be 400 steps so load #400 into the
variable (wait_max). The 'wait_init' sub-routine  is  then called once just
before the start of the picture  decoding  routine to display the wait form
and initialise the counters, variables, etc. The 'wait_step' sub-routine is
then called at regular intervals (e.g. at  the  end of each raster line) to
update the bar graph on screen.  When  the operation is complete the screen
is then redrawn to erase the wait  form.  If the original screen display is
to be restored after the  operation,  the  complete screen (or perhaps just
the area of the screen used by the  wait  form) could be copied to a screen
buffer and then just copied back to the screen at the end of the operation.

The example wait form has a horizontal  bar  that is 200 pixels wide and 16
pixels high (although these can  be  changed  if  required) as well as some
text to inform the  user  about  the  operation  being  performed. When the
'wait_init' routine is called it displays  the  complete form in the centre
of the screen and then calculates the  x  and y co-ordinates of the bar and
stores them for later use by the 'wait_step' routine, also the step counter
(wait_count) is set to  zero.  Note  that  the  draw  modes and fill colour
attributes can also be set by the routine and should remain the same during
the operation for the 'wait_step'  routine.  If  any  of the GEM attributes
HAVE to be changed  by  the  main  program  during  the  operation, the set
attribute functions could be moved  to  the  start  of the 'wait_step' sub-
routine although this will slow down the code slightly.

During the computer operation the  'wait_step' sub-routine should be called
at regular intervals to update the graphics display. The routine increments
a counter each time it  is  called  and  then  draws  a filled rectangle on
screen where the width is calculated as a percentage of the total number of
steps required. Note that if  the  routine  is  called  MORE times than the
total set by the 'wait_init' routine, the extra steps are ignored. When the
operation has finished the screen  should  be  re-drawn  to erase the graph
display box.

The example code below shows the  outline  of  a  program which loads a low
resolution (200 line) picture file and converts it into another format, the
bar graph is updated at the end of each raster line.

pgm_start       initialise GEM
                load resource file
                etc, etc
                ..
                load picture file               fetch file to process
                bsr     save_scrn               save screen data in buffer
                move    #200-1,d7               set loop count
                move    #200,wait_max           set total steps
loop            bsr     convert                 convert one line
                bsr     wait_step               update bar graph
                dbra    d7,loop                 repeat till done
                bsr     restore_scrn            restore screen data
                ..


                section BSS

wait_count      ds.w    1                       step counter
wait_max        ds.w    1                       Max No of steps
wait_x1         ds.w    1                       x1 co-ord of bar
wait_y1         ds.w    1                       y1 co-ord of bar
wait_y2         ds.w    1                       y2 co-ord of bar


The example resource file uses a bar graph that is 200 pixels wide, if this
size is  changed,  the  'mulu   #200,d0'   instruction  in  the 'wait_step'
routine should be changed accordingly, i.e. if  the size is changed to 300,
the value in the routine should be  changed  to 300 also. Note also that if
the height of the bar is  changed  in  the  resource file from 16 pixels to
something else, the value #16 in the instruction 'add    #16-3,wait_y2 ' in
the 'wait_init' routine should be changed accordingly. If the program is to
be used in high resolution as well  as medium and low resolution the height
parameter will need to be changed from 16  to 8 pixels for the colour modes
since the resource file load  function  automatically rescales the graphics
forms to fit the current resolution.
