
                         Mouse movement limiter program
                         ------------------------------
                                 by Peter Hibbs

     One method to control  the  movement  of  the  mouse  on  screen is to
     intercept the 'Mouse Movement Vector' in  the  VDI and control the x/y
     co-ordinates with the required code. The VDI has four vectors that can
     be used, the one that  we  are  interested  in here is called vex_motv
     which allows the values of the x and y co-ordinates to be monitored or
     changed by an applications program.

     When the mouse is moved  the  keyboard  processor detects the movement
     and calculates the new x and y co-ordinates. These two values are then
     loaded into registers d0 and d1 respectively  and passed on to GEM via
     the vex_motv vector.  The  values  seen  at  this  point  are  the co-
     ordinates of the mouse position  after  they  have been determined but
     before the VDI or AES knows  what  they  are. If we divert this vector
     through our own program and alter the values in these two registers we
     can control the actions of  the  mouse  as  it  appears to the VDI/AES
     functions. This is the method some  mouse accelerators use to speed up
     the mouse movement.

     Each time the mouse is moved  the operating system calls a sub-routine
     which normally does nothing  To  intercept  this  function  we need to
     substitute our own sub-routine within our  program  and we can do this
     by calling the vex_motv VDI function and passing it the address of our
     new sub-routine. The function also  returns  the address of the system
     sub-routine so that the  old  vector  can  be  restored  when it is no
     longer needed, i.e. when we  exit  the  program.  Since  this is a VDI
     function, we first need to  open  a  work  station and obtain a device
     handle which is also passed to the vex_motv function. Providing we use
     the HiSoft GEMMACRO and VDI/AES  libraries, this is done automatically
     within the Macros.

     Somewhere near the  beginning  of  the  program  we  call the vex_motv
     function and pass it the address  of  our new sub-routine and save the
     old vector address which is returned in the contrl array :-

             vex_motv        #new_posn               set up new S/R addr
             move.l          contrl+18,old_vector    save original addr

      Now, every time the mouse  is  moved, the 'new_posn' sub-routine will
     be executed once (see  below).  At  the  end  of  the  program we must
     restore the old sub-routine vector with :-

             vex_motv        old_vector              restore old routine

     In the new sub-routine it is then  a  simple matter to test the d0 and
     d1 registers to determine  the  current  x  and  y co-ordinates of the
     mouse and change them if we need to. For example, to prevent the mouse
     moving into a  rectangle  area  on  screen  we  can  use the following
     routine where x1/x2 are the left and  right edges of the rectangle and
     y1/y2 are the top and bottom edges of the rectangle.

     x1              equ     80                      left edge
     x2              equ     240                     right edge
     y1              equ     50                      top edge
     y2              equ     150                     bottom edge

     new_posn        cmp     #x1,d0                  check left edge
                     blt     new_posn1               exit if d0<x1
                     cmp     #x2,d0                  check right edge
                     bgt     new_posn1               exit if d0>x2

                     cmp     #y1,d1                  check top edge
                     blt     new_posn1               exit if d1<y1
                     cmp     #y2,d1                  check bottom edge
                     bgt     new_posn1               exit if d1>y2

                     move    x_store,d0              restore last x co-ords
                     move    y_store,d1              restore last y co-ords
     new_posn1       move    d0,x_store              update x co-ords
                     move    d1,y_store              update y co-ords
                     rts

     x_store         ds.w    1                       x co-ord store
     y_store         ds.w    1                       y co-ord store
     old_vector      ds.l    1                       old vector addr store

     The co-ordinates in d0 and  d1  are  checked against the rectangle co-
     ordinates and if the mouse position would be inside the rectangle, the
     last known co-ordinates are copied back into  d0 and d1 which are then
     passed on to GEM. The effect on  screen is that the mouse cannot enter
     the rectangle. Of course,  if  NO  part  of  the  mouse must enter the
     rectangle, the actual co-ordinates of the top and left edges will need
     to be adjusted to allow for this.

     When using this method the routine  code  should be kept as simple and
     as fast as possible. Any other  registers  used should be saved to the
     stack and restored on exit. No  other  GEM  or TOS functions should be
     called from within the routine. It is not recommended that this vector
     is used on programs that  will  be  used in a MultiTasking environment
     since the vex_motv vector is  global  and would adversely affect other
     programs which may  be  running  at  the  same  time.  Also  it can be
     difficult to use 'debug'  to  test  a  program,  if  a  break point is
     inserted in a program AFTER  the  vector  has been initialised and the
     debugger is then exited without restoring the old vector, the new sub-
     routine will still be active  and  will  affect the mouse functions in
     the assembler/editor program.

     The  source  code  file,  MS_CHECK.S,  gives  an  example  program  to
     demonstrate the technique and the  MS_CHECK.PRG  program is a runnable
     version of the demo program. The program will run in any resolution.
