***************************************************************************
*			     STANDARD SOURCECODE			  * 
***************************************************************************
	jsr	setsuper
	jsr	setscreen
	move.l	$70.w,oldvbi
	move.l	#newvbi,$70.w
	move.w	#$777,$ff8242

	move.w	#16000,d0
	move.l	#$30000,a0
cls:
	move.l	#0,(a0)+
	dbf.w	d0,cls

***************************************************************************
mainloop:
	move.w	#$0,$ff8240
	jsr	waitvbl
	jsr	screenswap
	move.w	#$700,$ff8240


	move.w	#111,d0
	move.l	#$30000+9*160+48,a0
	add.w	srnp,a0
	move.w	#0,d1
clear:
	move.w	d1,(a0)
	move.w	d1,8(a0)
	move.w	d1,16(a0)
	move.w	d1,24(a0)
	move.w	d1,32(a0)
	move.w	d1,40(a0)
	move.w	d1,48(a0)
	move.w	d1,56(a0)
	add.w	#160,a0
	dbf.w	d0,clear

	move.w	#$300,$ff8240

*	First half of circle

* a0 p. p† cos v	a1 p. p† sin v
*
* d5 x		d6 y
* d7 z

	move.l	#sin,a5		; a5 inneh†ller worddata
	move.l	#$30000,a4	; a4 inneh†ller sk„rmdata
	add.w	srnp,a4

	move.w	#0,v
	addq.w	#4,v2
	cmp.w	#718,v2
	ble	hopps
	move.w	#0,v2
hopps:
	addq.w	#6,v3
	cmp.w	#718,v3
	ble	hoppc
	move.w	#0,v3
hoppc:
	move.l	#cos,a2
	move.l	#sin,a3
	add.w	v2,a2
	move.w	(a2),d7
	add.w	v3,a3
	move.w	(a3),d4
	add.w	#171,d7
	add.w	#171,d4
	move.w	#45,d5
	move.w	#36,d6
	move.l	#cos,a2
	move.l	#sin,a3
loop:
	add.w	#6,v
hopp:
	move.l	a2,a0
	move.l	a3,a1
	add.w	v,a0
	add.w	v,a1

*	move.l	#data,a6
*	add.w	c,a6

* Rout to calculate the vector

*	(1)
	move.w	(a0),d0
	add.w	#100,d0
	muls.w	(a1),d0
	move.w	d6,d1
	muls.w	(a0),d1
	divu.w	d4,d0		; Eftersom d0 inne „r under 0 p† den h„r sidan kan vi mulua ist„llet f”r att mulsa
	divs.w	d7,d1

	add.w	#160,d0
	add.w	#65,d1

*	Convert screen cor.

	mulu.w	#160,d1
	move.w	d0,d3
	lsr.w	#4,d3
	move.w	d3,fill
	lsl.w	#3,d3
	add.w	d3,d1		; d1 inneh†ller plats minnet
	move.w	d0,d2
	lsr.w	#4,d2
	lsl.w	#4,d2
	sub.w	d2,d0
	move.w	#15,d2
	sub.w	d0,d2		; d2 inneh†ller plats i wordet
	move.l	#word,a6
	rol.w	#1,d2
	add.w	d2,a6
	move.w	(a6),d0		; d0 inneh†ller det r„tta wordet
*	plot rout.
	move.l	a4,a6
	add.w	d1,a6
	or.w	d0,(a6)
	or.w	d0,160(a6)
	or.w	d0,320(a6)

	move.w	fill,d2
	sub.w	#11,d2
	cmp.w	#0,d2
	blt	nofill
	move.w	#$ffff,d3
lf:
	subq.w	#8,a6
	move.w	d3,(a6)
	move.w	d3,160(a6)
	move.w	d3,320(a6)
	subq.w	#1,d2
	cmp.w	#-1,d2
	bgt	lf
nofill:
	cmp.w	#720-8*47,v
	ble	loop

*	Second half of circle

* a0 p. p† cos v	a1 p. p† sin v
*
* d5 x		d6 y
* d7 z

	move.l	#sin,a5	; a5 inneh†ller worddata
	add.w	#2,plsm
	cmp.w	#320,plsm
	bne	no
	move.w	#0,plsm
no:
	add.w	plsm,a5
	move.w	#344+8*3,v
	move.l	#cos,a2
	move.l	#sin,a3
	add.w	v2,a2
	move.w	(a2),d7
	add.w	v3,a3
	move.w	(a3),d4
	add.w	#171,d7
	add.w	#171,d4
	move.w	#45,d5
	move.w	#36,d6
	move.l	#cos,a2
	move.l	#sin,a3
loop2:
	add.w	#6,v
hopp2:
	move.l	a2,a0
	move.l	a3,a1
	add.w	v,a0
	add.w	v,a1

*	move.l	#data,a6
*	add.w	c,a6

* Rout to calculate the vector

*	(1)
	move.w	(a5)+,d0
	add.w	#100,d0
	muls.w	(a1),d0
	move.w	d6,d1
	muls.w	(a0),d1
	divs.w	d4,d0
	divs.w	d7,d1

	add.w	#160,d0
	add.w	#65,d1

*	Convert screen cor.

	mulu.w	#160,d1
	move.w	d0,d3
	lsr.w	#4,d3
	move.w	d3,fill
	lsl.w	#3,d3
	add.w	d3,d1		; d1 inneh†ller plats minnet
	move.w	d0,d2
	lsr.w	#4,d2
	lsl.w	#4,d2
	sub.w	d2,d0
	move.w	#15,d2
	sub.w	d0,d2		; d2 inneh†ller plats i wordet
	move.l	#word2,a6
	rol.w	#1,d2
	add.w	d2,a6
	move.w	(a6),d0		; d0 inneh†ller det r„tta wordet
*	plot rout.
	move.l	a4,a6
	add.w	d1,a6
	or.w	d0,(a6)
	or.w	d0,160(a6)
	or.w	d0,320(a6)

	move.w	fill,d2
	cmp.w	#9,d2
	beq	nofill2
	move.w	#$ffff,d3

lf2:
	addq.w	#8,a6
	move.w	d3,(a6)
	move.w	d3,160(a6)
	move.w	d3,320(a6)
	addq.w	#1,d2
	cmp.w	#9,d2
	blt	lf2
nofill2:
	cmp.w	#720-8*3,v
	ble	loop2

	jmp	mainloop
***************************************************************************
setsuper:
	clr.l	-(sp)			
	move.w	#$20,-(sp)
	trap	#1
	addq.l	#6,sp
	move.l	d0,savesuper
	rts
***************************************************************************
newvbi:
	move.w	#1,vbiflag
	rte
***************************************************************************
waitvbl:
	cmpi.w	#1,vbiflag
	bne	waitvbl
	move.w	#0,vbiflag
	rts 
***************************************************************************
setscreen:
	move.w	#0,-(sp)
	move.l	#$30000,-(sp)
	move.l	#$30000,-(sp)
	move.w	#$5,-(sp)
	trap	#14
	add.l	#12,sp
	rts
***************************************************************************

***************************************************************************
screenswap:
	add.w	#32000,srnp
	cmp.w	#64000,srnp
	bne	jhopp2
	move.w	#0,srnp
	move.w	#32000,osrnp
	bra	jhopp3
jhopp2:
	move.w	#0,osrnp
jhopp3:
	move.l	#$30000,d2
	add.w	srnp,d2
	lsr.l	#8,d2
	move.b	d2,$ff8203
	lsr.l	#8,d2
	move.b	d2,$ff8201
	rts
***************************************************************************

***************************************************************************
savesuper:	dc.l	0
vbiflag:	dc.w	0
oldvbi:		dc.l	0
cos:	include	"3d.cos"
	even
sin:	include	"3d.sin"
	even
v:	dc.w	0
c:	dc.w	0
data:	dc.w	40,40,40
	dc.w	-40,40,40
	dc.w	40,-40,40
	dc.w	-40,-40,40
	dc.w	40,40,-40
	dc.w	40,-40,-40
	dc.w	-40,40,-40
	dc.w	-40,-40,-40
v2:	dc.w	0
v3:	dc.w	0
srnp:		dc.w	0
osrnp:		dc.w	0
word:
		dc.w	%1111111111111111
		dc.w	%1111111111111110
		dc.w	%1111111111111100
		dc.w	%1111111111111000
		dc.w	%1111111111110000
		dc.w	%1111111111100000
		dc.w	%1111111111000000
		dc.w	%1111111110000000
		dc.w	%1111111100000000
		dc.w	%1111111000000000
		dc.w	%1111110000000000
		dc.w	%1111100000000000
		dc.w	%1111000000000000
		dc.w	%1110000000000000
		dc.w	%1100000000000000
		dc.w	%1000000000000000
word2:
		dc.w	%0000000000000000
		dc.w	%0000000000000001
		dc.w	%0000000000000011
		dc.w	%0000000000000111
		dc.w	%0000000000001111
		dc.w	%0000000000011111
		dc.w	%0000000000111111
		dc.w	%0000000001111111
		dc.w	%0000000011111111
		dc.w	%0000000111111111
		dc.w	%0000001111111111
		dc.w	%0000011111111111
		dc.w	%0000111111111111
		dc.w	%0001111111111111
		dc.w	%0011111111111111
		dc.w	%0111111111111111
fill:		dc.w	0
plsm:		dc.w	0
