                              \\     ||     //
                           PICPAC for GFA Basic 3
                            By: M†rten Lindstr”m
                                 \\  ||  //

 The PICPAC library  contains  routines  for  picture  and palette handling:
 picture packing (IMG & IFF ILBM),  unpacking (ditto + Degas, Neochrome, GIF
 and TIFF) plus routines to translate between different palette formats.

 The routines are written in assembler  and  I originally only intended them
 to be used by assembler programmers. But  since they are written to be "PC-
 relative" it occurred to me that  they  could  easily be used INLINE in GFA
 Basic too.

 Together with this text you should have:

 PICPAC.LST    The GFA Basic 3 code
 PICPAC.INL    The assembler routines
 PICPAC12.INL  Cut down version with GIF & TIFF unpacking disabled
 PICPAC1.INL   Cut down version with IMG & IFF ILBM PACKING also disabled
 PICPABND.S    The  assembler  source  for   the   .INL  file(s).  (Actually
               containing merely the bindings for  the routines, calling and
               including the assembler library  files - PICPAC1.S, PICPAC2.S
               and PICPAC3.S - see the Ictari assembler department.)


                                To use PICPAC
                                -------------

 1)  Merge PICPAC.LST among function and  procedure definitions somewhere at
     the end of your GFA Basic program.

 2)  Find the INLINE command, place the cursor on it and press the Help key.
     This brings  up  a  menu  that  lets  you  LOAD  an  .INL  file. Select
     PICPAC.INL except if you want to  save  a  few kilobytes by using a cut
     down version. (To really gain anything  you must also reduce the length
     given with the INLINE command).

     Whenever you save your program as  a  .GFA  file, the .INL data will be
     saved with it,  so  that  you  don't  have  to  repeat  this  step when
     reloading the .GFA file.

 3)  At the start of your program use:
       @initpicpac
     This will initialize the variables:
     planes& = Number of colour bitplanes on screen
     pallen& = Number of colours in screen palette (=0 for high/true colour)
     pen|() :  Byte array containing the VDI  pen  number for each colour in
               the screen palette.
     screen&() Dummy screen MFDB. (Can  represent  the  screen  in any image
               copy operation - vro_cpyfm or vrt_cpyfm.)
     Plus it will initialize the addresses to all assembler routines.

 4)  You should also (in particular  if  you  intend  to unpack GIF and TIFF
     images) use a RESERVE command to  free  memory. It seems that GFA Basic
     defaults to grabbing almost all free  memory (leaving only 16K). But my
     GFA and TIFF routines  are  dependent  on  the  existence  of some free
     memory,  and  it  generally  isn't   considered  polite  anyway,  in  a
     Multitasking environment, to grab  all  memory.  I  don't know how much
     memory you need for internal  GFA  Basic  uses  (it probably depends on
     your program), but as an example:

       RESERVE 10000
       @initpicpac
       ' program main code
       RESERVE
       END

     will reserve 10000 bytes for GFA Basic  internal uses and free the rest
     until the end of the program. (The  ending RESERVE is needed to restore
     things when run in the interpreter).

     Whenever you need memory  for  a  file  or  image  or whatever, you can
     request  it  from  the  operating  system  with  MALLOC  (and  free  it
     afterwards with  MFREE,  at  least  as  long  as  you  are  running the
     interpreter).

 You must also make sure that you  use  OPTION  BASE 0 (the default) in your
 program - i.e. that the first element of every array is indexed 0.

                               Palette formats
                               ---------------

 The palette format used by  my  packing  and unpacking routines stores each
 colour as three consecutive bytes: R,G,B where each bytes contains a number
 0-255  representing  the  intensity  value  of  the  red,  green  and  blue
 components of the colour respectively. This is  the format used both in IFF
 ILBM images and in GIF, and is  just  spacious enough to contain any colour
 distinguishable to the human eye. (More  detailed  scales are often used to
 represent non-linear qualities of the  hardware,  but  if that is needed it
 could just as  well  be  accomplished  by  calibration  scales  -  like the
 ColorResponseCurves of TIFF - separate from all palettes and image data).

 In GFA Basic terms, the unpacking  routines  will  deliver the palette in a
 two-dimensional byte array - dimensioned with :-

     DIM pal|(2,255)

 if you don't know the length of  the  image  palette. (If you are sure that
 the palette is say  only 16 colours  long you could use DIM pal|(2,15), but
 a mistake could, of course, cause a horrible crash. Note: the LBM images of
 ST Civilization are stored with 32 colours although only 16 are used).

 Note that the first index stands  for the component number (0=red, 1=green,
 2=blue) while the second one is  the  colour number. This may seem terribly
 backwards but is  a  result  of  how  GFA  Basic  unfortunately stores two-
 dimensional arrays.
                               ---------------

 Since PICPAC.LST contains routines  for  setting/getting the screen palette
 in the above format, I don't think you should normally need anything else.

 There ARE also,  however,  routines  included  for  converting between this
 format and the ST(E) hardware format or a palette composed of VDI colours.

 A VDI palette is represented by a WORD array just like the above format but
 with word elements 0-1000 for each colour component.

 An ST(E) palette is represented by a ONE-DIMENSIONAL WORD array. I.e. there
 will be only a single word for each colour.

                                  The MFDB
                                  --------

 Any images to be copied or otherwise manipulated in GEM, are represented by
 "MFDB" arrays (Memory  Form  Definition  Block).  There  is  one  GFA Basic
 command making use of MFDBs  (BITBLK  with 3 parameters), but unfortunately
 the GFA Basic defined MFDB  consists  of  9  longword elements while "real"
 MFDBs are made up from 10 word  size  elements. (The GFA structure makes it
 possible to fit the image address into  one  single element but at the cost
 of offsetting indexes as well as addresses for all the following elements).
 I therefore have also included copying routines in PICPAC.LST that make use
 of standard MFDBs.

 You may not have to know the  full  format  of  the MFDB in order to use my
 routines to unpack and copy  (rectangles  from) images (since the unpacking
 routines will fill in  an  MFDB  that  is  immediately  usable with the GEM
 transformation and copying routines).

 Still, the standard MFDB is as follows:

     mfdb&(0)  High word of address to image data
     mfdb&(1)  Low word   - " -   ( access whole address with {V:mfdb&(0)} )
     mfdb&(2)  Width of image in pixels
     mfdb&(3)  Height of image in pixels
     mfdb&(4)  Width in "words" (=width in pixels /16 rounded up)
     mfdb&(5)  Flag: 1=device independent image format, 0=device specific
     mfdb&(6)  Number of colour bitplanes (to be used) in image
     mfdb&(7)  =0 (reserved)
     mfdb&(8)  =0 (reserved)
     mfdb&(9)  =0 (reserved)

 The format - defined by the flag  in  mfdb&(5)  - must in a 100% compatible
 program (working with any graphics card etc) be device independent whenever
 you load or save the image, or  manipulates  it  in any way other than with
 VDI operations.

 My unpacking routines  produces  images  in  this  format,  and  my packing
 routines expects its source data to be in the same format.

 Before you can copy (rectangles from) the  image  to or from the screen, or
 between images, the  format  needs  to  be  transformed  to device specific
 format and this is done with vr_trnfm (see below).

                               ---------------

 In addition to the above  standard  MFDB  elements my packing and unpacking
 routines use 8 extra elements:

   xmfdb&(10)  Actual number of planes in image
   xmfdb&(11)  Pixel width (in microns)
   xmfdb&(12)  Pixel height (in microns)
   xmfdb&(13)  0 (reserved; we'll see if I come up with some use for it)
   xmfdb&(14)  0 (or screen start colour when palette shorter than screen's)
   xmfdb&(15)  Number of colours in image palette
   xmfdb&(16)  High word of address to palette
   xmfdb&(17)  Low word  - " -  ( access whole address with {V:xmfdb&(16)} )

 So an MFDB intended for packing/unpacking images must be dimensioned :-

  DIM xmfdb&(17), while for an MFDB intended only for image copying :-
  DIM mfdb&(9)  will do.

 NOTE: In the  text  I  refer  to  normal  MFDBs  by  "mfdb&()", while MFDBs
 extended with the just mentioned elements are meant by "xmfdb&()".



                               The Screen MFDB
                               ---------------

 An MFDB for the screen can  be entirely uninitialized. The only requirement
 is that its first longword -  the  image  pointer  - must be zero, which is
 automatically filled once the array is  dimensioned  by GFA Basic. The rest
 of the array is said by the Atari Compendium and others to be automatically
 filled in by the system when used, but it is actually untouched.

 The initpicpac routine sets  up  a  screen&()  MFDB  which  can  be used to
 represent the screen whether as source or as destination.

 (Note: Trying to use screen&() directly  as a picture to pack/unpack merely
 returns an error  code.  The  screen  is  by  definition  "device specific"
 anyway. You can use screen&() only for VDI copying.)


                     The PICPAC functions and procedures
                     -----------------------------------

 PICPAC.LST contains not only the bindings  for the PICPAC routines but also
 GEM based routines for copying of  image  rectangles to and from the screen
 (or between  images),  and  for  setting/getting  palettes  and translating
 palette indexes to VDI pen  numbers.  (The  "colour  numbers" used with GFA
 graphic commands are VDI pen numbers).

 (Again, GFA Basic contains a multitude of image copying and palette setting
 commands of its own which,  however,  are  inadequate  if you are aiming at
 perfect and 100% compatible GEM programming).


 xwork_out(i&) (function)
 -------------
     Gets any one element from  the  "extended"  work_out array (as given by
     the VDI call  VQ_EXTND).  It  is  used  analogically  to  the  built in
     WORK_OUT() function that gives elements from the normal array (as given
     when opening VDI workstations).
     E.g. planes&=@xwork_out(4) gets the number of screen bitplanes.
     Just like pen&=WORK_OUT(13) gets the number of VDI colour pens.

 vr_trnfm(smfdb&(),dmfdb&()) (procedure)
 ---------------------------
     Transforms  an  image  defined  by   the  source  MFDB  between  device
     independent and device specific  formats  (either way). The Destination
     MFDB should be identical  to  the  source  MFDB,  except that the first
     longword {V:dmfdb&(0)} can point  to  a  separate  memory area for much
     faster transformation, plus  the  format  flag  of  the  destination is
     ignored (vr_trnfm will set it to the opposite of the source format).
     vr_trnfm MUST be  used  before  copying  an  unpacked  image with below
     functions.

 vro_cpyfm(m&,x&,y&,w&,h&,dx&,dy&,smfdb&(),dmfdb&()) (procedure)
 ---------------------------------------------------
     Copies a rectangle  between  images  (or  screen  -  see screen&() MFDB
     above) of equal number of bitplanes (colours).
     m& is the copy mode (3=replace; see  GFA Basic BITBLK with 3 parameters
     for further info, or GEM documentation for vro_cpyfm.)
     In this  binding  the  rectangle  within  the  source  is  defined with
     x&,y&,w&,h& while dx&,dy& refer to  the (upper left) coordinates within
     the destination. (See below for a  more standard binding using an xy&()
     array.)

 vrt_cpyfm(m&,x&,y&,w&,h&,dx&,dy&,col1&,col0&,smfdb&(),dmfdb&()) (procedure)
 ---------------------------------------------------------------
     Like vro_cpyfm except  it  copies  a  one  plane  (="mono")  image to a
     destination of any number of planes.
     m& - the copy mode - is NOT  the same as for vro_cpyfm however. Instead
     it uses the same values as the ordinary VDI writing mode (See GFA Basic
     GRAPHMODE) - i.e. m&=1 for replace mode.
     The two extra parameters  col1&  and  col0&  tells  what VDI colour pen
     should be used for 1-bits and 0-bits in image data.

 putfm(startcolr&,x&,y&,w&,h&,dx&,dy&,mfdb&()) (procedure)
 ---------------------------------------------
     Non-GEM (="unclean") procedure of  my  own  design that copies directly
     from an untransformed image to screen.
     startcolr& (normally 0) is  the  screen  start  colour  to be used when
     image palette is shorter than screen palette.
     Advantages: No transformation needed, slightly faster (at least without
     blitter), works even after screen resolution change.
     Drawbacks: only one copy mode (replace) plus  of course it is, like any
     non-GEM  routine,  "unclean"   (works   with   standard   Atari  screen
     resolutions but will fail with many graphic cards).

 getfm(x&,y&,w&,h&,dx&,dy&,mfdb&()) (procedure)
 ----------------------------------
     The reverse of getfm. Except no start colour taken (any extra bitplanes
     ignored - taken as "zero").
     (Note that source coordinates now of course refer to the screen).

 pen(index&) (function)
 -----------
     Gives you the VDI pen number  (the  one  to use with GFA Basic graphics
     commands) for any given palette colour number ("hardware number").

 setpal(i&,n&,pal|()) (procedure)
 --------------------
     Sets screen colours according to a given palette.
     i& is the screen start colour (normally 0) when screen palette longer.
     n& is the number of  colours  to  set  (i.e.  the image palette length,
     which you get from xmfdb&(15) when you have unpacked an image).
     pal|() contains the palette as given by the unpacking routines
               (see above for palette format description).

 settru(i&,n&,pal|()) (procedure)
 --------------------
     Exactly like setpal but works without GEM (="uncleanly").
     After some hesitation I decided to  include it just for curiosity since
     it will - on an ST screen - interpret some colour shades different from
     setpal (though not any  colours  taken  from  the  ST  screen). This is
     because the ST VDI tries to find  the "closest" hardware match for each
     intensity (resulting in scant use  of  the  highest and lowest hardware
     levels), instead of simply mapping  an  (approximately) equal number of
     VDI intensities onto each of the hardware ones, as settru does.

 getpal(i&,n&,pal|()) (procedure)
 --------------------
     The reverse of setpal.

 imgpac(pattlen&,xmfdb&(),memaddr%,memlen%) (function)
 ------------------------------------------
     Packs image defined by xmfdb&() into an  IMG file which will be written
     at address memaddr%. memlen%  tells  how  much  space  is available and
     imgpac will abort packing if it decides the file won't fit.

     pattlen& can be  1  or  2,  and  determines  the  pattern  length. 2 is
     standard (for some reason) so  you  might  always set pattlen&=2 if you
     don't want to bother (the user), but  1  can save a few bytes, since it
     is practically always more effective (or rather less ineffective. Where
     the IMG pattern run is at all  applicable  it is usually outdone by the
     simple Packbits - of IFF ILBM and Degas compressed).

     imgpac returns the length of the packed  file or a negative value if an
     error occurred (such as lack of memory).

 lbmpac(compr&,xmfdb&(),memaddr%,memlen%) (function)
 ----------------------------------------
     Like imgpac but packs into an IFF ILBM file.
     Instead of a pattern length a compression type is given.
     0: Uncompressed
     1: Packbits - Standard and the best for pictures with regular patterns.
     2: Vertical word - usually by far  the most effective type, except with
     patterns. Not as standard as Packbits but used by Deluxe Paint.

 imgcalc(vrt_use!,fileaddr%,xmfdb&()) (function)
 lbmcalc(vrt_use!,fileaddr%,xmfdb&()) (function)
 degcalc(vrt_use!,fileaddr%,xmfdb&()) (function)
 neocalc(vrt_use!,fileaddr%,xmfdb&()) (function)
 gifcalc(vrt_use!,fileaddr%,xmfdb&()) (function)
 tifcalc(vrt_use!,fileaddr%,xmfdb&()) (function)
 ------------------------------------
     Calculate the space needed to unpack  a file at address fileaddr%, plus
     fill in the - uninitialized  but  dimensioned DIM xmfdb&(17) - xmfdb&()
     array with info about the image file.
     (imgcalc and tifcalc also transform any PC image into ST format.)
     vrt_use! should be TRUE  if  you  intend  to  use vrt_cpyfm rather than
     vro_cpyfm for copying from a possible mono  image. If you intend to use
     vro_cpyfm regardless of image type then set vrt_use!=FALSE.
     (Should the image be multi-colour then vrt_use! is irrelevant).

     (vrt_cpyfm saves space with mono  images  in  that  it doesn't need any
     fill  planes  when  copying   to   multi-colour   screens,  plus  gives
     flexibility in colour use, though seemingly at the cost of some speed).

     The xxxcalc routines  return  the  length  needed  for  unpacking  or a
     negative value indicating error.

 imgunp(vrt_use!,fileaddr%,xmfdb&(),imgaddr%,pal|(),minerr!) (function)
 lbmunp(vrt_use!,fileaddr%,xmfdb&(),imgaddr%,pal|(),minerr!) (function)
 degunp(vrt_use!,fileaddr%,xmfdb&(),imgaddr%,pal|(),minerr!) (function)
 neounp(vrt_use!,fileaddr%,xmfdb&(),imgaddr%,pal|(),minerr!) (function)
 gifunp(vrt_use!,fileaddr%,xmfdb&(),imgaddr%,pal|(),minerr!) (function)
 tifunp(vrt_use!,fileaddr%,xmfdb&(),imgaddr%,pal|(),minerr!) (function)
 -----------------------------------------------------------
     Unpack file at address fileaddr% to  memory space at imgaddr% plus fill
     in the - uninitialised - xmfdb&() and pal|() arrays.
     The uninitialised  minerr!  variable  will  return  TRUE  if  an  error
     occurred during unpacking the  image  data,  while  the function itself
     will return a negative value if  an error occurred already when reading
     the file header.
     If file header is OK the function  will  return the length of the image
     data - corrupted or not  -  (required  to  reserve for a transformation
     with vr_trnfm, if you don't want to transform in place, which is slow).

     For an  image  with  less  colour  bitplanes  than  the  screen,  extra
     bitplanes in the image will automatically be cleared.

     gifunp and tifunp furthermore will  sort  any  256 colour palette to be
     usable on a 16 colour  screen  (i.e.  image recognizable even when last
     four planes dropped, and only first 16 colours used).

     NOTE: With gifunp and tifunp, but  not  the others, imgaddr% can be the
     same as fileaddr% (provided that  the  memory  block is large enough of
     course). The price for this is  that  these  routines need as much free
     memory space as the image size plus about 25000 bytes extra.

 plnfill(startcolr&,xmfdb&()) (procedure)
 ----------------------------
     For an image with less colours than screen, you can optionally use this
     procedure to make its colours  start  at  a  screen colour other than 0
     (the default) after unpacking but before transformation.
     (Only a screen start colour  divisible  by  the number of image colours
     will work, any other number  will  be  adjusted  down to the next lower
     number that is).

 getchnk(name$,formaddr%,chnkaddr%) (function)
 ----------------------------------
     Searches IFF FORM  (or  other  structural  IFF  chunk),  pointed  to by
     formaddr% for (the first occurring) chunk  the ID of which is specified
     in name$. (See IFF documentation).

     The function will return -1 if an error occurs, otherwise the length of
     the found chunk and chnkaddr% will point to the chunk.

 tru_vdi(n&,trupal|(),vdipal&()) (procedure)
 vdi_tru(n&,vdipal&(),trupal|()) (procedure)
 tru_ste(n&,trupal|(),stepal&()) (procedure)
 ste_tru(n&,stepal&(),trupal|()) (procedure)
 vdi_ste(n&,vdipal&(),stepal&()) (procedure)
 ste_vdi(n&,stepal&(),vdipal&()) (procedure)
 -------------------------------
     Convert palette between different  formats  (see  under palette formats
     above). n& is the number of colours in the palette to convert.



                 Bindings for the rectangle copying routines
                 -------------------------------------------

 The function bindings described above take six integer values for input :-

     x&,y&,w&,h&,dx&,dy&

 defining the  rectangle  coordinates  within  the  source  and  within  the
 destination images.

 The standard bindings however instead use  an  8-word xy&() array where the
 elements correspond to x&,y&,x2&,y2&,dx&,dy&,dx2&,dy2&, x2& being =x&+w&-1,
 y2& being =y&+h&-1 etc.

 Should you want this way of  representing source and destination rectangles
 you can replace, in PICPAC.LST,  the procedures vro_cpyfm, vrt_cpyfm, putfm
 and getfm with the following.

 PROCEDURE vro_cpyfm(m&,VAR xy&(),smfdb&(),dmfdb&())
   INTIN(0)=m&
   {PTSIN}={V:xy&(0)}
   {PTSIN+4}={V:xy&(2)}
   {PTSIN+8}={V:xy&(4)}
   {PTSIN+12}={V:xy&(6)}
   {CONTRL+14}=V:smfdb&(0)
   {CONTRL+18}=V:dmfdb&(0)
   VDISYS 109,1,4
 RETURN
 PROCEDURE vrt_cpyfm(m&,col1&,col0&,VAR xy&(),smfdb&(),dmfdb&())
   INTIN(0)=m&
   INTIN(1)=col1&
   INTIN(2)=col0&
   {PTSIN}={V:xy&(0)}
   {PTSIN+4}={V:xy&(2)}
   {PTSIN+8}={V:xy&(4)}
   {PTSIN+12}={V:xy&(6)}
   {CONTRL+14}=V:smfdb&(0)
   {CONTRL+18}=V:dmfdb&(0)
   VDISYS 121,3,4
 RETURN
 PROCEDURE putfm(startcolr&,VAR xy&(),mfdb&())
   VOID C:ptfm%(startcolr&,L:V:xy&(0),L:V:mfdb&(0))
 RETURN
 PROCEDURE getfm(VAR xy&(),mfdb&())
   VOID C:gtfm%(L:V:xy&(0),L:V:mfdb&(0))
 RETURN
