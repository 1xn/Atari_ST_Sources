PROCEDURE initpicpac ! Initialize addresses, planes&, pallen& and pen|() array
  LOCAL oldpen&,pen&
  INLINE vdi_tru%,8224
  tru_vdi%=vdi_tru%+4
  ste_tru%=vdi_tru%+8
  tru_ste%=vdi_tru%+12
  vdi_ste%=vdi_tru%+16
  ste_vdi%=vdi_tru%+20
  imgpac%=vdi_tru%+24
  lbmpac%=vdi_tru%+28
  imgcalc%=vdi_tru%+32
  imgunp%=vdi_tru%+36
  lbmcalc%=vdi_tru%+40
  lbmunp%=vdi_tru%+44
  degcalc%=vdi_tru%+48
  degunp%=vdi_tru%+52
  neocalc%=vdi_tru%+56
  neounp%=vdi_tru%+60
  gifcalc%=vdi_tru%+64
  gifunp%=vdi_tru%+68
  tifcalc%=vdi_tru%+72
  tifunp%=vdi_tru%+76
  plnfill%=vdi_tru%+80
  gtchnk%=vdi_tru%+84
  ptfm%=vdi_tru%+88
  gtfm%=vdi_tru%+92
  settru%=vdi_tru%+96
  DIM screen&(9)
  planes&=@xwork_out(4)
  IF @xwork_out(5)=0 AND WORK_OUT(13)>2
    pallen&=FALSE
  ELSE
    pallen&=WORK_OUT(13)
    DIM pen|(pallen&-1)
    ~WIND_UPDATE(1)
    ~GRAF_MOUSE(256,0) ! Hide mouse
    GRAPHMODE 1 ! Replace
    DEFMARK ,1 ! Pixel
    PTSIN(0)=0
    PTSIN(1)=0
    VDISYS 105,0,1 ! v_get_pixel
    oldpen&=INTOUT(1)
    WHILE pen&<pallen&
      DEFMARK pen&
      PTSIN(0)=0
      PTSIN(1)=0
      VDISYS 7,0,1 ! v_pmarker
      PTSIN(0)=0
      PTSIN(1)=0
      VDISYS 105,0,1 ! v_get_pixel
      pen|(INTOUT(0))=pen&
      INC pen&
    WEND
    DEFMARK oldpen&
    PTSIN(0)=0
    PTSIN(1)=0
    VDISYS 7,0,1 ! v_pmarker
    ~GRAF_MOUSE(257,0) ! Show mouse
    ~WIND_UPDATE(0)
  ENDIF
RETURN
'
FUNCTION xwork_out(i&)
  INTIN(0)=1
  VDISYS 102,1,0 ! vq_extnd
  RETURN INTOUT(i&)
ENDFUNC
PROCEDURE vr_trnfm(VAR smfdb&(),dmfdb&())
  {CONTRL+14}=V:smfdb&(0)
  {CONTRL+18}=V:dmfdb&(0)
  VDISYS 110,0,0
RETURN
PROCEDURE vro_cpyfm(m&,x&,y&,w&,h&,dx&,dy&,VAR smfdb&(),dmfdb&())
  INTIN(0)=m&
  PTSIN(0)=x&
  PTSIN(1)=y&
  PTSIN(2)=PRED(ADD(x&,w&))
  PTSIN(3)=PRED(ADD(y&,h&))
  PTSIN(4)=dx&
  PTSIN(5)=dy&
  PTSIN(6)=PRED(ADD(dx&,w&))
  PTSIN(7)=PRED(ADD(dy&,h&))
  {CONTRL+14}=V:smfdb&(0)
  {CONTRL+18}=V:dmfdb&(0)
  VDISYS 109,1,4
RETURN
PROCEDURE vrt_cpyfm(m&,x&,y&,w&,h&,dx&,dy&,col1&,col0&,VAR smfdb&(),dmfdb&())
  INTIN(0)=m&
  INTIN(1)=col1&
  INTIN(2)=col0&
  PTSIN(0)=x&
  PTSIN(1)=y&
  PTSIN(2)=PRED(ADD(x&,w&))
  PTSIN(3)=PRED(ADD(y&,h&))
  PTSIN(4)=dx&
  PTSIN(5)=dy&
  PTSIN(6)=PRED(ADD(dx&,w&))
  PTSIN(7)=PRED(ADD(dy&,h&))
  {CONTRL+14}=V:smfdb&(0)
  {CONTRL+18}=V:dmfdb&(0)
  VDISYS 121,3,4
RETURN
'
PROCEDURE putfm(startcolr&,x&,y&,w&,h&,dx&,dy&,VAR mfdb&())
  LOCAL xy$
  xy$=STRING$(16,0)
  INT{V:xy$}=x&
  INT{V:xy$+2}=y&
  INT{V:xy$+4}=PRED(ADD(x&,w&))
  INT{V:xy$+6}=PRED(ADD(y&,h&))
  INT{V:xy$+8}=dx&
  INT{V:xy$+10}=dy&
  INT{V:xy$+12}=PRED(ADD(dx&,w&))
  INT{V:xy$+14}=PRED(ADD(dy&,h&))
  VOID C:ptfm%(startcolr&,L:V:xy$,L:V:mfdb&(0))
RETURN
PROCEDURE getfm(x&,y&,w&,h&,dx&,dy&,VAR mfdb&())
  LOCAL xy$
  xy$=STRING$(16,0)
  INT{V:xy$}=x&
  INT{V:xy$+2}=y&
  INT{V:xy$+4}=PRED(ADD(x&,w&))
  INT{V:xy$+6}=PRED(ADD(y&,h&))
  INT{V:xy$+8}=dx&
  INT{V:xy$+10}=dy&
  INT{V:xy$+12}=PRED(ADD(dx&,w&))
  INT{V:xy$+14}=PRED(ADD(dy&,h&))
  VOID C:ptfm%(L:V:xy$,L:V:mfdb&(0))
RETURN
'
FUNCTION pen(index&)
  IF pallen&
    RETURN pen|(index&)
  ELSE
    RETURN index&
  ENDIF
ENDFUNC
PROCEDURE settru(i&,n&,VAR pal|())
  VOID C:settru%(i&,n&,L:V:pal|(0,0))
RETURN
PROCEDURE setpal(i&,n&,VAR pal|())
  LOCAL j&
  WHILE i&<MIN(ADD(i&,n&),pallen&)
    INTIN(0)=pen|(i&)
    FOR j&=0 TO 2
      INTIN(SUCC(j&))=DIV(MUL(pal|(j&,i&),1000),255)
    NEXT j&
    VDISYS 14,4,0 ! vs_color
    INC i&
  WEND
RETURN
PROCEDURE getpal(i&,n&,VAR pal|())
  LOCAL j&
  WHILE i&<MIN(ADD(i&,n&),pallen&)
    INTIN(0)=pen|(i&)
    INTIN(1)=0
    VDISYS 26,2,0 ! vq_color
    FOR j&=0 TO 2
      pal|(j&,i&)=DIV(MUL(INTOUT(SUCC(j&)),256),1001)
    NEXT j&
    INC i&
  WEND
RETURN
'
FUNCTION imgpac(pattlen&,VAR xmfdb&(),memaddr%,memlen%)
  RETURN C:imgpac%(pattlen&,L:V:xmfdb&(0),L:memaddr%,L:memlen%)
ENDFUNC
FUNCTION lbmpac(compr&,VAR xmfdb&(),memaddr%,memlen%)
  RETURN C:lbmpac%(compr&,L:V:xmfdb&(0),L:memaddr%,L:memlen%)
ENDFUNC
'
FUNCTION imgcalc(vrt_use!,VAR fileaddr%,xmfdb&())
  RETURN C:imgcalc%(vrt_use!,planes&,L:fileaddr%,L:V:xmfdb&(0))
ENDFUNC
FUNCTION lbmcalc(vrt_use!,VAR fileaddr%,xmfdb&())
  RETURN C:lbmcalc%(vrt_use!,planes&,L:fileaddr%,L:V:xmfdb&(0))
ENDFUNC
FUNCTION degcalc(vrt_use!,VAR fileaddr%,xmfdb&())
  RETURN C:degcalc%(vrt_use!,planes&,L:fileaddr%,L:V:xmfdb&(0))
ENDFUNC
FUNCTION neocalc(vrt_use!,VAR fileaddr%,xmfdb&())
  RETURN C:neocalc%(vrt_use!,planes&,L:fileaddr%,L:V:xmfdb&(0))
ENDFUNC
FUNCTION gifcalc(vrt_use!,VAR fileaddr%,xmfdb&())
  RETURN C:gifcalc%(vrt_use!,planes&,L:fileaddr%,L:V:xmfdb&(0))
ENDFUNC
FUNCTION tifcalc(vrt_use!,VAR fileaddr%,xmfdb&())
  RETURN C:tifcalc%(vrt_use!,planes&,L:fileaddr%,L:V:xmfdb&(0))
ENDFUNC
'
FUNCTION imgunp(vrt_use!,VAR fileaddr%,xmfdb&(),imgaddr%,pal|(),minerr!)
  RETURN C:imgunp%(vrt_use!,planes&,L:fileaddr%,L:V:xmfdb&(0),L:imgaddr%,L:V:pal|(0,0),L:V:minerr!)
ENDFUNC
FUNCTION lbmunp(vrt_use!,VAR fileaddr%,xmfdb&(),imgaddr%,pal|(),minerr!)
  RETURN C:lbmunp%(vrt_use!,planes&,L:fileaddr%,L:V:xmfdb&(0),L:imgaddr%,L:V:pal|(0,0),L:V:minerr!)
ENDFUNC
FUNCTION degunp(vrt_use!,VAR fileaddr%,xmfdb&(),imgaddr%,pal|(),minerr!)
  RETURN C:degunp%(vrt_use!,planes&,L:fileaddr%,L:V:xmfdb&(0),L:imgaddr%,L:V:pal|(0,0),L:V:minerr!)
ENDFUNC
FUNCTION neounp(vrt_use!,VAR fileaddr%,xmfdb&(),imgaddr%,pal|(),minerr!)
  RETURN C:neounp%(vrt_use!,planes&,L:fileaddr%,L:V:xmfdb&(0),L:imgaddr%,L:V:pal|(0,0),L:V:minerr!)
ENDFUNC
FUNCTION gifunp(vrt_use!,VAR fileaddr%,xmfdb&(),imgaddr%,pal|(),minerr!)
  RETURN C:gifunp%(vrt_use!,planes&,L:fileaddr%,L:V:xmfdb&(0),L:imgaddr%,L:V:pal|(0,0),L:V:minerr!)
ENDFUNC
FUNCTION tifunp(vrt_use!,VAR fileaddr%,xmfdb&(),imgaddr%,pal|(),minerr!)
  RETURN C:tifunp%(vrt_use!,planes&,L:fileaddr%,L:V:xmfdb&(0),L:imgaddr%,L:V:pal|(0,0),L:V:minerr!)
ENDFUNC
'
PROCEDURE plnfill(startcolr&,VAR xmfdb&())
  VOID C:plnfill%(startcolr&,L:V:xmfdb&(0))
RETURN
FUNCTION getchnk(name$,formaddr%,VAR chnkaddr%)
  RETURN C:gtchnk%(L:V:name$,L:formaddr%,L:V:chnkaddr%)
ENDFUNC
'
PROCEDURE tru_vdi(n&,VAR trupal|(),vdipal&())
  IF DIM?(vdipal&())>=MUL(n&,3)
    VOID C:tru_vdi%(n&,L:V:trupal|(0,0),L:V:vdipal&(0,0))
  ENDIF
RETURN
PROCEDURE vdi_tru(n&,VAR vdipal&(),trupal|())
  IF DIM?(trupal|())>=MUL(n&,3)
    VOID C:vdi_tru%(n&,L:V:vdipal&(0,0),L:V:trupal|(0,0))
  ENDIF
RETURN
PROCEDURE tru_ste(n&,VAR trupal|(),stepal&())
  IF DIM?(stepal&())>=n&
    VOID C:tru_vdi%(n&,L:V:trupal|(0,0),L:V:stepal&(0))
  ENDIF
RETURN
PROCEDURE ste_tru(n&,VAR stepal&(),trupal|())
  IF DIM?(trupal|())>=MUL(n&,3)
    VOID C:ste_tru%(n&,L:V:stepal&(0),L:V:trupal|(0,0))
  ENDIF
RETURN
PROCEDURE vdi_ste(n&,VAR vdipal&(),stepal&())
  IF DIM?(stepal&())>=n&
    VOID C:vdi_ste%(n&,L:V:vdipal&(0,0),L:V:stepal&(0))
  ENDIF
RETURN
PROCEDURE ste_vdi(n&,VAR stepal&(),vdipal&())
  IF DIM?(vdipal&())>=MUL(n&,3)
    VOID C:ste_vdi%(n&,L:V:stepal&(0),L:V:vdipal&(0,0))
  ENDIF
RETURN
