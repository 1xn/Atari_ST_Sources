
                      PICPAC for C and other languages
                            by: M†rten Lindstr”m


 Since I have now made my  PICPAC  library  of assembly routines for picture
 and palette handling (IMG and IFF ILBM packing & unpacking, GIF/TIFF, Degas
 and NEO unpacking, conversion between  palette  formats etc.) work with GFA
 Basic, I thought  it  must  be  possible  to  make  use  of  it  with other
 programming languages as well.


 The problem is of  course  that  I  don't  know  how  or  in what form your
 programming package wants pieces of  assembled  code  to be merged with its
 own code. And whether there  are  any  requirements  on the preservation of
 processor registers or on the use of  the stack during the execution of the
 routines.



                               PICPAC "INLINE"
                               ---------------

 One method is the "INLINE" in GFA Basic - i.e. the unceremonious merging of
 the assembled code into the program as just  a block of binary data, to the
 address of which then can be jumped as needed.

 If this method is possible to  use  with  your programming package as well,
 then you might be able to use the PICPAC.INL file of the GFA department.

 The PICPAC.INL file begins with a jump  table (4 bytes/jump) to each of the
 sub-routines, so that each routine is accessible at the following offsets:

   OFFSET  SUB-ROUTINE
      0    vdi_tru
      4    tru_vdi
      8    ste_tru
     12    tru_ste
     16    vdi_ste
     20    ste_vdi
     24    imgpac
     28    lbmpac
     32    imgcalc
     36    imgunp
     40    lbmcalc
     44    lbmunp
     48    degcalc
     52    degunp
     56    neocalc
     60    neounp
     64    gifcalc
     68    gifunp
     72    tifcalc
     76    tifunp
     80    plnfill
     84    getchnk
     88    putfm
     92    getfm
     96    settru

 Note that the routines in PICPAC.INL will make rather indiscriminate use of
 the processor registers (using D0-D4, A0-A4  and  A6). If this is a problem
 you will have to reassemble the file.

     Using the PICPACO2.S source and replacing  its XDEF directives with the
     jump table from picpac.s in the GFA  department will make sure that all
     registers except D0-D2 and A0-A2  are  saved.  If this isn't enough you
     will have to rewrite the source by hand.



                          PICPAC as an object file
                          ------------------------

 The other method is the standard  linking  of  object files. Of which there
 are a few different formats: DRI,  GST  and apparently also a Hisoft format
 used with Lattice C and Hisoft Basic.

 PICPACO1.S and
 PICPACO2.S   which should be included with this text, can each be assembled
           into an object file object file (of any format I think), provided
           that the  files  PICPAC1.S,  PICPAC2.S  and  PICPAC3.S  from  the
           assembly department are available as well.

           They are actually almost identical  to  the inline source (in the
           GFA department), the leading jump table merely replaced with XDEF
           directives making  the  routine  labels  accessible  from outside
           (i.e. by you compiler).

           In addition, PICPACO2.S, also  preserves  all processor registers
           except D0-D2 and A0-A2. If  this  isn't  enough  you will have to
           rewrite the  source  by  hand.  (If  registers  are  free  to use
           indiscriminately you might use the PICPACO1.S file instead.)

 Again, the GIFUNP routine uses between 300 and 400 bytes of stack space.

 As you can see, the label used for  each routine is begun with an underline
 character. E.g. the  imgcalc  function  is  labelled  "_imgcalc" within the
 object files. Change if you are unhappy with this.


                           The format of the calls
                           -----------------------

 The calls use standard  C  parameter  passing  on  the  stack and store any
 return value in register D0.

 As to the format of  the  calls  I  have  below  listed them in some pseudo
 language where "->" means a pointer  to something (always long), "L:" means
 that something else is long (otherwise  word),  and [] means that something
 is an array. I hope that someone  can  translate  all this into C and other
 languages.

 The individual parameters are explained as :-

 planes    is the  number  of  colour  bitplanes  of  the  screen  (got from
           work_out[4] after vq_extnd)

 startcolr is the screen start colour (normally  =0) to use if image palette
           is shorter than screen palette.

 xy[]      is the xy array, same as with VDI calls vro_cpyfm and vrt_cpyfm.

 mfdb[]    is a standard 10-word MFDB. Again see doc. for vro_cpyfm etc.

 xmfdb[]   is a standard mfdb which I have extended with 8 further words:
           xmfdb[10] = actual number of planes in image (may be different
                       from used number - in mfdb[6])
           xmfdb[11] = pixel width (in microns)  (not used by my routines)
           xmfdb[12] = pixel height (in microns) (not used by my routines)
           xmfdb[13] = 0 (reserved)
           xmfdb[14] = 0 (or screen start colour for short palette)
           xmfdb[15] = number of colours in palette
           xmfdb[16] = high word of address to palette
           xmfdb[17] = low word of address to palette

 pal[]     is a palette where each colour is stored as 3 consecutive bytes
           R,G,B, each component in the range 0-255.
           When unpacking a general image there should be room for 3*256=768
           bytes. (If you are absolutely certain that there is less than 256
           colours in the palette you may  reserve less space). Depending on
           how your language internally store 2-dimensional arrays it may be
           possible to use a 256x3  array  rather than a one-dimensional 768
           bytes array.

 trupal[]  is same as pal[]
 vdipal[]  is same as pal[] except  that  WORD  elements in the range 0-1000
           are used. (I.e. 2*768=1536 bytes are used for 256 colours).
 stepal[]  is a simple word array: 1 word/colour (512 bytes for 256 colours)

 vrt_use   is a word or byte that  should  be  non-zero if you intend to use
           the VDI call vrt_cpyfm, rather  than  vro_cpyfm, to copy from the
           unpacked image, in case it is 2-colour ("mono"). Set vrt_use=0 if
           you intend to use vro_cpyfm regardless  of image type. Should the
           image turn out to be multi-colour then vrt_use is irrelevent.
           (vrt_cpyfm saves space for  a  2-colour  "mono" image, plus gives
           flexibility in how to use the 2 colours, but at the apparent cost
           of some speed).

 minerr    is a byte (or cleared word if you like) which will be set to non-
           zero if an error  occurred  during  unpacking  of the image data.
           (The return value of the  function  itself  may still be positive
           indicating that the image file  header  was  OK and that at least
           some parts of the image may also be OK).


 routines preceded by  "void"  don't  give  any  return  value,  while those
 designated with "long" return a long value. Any negative return value means
 error. Positive values mean :-

     - from xxxcalc: length of memory required for unpacking
     - from xxxunp: length of image memory (required for transformation)
     - from xxxpac: length of the packed file
     - from getchnk: length of found IFF chunk

 void putfm(startcolr,->xy[],->mfdb[])
 void putfm(->xy[],->mfdb[])

 void settru(startcolr,n,->pal[])

 long imgpac(pattlen,->xmfdb[],->filemem,L:memlen)
 long lbmpac(compr,->xmfdb[],->filemem,L:memlen)

 long imgcalc(vrt_use,planes,->file,->xmfdb[])
 long lbmcalc(vrt_use,planes,->file,->xmfdb[])
 long degcalc(vrt_use,planes,->file,->xmfdb[])
 long neocalc(vrt_use,planes,->file,->xmfdb[])
 long gifcalc(vrt_use,planes,->file,->xmfdb[])
 long tifcalc(vrt_use,planes,->file,->xmfdb[])

 long imgunp(vrt_use,planes,->file,->xmfdb[],->imgmem,->pal[],->minerr)
 long lbmunp(vrt_use,planes,->file,->xmfdb[],->imgmem,->pal[],->minerr)
 long degunp(vrt_use,planes,->file,->xmfdb[],->imgmem,->pal[],->minerr)
 long neounp(vrt_use,planes,->file,->xmfdb[],->imgmem,->pal[],->minerr)
 long gifunp(vrt_use,planes,->file,->xmfdb[],->imgmem,->pal[],->minerr)
 long tifunp(vrt_use,planes,->file,->xmfdb[],->imgmem,->pal[],->minerr)

 void plnfill(startcolr,->xmfdb[])

 long getchnk(->L:name$,->form,->L:chnkaddr)

 void tru_vdi(n,->trupal[],->vdipal[])
 void vdi_tru(n,->vdipal[],->trupal[])
 void tru_vdi(n,->trupal[],->stepal[])
 void ste_tru(n,->stepal[],->trupal[])
 void vdi_ste(n,->vdipal[],->stepal[])
 void ste_vdi(n,->stepal[],->vdipal[])


 For further info see the PICPAC.DOC file in the ASSEMBLY folder.
