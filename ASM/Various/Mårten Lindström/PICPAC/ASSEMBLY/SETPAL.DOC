
                Routines for dealing with palettes under GEM
                --------------------------------------------
                            by: M†rten Lindstr”m

 For some reason the makers  of  ST  TOS  decided, probably wildly giggling,
 that VDI colour pen numbers on  the  ST  (and on other Atari computers) are
 NOT to tally with hardware  palette  indexes.  This would perhaps have been
 tolerable had the hardware numbers  been  completely transparent to the GEM
 environment, BUT THEY AREN'T. If a  program  is to load, save or manipulate
 multicolour palettes and images, then it  HAS to know the relations between
 palette indexes and  VDI  pens,  since  the  VDI  call  VR_TRNFM  - used to
 transform between device specific  and  device  independent image formats -
 does NOT transform colour numbers.

 Some solutions, often employed but inadequate,  are to use XBIOS instead of
 VDI VS_COLOUR to set  the  palette  and/or  to  use  a  fixed colour number
 translation table. XBIOS  should,  of  course,  not  be  used  by clean GEM
 programs (there are different XBIOS  calls  for different Atari screens and
 you never know what calls  will  work  with  various  graphic cards). And a
 fixed translation table isn't a good  idea  either, since there ARE graphic
 cards where hardware colour numbers DO tally with VDI pens.

 The routines SETPAL and GETPAL use clean GEM methods to deal with palettes.
 The palette format that they use is the  24-bit format in e.g. IFF ILBM and
 GIF images, but if  for  any  reason  you  need  another  format the PICPAC
 library contains routines for converting between palette formats.

 The routine PAL_PEN transforms a given palette index into the corresponding
 VDI pen. Which lets you for  instance  load  an  image file, set the screen
 palette according to the palette stored  in  it  (with SETPAL - see above),
 and then refer to all colours with  their palette index numbers rather than
 VDI pen numbers.


                                    NOTES
                                    -----

 NOTE1: I have a confession to  make.  Namely that I haven't actually tested
 assembling the routines exactly as written.  The thing is that I personally
 don't use any of the Devpac macros, but macros of my own design (or - to be
 honest - macros from my  other  assembler  -  Easy  Rider - re-written with
 ideas both of my own and borrowed from Devpac).

 On the other hand, the differences aren't that  big and I think I have made
 all the changes necessary to  make  it  work  alright if assembled with the
 standard Devpac libraries.

 NOTE2: In these routines I have made each  GEM call explicitly (by use of a
 Devpac macro). It would certainly be  possible  to  save some space, in the
 assembled program, by replacing some of these macros with subroutine calls.
 In particular I do in  my  own  personal  programming, use home-made macros
 (only resulting in a single  BSR  instruction  each)  for the most used GEM
 calls:

    graf_mouse #256,#0   Hide mouse
    graf_mouse #257,#0   Show mouse
    wind_update #1       BEG_UPDATE
    wind_update #0       END_UPDATE

 For instance a macro "hidemous" could be defined thus:-

 hidemous  macro
           bsr  _hidmous
           endm

 With an accompanying subroutine somewhere in the code:-

 _hidmous graf_mouse #256,#0
         rts


 SUB-ROUTINE NAME        SETPAL
 BRIEF DESCRIPTION       Sets palette given as 24-bit (no dummy bytes)
 FILENAME                SETPAL.S
 OTHER RESOURCES         Devpac GEM libraries
 LANGUAGE                Assembler (Devpac)
 AUTHOR                  M†rten Lindstr”m

 ENTRY PARAMETERS        A0->Palette,
                         D0 MSW: =0 (screen start colour), LSW: # of colours

 EXIT PARAMETERS         None (No registers affected)

 DETAILS

 Sets screen colours, purely via GEM (and thus 100% compatibly) according to
 palette given in 24-bit format (as used in IFF ILBM and GIF pictures).

 When there are less colours in the  palette  than on screen, a screen start
 colour, where the palette will go, can  be set in the Most Significant Word
 of D0.

 Note that the 24-bit format used by  this  and  other of my routines is not
 identical to the palette format of  Falcon VSETRGB/VGETRGB. The latter uses
 leading dummy fill bytes to make each colour take up a full longword.

 COMPARE this call with SETTRU (in PICPAC) which does exactly the same thing
 though without use of GEM.



 SUB-ROUTINE NAME        GETPAL
 BRIEF DESCRIPTION       Gets palette as 24-bit (no dummy bytes)
 FILENAME                SETPAL.S
 OTHER RESOURCES         Devpac GEM libraries
 LANGUAGE                Assembler (Devpac)
 AUTHOR                  M†rten Lindstr”m

 ENTRY PARAMETERS        A0->Space for palette
                         D0 MSW: 0 (hardware start colour), LSW: # colours

 EXIT PARAMETERS         None (No registers affected)

 DETAILS
 GETPAL is simply the reverse of SETPAL.



 SUB-ROUTINE NAME        PAL_PEN
 BRIEF DESCRIPTION       Converts a palette colour index into a VDI pen #
 FILENAME                SETPAL.S
 OTHER RESOURCES         Devpac GEM libraries
 LANGUAGE                Assembler (Devpac)
 AUTHOR                  M†rten Lindstr”m

 ENTRY PARAMETERS        D0: Palette colour index

 EXIT PARAMETERS         D0: VDI pen number
                         Carry flag set if too high index (test with BVS)
 DETAILS

 Converts a palette colour index (a "hardware colour number") in D0 into the
 corresponding VDI pen.

 (NOTE: If the screen is in high/true  colour mode, any call of PAL_PEN will
 leave D0 unchanged and the carry flag set.)


