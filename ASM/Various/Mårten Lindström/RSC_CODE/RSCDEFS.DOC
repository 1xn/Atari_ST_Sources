
                                  RSCDEFS
                               ~~~~~~~~~~~~~
                           by: M†rten Lindstr”m


The file RSCDEFS.S contains DEVPAC3  assembler  macros to simplify the task
of creating object trees and whole resources directly in the source text.


The parameters:
---------------

name:         Any name, but must be the  same  in an object and its related
              secondary structures. You can use  this  name in your program
              to refer to a tree or object. See more below.

templ,valstr: (in TEDINFOs) should be names used with STRings, or 'null'
mask:         (in ICONBLKs) should be a name used with an IMG

flags:        NOFLAG, SELECTAB, DEFAULT,  EXIT,  TOUCHXIT, EDITABLE, RADIO,
              HIDETREE,   INDIRECT   or   a   combination   thereof   (e.g.
              SELECTAB+DEFAULT) (The LAST flag is  taken care of implicitly
              by the macros)

state:        NOSTATE,  SELECTED,  CROSSED,  CHECKED,  DISABLED,  OUTLINED,
              SHADOWED or a combination thereof (e.g. SHADOWED+SELECTED)

xxxcol:       WHITE,  BLACK,  RED,  GREEN,  BLUE,  CYAN,  YELLOW,  MAGENTA,
              LWHITE, LBLACK, LRED, LGREEN, LBLUE, LCYAN, LYELLOW, LMAGENTA

fill:         any one colour + one  of  FILL0,  FILL1, FILL2, FILL3, FILL4,
              FILL5, FILL6, FILL7

txtbg:        OPAQUE, TRANSPAR

font:         (in TEDINFOs) SYSFONT, MINIFONT
justif:       (in TEDINFOs) LEFT, RIGHT, CENTRE


NOTE: Instead of NOFLAG or NOSTATE  a  null  string  could be used, i.e. no
character or space used between  the  two  commas separating the 'flags' or
'state' parameter respectively.


Name:
-----

The name used as parameter in various  structures should be the same in all
related structures. E.g. if a TEXT OBJECT is given a certain name, the same
name must be used for a related TEDINFO  and for a STRing as well. (A 'tree
name' is simply the name of the root  object of the tree.) The name is used
thus by the macros:

literal name: For object except root: symbol for the OBJECT NUMBER
              For root in rsc: SYMBOL for TREE NUMBER
              For root outside rsc: LABEL for TREE ADDRESS
              For free string/image: symbol for its number

In addition it is used  in  various  combinations,  for internal use, which
should in most cases be of less interest to the macro user:

s+name:       label for string
l+name:       symbol for string length including null
i+name:       label for image
b+name:       label for BITBLK/ICONBLK
t+name:       label for TEDINFO
a+name:       label for APPLBLK

y+name:       label for last child object
z+name:       label for end of last child's family (=next sibling object?)



BEG_RSC, END_RSC
----------------

The macros can be used either  to  create  a full resource, in standard RSC
file format, or to create the odd object tree.

A full resource  should  be  begun  with  BEG_RSC  and  ended with END_RSC.
Furthermore each type of structure most come in a certain order:
    1) STRings
    2) IMGs
    3) BITBLKs
    4) ICONBLKs
    5) TEDINFOs
    6) objects (trees)
    7) FREESTRs (free strings)
    8) FREEIMGs (free images)
(Not all types have to be used of course)

If you create object trees  and  other  structures  outside of an RSC (i.e.
before an RSC_BEG or after RSC_END) you can ignore these rules.

NOTE that names of trees outside of an RSC should be used, in your program,
as labels for the tree addresses,  while  names  of trees inside an RSC are
equated to the tree numbers.


FAMILBEG, FAMILAST, FAMILEND and TREE
-------------------------------------

For each type of object there is one macro, but to combine them into a tree
structure some further macros are needed.

'FAMILBEG name', must precede any parent object except a root
'FAMILAST name', must precede its last child (the name is the parent's)
'FAMILEND name', must normally follow the last child

'TREE name', must precede a root object

(This isn't as neat as I would  have  wished  it  to be. It would have been
better if only two macros - one  begin  and  one end - had been needed, but
since the Devpack directives work the way  they  do I couldn't see a way to
implement that.)

The last child of a tree should (like  any other last child) be preceded by
'FAMILAST name' (where 'name' in  this  case  is  the tree name). You could
also write 'TREELAST name' (TREELAST simply calls FAMILAST).

The only function of FAMILEND is to  set  the 'z'+name label, which is used
to calculate the object number of  the next sibling. FAMILEND can therefore
be omitted if there is no next sibling  (but  it will do no harm to include
it either). FAMILEND can always be omitted for TREES.


STR and IMG
-----------
To define strings and images use

    STR name,<'string'>

    IMG name
    image definition

The string could of course be enclosed in  either  of " or '. The < > could
be left out if the string doesn't  contain  any spaces. If the string is to
contain a '>' this has to be  written '>>'. (All this is entirely according
to how Devpack works.)

Note that while STR takes the actual  string as a parameter and creates the
necessary data directive,  the  IMG  macro  only  takes  the  IMG name (and
creates a label). The actual image data have to be created with explicit DC
or INCBIN directives following the IMG macro.

The name used with the string/image  should  be  the  same as used with the
object that is to make use of it (and with any TEDINFO, BITBLK or ICONBLK).
Or, if not used in an object, it  could,  within  an RSC, be used as a free
image or free string. The macros for the latter are:

    FREESTR  name
    FREEIMG  name

(These simply add an address  pointer  to  the table of free strings/images
respectively.)


Objects and secondary structures:
---------------------------------

BITBLK   name,w(bytes),h(pixels),x-offs,y-offs,colour
ICONBLK  name,mask,str,fgcol,bgcol,letter,let-x,y,img-x,y,w,h,txt-x,y,w,h
TEDINFO  name,templ,valstr,font,justif,bordcol,txtcol,txtbg,fill,bordthck
APPLBLK  name,drawroutine(,32bit_data)                  Data can be omitted

Note 1: The x and y of BITBLK are offsets (in pixels) into the source image
data. I don't however know what possible  use  could be made of them, since
there isn't a corresponding way to reduce  the width and height of the used
image block.  Instead  the  full  image  dimensions  will  always  be used,
resulting in garbage shown on screen when x and y aren't zero.

Note 2: The x and y of the ICONBLK  image and text refer to the position of
image and text, respectively, relative to  the  object. I.e. image and text
are totally independently positioned. Negative values can be used and image
or text can be placed outside  of  the  area  defined for the object (which
could well be zero). The x and  y  of  the  icon letter, on the other hand,
refer to the position relative to the image.
The icon text will be centred within the area defined for it (which will be
cleared), and normally the width should be 6*(string length + possibly some
2 extra characters for margins) and the  height  about 8. (I could have let
the macro calculate  this  automatically,  but  since  taste  may  differ I
refrained from that.)
All measures and coordinates of the ICONBLK are in pixels.


BOX      name,flags,state,bordthck,bordcol,fill,x,y,w,h
IBOX     name,flags,state,bordthck,bordcol,x,y,w,h
BOXCHAR  name,flags,state,char,bordthck,bordcol,txtcol,txtbg,fill,x,y,b,h
BUTTON   name,flags,state,x,y,w,h
STRING   name,flags,state,x,y
TITLE    name,flags,state,x
TEXT     name,flags,state,x,y,w,h
BOXTEXT  name,flags,state,x,y,w,h
FTEXT    name,flags,state,x,y,w,h
FBOXTEXT name,flags,state,x,y,w,h
IMAGE    name,flags,state,x,y,w,h
ICON     name,flags,state,x,y,w,h
PROGDEF  name,flags,state,x,y,w,h


Menus:
------

To further simplify creation of menus,  the  following macros could be used
in place of the above tree and object macros:

MENUBAR  name,title1,title2,etc                                max 9 titles
DROPBOX  {itemname,state,}              max 17 items (incl separator lines)

MENUBAR takes a menu name, which is used as a tree name, plus up to 9 title
names, for each of which there should be a STR-defined string.

DROPBOX takes pairs of parameters (up to  17 pairs or 34 parameters), where
the first parameter is the item name (same name has to be used with a STR).
The second parameter in each pair is  the  state,  but can be omitted if no
state is used. I.e. the item name  can  be followed by a double comma after
which comes the next item.
Note: As many DROPBOXes have to  follow  directly  after a MENUBAR as there
were titles defined with the MENUBAR.

With just the two above macros a  complete menu can be constructed. (Except
that strings also have to be defined,  with  STR macros, for each title and
item.)


Example RSC:
------------

 BEG_RSC

 STR desk,<" TESTPROG ">
 STR file,<" File ">
 STR opts,<" Options ">
 STR separ,<"--------------------">
 STR one,<"1">
 STR two,<"2">
 STR three,<"3">
 STR four,<"4">
 STR five,<"5">
 STR six,<"6">
 STR load,<"  Load file    ^L ">
 STR save,<"  Save file    ^S ">
 STR doit,<"  Do it!   D ">
 STR about,<'  about TESTPROG '>

 STR tstb,<'TEST BOX'>
 STR hi,<'Hi there!'>
 STR ok,<'OK'>

 IMG imag
  dc.l %00000000000000000000000000000000
  dc.l %00000000001111111111110000000000
  dc.l %00000001110000000000001110000000
  dc.l %00000110000000000000000001100000
  dc.l %00001000000000000000000000010000
  dc.l %00010000000000000000000000001000
  dc.l %00100000000110000001100000000100
  dc.l %00100000001111000011110000000100
  dc.l %01000000001111000011110000000010
  dc.l %01000010000110000001100001000010
  dc.l %01000001000000000000000010000010
  dc.l %01000000100000000000000100000010
  dc.l %00100000010000000000001000000100
  dc.l %00100000001100000000110000000100
  dc.l %00010000000011111111000000001000
  dc.l %00001000000000000000000000010000
  dc.l %00000110000000000000000001100000
  dc.l %00000001110000000000001110000000
  dc.l %00000000001111111111110000000000
  dc.l %00000000000000000000000000000000

 IMG mask
  dc.l %00000000011111111111111000000000
  dc.l %00000011111111111111111111000000
  dc.l %00001111111111111111111111110000
  dc.l %00011111111111111111111111111000
  dc.l %00111111111111111111111111111100
  dc.l %01111111111111111111111111111110
  dc.l %01111111111111111111111111111110
  dc.l %11111111111111111111111111111111
  dc.l %11111111111111111111111111111111
  dc.l %11111111111111111111111111111111
  dc.l %11111111111111111111111111111111
  dc.l %11111111111111111111111111111111
  dc.l %11111111111111111111111111111111
  dc.l %01111111111111111111111111111110
  dc.l %01111111111111111111111111111110
  dc.l %00111111111111111111111111111100
  dc.l %00011111111111111111111111111000
  dc.l %00001111111111111111111111110000
  dc.l %00000011111111111111111111000000
  dc.l %00000000011111111111111000000000

 ICONBLK imag,mask,hi,BLACK,WHITE,0,0,0,-16,-7,32,20,-33,-17,66,8

 TEDINFO tstb,null,null,SYSFONT,CENTRE,BLACK,WHITE,TRANSPAR,RED+FILL7,0

*** THE MENU ***
 MENUBAR tstmenu,desk,file,opts
 DROPBOX about,,separ,DISABLED,one,,two,,three,,four,,five,,six
 DROPBOX load,,save
 DROPBOX doit

*** THE DIALOGUE BOX ***
 TREE hidial
 BOX hidial,NOFLAG,OUTLINED,1,BLACK,RED+FILL1,0,0,10,10
  BOXTEXT tstb,,,0,0,10,2
  ICON imag,,,5,4,0,0
  FAMILBEG midbox
  IBOX midbox,NOFLAG,,0,BLACK,0,5,10,3
   BOX radio1,SELECTAB+RADIO,SHADOWED,1,BLACK,BLACK+FILL0,2,1,2,1
  FAMILAST midbox
   BOX radio2,SELECTAB+RADIO,SHADOWED+SELECTED,1,BLACK,BLACK+FILL0,6,1,2,1
  FAMILEND midbox
 FAMILAST hidial
  BUTTON ok,SELECTAB+DEFAULT+EXIT,,2,8,6,1

 END_RSC
