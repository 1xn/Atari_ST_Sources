
                              --------------
                              ¯ RSC INLINE ®
                              --------------
                           by: M†rten Lindstr”m

Routines to enable use of GEM resources incorporated in program file.



SUB-ROUTINE NAME        RSCREL
BRIEF DESCRIPTION       Relocates RSC file
FILENAME                RSCINLIN.S
OTHER RESOURCES         -
LANGUAGE                Assembler (Devpac 3)
AUTHOR                  M†rten Lindstr”m

ENTRY PARAMETER         A4->file to be relocated

EXIT PARAMETER          D0: 1=No error, 0=Unknown elements in file

DETAILS

RSCREL is needed (only) with RSC  files  included  as they stands as binary
files (probably with INCBIN in Devpack).

It relocates all longword pointers in RSC  file pointed to by A4. I.e. adds
address of file start to them. D0  will  be zero on return (and processor Z
flag set) if any unknown element  (unknown  object type) was encountered in
file; even in this case  all  recognized  pointers will have been relocated
though.

As it stands RSCREL will only  relocate  pre-TOS4 RSC files, i.e. excluding
colour icons. But I  have  included  a  code  sequence  to  deal with TOS4+
extended RSC files as well, as  comment  lines.  All  you  have to do is to
uncomment this sequence. (Be warned though that I haven't been able to test
this part, since I haven't got TOS4 - or a Falcon - of my own.)

Example:

   lea rscfile,A4
   bsr rscrel
   ble error
   ...

rscfile: INCBIN X.RSC



SUB-ROUTINE NAME        RSCFIX, TREEFIX
BRIEF DESCRIPTION       Convert character coordinates
FILENAME                RSCINLIN.S
OTHER RESOURCES         Devpack AES library (for RSRC_OBFIX)
LANGUAGE                Assembler (Devpac 3)
AUTHOR                  M†rten Lindstr”m

ENTRY PARAMETER         For RSCFIX : A4 -> file to be converted
                        For TREEFIX: A3 -> tree to be converted

EXIT PARAMETERS         None

DETAILS

One of RSCFIX and TREEFIX  is  needed  with  any  GEM resource or tree that
isn't loaded with RSRC_LOAD. I.e.  any 'included' resource/tree, whether as
source or as binary file.

They convert coordinates from  characters  to  pixels  in  resource file or
single tree respectively. Internally RSCFIX calls  TREEFIX for each tree in
the resource. TREEFIX in its turn  calls  the  AES function RSRC_OBFIX - in
the form used in the Devpack macros, as TREEFIX is now written.

Note: I actually wrote  two  versions  of  TREEFIX  -  both included in the
source file, one of which as comment lines. The enabled version simply goes
through the object list  for  the  tree  until  a  set  Last-object flag is
encountered. The disabled version instead  works  its  way through the tree
structure, branch by branch, by calling my TREEDO routine (see below).

The advantage of the second version  would  be  that it works even should a
Last-object flag be missing (though this should  never be, I think) as long
as the tree structure is OK. In addition  it is a few bytes shorter, but on
the other hand requires TREEDO to be included.



SUB-ROUTINE NAME        TREEDO
BRIEF DESCRIPTION       For each object in (sub-)tree runs custom routine
FILENAME                RSCINLIN.S
OTHER RESOURCES         -
LANGUAGE                Assembler (Devpac 3)
AUTHOR                  M†rten Lindstr”m

ENTRY PARAMETERS        A3 -> Tree
                        D2: Start object (= 'root of sub-tree')
                        A0 -> Custom sub-routine to run for each object

EXIT PARAMETERS         D0 will contain whatever custom routine sets it to

DETAILS

Will for each object in a (sub-)tree run a custom sub-routine pointed to by
A0. The main tree should be pointed to  by  A3, and the number of the start
object should be given in D2. (If D2=0 the whole tree will be done.)

At sub-routine entry A3 will point to the tree, A2 will point to the object
and D2 will contain the object number. All registers can be freely used and
all registers EXCEPT D0 will be  restored  at  TREEDO exit. D0 will contain
whatever the custom sub-routine sets it to; TREEDO won't touch it.

Processor condition flags will at exit be  set according to a test of D0.L.
(Should you want word format for  the  test  of the exit parameter you will
have to change TREEDO correspondingly.)

TREEDO isn't particularly needed for 'inline  resources' and could be of as
much use with ordinary RSC files  loaded  with RSRC_LOAD, so should perhaps
not have been placed within this  library.  Of  the many things it could be
used for, one  would  be  the  fixing  of  hidden  sub-trees  with possible
editable objects in them (see the resource info file, that I send to Ictari
together with this file).



SUB-ROUTINE NAME        GETTREE
BRIEF DESCRIPTION       Get tree address
FILENAME                RSCINLIN.S
OTHER RESOURCES         -
LANGUAGE                Assembler (Devpac 3)
AUTHOR                  M†rten Lindstr”m

ENTRY PARAMETERS        A4 -> RSC file
                        D3: Tree number

EXIT PARAMETERS         A3 -> Tree
                        D0: 1=OK, 0= This high tree number doesn't exist

DETAILS

Loads A3 with address of tree,  within  resource  pointed  to by A4 and the
number of which should be given in D3. At exit D0 (and processor flags) set
according to: 1=OK, 0= Tree of this high number doesn't exist in resource.

