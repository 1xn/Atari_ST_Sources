	Documentation de PROGDESK
	*************************


	SHELL programmable, (c) Guillaume Tello
	guillaume.tello@orange.fr

Possibilit‚s:
~~~~~~~~~~~~~

	PROGDESK est un menu programmable: il se contente de lire un
fichier texte dans lequel vous avez simplement d‚crit la barre de menu que
vous voulez utiliser. Chaque entr‚e du menu peut ˆtre li‚e … une
application, une boŒte d'alerte ou … un autre menu.
	Vous pouvez donc personnaliser votre environnement de travail et
mˆme utiliser PROGDESK comme mini bureau avec les outils de votre choix
(copieur, formateur, ‚diteur, etc...).
	PROGDESK dispose de 10 variables de chaines pouvant contenir chacune
255 caractŠres . Elles peuvent ˆtre utilis‚es pour passer des paramŠtres
entre le s‚lecteur de fichier et un programme, ou entre un programme
(valeur de retour) et le bureau, etc... Il dispose ‚galement de 20 labels
avec sauts en avant ou en arriŠre et conditionnels.

	Le programme fait moins de 6Ko!!! Un trŠs bon point lorsque les
TTP que vous pilotez ont de gros besoins en RAM.

	PROGDESK peut ˆtre install‚ en application avec DSK comme type de
fichier. Si aucun DSK ne lui est pass‚ en paramŠtre, il tente de charger
DEFAULT.DSK.

Description du menu, fichier DEFAULT.DSK:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	Ce fichier se compose de trois sections qu'on doit retrouver dans
cet ordre, la section AUTO, la section des liens et celle du menu.

	1/ Section AUTO
	---------------

	Elle est facultative et contient les actions … entreprendre dŠs le
chargement du fichier:

>AUTO
.commandes...
.commandes...

	2/ Section LIENS
	----------------

	Elle est facultative et contient les actions … entreprendre dŠs
qu'un fichier dont l'extension est list‚e est pass‚ … la commande
".exec". Par exemple, je peux lier l'ex‚cution d'un TXT … un editeur de
textes qui chargera ce document:

@EXT
.commandes...
@EXT
.commandes...

	On peut mettre plusieurs extensions sur une mˆme ligne: elles
d‚clancheront alors les mˆmes commandes (elles doivent ˆtre s‚par‚es par
une virgule et aucun espace). Lors de l'ex‚cution, c'est la variable %0
qui contient le nom du fichier ayant mis le lien en action.
	Par exemple:

@TXT,DOC
.setpath f:\everest
.exec everest.prg %0

	DŠs que l'interpr‚teur doit ex‚cuter un fichier TXT ou DOC, en
fait, il le passe comme paramŠtre … Everest.

	On peut utiliser des jokers pour remplacer un caractŠre dans
l'extension:
	$ = une lettre quelconque (de A … Z)
	# = un chiffre (de 0 … 9)
	? = n'importe quel caractŠre
	Exemple:
	PI# -> valable pour PI0 … PI9, mais pas pour PIC par exemple.
	FL$ -> valable pour FLI, FLC, FLH... mais pas pour FL1.
	B?S -> valable pour BOS, BAS, B7S, B_S, etc....
	$$$ -> valable pour toute extension de 3 lettres sans chiffre
	Attention, si vous utilisez ??? ou $$$ cela peut-etre plutot
dangereux:
	En effet avec:
	@???
	.exec lanceur.prg %1
	Si j'ex‚cute TEST.PRG, alors PRG convenant … ???, c'est
"lanceur.prg TEST.PRG" qui s'ex‚cute. Mais alors, le ".prg" de
"lanceur.prg" convient aussi … ???, alors c'est "lanceur.prg lanceur.prg
TEST.PRG" qui s'ex‚cute, et ainsi de suite...


	3/ Section MENU
	---------------

	Elle est obligatoire. Elle contient les titres de la barre de menu
accompagn‚s de leurs diff‚rentes entr‚es. Chaque entr‚e est suivie des
actions … entreprendre lors de sa s‚lection par la souris:
	Exemple:

*Bureau
	@A propos de...
	.commandes...
*Fichier
	@Rechercher
	.commandes...
	@Effacer
	.commandes...
	@@----------
	@Quitter
	.commandes...

	Remarquez le double @@ pour indiquer que cette ligne doit
apparaitre en gris: option non s‚lectionnable, il s'agit en fait d'un
s‚parateur.
	Le premier menu ne contient toujours qu'une option, la place pour
le s‚parateur et les accessoires est automatiquement g‚r‚e.


Les commandes existantes sont:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.%x=%y
	syntaxe: ne pas oublier le point devant la commande et ne pas
	ins‚rer de blancs. Cette commande copie la variable y dans la
	variable x, x et y ‚tant des chiffres de 0 … 9 inclus.
	Cas particulier:
	.%x=%%
	permet de vider la variable x.
	Cas particulier:
	La variable %: correspond … la langue s‚lectionn‚e
	(voir .language)

.alert
	syntaxe: .alert [n][ligne | ligne |...][Bouton|Bouton...]
	affiche la boŒte d'alerte d‚crite avec l'ic“ne n.
	(0=aucune,1=!, 2=?, 3=Stop, et … partir de l'AES4 4=Info, 5=Disk)
	On peut ‚ventuellement ajouter:
		.alert x,[n....
	afin de pr‚ciser le num‚ro x du bouton li‚ … la touche RETURN. Par
	d‚faut, ce bouton est le 1.
	%0: contient le num‚ro du bouton de sortie (1, 2 ou 3)

.copyright
	syntaxe: .copyright
	affiche la boŒte d'alerte par d‚faut, celle contenant le num‚ro de
	version de PROGDESK.

.cutext
	syntaxe: .cutext %n
	en supposant que la variable %n contienne un nom de fichier
	(compl‚t‚ ‚ventuellement par un chemin), cette fonction enlŠve
	l'extension du fichier. A utiliser en liaison avec "select" et les
	variables %1 et%2.
	Ceci permet de conserver le nom g‚n‚rique d'un fichier et de le
	traiter en tant que %n.S ou %n.C lorsqu'il s'agit d'un source ou
	%n.PRG, %n.TTP si il est devenu ex‚cutable.

.end
	syntaxe: .end
	sort de progdesk.

.exec

	syntaxe: .exec chemin\nom.ext paramŠtres
	lance l'ex‚cution du programme sp‚cifi‚ en lui passant le reste de
	la ligne comme paramŠtres (pour un TTP par exemple).
	%0: contient le code de retour du programme (un mot de -32768 …
	32767)
	Si, par l'extension du fichier un lien est d‚tect‚, alors:
	%0=chemin\nom.ext
	%1=paramŠtres
	Et la partie correspondante … ce lien est ex‚cut‚e.

.gettimer
	syntaxe: .gettimer %n
	calcule le temps depuis .starttimer et le stocke sous forme
	de texte dans la variable %n.
	Sous la forme g‚n‚ral xxhxx'xx,xx". Les parties nulles sont
	‚limin‚es, par exemple 00h05'07,40" sera r‚duit … 5'7,4".

.goto
	syntaxe: .goto valeur
	transfŠre l'ex‚cution au label indiqu‚. Il doit y avoir un label
	de mˆme valeur! Par exemple, pour aiguiller l'ex‚cution suite …
	une alerte:
	.alert [1][ Doit-on effacer les fichiers? ][ Oui | Non ]
	.goto %0 ; %0=num‚ro du bouton
	.label 1
	.... ici les commandes pour r‚ponse 'OUI'
	.stop
	.label 2
	.... ici les commandes pour r‚ponse 'NON'
	Si le label n'existe pas, PROGDESK retourne au menu.

.if
	syntaxe: .if "texte1"="texte2" valeur
		 .if (valeur1)=(valeur2) valeur
	"if" permet de comparer deux chaines ou deux nombres, si la
	comparaison donne un r‚sultat VRAI, on saute au label dont la
	valeur est indiqu‚e.
	Il y a plusieurs op‚rateurs possibles:
		= ‚gal …
		# diff‚rent de
		> sup‚rieur …
		< inf‚rieur …
	Il ne doit pas y avoir d'espaces autour de l'op‚rateur. Les textes
	ou valeurs peuvent ˆtre des variables. Par exemple, pour tester la
	valeur retourn‚e par un programme (en supposant qu'il renvoit 0 si
	tout est OK):
	.exec mon_prg.prg
	.if (%0)=(0) 1	; saute au label 1 si le retour vaut 0.
	.alert [1][ Erreur %0 | retourn‚e! ][Gloups]
	.stop
	.label 1
	... suite des commandes...

	"if" peut servir ‚galement … g‚rer un mot de passe. Par le biais de
	"save" vous pouvez cr‚er une variable contenant ce mot:

	>AUTO
	.load %5,passe.opt
	.%0=%%
	.input %0,10,Entrez le mot de passe:
	.if "%0"="%5" 1
	.alert [1][Erreur! | Fin de programme...][D‚sol‚!]
	.end
	.label 1

.input
	syntaxe: .input %x,n,texte
	ouvre un formulaire ou vous pouvez modifier la variable %x sur n
	caractŠres. Le texte correspond … la question pos‚e.
	Le choix d'Annuler revient au menu, celui de Confirmer continue
	les commandes en s‚quence.
	%x: texte entr‚

.label
	syntaxe: .label valeur
	fixe un label qui sera utilis‚ en liaison avec goto ou if. 20
	labels diff‚rents peuvent ˆtre utilis‚s simultan‚ment. Les labels
	sont locaux … chaque entr‚e du menu. Les valeurs peuvent ˆtre
	autre chose que 1 … 20. Ce sont des mots compris entre -32768 et
	+32767. La valeur peut ˆtre une variable (.label %2) … condition
	que la variable contienne un nombre.
	Les labels de la section LINK sont communs … ceux de la section
	qui appelle le lien: attention aux conflits!

.language
	syntaxe: .language valeur
	fixe la langue pour les messages de PROGDESK
	0=Fran‡ais, 1=Anglais, 2=Italien, 3=TchŠque, 4=Polonais
	5=Su‚dois, 6=Espagnol
	Cette valeur est ‚galement stock‚e dans la variable %:
	De ce fait un goto %: permet d'orienter le script selon la langue
	Remarque:
		L'outil SETLANG.TOS permet de changer la langue par d‚faut
		de ProgDesk.
	
.load
	syntaxe: .load %abc...,chemin\fichier
	affecte aux variables %a, %b, etc... le contenu du fichier
	sp‚cifi‚. Le chargement se fait dans l'ordre croissant des num‚ros
	de variables:
	.load %901,options.cfg
	lit dans OPTIONS.CFG 256 octets pour %0, 256 pour %1 et 256 pour
	%9.
.menu
	syntaxe: .menu chemin\nom.dsk
	charge un autre fichier DSK et cr‚e un nouveau menu
	Si le nom de fichier est pr‚c‚d‚ d'un '*', alors la partie
	AUTO de ce nouveau menu sera ignor‚e.

.mouse
	syntaxe: .mouse valeur
	fait un appel … graf_mouse, la valeur pouvant etre:
	0,1,2,3,4,5,6,7 -> diff‚rentes formes de souris
	256 -> efface le pointeur
	257 -> r‚active le pointeur

.pause
	syntaxe: .pause
	attend l'appui d'une touche. Utile en liaison avec l'‚x‚cution
	d'un programme TOS par exemple.

.redraw
	syntaxe: .redraw
	envoit aux applications un message pour mettre … jour tout
	l'‚cran. Ceci s'avŠre utile lorsqu'un programme ne se termine
	pas proprement (TOS par exemple).

.save
	syntaxe: .save %abc...,chemin\fichier
	sauve le contenu des variables %a, %b, etc... dans le fichier
	sp‚cifi‚. La sauvegarde se fait dans l'ordre croissant des num‚ros
	de variables:
	.save %901,options.cfg
	‚crit dans OPTIONS.CFG le contenu de %0 puis %1 puis %9. Les 256
	octets de chaque variable sont sauv‚s.

.select
	syntaxe: .select chemin\masque,fichier_defaut,titre
	Ouvre le s‚lecteur de fichier avec les paramŠtres s‚cifi‚s et
	renvoit:
	%0=chemin sans le masque (utilisable avec setpath)
	%1=fichier.ext
	%2=chemin+fichier concat‚n‚s
	Si le bouton 'Annule' a ‚t‚ actionn‚, alors toutes les actions
	relatives … l'entr‚e du menu sont arrˆt‚es et les variables %0,%1
	et %2 ne sont pas aliment‚es.
	Remarque, sur les anciens TOS, le paramŠtre Titre sera ignor‚ mais
	il doit ˆtre PRESENT!

.setflags
	syntaxe: .setflags [chemin\]fichier valeur
	modifie les flags d'un fichier ex‚cutable:
		1 : fast load (n'efface que la RAM n‚cessaire)
		2 : chargement en TT Ram
		4 : malloc en TT Ram
	On peut combiner par addition, valeur = 7 pour toutes les options.
	
.setpath
	syntaxe: .setpath chemin
	fixe le chemin indiqu‚ comme chemin par d‚faut, utile avant de
	lancer un programme qui n‚cessite le chargement de fichiers
	annexes dans son r‚pertoire. Le chemin peut inclure un nom de
	lecteur.

.starttimer
	syntaxe: .starttimer
	d‚marre le chronomŠtre en 1/100e de secondes
	
.stop
	syntaxe: .stop
	arrˆte l'ex‚cution et revient au menu.

.tos
	syntaxe: VOIR .exec
	tos est un synonyme d'exec … ce d‚tail prŠs que le programme est
	lanc‚ en mode texte (‚cran vid‚, curseur clignotant, pas de
	souris).

Exemple d'utilisation:
~~~~~~~~~~~~~~~~~~~~~~

; section AUTO
;
>AUTO
.copyright
;
; section LIENS
;
@TXT,DOC
.setpath f:\everest
.exec everest.prg %0
@MOV,AVI,FLI,FLC,FLH,FLM,SEQ,DL,GIF
.setpath f:\anim\M_Player
.exec m_player.prg %0
@ZIP,LZH,ZOO,ARC,ARJ
.setpath f:\outils\twoinone
.exec twoinone.prg %0
;
; section MENU
;
*Bureau
	@A propos de...
	.alert "[1][ Shell programmable | G.Tello ][Suite]"
*Fichier
	@Gestionnaire
	.exec c:\kobold\kobold.prg
	@Rechercher
	.setpath c:\outils\jetfind
	.exec jetfind.prg
	@Ex‚cuter
	.select \*.*,,Choisir un fichier
	.exec %2
	@@------------
	@Quitter
	.end
*Autres
	@Menu jeux
	.menu c:\progdesk\jeux.dsk
	@Menu graphisme
	.menu c:\progdesk\graph.dsk

	Dans le menu Ex‚cuter, si je choisis un MOV, il lancera M_Player
pour visualiser cette animation, si je choisis un ZIP il lancera TwoinOne
pour d‚compresser l'archive, etc...
