	PROGDESK Documentation
	**********************


	programmable SHELL, (c) Guillaume Tello
	guillaume.tello@orange.fr

Capabilities:
~~~~~~~~~~~~~

	PROGDESK is a programmable menu: it just reads a text file in
witch you have described the MENU bar you want to use. Each menu-entry can
be linked to an application, an alert box, the file-selector, etc...

	You can customise your work environment and even use PROGDESK as a
mini-desktop with the tools you like (copy, format, edit, etc...).

	PROGDESK offers 10 string variables that can hold up to 255
chars. They can be used to exchange parameters between the fileselector
and an application, a program and another, an alert box and a program,
etc... 20 labels can be used at the time with forward, backwards and
conditional jumps.

	The PRG is less than 6Kb!!!! A very good point when the TTP you
drive need a large amount of RAM.

	If PROGDESK is installed as an application with DSK extension, it
will load every *.DSK when you clic on it. Else, it tries to load
DEFAULT.DSK.


Menu description, file DEFAULT.DSK:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	This file integrates three sections in the order given below:
	AUTO section
	LINK section
	MENU section
	The commands available will be described later in this file.

	1/ AUTO section
	---------------

	It is optional and contains the actions to perform at the very
beginning of the program (for example load the previous set of variables,
display a Copyright box, etc...):

>AUTO
.command...
.command...

	2/ LINK Section
	---------------

	It is optionnal and contains the actions to perform when the
".exec" command meets a specific extension (for example, the execution of
a *.TXT can launch your favourite text editor and pass the *.TXT as a
parameter).

@EXT
.commands...
@EXT
.commands...

	Each extension must be 1 to 3 chars long, one line can contain
several extensions with the same actions to do. If so, they must be
separated with "," only (no spaces). When a LINK is performed, the
variable %0 contains the name of the file that woke up that link, and %1
contains the remaining parameters.
	For example:

@TXT,DOC
.setpath f:\everest
.exec everest.prg %0

	Each time a TXT or DOC is intended to be executed, the default
path becomes EVEREST and the text editor EVEREST is run with the file name
as parameter.

	You can use jokers to replace a character into the extension:
	$ = a letter (from A … Z)
	# = a digit (from 0 … 9)
	? = everything
	Exemple:
	PI# -> for PI0 to PI9, but not for PIC.
	FL$ -> for FLI, FLC, FLH... but not for FL2.
	B?S -> for BOS, BAS, B7S, B_S, etc....
	### -> for every extension with 3 digits only.
	Attention, if you use this:
	@???
	.exec run.ttp %1
	and that you execute "TEST.PRG", then, as PRG maches ???, you will
have "run.ttp TEST.PRG". But again, TTP maches ???, so you'll have
"run.ttp run.ttp TEST.PRG"! And so on, until the program crashes...

	3/ MENU section
	---------------

	This is the only one of the 3 sections that MUST appear. It
contains the titles and the entries of the menu-bar. Each entry is
immediately followed by the actions it points to.
	RMQ: a title is marqued with "*", an entry with "@", a command
with a ".". If a double "@@" preceeds an entry, it will be disabled (as
the separators). Example:

*Desk
	@About...
	.commands...
*File
	@Search
	.commands...
	@Delete
	.commands...
	@@----------
	@Quit
	.commands...

	The first title has always one option, the room for accesories
will be added automatically.


Available commands are:
~~~~~~~~~~~~~~~~~~~~~~~

.%x=%y
	use: don't forget the "." and never insert spaces. This commands
	copies the value of variable %y into variable %x where x and y are
	digits from 0 to 9.
	Special case:
	.%x=%%
	sets variable %x to "" (empty string).
	Special case:
	%: is the name of the variable containing the language code.
	For example, ".goto %:" can jump to specific lines according
	to the current language. (see .language)

.alert
	use: .alert [n][line | line |...][Button|Button...]
	opens an alert box with icon #n. (0=none, 1=!, 2=?, 3=Stop
	and as AES 4.00, 4=Info, 5=Disk). You can specify witch button
	will be linked to the ENTER key:
		.alert x,[n][Line....
	x must be 1,2 or 3. The default is x=1.
	output: %0 contains the number of the exit button

.copyright
	use: .copyright
	opens the default alert box with the PROGDESK copyrights and the
	version number.

.cutext
	use: .cutext %n
	supposing variable %n contains a full file name, this commands
	cuts the extension of that string (so you can use the same GENERIC
	name with ".C", ".PRG" and other extensions). This is mostly used
	after a ".select" operation.
	output: %n without its extension.

.end
	use: .end
	exits from PROGDESK.

.exec
	use: .exec [drive\path\]file parameters
	runs the file and gives it the parameters as a command line. If
	this file has an extension listed into the LINK section, the
	execution jumps to that section with:
	%0=file name
	%1=command line
	and then comes back.
	output: %0 contains the return code of the application (a WORD
	from -32768 to 32767)

.gettimer
	syntax: .gettimer %n
	computes the time delay since the last .starttimer and stores
	it as a string into variable %n.
	General format is xxhxx'xx,xx". Null parts are removed, for
	example 00h05'07,40" is reduced to 5'7,4".

.goto
	use: .goto value
	jumps to the corresponding label. There must be a label with the
	same value! For example, to react to an alert box:
	.alert [1][Really delete the files?][Yes|No]
	.goto %0	; %0=button number
	.label 1
	... here commands for YES
	.stop
	.label 2
	... here commands for NO
	If the label doesn't exist, PROGDESK returns to the menu.

.if
	use: .if "text1"="text2" value
	     .if (val1)=(val2) value
	"if" allows you to compare two texts or two number, if the
	condition is TRUE, then the execution is transferred to the
	corresponding label.
	There are various operators available:
		= equal
		# not equal
		> greater than
		< lower than
	Don't put spaces around the operator. Texts or values can be
	variables. For example, to test the return value of a program
	(assuming that 0=Ok):
	.exec my_prog.prg
	.if (%0)=(0) 1	; goes to label 1 if OK
	.alert [1][ Error %0 | returned! ][Ooops]
	.stop
	.label 1
	...

	You can even manage a password that you have previously saved with
	the save command:

	>AUTO
	.load %5,passwrd.opt
	.%0=%%
	.input %0,10,Password please:
	.if "%0"="%5" 1 ; goes to 1 if OK
	.alert [1][Uncorrect password, | so quiting...][Sorry]
	.end
	.label 1

.input
	use: .input %x,n,prompt_text
	opens a Input box with the prompt to guide the user, this last can
	edit the n characters of variable %x.
	If you select 'Annuler'(=Cancel) the execution is stopped and
	PROGDESK returns to the menu. If you select "Confirmer"(=Confirm)
	then the execution continues.
	output: %x edited text.
	This command is useful to enter once the fixed parameters for a
	TTP program, then this string can be automatically given to the
	TTP.

.label
	use: .label value
	sets a label to be used with "goto" or "if". 20 different labels
	can be used at a time. They are local to the menu
	entry you have selected. The value is a word that can range from
	-32768 to 32767. The value can be a variable assuming that the
	variable contains a value.
	The labels in the LINK section are common to the ones of the
	calling entry: be careful with conflicts!

.language
	syntax: .language value
	set the language for PROGDESK messages.
	0=French, 1=English, 2=Italian, 3=Czech, 4=Polish
	5=Swedish, 6=Spanish
	This value is also stored into variable %:
	For example, you can use goto %: to jump to a specific part
	according to the language.
	Remark:
		The tool SETLANG.TOS alows you to set the buil-in
		default language for ProgDesk.

.load
	use: .load %abc...,[drive:path\]file
	loads from the specified file the values of variables %a, %b,
	etc... in the "growing" order:
	.load %901,options.cfg
	Will read from options.cfg 256 bytes for %0, 256 bytes for %1 and
	256 bytes for %9.

.mouse
	use: .mouse value
	performs a call to graf_mouse. The value can range from 0 to 7 for
	different mouse forms and:
	256 -> removes the pointer
	257 -> displays the pointer

.menu
	use: .menu [drive:path\]file.dsk
	loads another DSK file that overwrites the previous one in memory.
	A new menu-bar is created and displayed: you can link as many
	menus as you like without "eating" your RAM.
	If the path starts with a '*', then the AUTO section of the
	new menu is ignored.

.mouse
	syntax: .mouse value
	calls graf_mouse with value as parameter.
	0,1,2,3,4,5,6,7 -> different shapes for the mouse
	256 -> hide mouse
	257 -> show mouse

.pause
	syntaxe: .pause
	wait for a key press. Useful after running a TOS program.

.redraw
	use: .redraw
	sends a redraw message for the whole screen in case of garbage due
	to a TOS program for example.

.save
	use: .save %abc...,[drive:path\]file
	saves to disk the values of variables %a, %b, etc... in the
	"growing" order:
	.save %901,options.cfg
	will save to options.cfg 256 bytes from %0, 256 bytes from %1 and
	256 bytes from %9.

.select
	use: .select [drive:path\]mask,default_file,title
	opens the fileselector with the starting strings given. On the old
	TOS, the title is not used but MUST appear. After the fileselector
	is closed, the execution is stopped if you have selected "Cancel"
	and goes on with "Ok" and...
	output:
	%0 full path without the mask (useful for ".setpath")
	%1 file name selected
	%2 full path+file name

.setflags
	syntax: .setflags [path\]file value
	sets the flags of an executable file:
		1 : fast load (clears only necessary RAM)
		2 : run in TT Ram
		4 : malloc in TT Ram
	Values can be combined by addition, value = 7 for all options.

.setpath

	use: .setpath [drive:\]path
	sets the current path. (some applications need to load their RSC,
	INF or CFG file from their own directory, so it must be set
	before).

.starttimer
	syntax: .starttimer
	starts chronometer in 1/100th of seconds

.stop
	use: .stop
	stops the execution and returns to the menu bar.

.tos
	use: SEE ".exec"
	tos and exec have the same actions except that "tos" erases the
	screen, removes the mouse pointer and activates the text cursor.

Variable use:
~~~~~~~~~~~~~

	The only place where a variable can't be used is to replace a
command name. Else, they can be found everywhere:

.exec dummy.prg
.alert [1][The return value | is %0 ][Close]

	when dummy is executed, it returns a value (commonly zero if Ok,
negative if error and positive for other use) stored into %0, this one I
can display into an alert box!

.%4=%%		; empty string
.input %4,30,Enter a question	; ask for a question and stores it into %4
.%5=%%		; empty string
.input %5,30,%4	; ask you the question you wrote before!

	Example of cutext:

; empty string
.%4=%%
; you enter a file name (ex: d:\source\test.s)
.input %4,30,File name to assemble and execute
; then the extension is removed (ex: d:\source\test)
.cutext %4
; then it assembles d:\source\test.S
.exec ASM.TTP %4.S
; and executes d:\source\test.PRG
.exec %4.PRG

A full example:
~~~~~~~~~~~~~~~

; section AUTO
;
>AUTO
.copyright
;
; section LINK
;
@TXT,DOC
.setpath f:\everest
.exec everest.prg %0
@MOV,AVI,FLI,FLC,FLH,FLM,SEQ,DL,GIF
.setpath f:\anim\M_Player
.exec m_player.prg %0
@ZIP,LZH,ZOO,ARC,ARJ
.setpath f:\tools\twoinone
.exec twoinone.prg %0
;
; section MENU
;
*Desk
	@About...
	.alert "[1][ Programmable Shell | G.Tello ][Go on]"
*File
	@File manager
	.exec c:\kobold\kobold.prg
	@Find
	.setpath c:\outils\jetfind
	.exec jetfind.prg
	@Execute
	.select \*.*,,Select a file
	.exec %2
	@@------------
	@Quit
	.end
*Go to...
	@Game menu
	.menu c:\progdesk\game.dsk
	@Graphism menu
	.menu c:\progdesk\graph.dsk


	In the Execute entry, if I choose a MOV, then it will be played
with M_Player, if a ZIP, it will be unpacked with TWOINONE, etc...
