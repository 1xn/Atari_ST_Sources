
                            ASSEMBLY SPRITE TUTORIAL
                                     PART 3

                              CLIPPING THAT SPRITE
                                       +
                               JOYSTICK MOVEMENT


     PRODUCED FOR:   ICTARI USER GROUP
     (C) Nick  Bates 1994

     ----------------------------------------------------------------------
     Last month I left you with  a   lot  of  things to experiment with and
     this month I have produced  my  solution  to  two of the problems. The
     first being a routine to clip  the   sprite around the borders and the
     second a routine to allow control via the joystick.

     First the clipping routine .....

     This is quite straightforward, and  as   the source is documented, you
     should have no  problems  following   it.   The  code  itself performs
     an extension of the actual sprite routine.

     The idea behind this routine, is that   a  sprite should be able to be
     displayed partly on the screen,  and  not  either  all  on or all off.
     Therefore for a 16 pixel sprite, you  should  be able to pass a sprite
     co-ordinate of say -10, and still see part of the sprite on screen.

     The problem is separated  into  two  clear  tasks.  First clipping for
     vertical borders (y) and second the horizontal borders (x).

     First the vertical borders. The first thing  to do is test whether the
     y co-ordinate is negative. If it  is  negative then clearly we have to
     display either part of the  sprite  or nothing. Clearly by subtracting
     the (negated) y co-ordinate from the sprite height, we can see whether
     any of the sprite will be visible, i.e if the co-ordinate is less than
     -16 then draw nothing.

     All we have to do now is to   move  down the sprite file the number of
     lines that are to be skipped   because   these  are not visible and to
     adjust the sprite height accordingly.  A  16  pixel sprite has 8 bytes
     per line, so we need to  multiply  be   eight. That's it, we have done
     the top vertical border.

     The bottom border is even easier, because  all we need to do is adjust
     the height of the sprite so  that   only  what we need is displayed. A
     test to ensure that nothing is attempted to be shown for a co-ordinate
     over the value of  200,  would  of  course  be  carried out first. The
     horizontal borders are a  lot  trickier.  If  you  look at this months
     source and in particular the sprite   routine,  you will notice that I
     have separated the  rotating  part  and  the  swapping  part  into two
     different subroutines. This is because for  a clip on the right border
     only the first part is needed.

     The left border requires its own subroutine, because there is no point
     in rotating the sprite and swapping  to   the second word when you can
     just use the logical shift command.

     The only required thing to do therefore  is to detect whether there is
     to be a left clip, right clip  or  no  clip. For the left border, just
     test for a negative number.  A  number  less  than  -16 means there is
     nothing to draw, any other negative  number indicates a left clip. The
     right border is much the same except that 320 is the magic number.


     Lets look at an example, if   you   want   to  display a sprite at say
     co-ordinates 315, then clearly we  need  to  only  display part of the
     sprite.

     The part we don't want has to  be   rotated into the higher word which
     is not used.

     Now onto the joystick subroutine...

     This subroutine is straightforward and  is   very similar to the mouse
     routine in previous issues of the Ictari Disks. Armed with your trusty
     copy of ST Internals you can   soon  find the required keyboard vector
     number to patch the new joystick handler into. The magic number is, of
     course, 24. Hence the command:

        LEA     24(A0),A0
        MOVE.L  JHANDLER,(A0)

     The joystick handler is a routine that converts the joystick movements
     into values to indicate a movement. i.e

                0,0                             NOTHING
                0,-1                            UP
                0,1                             DOWN
                -1,0                            LEFT
                -1,-1                           LEFT AND UP
                -1,1                            LEFT AND DOWN
                1,0                             RIGHT
                1,-1                            RIGHT AND UP
                1,1                             RIGHT AND DOWN

     I have done this  by  having  a   look-up  table with all the possible
     outcomes, remember to include the impossible outcomes as well.

     These values can therefore be  saved  to  a  variable, and used by the
     program.

     In the main program, you have a  call to the "DO MOVEMENT" subroutine,
     which will check the variables to see if any movement has been made.

     You must remember to ask for a joystick packet, and of course first of
     all you must ensure that the keyboard is ready to receive. Hence :

     .jloop
             btst.b  #1,$fffffc00                IS KEYBOARD READY ???
             beq.s   .jloop                      NO  - LOOP
             move.b  #$16,$fffffc02              YES - REQUEST JOY PACKET
             bra             .loop

     This loops until the keyboard  is  ready,  requests a joystick packet,
     and then branches to the main loop.

     My  MOVE  PLAYER  routine  is   so   straightforward  it's  not  worth
     explaining. You may be  wondering  why  I  have  use  subtract and add
     commands, when surely if you  add  a  negative  number it would be the
     same as a subtract. The reason  I  have  done  this is because you may
     wish to alter the rate  of  speed, or allow acceleration, deceleration
     times.

     Next month  I  hope  to  show   you   better  sprites  in  action with
     acceleration and deceleration added into   the  movement. I might also
     add a background, to give  a  better  feeling.  In the meantime fiddle
     around  with  this  code,  or  even   have  a  go  yourself  at  doing
     acceleration, and deceleration. All you  have   to  do is to alter the
     speed of the movement so  that  the   sprite  moves faster the more it
     moves and when the player stops moving, it takes a small response time
     to stop. You should of course have a maximum acceleration time.

     If you haven't already, then have  a   go  at  writing  a 32x32 sprite
     routine based  on  this  16x16  routine.  If  you  have  done  so then
     incorporate the new clipping routines into it.

     Until next month .....

     Nick Bates.
