*****************************************************
* SPRITE SUBROUTINES								*
*													*
* (c) Nick Bates <ictari> 1994						*
* Last modified: 10/07/94							*
*****************************************************

*****************************************************
* DRAW_SPRITE_16									*
*													*
* Draws a 16x16 sprite to logical screen			*
* WITH CLIPPING:  X AND Y							*
*													*
* Parameters:	D0 - x cordinates					*
*				D1 - y co-ordinates					*
*				D2 - spite number					*
*				sprite - pointer to sprites file	*
*				log	- logical screen				*
* NOTE:												*
*    	PHRASES WITHIN ****/   /***** SHOW WHERE TO *
* 		MODIFY FOR DIFFERENT SPRITE SIZES			*
*****************************************************
draw_sprite_16
	movem.l	a0-a1/d0-d7,-(sp)	STORE REGISTERS

	lea		sprites,a1			POINTER TO SPRITE FILE		
	move.l	log,a0				POINTER TO LOGICAL SCREEN
	
* NEED TO MOVE TO THE REQUIRED SPRITE IN THE SPRITE FILE

	mulu	#128,d2				****/ SPRITE SIZE :  x * y / 2  : 16 * 16 / 2 = 128 /****
 	add.l	d2,a1 				ADJUST INTO SPRITE FILE TO REQUIRED SPRITE NUMBER


* 	NEED TO CONVERT X and Y CORDINATES TO VALUES TO ADD INTO SCREEN ADDRES

	moveq	#16,d2				******/ SPRITE HEIGHT******/

	tst.w	d1					IS Y NEGATIVE ??
	bge.s	.ypos				NO

	neg.w	d1						
	sub.w	d1,d2				SUBTRACT FROM HEIGHT TO WORK OUT HOW MUCH TO DISPLAY
	ble		.no_draw			NOTHING TO DRAW


******/ A SIXTEEN BIT SPRITE HAS EIGHT BYTES PER LINE *********/
*		NEED TO MULTIPLY BY EIGHT

	move.w	d1,d7				STORE
	add.w	d1,d1				*2
	add.w	d1,d1				*2
	add.w	d1,d1				*2 - ABOVE IN EFFECT MULTIPLIES BY 8 
	add.w	d1,a1				ADJUST INTO SPRITE FILE
	bra		.do_x

.ypos							*Y IS POSITIVE
	cmp.w	#200,d1				IS IT OFF THE SCREEN ?
	bge		.no_draw			YES
	
	move.w	d1,d7				STORE Y CO-ORDINATE

	add.w	d7,d7			
	add.w	d7,d7			
	add.w	d1,d7			
	lsl.w	#5,d7				ABOVE IN EFFECT MULTIPLIES : * 5 * 32

	adda.w	d7,a0				GOTO Y CO-ORDINATE IN LOGICAL SCREEN

	add.w	d2,d1				
	subi.w	#200,d1				DO WE NEED T ADJUST SPRITE HEIGHT ?
	blt.s	.do_x				NO
	sub.w	d1,d2				NEW SPRITE HEIGHT

.do_x
	tst		d0
	bge.s	.xpos			X = POSITIVE NUMBER

	cmp.w	#-16,d0			OFF THE SCREEN ?
	ble.s	.no_draw		YES
	bra		.do_left		CLIP ON THE LEFT

.xpos
	move.w	d0,d7			STORE X CO-ORDINATE
	andi.w	#$f,d0

	andi.w	#$fff0,d7		ADJUST TO 16 BOUNDARY
	lsr.w	#1,d7			DIVIDE BY 2

	moveq	#96,d6			256-160
 	neg.b	d6
	cmp.w	d6,d7
	bge.s	.no_draw		NOTHING TO DRAW
	
	adda.w	d7,a0			ADJUST INTO SCREEN

	subq.w	#8,d6
	cmp.w	d6,d7			TEST FOR CLIPPING ON THE RIGHT
	bne		.do_all			NO CLIPPING

	moveq	#0,d1


*** CLIP SPRITE TO THE RIGHT ***

.do_right
	subq	#1,d2			FOR DBRA ROUTINE
.loop_rt
	bsr		right
	add.w	#152,a0			ADJUST FOR NEXT LINE - 160 - 8  
	dbra	d2,.loop_rt
	bra		.no_draw		EXIT


*** CLIP SPRITE ON THE LEFT ****
.do_left
	moveq	#0,d1
	subq	#1,d2			FOR DBRA ROUTINE
	neg.w	d0
	andi.w	#$f,d0			
.loop_lt
	adda.w	d1,a1			
	bsr		left2
	add.w	#152,a0			ADJUST FOR NEXT LINE - 160-8 
	dbra	d2,.loop_lt
	bra		.no_draw


*** NO CLIPPING ***
.do_all
	subq	#1,d2			FOR DBRA
.loop_all
	bsr		right
	bsr		left
	add.w	#144,a0			160 - 16
	dbra	d2,.loop_all

.no_draw
	movem.l	(sp)+,a0-a1/d0-d7	RESTORE REGISTERS
	rts


*************************************************************
* RIGHT														*
*															*
* 	LOAD IN THE FOUR PLANES, AND ROTATE THEM TO ALLOW FOR 	*
*	THE 16 PIXEL BOUNDARY									*
*************************************************************
right
	moveq	#0,d4				ZERO DATA REGISTER
	move.w	(a1)+,d4			PLANE 0
	ror.l	d0,d4				ROTATE BY REQUIRED VALUE

	moveq	#0,d5
	move.w	(a1)+,d5			PLANE 1
	ror.l	d0,d5

	moveq	#0,d6
	move.w	(a1)+,d6			PLANE 2
	ror.l	d0,d6

	moveq	#0,d7
	move.w	(a1)+,d7			PLANE 3
	ror.l	d0,d7

* 	CREATE A MASK FROM THE FOUR PLANES INTO D3

	move.w	d4,d3				
	or.w	d5,d3
	or.w	d6,d3
	or.w	d7,d3				OR ALL THE VALUES TOGETHER
	not.w	d3					NEGATE THE RESULT

*	PUT INTO LOGICAL SCREEN - AND THE MASK WITH THE 
*	CURRENT SCREEN DATA, AND OR THE NEW DATA IN

	and.w	d3,(a0)				AND MASK
	or.w	d4,(a0)+			OR PLANE 0 - INCREMENT SCREEN

	and.w	d3,(a0)
	or.w	d5,(a0)+			PLANE 1

	and.w	d3,(a0)
	or.w	d6,(a0)+			PLANE 2

	and.w	d3,(a0)
	or.w	d7,(a0)+			PLANE 3
	
	rts

*************************************************************
* LEFT														*
*															*
* NOW DO THE PART THAT WAS ROTATED TO THE OTHER HIGH WORD	*
*************************************************************
left
	swap	d4					SWAP HI-LOW VALUES OF REGISTER
	swap	d5
	swap	d6
	swap	d7

*	CREATE MASK

	move.w	d4,d3
	or.w	d5,d3
	or.w	d6,d3
	or.w	d7,d3
	not.w	d3

*	AND MASK WITH CURRENT SCREEN DATA, OR WITH NEW DATA

	and.w	d3,(a0)
	or.w	d4,(a0)+

	and.w	d3,(a0)
	or.w	d5,(a0)+

	and.w	d3,(a0)
	or.w	d6,(a0)+

	and.w	d3,(a0)
	or.w	d7,(a0)+

	rts

*****************************************************
* LEFT2												*
*													*
* FOR LEFT BORDER CLIP - NO NEED TO ROTATE AND SWAP *
* MAY AS WEEL JUST USE LOGICAL SHIFT 				*
*****************************************************
left2
	
	move.w	(a1)+,d4			PLANE 0
	lsl.w	d0,d4				SHIFT BY REQUIRED VALUE

	move.w	(a1)+,d5			PLANE 1
	lsl.w	d0,d5

	move.w	(a1)+,d6			PLANE 2
	lsl.w	d0,d6

	move.w	(a1)+,d7			PLANE 3
	lsl.w	d0,d7

* 	CREATE A MASK FROM THE FOUR PLANES INTO D3

	move.w	d4,d3				
	or.w	d5,d3
	or.w	d6,d3
	or.w	d7,d3				OR ALL THE VALUES TOGETHER
	not.w	d3					NEGATE THE RESULT

*	PUT INTO LOGICAL SCREEN - AND THE MASK WITH THE 
*	CURRENT SCREEN DATA, AND OR THE NEW DATA IN

	and.w	d3,(a0)				AND MASK
	or.w	d4,(a0)+			OR PLANE 0 - INCREMENT SCREEN

	and.w	d3,(a0)
	or.w	d5,(a0)+			PLANE 1

	and.w	d3,(a0)
	or.w	d6,(a0)+			PLANE 2

	and.w	d3,(a0)
	or.w	d7,(a0)+			PLANE 3
	
	rts
