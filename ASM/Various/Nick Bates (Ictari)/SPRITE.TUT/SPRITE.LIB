*****************************************************
* SPRITE SUBROUTINES								*
*													*
* (c) Nick Bates <ictari> 1994						*
* Last modified: 23/03/94							*
*****************************************************

*****************************************************
* DRAW_SPRITE_16									*
*													*
* Draws a 16x16 sprite to logical screen			*
* No clipping, 										*
*													*
* Parameters:	D0 - x cordinates					*
*				D1 - y co-ordinates					*
*				D2 - spite number					*
*				sprite - pointer to sprites file	*
*				log	- logical screen				*
* NOTE:												*
*    	PHRASES WITHIN ****/   /***** SHOW WHERE TO *
* 		MODIFY FOR DIFFERENT SPRITE SIZES			*
*****************************************************
draw_sprite_16
	movem.l	a0-a1/d0-d7,-(sp)		STORE REGISTERS

	lea		sprites,a1				POINTER TO SPRITE FILE		
	move.l	log,a0					POINTER TO LOGICAL SCREEN
	
* NEED TO MOVE TO THE REQUIRED SPRITE IN THE SPRITE FILE

	mulu	#128,d2					****/ SPRITE SIZE :  x * y / 2  : 16 * 16 / 2 = 128 /****
	add.l	d2,a1 					ADJUST INTO SPRITE FILE TO REQUIRED SPRITE NUMBER


* 	NEED TO CONVERT X and Y CORDINATES TO VALUES TO ADD INTO SCREEN ADDRESS

	move.w	d1,d7			STORE Y CO-ORDINATE

	add.w	d7,d7			
	add.w	d7,d7			
	add.w	d1,d7			
	lsl.w	#5,d7			ABOVE IN EFFECT MULTIPLIES : * 5 * 32

	adda.w	d7,a0			GOTO Y CO-ORDINATE IN LOGICAL SCREEN

	move.w	d0,d7			STORE X CO-ORDINATE

	andi.w	#$fff0,d7		ADJUST TO 16 BOUNDARY
	lsr.w	#1,d7			DIVIDE BY 2

	adda.w	d7,a0			GOTO X CO-ORDINATE IN LOGICAL SCREEN

	andi.w	#$f,d0			D7-D0 - VALUE TO ROTATE BY


*  	DRAW EACH LINE OF SPRITE AT A TIME

	moveq	#15,d2			****/ SPRITE HEIGHT - 1 ****/

.loop

	****/ REPEAT THIS FOR EACH 16 PIXELS IN LENGTH ****/ 

* 	LOAD IN THE FOUR PLANES, AND ROTATE THEM

	moveq	#0,d4				ZERO DATA REGISTER
	move.w	(a1)+,d4			PLANE 0
	ror.l	d0,d4				ROTATE BY REQUIRED VALUE

	moveq	#0,d5
	move.w	(a1)+,d5			PLANE 1
	ror.l	d0,d5

	moveq	#0,d6
	move.w	(a1)+,d6			PLANE 2
	ror.l	d0,d6

	moveq	#0,d7
	move.w	(a1)+,d7			PLANE 3
	ror.l	d0,d7

* 	CREATE A MASK FROM THE FOUR PLANES INTO D3

	move.w	d4,d3				
	or.w	d5,d3
	or.w	d6,d3
	or.w	d7,d3				OR ALL THE VALUES TOGETHER
	not.w	d3					NEGATE THE RESULT

*	PUT INTO LOGICAL SCREEN - AND THE MASK WITH THE 
*	CURRENT SCREEN DATA, AND OR THE NEW DATA IN

	and.w	d3,(a0)				AND MASK
	or.w	d4,(a0)+			OR PLANE 0 - INCREMENT SCREEN

	and.w	d3,(a0)
	or.w	d5,(a0)+			PLANE 1

	and.w	d3,(a0)
	or.w	d6,(a0)+			PLANE 2

	and.w	d3,(a0)
	or.w	d7,(a0)+			PLANE 3
	
*	NOW DO THE PART THAT WAS ROTATED TO THE OTHER HIGH WORD

	swap	d4					SWAP HI-LOW VALUES OF REGISTER
	swap	d5
	swap	d6
	swap	d7

*	CREATE MASK

	move.w	d4,d3
	or.w	d5,d3
	or.w	d6,d3
	or.w	d7,d3
	not.w	d3

*	AND MASK WITH CURRENT SCREEN DATA, OR WITH NEW DATA

	and.w	d3,(a0)
	or.w	d4,(a0)+

	and.w	d3,(a0)
	or.w	d5,(a0)+

	and.w	d3,(a0)
	or.w	d6,(a0)+

	and.w	d3,(a0)
	or.w	d7,(a0)+

*	NOW ADD TO THE SCREEN TO GET TO THE NEXT LINE IN THE SCREEN

	add		#144,a0				*****/ VALUE FOR NEXT LINE : 152-(length/2) : 152-(16/2) /*****

	dbra	d2,.loop			LOOP FOR ALL LINES

	movem.l	(sp)+,a0-a1/d0-d7	RESTORE REGISTERS
	rts		
