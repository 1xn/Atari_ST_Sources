' ***********************************************************************
' *  Exemple d'utilisation(test) des joysticks normaux sur port etendu  *
' *               Realise par Fabrice Vend‚                             *
' *      E-Mail : fvende@srvetud.univ-lr.fr (jusqu'a juin 1995)         *
' ***********************************************************************
initialisation
programme_principal
> PROCEDURE initialisation
  ' initialisation du texte pour l'affichage
  DIM direction$(10)
  FOR i&=0 TO 10
    READ direction$(i&)
  NEXT i&
  DATA Rien,Haut,Bas,ERREUR,Gauche,Diagonale : Gauche Haut,Diagonale : Gauche BAS
  DATA ERREUR,Droite,Diagonale : Haut Droite,Diagonale : Bas Droite
RETURN
> PROCEDURE programme_principal
  DO
    FOR numero_joy=1 TO 4
      '      joy(numero_joy#,position#,fire) ! appel procedure
      position=@stick_e(numero_joy)
      fire&=@strig_e(numero_joy)
      PRINT AT(1,1+numero_joy);"joystick(";numero_joy;") =>";direction$(position);
      IF fire&
        PRINT " + Bouton Tir                      "
      ELSE
        PRINT "                                   "
      ENDIF
    NEXT numero_joy
  LOOP UNTIL INKEY$<>"" OR MOUSEK
RETURN
' ******************************************
' * sous-prg de test version PROCEDURE     *
' ******************************************
> PROCEDURE joy(i,VAR pos,ap&)
  ' procedure qui va tester la position de chaque joystick
  ' elle renvoit dans pos# les memes resultat que pour un test STICK() :
  '   0= position repos
  '   1= Haut
  '   2= Bas
  '   4= Gauche
  '   8= Droite
  '   5= 4 + 1 = Gauche + Haut
  '   6= 4 + 2 = Gauche + Bas
  '   9= 8 + 1 = Droite + Haut
  '   10= 8 + 2 = Droite + Bas
  '   le reste est impossible (sauf erreur de connection...)
  ' Et elle renvoit dans appuie# 0 si pas d'appuie sur Fire et 1 sinon
  '
  '
  ' Position ADRESSE $FF9202 (un word <=> 4 bits par joystick)
  '
  valeur_position%=DPEEK(&HFF9202)                 ! test position
  val_pos_h|=1+BTST(valeur_position%,(i-1)*4+3)   ! test du bit 3
  val_pos_b|=1+BTST(valeur_position%,(i-1)*4+2)   ! test du bit 2
  val_pos_g|=1+BTST(valeur_position%,(i-1)*4+1)   ! test du bit 1
  val_pos_d|=1+BTST(valeur_position%,(i-1)*4+0)   ! test du bit 0
  pos=val_pos_h|*1+val_pos_b|*2+val_pos_g|*4+val_pos_d|*8  ! calcul de la postion totale
  '
  '
  ' TIR ADRESSE $FF9201 (un quartet du poids faible = 1/2 octet <=> 1 bits par joystick)
  '
  valeur_tir%=PEEK(&HFF9201)                       ! test tir
  IF i=1 OR i=4
    ap&=1+BTST(valeur_tir%,(i-1))
  ELSE
    ap&=1+BTST(valeur_tir%,(i XOR 1)-1)           ! le Xor est une astuce pour palier le faite que les bits tirs des joysticks 2 et 3 sont inverser
    ' le Xor est une astuce pour palier le faite que
    ' les bits tirs des joysticks 2 et 3 sont invers‚s
    ' par rapport a l'ordre des positions des joysticks
  ENDIF
RETURN
' ******************************************
' * sous-prg de test version FONCTION      *
' * qui renvoit  comme le STICK et le STRIG*
' ******************************************
> FUNCTION stick_e(i)
' Fonction qui va tester la position de chaque joystick
' elle renvoit les memes resultat que pour un test STICK() :
'   0= position repos
'   1= Haut
'   2= Bas
'   4= Gauche
'   8= Droite
'   5= 4 + 1 = Gauche + Haut
'   6= 4 + 2 = Gauche + Bas
'   9= 8 + 1 = Droite + Haut
'   10= 8 + 2 = Droite + Bas
'   le reste est impossible (sauf erreur de connection...)
'
valeur_position%=DPEEK(&HFF9202)                 ! test position
val_pos_h|=1+BTST(valeur_position%,(i-1)*4+3)   ! test du bit 3
val_pos_b|=1+BTST(valeur_position%,(i-1)*4+2)   ! test du bit 2
val_pos_g|=1+BTST(valeur_position%,(i-1)*4+1)   ! test du bit 1
val_pos_d|=1+BTST(valeur_position%,(i-1)*4+0)   ! test du bit 0
pos&=val_pos_h|*1+val_pos_b|*2+val_pos_g|*4+val_pos_d|*8  ! calcul de la postion totale
RETURN pos&
ENDFUNC
> FUNCTION strig_e(i)
' Fonction qui va tester la position de chaque joystick
' elle renvoit les memes resultat que pour un test STRIG() :
'
'
' TIR ADRESSE $FF9201 (un quartet du poids faible = 1/2 octet <=> 1 bits par joystick)
'
valeur_tir%=PEEK(&HFF9201)                       ! test tir
IF i=1 OR i=4
ap&=-(1+BTST(valeur_tir%,(i-1)))
ELSE
ap&=-(1+BTST(valeur_tir%,(i XOR 1)-1))           ! le Xor est une astuce pour palier le faite que les bits tirs des joysticks 2 et 3 sont inverser
' le Xor est une astuce pour palier le faite que
' les bits tirs des joysticks 2 et 3 sont invers‚s
' par rapport a l'ordre des positions des joysticks
ENDIF
RETURN ap&
ENDFUNC
