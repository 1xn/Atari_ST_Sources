*************** INITIALISE ROUTINES **************

START   LEA     $78000,A7
	BSR	RESTORE

*	SET UP FLIP SCREEN ADDRESSES

	MOVE.L	#$78000,D0
	MOVE.L	D0,SCREEN1+2	FLIP SCREEN 1
	MOVE.L	D0,SCREENON+2

	MOVE.L	#DISPLAY,D0
	ANDI.W	#$FF00,D0

	MOVE.L	D0,SCREEN2+2	FLIP SCREEN 2
	MOVE.L	D0,BLITBASE+2

*	NEW VBL

	MOVE.L	#MYVBL,$70.W

	MOVE.L	#$6983745F,D0
	MOVE.W	$468.W,D1
	ADDQ	#3,D1
.LOOP	ADD.B	$FFFF8209.W,D0
	ROL.L	#7,D0
	ADD.B	$FFFF8209.W,D0
	ROL.L	#7,D0
	ADD.B	$FFFF8209.W,D0
	ROL.L	#7,D0
	ADD.B	$FFFF8209.W,D0
	CMP.W	$468.W,D1
	BNE.S	.LOOP
	MOVE.L	D0,RANDOM+2

	bsr	getcollpts

	MOVE.L	A7,A0	STACK BASE
	SUB.L	#ATEND,A0	-PROG END
	CMP.L	#350*1024,A0	>350K FREE ?
	BCS	.NOROOM	NO

	LEA	ATEND,A1	PROG END
	ADDA.W	#20480,A1	+SOME SPACE
	MOVE.L	A1,-(A7)	STACK VALUE

	LEA	TITLES,A0	LOAD TITLES
	BSR	LOADFILE
	MOVE.L	(A7)+,A1	RETREIVE BASE OF FILE
	MOVE.L	A1,TITLES	STORE AT TITLES
	MOVE.L	#61008,D0
	MOVE.L	D0,TITLES+4	STORE LENGTH OF TITLES
	ADDA.L	D0,A1	ADD LENGTH OF TITLES
	MOVE.L	A1,-(A7)	STACK VALUE

	LEA	ALLOPTIONS,A0	LOAD OPTIONS
	BSR	LOADFILE
	MOVE.L	(A7)+,A1	RETREIVE BASE OF FILE
	MOVE.L	A1,ALLOPTIONS	STORE AT ALLOPTIONS
	MOVE.L	#104136,D0
	MOVE.L	D0,ALLOPTIONS+4	STORE LENGTH OF OPTIONS
	ADDA.L	D0,A1	ADD LENGTH OF OPTIONS
	MOVE.L	A1,-(A7)	STACK VALUE

	LEA	RESULTS,A0	LOAD RESULTS
	BSR	LOADFILE
	MOVE.L	(A7)+,A1	RETREIVE BASE OF FILE
	MOVE.L	A1,RESULTS	STORE AT RESULTS
	MOVE.L	#41416,D0
	MOVE.L	D0,RESULTS+4	STORE LENGTH OF RESULTS
	ADDA.L	D0,A1	ADD LENGTH OF RESULTS
	MOVE.L	A1,-(A7)	STACK VALUE

	LEA	GAMEFILE,A0	LOAD GAMEPLAY
	BSR	LOADFILE
	MOVE.L	(A7)+,A1	RETREIVE BASE OF FILE
	MOVE.L	A1,GAMEFILE	STORE AT GAMEFILE
	MOVE.L	#52748,D0
	MOVE.L	D0,GAMEFILE+4	STORE LENGTH OF GAMEPLAY
	ADDA.L	D0,A1	ADD LENGTH OF GAMEPLAY
	MOVE.L	A1,-(A7)	STACK VALUE

	LEA	PANELNAM,A0	LOAD PANEL
	BSR	LOADFILE
	MOVE.L	(A7)+,A1	RETREIVE BASE OF FILE
	MOVE.L	A1,PANELNAM	STORE AT PANELNAM
	MOVE.L	#3208,D0
	MOVE.L	D0,PANELNAM+4	STORE LENGTH OF PANEL
	MOVE.B	#-1,LOADFILE+1
.NOROOM	BRA	SKIPTITLES

*	STORE COLOUR PALLETTE

RESTORE	LEA	$FFFF8240.W,A0
	LEA	PANELPAL,A1
	LEA	MAINPAL,A2
	LEA	NOCOLORS,A3
	MOVEQ	#7,D0
STOPAL	MOVE.L	(A0),(A1)+
	MOVE.L	(A0)+,(A2)+
	CLR.L	(A3)+
	DBF	D0,STOPAL

*	SET UP TIMER B

	MOVE.L	#DEIRQ,-(A7)
	MOVE.L	#$60,-(A7)	STOP TIMER,COUNT 96
	MOVE.L	#$1F0001,-(A7)	XBTIMER B
*	TRAP	#14
	ADDA.W	#12,A7

	MOVE.B	#$3,$FFFFFC00.W
	MOVE.B	#$96,$FFFFFC00.W

*	NEW KEYBRD/JYSTK VECTOR

	MOVE.L	#READKEY,$118.W

	MOVE.B	#-1,ANYSOUND+1
	MOVE.B	#-1,SNDFLAG+1
	CLR.B	TUNEON+1
	MOVE.B	#-1,TUNEFLAG+1
	CLR.B	TUNEDISABLE+1
	MOVEQ	#3,D0
	MOVE.B	D0,TUNENO+1
	JMP	SOUND

RESET	MOVE.L	#$78000,A7
	BSR	RESTORE
	LEA	$FFFF8800.W,A0
	MOVE.B	#7,(A0)
	MOVE.B	#$C0,2(A0)
	MOVE.B	#$E,(A0)
	MOVE.B	#2,2(A0)
	MOVE.B	#2,$FFFF820A.W
	MOVE.W	#$2300,SR
	BRA.S	RESTART1
RESTART	MOVE.B	#3,TUNENO+1
	CLR.B	TUNEFLAG+1
RESTART1	MOVE.L	#$78000,A7
	MOVE.B	#-1,FLIPFLAG+1
	MOVE.B	#-1,LASTSEL+1
	BSR	WVBL
	BRA.S	STARTITLES

*	RELOAD ALL TITLE SEQUENCE AND NAME ENTRY

NEWTITLES	MOVE.B	#3,TUNENO+1
	CLR.B	TUNEFLAG+1

STARTITLES	BSR	LOADING	BOTH PALLETS TO BLACK,DISPLAY MESSAGE

SKIPTITLES	LEA	TITLES,A0
	LEA	EMPTYBIT,A1
	BSR	LOADFILE

*	DECOMPRESS TITLE FRONT BIT

DOTITLES	LEA	TITLEMASKCMP,A0
	LEA	TITLEMASK,A1
	BSR	UNPACK

*	DECOMPRESS AND ROTATE TITLE CARS

	LEA	TITLECARS,A0
	BSR	ROTATECARS

*	DECOMPRESS TITLE TYRES

	LEA	TITLETYRES,A0
	BSR	ROTATETYRE

*	DECOMPRESS TITLE SCREEN

	LEA	TITLESCRN,A0
	BSR	DOSCREEN
	MOVE.W	#$666,PALLET+2

	BSR	LOADOFF	USE PALLET FOR BOTH SCREENS

*	COPY BACKGROUND AREA FOR DELETING CARS

	MOVE.L	BLITBASE+2,A0
	ADDA.W	#160*118,A0
	LEA	TITLEBACK,A1
	MOVE.W	#1679,D0
.LOP	MOVE.L	(A0)+,(A1)+
	DBF	D0,.LOP

*	ROUTINE FOR SCROLLING CARS ACROSS SCREEN

	CLR.W	$466.W	VBL COUNT TO 0

*	RANDOMLY SELECT CAR (0-2) AND SCROLL RATE (4,8 OR 10)

DOCARS	DBF	D1,DOCARS
	TST.B	JOYSTICK+1
	BEQ	NEWNAME
	MOVE.L	#$A75D0080,D6
	BSR	RANDOM
	MOVEQ	#0,D1
	CMPI.W	#10,D6
	BCS.S	.GOTCAR
	ADDQ	#1,D1
	CMPI.W	#21,D6
	BCS.S	.GOTCAR
	ADDQ	#1,D1
	CMPI.W	#32,D6
	BCC.S	DOCARS
.GOTCAR	LSL.W	#2,D1	LONG WORD INDEX
	LEA	BIGCARS,A0
	MOVE.L	0(A0,D1.W),A0	BASE OF CAR
	LEA	CARTYRES,A1
	MOVE.L	0(A1,D1.W),A1	BASE OF CAR TYRES
	LEA	TYREOFFS,A5
	LSL.W	#1,D1
	ADDA.W	D1,A5
	SWAP	D6
	MOVE.L	#$79F303A5,D6
	BSR	RANDOM
	MOVE.W	D6,D1
	CMPI.W	#4,D1
	BEQ.S	.OK
	CMPI.W	#8,D1
	BEQ.S	.OK
	CMPI.W	#10,D1
	BNE.S	DOCARS

*	SET INITIAL CAR X POSITION

.OK	MOVEQ	#0,D2	(160 PIXELS LEFT OF SCREEN)

*	PUT BACKGROUND BACK

TITLECAR	MOVE.B	#-1,DOFLIP+1
	BSR	WDEIRQ
	MOVE.L	BLITBASE+2,A4
	ADDA.W	#160*118,A4
	LEA	TITLEBACK,A6
	MOVEQ	#41,D6

.LOP	REPT	40

	MOVE.L	(A6)+,(A4)+

	ENDR

	DBF	D6,.LOP

	MOVE.W	#118*160,D7
	BSR	DOBIGCARS

	TST.B	JOYSTICK+1
	BEQ	NEWNAME
	ADD.W	D1,D2
	CMPI.W	#750,$466.W
	BCC.S	NEWSBIT
	CMPI.W	#518,D2
	BLT	TITLECAR
	BRA	DOCARS

*	ROUTINE FOR RON AND NANCY
*	DECOMPRESS ANIMATIONS

NEWSBIT	BSR	FADEOFF

	LEA	RONANIMCMP,A0
	LEA	RONANIM,A1
	BSR	UNPACK

*	DECOMPRESS RON+NANCY SCREEN

	LEA	RONSCRN,A0
	BSR	DOSCREEN

	BSR	FADEUP

*	SET UP FOR TEXT SCROLL AND ANIMATION

	MOVEQ	#0,D0	RON BLINK COUNT
	MOVEQ	#0,D1	NANCY BLINK COUNT
	MOVEQ	#19,D2	20 SECTIONS OF TEXT
	MOVEQ	#-1,D3	NEW SCROLLTEXT
	LEA	NUMLINES,A0	NUMBER OF RANDOMS PER SECTION
	LEA	RON,A1	TEXT BASE
	LEA	HIGHSCORES,A2	BEST SCORES/TIMES

DONEWS	TST.B	JOYSTICK+1
	BEQ	NEWNAME
	BSR	WDEIRQ
	TST.W	D0	RON BLINKING ?
	BEQ.S	.RONRANDOM	NO
	SUBQ.W	#1,D0	FINISHED ?
	BNE.S	.NORON	NO
	MOVE.L	SCREENON+2,A5	DISPLAY BASE
	ADDA.W	#77*160+17,A5	EYE POSITION
	LEA	RONANIM+3*8*14,A6  OPEN EYE
	BSR.S	.DOEYES
	BRA.S	.NORON

.DOEYES	MOVEQ	#2,D7
.DOIT	MOVE.B	(A6)+,(A5)+
	ADDQ	#1,A5
	MOVE.B	(A6)+,(A5)+
	ADDQ	#1,A5
	MOVE.B	(A6)+,(A5)+
	ADDQ	#1,A5
	MOVE.B	(A6)+,(A5)+
	MOVE.L	(A6)+,(A5)+
	MOVE.L	(A6)+,(A5)+
	MOVE.B	(A6)+,(A5)+
	ADDQ	#1,A5
	MOVE.B	(A6)+,(A5)+
	ADDQ	#1,A5
	MOVE.B	(A6)+,(A5)+
	ADDQ	#1,A5
	MOVE.B	(A6)+,(A5)+
	ADDA.W	#138,A5
	DBF	D7,.DOIT
	RTS

.RONRANDOM	MOVE.W	#155,D6	RND(155)
	BSR	RANDOM
	TST.W	D6	=0 ?
	BNE.S	.NORON	NO
	MOVEQ	#4,D0	BLINK COUNT
	MOVE.L	SCREENON+2,A5	DISPLAY BASE
	ADDA.W	#77*160+17,A5	EYE POSITION
	LEA	RONANIM+3*8*14+16*3,A6  CLOSED EYE
	BSR.S	.DOEYES
.NORON	TST.W	D1	NANCY BLINKING ?
	BEQ.S	.NANRANDOM	NO
	SUBQ.W	#1,D1	FINISHED
	BNE.S	.NONANCY	NO
	MOVE.L	SCREENON+2,A5	DISPLAY BASE
	ADDA.W	#81*160+121,A5	EYE POSITION
	LEA	RONANIM+2*3*8*14+2*16*3,A6  OPEN EYE
	BSR.S	.DOEYES
	BRA.S	.NONANCY
.NANRANDOM	MOVE.W	#149,D6	RND(149)
	BSR	RANDOM
	TST.W	D6	=0 ?
	BNE.S	.NONANCY	NO
	MOVEQ	#4,D1	BLINK COUNT
	MOVE.L	SCREENON+2,A5	DISPLAY BASE
	ADDA.W	#81*160+121,A5	EYE POSITION
	LEA	RONANIM+2*3*8*14+3*16*3,A6  CLOSED EYE
	BSR	.DOEYES
.NONANCY	TST.W	D3	NEW TEXT ?
	BPL	SCROLLTEXT	NO
	MOVEQ	#21,D3	22 LINES TO SCROLL
	MOVE.L	BLITBASE+2,A3
	MOVE.L	SCREENON+2,A4
	ADDA.W	#173*160,A4
.COPY1	MOVE.B	(A4)+,(A3)+
	CLR.B	(A3)+
	ADDQ	#1,A4
	MOVE.B	(A4)+,(A3)+
	CLR.B	(A3)+
	ADDQ	#1,A4
	MOVE.B	(A4)+,(A3)+
	CLR.B	(A3)+
	ADDQ	#1,A4
	MOVE.B	(A4)+,(A3)+
	CLR.B	(A3)+
	ADDA.W	#36*4+2,A4
.COPY	REPT	36
	CLR.L	(A3)+
	ENDR
	CLR.B	(A3)+
	MOVE.B	(A4)+,(A3)+
	ADDQ	#1,A4
	CLR.B	(A3)+
	MOVE.B	(A4)+,(A3)+
	ADDQ	#1,A4
	CLR.B	(A3)+
	MOVE.B	(A4)+,(A3)+
	ADDQ	#1,A4
	CLR.B	(A3)+
	MOVE.B	(A4)+,(A3)+
	DBF	D3,.COPY1	NB. A3=END OF AREA
	TST.W	D2
	BEQ	.NONEWS
	MOVE.L	A1,A4	CURRENT TEXT BASE
	MOVE.W	(A0)+,D5	NUMBER OF CHOICES
	MOVE.W	D5,D6	COPY FOR RANDOM
	MULU	#76,D5	76 CHARS PER CHOICE
	ADDA.W	D5,A1	NEW POSITION
	BSR	RANDOM	GET RANDOM (0-3 OR 0-7)
	MULU	#76,D6
	ADDA.W	D6,A4
	MOVE.L	BLITBASE+2,A5
	ADDA.W	#160,A5
	MOVEQ	#1,D3	2 LINES
.ROW	MOVEQ	#37,D4	38 CHARS
	BSR.S	PRINTROW
	ADDA.W	#8+160*10,A5
	DBF	D3,.ROW
.NONEWS	MOVEQ	#44,D3
	BRA	DONEWS

PRINTROW	CLR.B	.ZERO+1
	CLR.B	ZCOUNT+1
	MOVEQ	#0,D6
.PRINTROW	LEA	RONCHARS,A6
	MOVE.B	(A4)+,D5
	CMPI.B	#"*",D5	ASTERISK ?
	BNE.S	.NOTNEW	NO, SO NO LEADING ZEROES
	MOVE.B	(A2)+,D5	GET REPLACEMENT CHAR
	CMPI.B	#"0",D5	= 0 ?
	BEQ.S	.CHECKZ	YES, CHECK PRINT FLAG
	BCS.S	.NOTNEW	NO NOT A NUMBER
	CMPI.B	#"9"+1,D5	ELSE = NUMBER ?
	BCC.S	.NOTNEW	NO, SKIP ZEROES
	MOVE.B	#-1,.ZERO+1	ALLOW ZEROES
	BRA.S	.NOTSPACE	PRINT NUMBER
.CHECKZ	CMPI.B	#"*",(A4)	LAST CHAR OF SET ?
	BNE.S	.NOTSPACE	YES, PRINT IT ANYWAY
.ZERO	MOVEQ	#0,D7	PRINT ZERO ?
	BNE.S	.NOTSPACE	YES
	ADDQ.B	#1,ZCOUNT+1	ANOTHER ZERO SKIPPED
	BRA	.DONECHAR
.NOTNEW	CLR.B	.ZERO+1	ZEROES OFF
	CMPI.B	#"%",D5
	BNE.S	.NOTNEW1
	MOVE.W	TRACKNO,D5
	ADDI.W	#59,D5
	BRA.S	.LARGE
.NOTNEW1	CMPI.B	#".",D5
	BNE.S	.NOTSTOP
	NOT.B	.ZERO+1
	MOVEQ	#26,D5
	BRA.S	.LARGE
.NOTSTOP	CMPI.B	#",",D5
	BNE.S	.NOTCOM
	MOVEQ	#27,D5
	BRA.S	.LARGE
.NOTCOM	CMPI.B	#"'",D5
	BNE.S	.NOTAP
	MOVEQ	#28,D5
	BRA.S	.LARGE
.NOTAP	CMPI.B	#"$",D5
	BNE.S	.NOTMONEY
	MOVEQ	#29,D5
	BRA.S	.LARGE
.NOTMONEY	CMPI.B	#"!",D5
	BNE.S	.NOTEXCLAM
	MOVEQ	#30,D5
	BRA.S	.LARGE
.NOTEXCLAM	CMPI.B	#" ",D5
	BNE.S	.NOTSPACE
.BLANK	MOVEQ	#31,D5
	BRA.S	.LARGE
.NOTSPACE	ANDI.W	#$FF,D5
	SUBI.W	#"A",D5
	BPL.S	.LARGE
	ADDI.W	#"A"-"0"+58,D5
.LARGE	ADDA.W	D5,A6
	LSL.W	#3,D5
	ADDA.W	D5,A6
	ADDQ	#1,D6
	BTST	#0,D6
	BEQ.S	.HIGHBYTE
	ADDQ	#1,A5
.LINE	REPT	8
	MOVE.B	(A6)+,(A5)+
	ADDA.W	#159,A5
	ENDR
	MOVE.B	(A6)+,(A5)+
	SUBA.W	#160*8-6,A5
	BRA.S	.DONECHAR
.HIGHBYTE	REPT	8
	MOVE.B	(A6)+,(A5)+
	ADDA.W	#159,A5
	ENDR
	MOVE.B	(A6)+,(A5)+
	SUBA.W	#160*8+1,A5
.DONECHAR	DBF	D4,.PRINTROW
ZCOUNT	MOVEQ	#0,D5
	CMPI.W	#2,D5
	BCS.S	.LINEDONE
	LSR.W	#1,D5
	LSL.W	#3,D5
	ADDA.W	D5,A5
.LINEDONE	RTS

MOUTHS	SUBQ	#1,D5
	BNE	.SAMEMOUTH
	MOVEQ	#5,D5
	MOVE.L	SCREENON+2,A4
	LEA	RONANIM,A5
	CMPI.W	#11,D2
	BCS.S	.NANMOUTH
	ADDA.W	#89*160+24,A4
	BRA.S	.GOTMOUTH
.NANMOUTH	ADDA.W	#92*160+128,A4
	ADDA.W	#3*8*14+2*16*3,A5
.GOTMOUTH	SUBQ	#1,D4
	BEQ.S	.DRAWMOUTH
	MOVEQ	#3,D6
	BSR	RANDOM
	MULU	#8*14,D6
	ADDA.W	D6,A5
.DRAWMOUTH	REPT	13
	MOVE.L	(A5)+,(A4)+
	MOVE.L	(A5)+,(A4)+
	ADDA.W	#152,A4
	ENDR
	MOVE.L	(A5)+,(A4)+
	MOVE.L	(A5)+,(A4)+
.SAMEMOUTH	TST.W	D4
	BEQ.S	.MOUTHDONE
	BRA	DONEWS
.MOUTHDONE	MOVEQ	#-1,D3
	BRA	DONEWS

SCROLLTEXT	TST.W	D3
	BEQ	MOUTHS
	BTST	#0,D3
	BNE	.NOSCROLL
	MOVE.L	SCREENON+2,A4
	ADDA.W	#173*160,A4
	MOVEQ	#20,D4
.SCROLL	REPT	40
	MOVE.L	160(A4),(A4)+
	ENDR
	DBF	D4,.SCROLL
	MOVE.L	A3,A5
	MOVE.W	D3,D4
	MULU	#80,D4
	SUBA.W	D4,A5
.SCROLL1	REPT	40
	MOVE.L	(A5)+,(A4)+
	ENDR
.NOSCROLL	SUBQ	#1,D3
	BNE	DONEWS
	MOVEQ	#50,D4
	MOVEQ	#1,D5
	DBF	D2,DONEWS

*	SHOW CREDITS
*	DECOMPRESS CREDIT SCREEN

	LEA	CREDSCRN,A0
	BSR	DOSCREEN

	BSR	LOADOFF

.VIEWCRED	MOVE.W	#399,D0
.WAIT	BSR	WVBL
	TST.B	JOYSTICK+1
	BEQ.S	NEWNAME
	DBF	D0,.WAIT
	BRA	DOTITLES

*	ROUTINE FOR NAME ENTRY
*	LOAD AND DECOMPRESS NAME INPUT SCREEN TO FLIP SCREEN

NEWNAME	BSR	FADEOFF

	LEA	NAMESCRN,A0
	BSR	DOSCREEN

*	UNPACK THE NAME LETTERS

	LEA	NAMECMP,A0
	LEA	NAMELETR,A1
	BSR	UNPACK

*	SET PALLET AND COPY BLITSCREEN TO SCREEN

	BSR	FADEUP

*	NAME INPUT ROUTINE

	MOVE.L	SCREENON+2,A0
	ADDA.W	#159*160+64,A0
	LEA	NAMELETR,A1
	LEA	NAME,A2
	MOVEQ	#0,D0
GETNAME	CLR.W	$468.W
.REPEAT	BSR	WDEIRQ
	MOVE.L	A0,A3
	MOVEQ	#0,D1
.NEXTCHAR	CMP.W	D0,D1
	BNE.S	.NOFLASH
	BTST	#2,$469.W
	BNE.S	.NOFLASH
	MOVEQ	#27,D2
	BRA.S	.OK
.NOFLASH	MOVE.B	0(A2,D1.W),D2
	ANDI.W	#$FF,D2
	SUBI.W	#"A",D2
.OK	MULU	#8*15,D2
	LEA	0(A1,D2.W),A4
.LY	REPT	15
	MOVE.L	(A4)+,(A3)+
	MOVE.L	(A4)+,(A3)+
	ADDA.W	#152,A3
	ENDR
	SUBA.W	#15*160-8,A3
	ADDQ	#1,D1
	CMPI.W	#4,D1
	BNE	.NEXTCHAR
	CMPI.W	#7,$468.W
	BNE	.REPEAT
	MOVE.B	JOYSTICK+1,D1
	BTST	#0,D1
	BEQ.S	.NOT0
	MOVE.B	0(A2,D0.W),D2
	ADDQ	#1,D2
	CMPI.B	#"A"+27,D2
	BLT.S	.OKUP
	MOVEQ	#"A",D2
.OKUP	MOVE.B	D2,0(A2,D0.W)
.NOT0	BTST	#1,D1
	BEQ.S	.NOT1
	MOVE.B	0(A2,D0.W),D2
	SUBQ	#1,D2
	CMPI.B	#"A",D2
	BCC.S	.OKDOWN
	MOVEQ	#"A"+26,D2
.OKDOWN	MOVE.B	D2,0(A2,D0.W)
.NOT1	BTST	#2,D1
	BEQ.S	.NOT2
	SUBQ	#1,D0
	ANDI.W	#3,D0
.NOT2	BTST	#3,D1
	BEQ.S	.NOT3
	ADDQ	#1,D0
	ANDI.W	#3,D0
.NOT3	TST.W	D1
	BNE	GETNAME

	BSR	LOADING

*	ROUTINE TO INITIALISE NEW GAME GOES HERE
*	EG. CLEAR TRACKSDONE TABLE RESET CLASS ETC.

	CLR.L	TRACKSDONE
	CLR.L	TRACKSDONE+4
	CLR.W	TRACKSDONE+8
	CLR.W	RACENO
	CLR.W	RACESDONE
	CLR.W	CARTYPE
	CLR.W	CLASS
	CLR.B	SALESENTRY+1
	MOVE.L	#5000,CASH
	MOVE.W	#$F,SHOPFLAGS+2	SOLD EBFT,EXTRAS AVAILABLE
	BSR	RANDOMSHOP

	LEA	CHEATS,A0
	MOVE.L	NAME,D0
	MOVEQ	#0,D1
.CHECKIT	MOVE.L	(A0)+,D2
	BMI.S	.NOCHEAT
	CMP.L	D0,D2
	BEQ.S	.FOUND
	ADDQ.W	#1,D1
	BRA.S	.CHECKIT
.FOUND	CMPI.W	#3,D1
	BCC	OLDKEYVEC
	LSL.W	#3,D1
	LEA	CHEATVALS,A0
	ADDA.W	D1,A0
	MOVE.W	(A0)+,D0
	MOVE.W	D0,RACENO
	LSR.W	#3,D0
	MOVE.W	D0,CLASS
	MOVE.W	(A0)+,CARTYPE
	MOVE.L	(A0)+,CASH

.NOCHEAT	LEA	whichengpercent,A0
	MOVE.L	#$1000000,D0
	MOVE.L	D0,(A0)+
	MOVE.L	D0,(A0)+
	MOVE.L	D0,(A0)+
	MOVE.L	D0,(A0)+

*	CALL ROUTINE TO RELOAD AND RENEW THE PANEL
*	LOAD IT, DEPACK TO PANEL, COPY TO BLITBASE TO UPDATE IT
*	THEN STORE IT AT CURPANEL

	BSR	NEWPANEL

*	MAIN OPTIONS BIT (FROM RESULTS SCREEN)

NEXTRACE	LEA	ALLOPTIONS,A0
	LEA	EMPTYBIT,A1
	BSR	LOADFILE

	MOVE.B	#4,TUNENO+1
	CLR.B	TUNEFLAG+1

OPTIONS	BSR	FADEOFF

*	PUT CURRENT PANEL ON BLITSCREEN, CLEARING THE 4 LINES

	BSR	SHOWPANEL

*	DECOMPRESS OPTIONS SCREEN

	LEA	OPTSCRN,A0
	BSR	DOSCREEN

*	NOW PRINT UP CORRECT CLASS AND TRACKS DONE

	MOVE.L	BLITBASE+2,A0
	ADDA.W	#8*160+40,A0
	LEA	TICKS,A1
	MOVE.W	CLASS,D0	(0-2)
	BSR.S	.DOTICK
	MOVEQ	#3,D0
	LEA	TRACKSDONE,A3
	MOVEQ	#8,D1
.CHECKIT	TST.B	(A3)+
	BEQ.S	.NOTICK
	BSR.S	.DOTICK
	BRA.S	.NEXTONE
.NOTICK	ADDA.W	#8*160,A0	SKIP IT
.NEXTONE	DBF	D1,.CHECKIT

.WAIT	BTST.B	#1,$FFFFFC00.W	KYBRD CHIP READY ?
	BEQ.S	.WAIT	NO
	MOVE.B	#8,$FFFFFC02.W	MOUSE ON

	MOVE.W	#176,SPLIT1+2
	MOVE.W	#24,SPLIT2+2
	BSR	PANELUP

	LEA	OPTLIST,A0
	CLR.B	SCREENNO+1	ENABLE INVERT SELECTION
.SELECT	BSR.S	MOVEPOINTER
	BRA	SELECTED

.DOTICK	MOVE.L	A1,A2	BASE OF NUMBERS+TICK
	MOVE.W	D0,D7
	LSL.W	#5,D7	32 BYTES EACH
	ADDA.W	D7,A2
	MOVEQ	#7,D2
.LOOP	MOVE.B	(A2)+,(A0)+
	ADDQ	#1,A0
	MOVE.B	(A2)+,(A0)+
	ADDQ	#1,A0
	MOVE.B	(A2)+,(A0)+
	ADDQ	#1,A0
	MOVE.B	(A2)+,(A0)+
	ADDA.W	#153,A0
	DBF	D2,.LOOP
	RTS

MOVEPOINTER	BSR	WDEIRQ
NEXTPOS	BSR	KEYREAD
	MOVE.B	JOYSTICK+1,D2
	BSET	#4,JOYSTICK+1
SCREENNO	MOVEQ	#0,D5
POINTY	MOVE.W	#72,D0
POINTX	MOVE.W	#152,D1
	MOVE.L	A0,A1	POSITION LIST
	MOVEQ	#0,D3
.CHECKLIST	TST.W	(A1)	FOUND ANY SELECTION
	BMI	LASTSEL	NO
	CMP.W	(A1),D0
	BCS.S	.NEXTONE
	CMP.W	2(A1),D0
	BCC.S	.NEXTONE
	CMP.W	6(A1),D1
	BCC.S	.NEXTONE
	CMP.W	4(A1),D1
	BCC.S	.GOTONE
.NEXTONE	ADDQ	#8,A1
	ADDQ.W	#1,D3
	BRA.S	.CHECKLIST
.GOTONE	BTST	#4,D2	SELECTED IT ?
	BNE	LASTSEL	NO
	CMPI.W	#2,D5
	BEQ.S	ONSALES
	CMP.B	LASTSEL+1,D3	SAME SELECTION ?
	BNE	LASTSEL	NO
	TST.W	D5	IN GARAGE ?
	BNE.S	INGARAGE	YES
	CMPI.W	#10,D3	ENTERING SALES ?
	BNE.S	EXITIT	NO
	CMP.L	#"ZOSO",NAME
	BEQ.S	EXITIT
SALESENTRY	MOVEQ	#0,D6	ALLOWED INTO SALES ?
	BNE	LASTSEL	NO
EXITIT	MOVE.B	#-1,LASTSEL+1
	RTS

CHEATWORD	DC.B	$A6,$92,$A0,$AC,$92,$99,$99,$92,$A6,$97,$B1,0

ONSALES	CMPI.W	#6,D3	SELECTED EXIT ?
	BEQ.S	EXITIT	NO
	TST.B	PRINTNEXT+1
	BNE	DOSALEANIMS
EXITFLAG	MOVEQ	#0,D4	FORCED EXIT ?
	BMI.S	EXITIT	YES
	TST.B	NUMCHOICES+1	LIMITED CHOICE ?
	BMI.S	.NOLIMIT	NO
	CMP.B	NUMCHOICES+1,D3	WITHIN CURRENT RANGE ?
	BHI	DOSALEANIMS	NO, DON'T ALLOW ANY PROGRESS
.NOLIMIT	MOVE.B	#8,PRINTNEXT+1	NEXT SELECTION
	BRA	DOSALEANIMS
INGARAGE	CMPI.W	#12,D3
	BCS.S	CHECKSALE
	SUBI.W	#14,D3
	BMI.S	EXITIT
	SUBQ	#1,D3
	BPL.S	CHECKSALE
	TST.W	LINECOUNT
	BNE	LASTSEL
	MOVE.W	#10,LINECOUNT
	LEA	MAINPAL,A2
	MOVEQ	#7,D7
LIGHT	MOVEQ	#0,D4
	BEQ.S	.FADE
	LEA	PALLET,A1
.ON	MOVE.L	(A1)+,(A2)+
	DBF	D7,.ON
	BRA.S	.DONEFADE
.FADE	MOVE.L	(A2),D4
	LSR.L	#1,D4
	ANDI.L	#$7770777,D4
	MOVE.L	D4,(A2)+
	DBF	D7,.FADE
	TST.B	SMILING+1
	BPL.S	.DONEFADE
	MOVE.B	#104,SMILING+1
.DONEFADE	NOT.B	LIGHT+1
	BRA.S	LASTSEL
CHECKSALE	MOVE.W	SHOPFLAGS+2,D4
	BTST	D3,D4
	BNE.S	LASTSEL
	MOVE.W	D3,D4
	LSL.W	#1,D4
	LEA	SHOPCOSTS,A1
	MOVE.W	0(A1,D4.W),D7
	EXT.L	D7
	CMP.L	CASH,D7
	BHI.S	LASTSEL
	SUB.L	D7,CASH	NB. UPDATE CASH ON PANEL
	MOVE.W	SHOPFLAGS+2,D0
	BSET	D3,D0	ACTIVATE CASH REGISTER
	MOVE.W	D0,SHOPFLAGS+2	ALSO UPDATE LEVEL IF E/B/F/T
	LEA	SHOPCOORDS,A5
	LSL.W	#1,D4
	ADDA.W	D4,A5
	MOVE.L	SCREENON+2,A2
	BSR	PRINTCOST
	CMPI.W	#4,D3
	BCC.S	.NOTEBFT
	MOVE.W	D3,D7
	LSL.W	#2,D7
	LEA	whichengpercent,A1
	MOVE.L	#$1000000,0(A1,D7.W)
.NOTEBFT	MOVE.L	SCREENON+2,A1
	MOVEQ	#0,D7
	BSET	D3,D7
	BSR	DOPANEL
	BRA	NEXTPOS
LASTSEL	MOVEQ	#-1,D4	LAST POSITION VALUE
	CMP.W	D3,D4	AT SAME POSITION ?
	BEQ.S	NOINVERT	YES
	MOVE.B	D3,LASTSEL+1	NEW LAST POSITION
INVERT	TST.B	D5	ON OPTIONS SCREEN ?
	BNE.S	NOINVERT	NO
	CMPI.W	#9,D3
	BCC.S	.CHECKLAST
	LEA	TRACKSDONE,A2
	TST.B	0(A2,D3.W)
	BEQ.S	.OK
	MOVEQ	#99,D3
	MOVE.B	D3,LASTSEL+1
.OK	CMPI.W	#9,D3
	BCC.S	.CHECKLAST
	BSR.S	SCREENON
.CHECKLAST	CMPI.W	#9,D4
	BCC.S	NOINVERT
	MOVE.W	D4,D3
	BSR.S	SCREENON
	BRA	NOTSALES
SCREENON	MOVE.L	#0,A2
	ADDA.W	#160*16+10,A2
	MULU	#160*8,D3
	ADDA.W	D3,A2
	MOVEQ	#7,D7
.INVERT	EORI.W	#$FF,(A2)+
	ADDQ	#6,A2
	NOT.W	(A2)+
	ADDQ	#6,A2
	NOT.W	(A2)+
	ADDQ	#6,A2
	NOT.W	(A2)+
	ADDQ	#6,A2
	NOT.W	(A2)+
	ADDA.W	#126,A2
	DBF	D7,.INVERT
	RTS
NOINVERT	SUBQ	#1,D5
	BNE	NOTGARAGE
	TST.W	LINECOUNT
	BEQ.S	SMILING
	SUBQ.W	#1,LINECOUNT
SMILING	MOVEQ	#0,D3
	BMI.S	SMILED
	MOVEQ	#0,D7
	SUBQ.B	#1,SMILING+1
	BMI.S	.GOTSMILE
	CMPI.W	#80,D3
	BCC.S	.GOTSMILE
	ADDQ	#1,D7
	CMPI.W	#76,D3
	BCC.S	.GOTSMILE
	CMPI.W	#5,D3
	BCS.S	.GOTSMILE
	ADDQ	#1,D7
.GOTSMILE	MULU	#16*22,D7
	LEA	SHOPANIM,A1
	ADDA.W	D7,A1
	MOVE.L	SCREENON+2,A2
	ADDA.W	#160*61+16,A2
	MOVEQ	#21,D7
.DOSMILE	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	ADDA.W	#144,A2
	DBF	D7,.DOSMILE
	LEA	PROTECT1,A1
	LEA	NEWCHECK,A2
	MOVEQ	#4,D7
.PROTECT	MOVE.L	(A1)+,D6
	NOT.L	D6
	MOVE.L	D6,(A2)+
	DBF	D7,.PROTECT
	BRA	NOTSALES
SMILED	MOVEQ	#0,D7	BLINKING ?
	BEQ.S	.GETBLINK	NO, GET RANDOM
	SUBQ.B	#1,SMILED+1	BLINKED ?
	BNE	NOTSALES	NO
	MOVEQ	#0,D7	CLOSED EYES
	BRA.S	.EYES
.GETBLINK	MOVE.L	#$9F2300B3,D6	SEED (0-$B2)
	BSR	RANDOM	GET RANDOM
	CMPI.W	#$80,D6	BLINK ?
	BNE	NOTSALES	NO
	MOVE.B	#4,SMILED+1	SET BLINK COUNT
	MOVEQ	#64,D7	OPEN EYES
.EYES	LEA	SHOPANIM+3*16*22,A1
	ADDA.W	D7,A1
	MOVE.L	SCREENON+2,A2
	ADDA.W	#160*61+16,A2
	MOVEQ	#3,D7
.DOEYES	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	ADDA.W	#144,A2
	DBF	D7,.DOEYES

NOTGARAGE	SUBQ.W	#1,D5	ON SALES SCREEN ?
	BNE	NOTSALES	NO

DOSALEANIMS	MOVE.L	SCREENON+2,A1	NB. D0-D4 REQUIRED
STEVE	MOVEQ	#0,D6
	BMI.S	.STEVEOK
	MOVE.B	#-1,STEVE+1
	MOVE.L	A1,A2
	ADDA.W	#160*19+104,A2
	LEA	SALEANIMS,A3
	LSL.W	#5,D6
	MOVE.W	D6,D5
	LSL.W	#2,D6
	ADD.W	D6,D5
	LSL.W	#1,D6
	ADD.W	D6,D5
	ADDA.W	D5,A3
	MOVEQ	#25,D5
	BSR.S	.SALEANIM
.STEVEOK	LEA	SALEANIMS+2592,A3
	MOVE.W	#160*52+56,D5
.GHEAD1	MOVEQ	#0,D6
	BNE.S	.SAMEGIRL1
	BSR.S	.NEWGIRL
	MOVE.B	D6,.GHEAD1+1
	BRA.S	.GIRL2
.SAMEGIRL1	SUBQ.B	#1,.GHEAD1+1
	CMPI.W	#60,D6
	BNE.S	.GIRL2
	BSR.S	.DRAWGIRL
.GIRL2	LEA	SALEANIMS+3104,A3
	MOVE.W	#160*52+144,D5
.GHEAD2	MOVEQ	#0,D6
	BNE.S	.SAMEGIRL2
	BSR.S	.NEWGIRL
	MOVE.B	D6,.GHEAD2+1
	BRA.S	.TYPE

.NEWGIRL	MOVE.L	#$65F20572,D6
	BSR	RANDOM
	CMPI.W	#$14,D6
	BCS.S	.OK
	MOVEQ	#0,D6
	RTS
.OK	ADDI.W	#86,D6
	SUBA.W	#256,A3
.DRAWGIRL	MOVE.L	A1,A2
	ADDA.W	D5,A2
	MOVEQ	#15,D5
	BRA.S	.SALEANIM

.GIRLTYPE	MOVE.L	A1,A2
	ADDA.W	D6,A2
	MOVE.L	#$6F390002,D6
	BSR	RANDOM
	MOVE.W	D6,D5
	LSL.W	#2,D6
	ADD.W	D6,D5
	LSL.W	#4,D5
	ADDA.W	D5,A3
	MOVEQ	#4,D5

.SALEANIM	MOVE.L	(A3)+,(A2)+
	MOVE.L	(A3)+,(A2)+
	MOVE.L	(A3)+,(A2)+
	MOVE.L	(A3)+,(A2)+
	ADDA.W	#144,A2
	DBF	D5,.SALEANIM
.NOCHANGE	RTS

.SAMEGIRL2	SUBQ.B	#1,.GHEAD2+1
	CMPI.W	#75,D6
	BNE.S	.TYPE
	BSR.S	.DRAWGIRL
.TYPE	MOVE.W	$466.W,D5
	ANDI.W	#3,D5
	BNE.S	.SKIPTYPE
	CMPI.B	#30,.GHEAD1+1
	BCC.S	.WAIT
	LEA	SALEANIMS+3360,A3
	MOVE.W	#160*79+56,D6
	BSR.S	.GIRLTYPE
.WAIT	LEA	SALEANIMS+3520,A3
	MOVE.W	#160*79+144,D6
	BSR.S	.GIRLTYPE
.SKIPTYPE	MOVEQ	#0,D6
	BEQ.S	.GETRANDOM
	SUBQ.B	#1,.SKIPTYPE+1
	CMPI.W	#50,D6
	BNE.S	PRINTNEXT
	LEA	SALEANIMS+2080,A3
	BRA.S	.DOTHUMB
.GETRANDOM	MOVE.L	#$F4E714EF,D6
	BSR	RANDOM
	CMPI.W	#15,D6
	BCC.S	PRINTNEXT
	ADDI.W	#55,D6
	MOVE.B	D6,.SKIPTYPE+1
	LEA	SALEANIMS+2208,A3
.DOTHUMB	MOVE.L	A1,A2
	ADDA.W	#160*80+104,A2
	MOVEQ	#7,D5
	BSR	.SALEANIM

PRINTNEXT	MOVEQ	#0,D5	REDOING DISPLAY ?
	BEQ	NUMCHOICES	NO
	SUBQ.B	#1,PRINTNEXT+1	TEXT SET UP ?
	BNE.S	NOTDISPLAY	NO
REDOPANEL	MOVEQ	#-1,D7
	BMI.S	.NOREDO
	MOVE.L	SCREENON+2,A1
	MOVEM.L	D0-D2,-(A7)
	BSR	DOPANEL
	MOVEM.L	(A7)+,D0-D2
.NOREDO	MOVE.L	SCREENON+2,A2
	ADDA.W	#126*160,A2
	LEA	SALESTORE,A4
	BSR.S	DOBLIT
	BRA	NUMCHOICES

DOBLIT	MOVEQ	#95,D5
.BLIT	REPT	20
	MOVE.L	(A4)+,(A2)+
	ENDR
	DBF	D5,.BLIT
	RTS

NOTDISPLAY	MOVEM.L	D0-D2,-(A7)
	CMPI.W	#8,D5
	BNE	PRINTSALE
	LEA	SALESTORE,A2
	MOVE.L	A2,PRINTSALE+2
	LEA	SALES+320,A4
	MOVE.L	A4,BLANKLINE+2
	BSR.S	DOBLIT
	LEA	SALEBUFFER,A4
	MOVE.L	A4,SALEPOS+2
	LEA	TEXTADDS,A5
	MOVEQ	#5,D0
TRADESECTION	MOVEQ	#0,D5
	BNE.S	.NOTHELLO
	ADDQ.B	#1,TRADESECTION+1
	ADDA.W	#96,A5
	BRA	.RANDOM8

.NOTHELLO	SUBQ.W	#1,D5
	BNE	.NOTCARTYPE
	ADDQ.B	#1,TRADESECTION+1
	MOVE.W	CARTYPE,D5
	MOVEQ	#5,D6
	SUB.W	D5,D6
	BMI	.NONELEFT
	MOVE.B	#4,STEVE+1
	MOVE.B	D6,NUMCHOICES+1
	LSL.W	#2,D5
	ADDA.W	D5,A5
.SHOWCARS	MOVE.L	(A5)+,A3
	BSR	.STORESPEECH
	DBF	D6,.SHOWCARS
	BRA	.FILLIT

.BOUGHTIT	MOVE.B	#-1,NUMCHOICES+1
	MOVE.B	#-1,EXITFLAG+1
	MOVE.W	BASECOST+2,D5
	MOVE.W	EXTRACOST+2,D6
	MULU	#1000,D6
	SWAP	D6
	ADD.W	D6,D5
	MULU	#25,D5
	CMP.L	CASH,D5
	BHI.S	.NOTENOUGH
	MOVE.B	#2,STEVE+1
	SUB.L	D5,CASH
	MOVE.L	CASH,OLDCASH
	MOVE.W	NEWCAR+2,CARTYPE
	MOVE.B	#$1F,REDOPANEL+1
	MOVE.W	#$F,SHOPFLAGS+2	SOLD EBFT,EXTRAS AVAILABLE
	BSR	RANDOMSHOP
	LEA	whichengpercent,A1
	MOVE.L	#$1000000,(A1)+
	MOVE.L	#$1000000,(A1)+
	MOVE.L	#$1000000,(A1)+
	MOVE.L	#$1000000,(A1)+
	ADDA.W	#64,A5
	BRA.S	.RANDOM8
.NOTENOUGH	CLR.B	STEVE+1
	ADDA.W	#160,A5
	MOVEQ	#16,D6
	BRA.S	.GETRANDOM
	
.GETOUT	MOVE.B	#1,STEVE+1
	MOVE.B	#-1,NUMCHOICES+1
	MOVE.B	#-1,EXITFLAG+1
	ADDA.W	#32,A5
	BRA.S	.RANDOM8

.NOTCARTYPE	SUBQ.W	#1,D5
	BNE	.NOTCARSEL
	MOVE.B	#2,STEVE+1
	ADDQ.B	#1,TRADESECTION+1
	ADDQ.W	#1,D3
	ADD.W	CARTYPE,D3
	MOVE.W	D3,NEWCAR+2
	ADDQ.W	#1,D3
	MULU	#1200,D3
	MOVE.W	D3,BASECOST+2
	CLR.B	REDOPANEL+1
	MOVE.B	#-1,NUMCHOICES+1
	MOVE.L	TRADEIN+2,D5
	ADD.L	D5,CASH
	ADDA.W	#128,A5

.RANDOM8	MOVEQ	#8,D6	IF EIGHT TO CHOOSE

.GETRANDOM	BSR	RANDOM	WHEN 16 TO CHOOSE
	LSL.W	#2,D6
.ALLSPEECH	MOVE.L	(A5,D6.W),A3
	BSR	.STORESPEECH

.FILLIT	TST.W	D0
	BMI	DONESALES
	MOVEQ	#18,D1
.ARGH	MOVE.W	#"  ",(A4)+
	DBF	D1,.ARGH
.DOFILL	DBF	D0,.FILLIT
	BRA	DONESALES

.NONELEFT	MOVE.B	#-1,EXITFLAG+1
	MOVE.B	#1,STEVE+1
	LEA	NOCARS,A3
	BSR	.STORESPEECH
	BRA.S	.FILLIT

.HISREPLY	TST.W	D3
	BEQ	.BOUGHTIT
	CMPI.B	#1,NUMCHOICES+1
	BEQ	.GETOUT
	SUBQ.B	#1,TRADESECTION+1
	MOVE.B	#-1,NUMCHOICES+1
	LEA	REPLIES,A1
	SUBQ.W	#1,D3
	ADD.W	D3,D3
	MOVE.W	(A1,D3.W),D3
	MOVE.W	D3,D6
	LEA	HEADS,A1
	MOVE.B	(A1,D3),STEVE+1
	CMPI.B	#$40,D3
	BCS.S	.DECPRICE
	CMPI.B	#$60,D3
	BCS.S	.INCPRICE
	MOVE.B	#-1,EXITFLAG+1
	BRA.S	.NEWCOST
.DECPRICE	ADDI.W	#$60,D3
	MULU	EXTRACOST+2,D3
	LSR.L	#8,D3
	SUB.W	D3,EXTRACOST+2
	BRA.S	.NEWCOST
.INCPRICE	SUBI.W	#$20,D3
	ADD.W	D3,D3
	MOVE.W	EXTRACOST+2,D7
	NEG.W	D7
	MULU	D7,D3
	LSR.L	#8,D3
	ADD.W	D3,EXTRACOST+2
.NEWCOST	LSL.W	#3,D6
	ADDA.W	#228,A5
	BRA	.ALLSPEECH

.NOTCARSEL	SUBQ.W	#1,D5
	BNE	.HISREPLY
	MOVE.B	#4,STEVE+1
	ADDQ.B	#1,TRADESECTION+1
	MOVE.L	24(A5),A3
	BSR	.STORESPEECH
	SUBQ.W	#1,TRADECOUNT
	BPL.S	.CHOICES
	MOVE.B	#1,NUMCHOICES+1
	MOVE.L	28(A5),A3
	BSR.S	.STORESPEECH
	BRA	.FILLIT
.CHOICES	ADDA.W	#224,A5
	MOVE.B	#5,NUMCHOICES+1
	LEA	REPLIES,A1
	MOVE.W	#192,D6
	BSR	RANDOM
	MOVE.W	D6,(A1)+
	MOVEQ	#3,D5
.SAMEONE	MOVE.W	#192,D6
	BSR	RANDOM
	MOVE.W	D6,(A1)
.CHECKIT	LEA	REPLIES,A2
	CMPI.W	#$B0,D6
	BCS.S	.OK
	SUBI.W	#$80,D6
.OK	MOVE.W	(A2)+,D7
	CMPI.W	#$B0,D7
	BCS.S	.OK2
	SUBI.W	#$80,D7
.OK2	CMP.W	D6,D7
	BEQ.S	.SAMEONE
.IFDONE	CMP.L	A1,A2
	BNE.S	.OK
	ADDQ	#2,A1
	DBF	D5,.SAMEONE
	LEA	REPLIES,A1
	MOVEQ	#4,D7
.PRINTEM	MOVE.W	(A1)+,D6
	LSL.W	#3,D6
	MOVE.L	0(A5,D6.W),A3
	BSR.S	.STORESPEECH
	DBF	D7,.PRINTEM
	BRA	DONESALES

.STORESPEECH	LEA	TEMPBUFF,A6
UPDATE	MOVE.B	(A3)+,D1
	CMPI.B	#"]",D1
	BNE.S	.NOTYOURCAR
	MOVE.W	CARTYPE,D2
	BRA.S	ACAR
.NOTYOURCAR	CMPI.B	#"^",D1
	BNE.S	NOTCARNAME
NEWCAR	MOVE.W	#0,D2
ACAR	LEA	TEXTADDS,A2
	SUBQ.W	#1,D2
	LSL.W	#2,D2
	MOVE.L	0(A2,D2.W),A2
.REPLACE	MOVE.B	(A2)+,(A6)+
	BNE.S	.REPLACE
	SUBQ	#1,A6
	BRA.S	UPDATE
NOTCARNAME	CMPI.B	#">",D1
	BNE.S	NOTPRICE
BASECOST	MOVE.W	#0,D1
EXTRACOST	MOVE.W	#0,D2
	MULU	#1000,D2
	SWAP	D2
	ADD.W	D2,D1
	MULU	#25,D1
	BRA.S	CONVNUM
NOTPRICE	CMPI.B	#"<",D1
	BNE.S	NOUPDATE
TRADEIN	MOVE.L	#0,D1
	CLR.L	TRADEIN+2
CONVNUM	LEA	POWERS,A2
	MOVEQ	#0,D5	LEADING ZERO FLAG
	MOVEQ	#0,D2	POWER COUNT
.DOCASH	MOVE.L	(A2)+,D3	GET NEXT POWER
	MOVEQ	#0,D4	ZERO OF THIS POWER
.GETUNIT	CMP.L	D3,D1	ANY OF THESE ?
	BCS.S	.GOTIT	NO
	SUB.L	D3,D1	REDUCE BY ONE
	ADDQ.W	#1,D4	ADD ONE TO NO.
	BRA.S	.GETUNIT	CHECK ANY MORE
.GOTIT	TST.W	D4	ANY OF THIS POWER ?
	BNE.S	.DOZERO	YES
	TST.W	D5	LEADING ZERO ?
	BEQ.S	.NEXTPOWER	YES, IGNORE IT
.DOZERO	ADDI.W	#"0",D4	ASCII
	MOVE.B	D4,(A6)+	STORE IT
	MOVEQ	#$50,D5	NON ZERO FLAG
.NEXTPOWER	ADDQ	#1,D2	NEXT POWER
	CMPI.W	#5,D2	ON UNITS ?
	BNE.S	.DOCASH	NO CONTINUE
	ADDI.W	#"0",D1	ASCII, LAST ZERO DONE ANYWAY
NOUPDATE	MOVE.B	D1,(A6)+
	BNE	UPDATE
	LEA	TEMPBUFF,A3
	MOVEQ	#0,D3	LAST START SOURCE
	MOVEQ	#0,D4	LAST SPACE DESTINATION
	MOVEQ	#0,D1	SOURCE POSITION
.NEWLINE	MOVEQ	#0,D2	DESTINATION POSITION
	SUBQ.W	#1,D0
.DOSALE	MOVE.B	(A3,D1.W),D5	GET NEXT SOURCE
	MOVE.B	D5,(A4,D2.W)	STORE IT
	CMPI.B	#" ",D5	WAS IT A SPACE ?
	BEQ.S	.SPACE	YES
.COPIED	TST.B	D5
	BNE.S	.NEXTCHAR
	CMPI.W	#38,D2
	BEQ.S	.EXIT
	BCC.S	.MOVEON
.DONEALL	MOVE.B	#" ",(A4,D2.W)
	ADDQ	#1,D2
	CMPI.W	#38,D2
	BNE.S	.DONEALL
.EXIT	ADDA.W	#38,A4
	RTS
.NEXTCHAR	ADDQ.W	#1,D1
	ADDQ.W	#1,D2
	BRA.S	.DOSALE
.SPACE	CMPI.W	#38,D2
	BCS.S	.NEWCOPY
	BNE.S	.MOVEON
	ADDQ.W	#1,D1
	BRA.S	.DONELINE
.MOVEON	MOVE.W	D3,D1	LAST START SOURCE BEFORE LINE END
.FILL	MOVE.B	#" ",(A4,D4.W)
	ADDQ.W	#1,D4
	CMPI.W	#38,D4
	BCS.S	.FILL
.DONELINE	ADDA.W	#38,A4
	BRA.S	.NEWLINE
.NEWCOPY	ADDQ.W	#1,D1
	ADDQ.W	#1,D2
	CMPI.W	#38,D2
	BEQ.S	.DONELINE
	MOVE.W	D1,D3	SOURCE AFTER SPACE
	MOVE.W	D2,D4	SPACE FILL POSITION
	BRA.S	.DOSALE

PRINTSALE	LEA	SALESTORE,A2
SALEPOS	LEA	SALEBUFFER,A3
BLANKLINE	LEA	SALES+320,A1
	MOVEQ	#1,D1
.PRINTCHAR	MOVE.L	A1,A6
	MOVE.B	(A3)+,D0
	EXT.W	D0
	BSR	PANELCHAR
	ADDQ.W	#1,D1
	CMPI.W	#39,D1
	BNE.S	.PRINTCHAR
	ADDA.W	#160*8,A1
	ADDA.W	#160*8,A2
	MOVE.L	A1,BLANKLINE+2
	MOVE.L	A2,PRINTSALE+2
	MOVE.L	A3,SALEPOS+2

DONESALES	MOVEM.L	(A7)+,D0-D2
	BRA.S	NOTSALES

NUMCHOICES	MOVEQ	#-1,D7	ANY CHOICES AT ALL ?
	BMI.S	NOTSALES	NO
	MOVEQ	#" ",D5	LEFT CHARACTER
	MOVEQ	#" ",D6	RIGHT CHARACTER
	BSR.S	.SHOWCHOICE
	MOVE.W	D3,D4
	MOVEQ	#">",D5
	MOVEQ	#"<",D6
	BSR.S	.SHOWCHOICE
	BRA.S	NOTSALES
.SHOWCHOICE	CMP.W	D7,D4	WITHIN MAX CHOICE LIMIT ?
	BHI.S	.NOPRINT
	MOVEM.L	D0-D3,-(A7)
	MOVE.L	SCREENON+2,A2
	ADDA.W	#126*160,A2
	MULU	#8*160,D4
	ADDA.W	D4,A2
	LEA	SALES+320,A1
	ADDA.W	D4,A1
	MOVEQ	#0,D1
	MOVE.W	D5,D0
	MOVE.L	A1,A6
	BSR	PANELCHAR
	MOVEQ	#39,D1
	MOVE.W	D6,D0
	MOVE.L	A1,A6
	BSR	PANELCHAR
	MOVEM.L	(A7)+,D0-D3
.NOPRINT	RTS

NOTSALES	ANDI.W	#$F,D2
	BNE.S	JOYSPEED
	CLR.B	JOYSPEED+1
	BRA.S	MOUSEY
JOYSPEED	MOVEQ	#0,D3
	CMPI.W	#15,D3
	BEQ.S	.NOFASTER
	ADDQ.W	#1,D3
	MOVE.B	D3,JOYSPEED+1
.NOFASTER	LSR.W	#1,D3
	BTST	#0,D2
	BEQ.S	.NOTUP
	SUB.W	D3,D0
.NOTUP	BTST	#1,D2
	BEQ.S	.NOTDOWN
	ADD.W	D3,D0
.NOTDOWN	BTST	#2,D2
	BEQ.S	.NOTLEFT
	SUB.W	D3,D1
.NOTLEFT	BTST	#3,D2
	BEQ.S	MOUSEY
	ADD.W	D3,D1
MOUSEY	ADD.W	#0,D0
MOUSEX	ADD.W	#0,D1
	CLR.W	MOUSEY+2
	CLR.W	MOUSEX+2
	TST.W	D0
	BPL.S	.MAXY
	MOVEQ	#0,D0
	BRA.S	.DONEY
.MAXY	CMPI.W	#184,D0
	BCS.S	.DONEY
	MOVE.W	#184,D0
.DONEY	TST.W	D1
	BPL.S	.MAXX
	MOVEQ	#0,D1
	BRA.S	.DONEX
.MAXX	CMPI.W	#304,D1
	BCS.S	.DONEX
	MOVE.W	#304,D1
.DONEX	MOVE.W	D0,POINTY+2
	MOVE.W	D1,POINTX+2
	MOVE.L	SCREENON+2,A1
	MULU	#160,D0
	MOVE.W	D1,D2
	ANDI.W	#$FFF0,D2
	LSR.W	#1,D2
	ADD.W	D2,D0
	ADDA.W	D0,A1
	ANDI.W	#$F,D1
NEWCHECK	CMPI.W	#5,RACESDONE
	BCS.S	.PROTOK
	MOVE.L	#RESANIM1+2,PROTECTION+2
.PROTOK	LEA	POINTER,A2
	MOVE.L	BLITBASE+2,A3
	MOVE.L	A1,A4
	MOVEQ	#15,D0
.DRAW	MOVEQ	#0,D2
	MOVEQ	#0,D3
	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
	MOVE.W	(A2)+,D2
	MOVE.W	(A2)+,D3
	MOVE.W	(A2)+,D4
	MOVE.W	(A2)+,D5
	ROR.L	D1,D2
	ROR.L	D1,D3
	ROR.L	D1,D4
	ROR.L	D1,D5
	MOVE.L	D2,D6
	OR.L	D3,D6
	OR.L	D4,D6
	OR.L	D5,D6
	NOT.L	D6
	MOVE.W	(A1),(A3)+
	AND.W	D6,(A1)
	OR.W	D2,(A1)+
	MOVE.W	(A1),(A3)+
	AND.W	D6,(A1)
	OR.W	D3,(A1)+
	MOVE.W	(A1),(A3)+
	AND.W	D6,(A1)
	OR.W	D4,(A1)+
	MOVE.W	(A1),(A3)+
	AND.W	D6,(A1)
	OR.W	D5,(A1)+
	SWAP	D2
	SWAP	D3
	SWAP	D4
	SWAP	D5
	SWAP	D6
	MOVE.W	(A1),(A3)+
	AND.W	D6,(A1)
	OR.W	D2,(A1)+
	MOVE.W	(A1),(A3)+
	AND.W	D6,(A1)
	OR.W	D3,(A1)+
	MOVE.W	(A1),(A3)+
	AND.W	D6,(A1)
	OR.W	D4,(A1)+
	MOVE.W	(A1),(A3)+
	AND.W	D6,(A1)
	OR.W	D5,(A1)+
	ADDA.W	#144,A1
	DBF	D0,.DRAW
	BSR	WDEIRQ
	MOVE.L	BLITBASE+2,A1
	MOVEQ	#15,D0
.DELETE	MOVE.L	(A1)+,(A4)+
	MOVE.L	(A1)+,(A4)+
	MOVE.L	(A1)+,(A4)+
	MOVE.L	(A1)+,(A4)+
	ADDA.W	#144,A4
	DBF	D0,.DELETE
	BRA	NEXTPOS

*	LOAD AND UNPACK THE "NORMAL" PANEL

NEWPANEL	LEA	PANELNAM,A0
	LEA	PANEL,A1
	BSR	LOADFILE

	LEA	PANEL,A0
	LEA	PANEL,A1	BLANK PANEL
	BSR	UNPACK

*	COPY PANEL TO BLITSCREEN FOR UPDATING

	LEA	PANEL,A0
	BSR.S	COPYPANEL

*	NOW UPDATE ALL PANEL

	MOVE.L	BLITBASE+2,A1
	MOVEQ	#-1,D7
	BSR.S	DOPANEL

*	NOW STORE FROM HERE TO CURPANEL

	MOVE.L	BLITBASE+2,A0

*	STORE CURRENT PANEL FROM SCREEN A0 TO STORE

STOPANEL	ADDA.W	#180*160,A0
	LEA	CURPANEL,A1
	BRA.S	COPYP

*	ROUTINE TO PUT CURRENT PANEL ON SCREEN

SHOWPANEL	LEA	CURPANEL,A0

*	COPY PANEL FROM A0 TO BLITSCREEN, CLEARING THE 4 LINES

COPYPANEL	MOVE.L	BLITBASE+2,A1
	ADDA.W	#176*160,A1
	MOVE.W	#159,D0
.LOOP	CLR.L	(A1)+
	DBF	D0,.LOOP
COPYP	MOVE.W	#799,D0
.LOOP1	MOVE.L	(A0)+,(A1)+
	DBF	D0,.LOOP1
	RTS

DOPANEL	MOVE.B	#-1,REDOPANEL+1
	MOVE.L	A1,A2
	ADDA.W	#191*160,A2
	LEA	POWERS,A3
	MOVE.L	CASH,D2
	MOVEQ	#2,D1
	MOVEQ	#0,D4
.DOCASH	MOVE.L	(A3)+,D3
	MOVEQ	#0,D0
.GETUNIT	CMP.L	D3,D2
	BCS.S	.GOTIT
	SUB.L	D3,D2
	ADDQ	#1,D0
	BRA.S	.GETUNIT
.GOTIT	CMPI.W	#2,D1
	BNE.S	.DOZERO
	TST.W	D0
	BEQ.S	.NEXTPOWER
.DOZERO	ADDI.W	#"0",D0
	LEA	PANEL+11*160,A6
	BSR.S	PANELCHAR
	ADDQ	#1,D1
.NEXTPOWER	ADDQ	#1,D4
	CMPI.W	#5,D4
	BNE.S	.DOCASH
	MOVE.W	D2,D0
	ADDI.W	#"0",D0
.SPACES	LEA	PANEL+11*160,A6
	BSR.S	PANELCHAR
	ADDQ	#1,D1
	MOVEQ	#" ",D0
	CMPI.W	#8,D1
	BNE.S	.SPACES
	BTST	#4,D7
	BEQ.S	.SAMENAME
	MOVE.L	A1,A2
	ADDA.W	#191*160,A2
	LEA	CARNAMES,A3
	MOVE.W	CARTYPE,D0
	LSL.W	#1,D0
	MOVE.W	D0,D1
	LSL.W	#3,D0
	SUB.W	D1,D0
	ADDA.W	D0,A3
	MOVEQ	#9,D1
	MOVEQ	#13,D4
.CARNAME	MOVE.B	(A3)+,D0
	EXT.W	D0
	LEA	PANEL+11*160,A6
	BSR.S	PANELCHAR
	ADDQ	#1,D1
	DBF	D4,.CARNAME
.SAMENAME	MOVE.L	A1,A2
	ADDA.W	#192*160+96,A2
	MOVEQ	#3,D0
.DOEBFT	BTST	D0,D7
	BEQ.S	.NEXT
	BSR	EBFT
.NEXT	DBF	D0,.DOEBFT
	RTS

*	ROUTINE TO PRINT ONE PANEL CHARACTER
*	D0=CHAR (ASCII) D1=CHAR POS A2=SCREEN ADD A6=LINE OF BLANK PANEL

PANELCHAR	SUBI.W	#32,D0
	LEA	PANELTEXT,A5
	LSL.W	#3,D0
	MOVE.W	D0,D3
	LSL.W	#2,D3
	ADD.W	D0,D3
	ADDA.W	D3,A5
	MOVE.L	A2,A4
	MOVE.W	D1,D3
	LSR.W	#1,D3
	LSL.W	#3,D3
	ADDA.W	D3,A4
	ADDA.W	D3,A6
	BTST	#0,D1
	BEQ.S	.EVEN
	ADDQ	#1,A4
	ADDQ	#1,A6
.EVEN	REPT	8
	MOVE.B	(A5)+,D3
	MOVE.B	(A6)+,D5
	AND.B	D3,D5
	OR.B	(A5)+,D5
	MOVE.B	D5,(A4)+
	ADDQ	#1,A4
	ADDQ	#1,A6
	MOVE.B	(A6)+,D5
	AND.B	D3,D5
	OR.B	(A5)+,D5
	MOVE.B	D5,(A4)+
	ADDQ	#1,A4
	ADDQ	#1,A6
	MOVE.B	(A6)+,D5
	AND.B	D3,D5
	OR.B	(A5)+,D5
	MOVE.B	D5,(A4)+
	ADDQ	#1,A4
	ADDQ	#1,A6
	MOVE.B	(A6)+,D5
	AND.B	D3,D5
	OR.B	(A5)+,D5
	MOVE.B	D5,(A4)+
	ADDA.W	#153,A4
	ADDA.W	#153,A6
	ENDR
	RTS

SELECTED	CMPI.W	#9,D3
	BCS	STARTGAME
	BEQ	DOGARAGE
	CMPI.W	#10,D3
	BEQ	DOSALESMAN
	SUBI.W	#11,D3
	LSR.W	#1,D3
	LSL.W	#2,D3
	LEA	SPECSCREENS,A0
	MOVE.L	(A0,D3.W),SPECADD+2

*	SHOW CAR SPECS

	BSR	FADEOFF

	MOVE.L	SCREENON+2,A0
	BSR	STOPANEL

*	DECOMPRESS CAR SPEC SCREEN

SPECADD	MOVE.L	#0,A0
	BSR	DOSCREEN

	BSR	FADEUP

.WAIT	BSR	KEYREAD
	TST.B	JOYSTICK+1
	BNE.S	.WAIT
	BRA	OPTIONS

*	GARAGE SCREEN
*	UNPACK GARAGE ANIMATIONS

DOGARAGE	BSR	FADEOFF

	LEA	SHOPANIMCMP,A0
	LEA	SHOPANIM,A1
	BSR	UNPACK

*	DECOMPRESS GARAGE SCREEN

	LEA	GARAGE,A0
	BSR	DOSCREEN

	MOVE.W	SHOPFLAGS+2,D0
	LEA	SHOPCOORDS,A5
	LEA	SHOPCOSTS,A1
	CLR.B	LIGHT+1
	MOVEQ	#0,D3
.ALLCOSTS	MOVE.L	BLITBASE+2,A2
	BSR.S	PRINTCOST
	ADDQ	#1,D3
	CMPI.W	#12,D3
	BNE.S	.ALLCOSTS

	BSR	PANELUP

	LEA	SHOPLIST,A0
	MOVE.B	#104,SMILING+1	SMILE COUNT
	MOVE.B	#1,SCREENNO+1	ENABLE GARAGE ANIMTION
	MOVE.W	#1,LINECOUNT
	BSR	MOVEPOINTER
	MOVE.L	SCREENON+2,A0
	BSR	STOPANEL
	BRA	OPTIONS

*	ROUTINE TO PRINT EITHER A PRICE OR "SOLD"

PRINTCOST	MOVE.W	(A5)+,D2	LINE NUMBER FOR PRINT
	MULU	#160,D2
	ADDA.W	D2,A2
	MOVE.W	(A5)+,D2	CHARS ACCROSS SCREEN
	MOVE.W	D2,D1	COPY TO PRESERVE ODD/EVEN
	LSR.W	#1,D1	CONVERT TO WORDS
	LSL.W	#3,D1
	ADDA.W	D1,A2
	MOVE.W	(A1)+,D1	PRICE
	BTST	D3,D0	SOLD ?
	BEQ.S	.FORSALE	NO
	MOVEQ	#10,D1	CHAR NUMBER
.SOLD	BSR.S	.PRINTCHAR
	ADDQ	#1,D1
	CMPI.W	#13,D1
	BNE.S	.SOLD

.PRINTCHAR	MOVE.L	A2,A3
	LEA	SHOPANIM+16*22*3+128,A4  TEXT
	MOVE.W	D1,D4	CHAR NUMBER
	MULU	#20,D4
	ADDA.W	D4,A4
	MOVEQ	#4,D4
	BTST	#0,D2
	BEQ.S	.PRINTIT
	ADDQ	#8,A2
	ADDQ	#1,A3
.PRINTIT	MOVE.B	(A4)+,(A3)+
	ADDQ	#1,A3
	MOVE.B	(A4)+,(A3)+
	ADDQ	#1,A3
	MOVE.B	(A4)+,(A3)+
	ADDQ	#1,A3
	MOVE.B	(A4)+,(A3)+
	ADDA.W	#153,A3
	DBF	D4,.PRINTIT
	ADDQ	#1,D2
	RTS

.FORSALE	EXT.L	D1
	DIVU	#1000,D1
	BSR.S	.PRINTCHAR
	SWAP	D1
	EXT.L	D1
	DIVU	#100,D1
	BSR.S	.PRINTCHAR
	SWAP	D1
	EXT.L	D1
	DIVU	#10,D1
	BSR.S	.PRINTCHAR
	SWAP	D1
	BRA.S	.PRINTCHAR

*	SALESMAN ROUTINE

DOSALESMAN	BSR	FADEOFF

*	UNPACK SALES PANEL

	LEA	SALESCMP,A0
	LEA	SALES,A1
	BSR	UNPACK

*	UNPACK SALES ANIMATIONS

	LEA	SALEANIMCMP,A0
	LEA	SALEANIMS,A1
	BSR	UNPACK

*	UNPACK SALES TEXT

	LEA	SALETEXTCMP,A0
	LEA	SALETEXT,A1
	BSR	UNPACK

*	BUILD TEXT POINTERS

	LEA	SALETEXT,A0
	LEA	TEXTADDS,A1
	MOVE.W	#439,D0
.SETADDS	MOVE.L	A0,(A1)+
.GETNEXT	TST.B	(A0)+
	BNE.S	.GETNEXT
	DBF	D0,.SETADDS

*	DECOMPRESS SALES SCREEN

	LEA	SALESMAN,A0
	BSR	DOSCREEN

*	DISABLE RE-ENTRY

	MOVE.B	#-1,SALESENTRY+1

*	INITIALISE EXTRA COST AND TRADE PRICE

	MOVE.L	#$5F724000,D6
	BSR	RANDOM
	ADDI.W	#$C000,D6
	MOVE.W	D6,EXTRACOST+2

	MOVE.W	#1200,D0
	MOVE.W	CARTYPE,D1
	ADDQ	#1,D1
	MULU	D1,D0
	MOVE.W	whichengpercent,D1
	ADD.W	whichengpercent+4,D1
	ADDI.W	#$800,D1
	MULU	D1,D0
	LSR.L	#8,D0
	DIVU	#10,D0
	MULU	#25,D0
	MOVE.L	D0,TRADEIN+2

*	CLEAR 4 LINES AND COPY SALES PANEL TO BLITBASE

	MOVE.L	BLITBASE+2,A0
	ADDA.W	#120*160,A0
	MOVE.W	#159,D0
.LOOP	CLR.L	(A0)+
	DBF	D0,.LOOP
	LEA	SALES,A1
	MOVE.W	#2079,D0
.LOOP1	MOVE.L	(A1)+,(A0)+
	DBF	D0,.LOOP1

	MOVE.W	#120,SPLIT1+2
	MOVE.W	#80,SPLIT2+2
	BSR	PANELUP

	LEA	SALESLIST,A0
	MOVE.B	#2,SCREENNO+1	ENABLE SALES ANIMTION
	MOVE.B	#8,PRINTNEXT+1	ENABLE PRINT OF NEXT TEXT SECTION
	CLR.B	TRADESECTION+1	AT START OF TEXT ROUTINE
	CLR.B	EXITFLAG+1	STILL MORE TO SELECT
	MOVE.B	#-1,NUMCHOICES+1    NO CHOICES TO SHOW UP
	MOVE.W	#5,TRADECOUNT	5 CHANCES TO BARTER
	MOVE.L	CASH,OLDCASH	STORE CASH FOR EXIT IF NO BUY
	MOVE.B	#3,STEVE+1
	BSR	MOVEPOINTER
	TST.L	TRADEIN+2	HAD TRADE PRICE ADDED ?
	BNE.S	.OK	NO
	MOVE.L	OLDCASH,CASH	COPY OLDCASH
	MOVE.L	SCREENON+2,A1
	MOVEQ	#0,D7
	BSR	DOPANEL
.OK	MOVE.L	SCREENON+2,A0
	BSR	STOPANEL
	BRA	OPTIONS

*	ROUTINE FOR RESULTS SCREEN
*	LOAD ALL RESULTS BITS
*	SET UP D6 FIRST FOR CORRECT MESSAGE !

DORESULTS	TST.W	$468.W
	BNE.S	DORESULTS
	MOVE.B	#-1,FLIPFLAG+1	NO FLIP
	MOVE.W	BESTLAP,D0
	BMI	.USELESS
	CMPI.W	#10000,D0
	BCS.S	.BESTLAPOK
	MOVE.W	#9999,D0
	MOVE.W	D0,BESTLAP
.BESTLAPOK	MOVE.W	D0,D2
	LEA	BESTLAPS,A0
	MOVE.W	TRACKNO,D1
	ADD.W	D1,D1
	CMP.W	(A0,D1.W),D0
	BCC.S	.USELESS
	LEA	BESTLAPTIMES,A0
	ADD.W	D1,D1
	ADD.W	D1,D1
	ADDA.W	D1,A0
	MOVE.L	NAME,(A0)+
	LEA	POWERS+8,A1
	MOVEQ	#2,D0
.DOLAP	MOVEQ	#0,D1
	MOVE.L	(A1)+,D3
.LOOP	CMP.W	D3,D2
	BCS.S	.GOTLAP
	SUB.W	D3,D2
	ADDQ.W	#1,D1
	BRA.S	.LOOP
.GOTLAP	ADDI.W	#"0",D1
	MOVE.B	D1,(A0)+
	DBF	D0,.DOLAP
	ADDI.W	#"0",D2
	MOVE.B	D2,(A0)+
	MOVEQ	#4,D6
	BSR	RANDOM
	TST.W	D6
	BNE.S	.USELESS
	MOVE.W	#((get_status-check_prot)/2)-1,D2
	LEA	PROTECT,A0
	LEA	check_prot,A1
.PROTECT	MOVE.W	(A0)+,D6
	NOT.W	D6
	MOVE.W	D6,(A1)+
	DBF	D2,.PROTECT
.USELESS	MOVE.W	CRASHED,D6
	BNE.S	.LOST
.NOTEBFT	MOVE.W	RACEPOS,D2
	CMPI.W	#4,D2
	BCS	.WINNER
.LOST	MOVE.W	#-1,RACEPOS
	BSR.S	.CHECKHIGH
	CLR.W	PRIZE
	ADDQ.W	#5,D6
	BRA	.DOMESS0

.CHECKHIGH	LEA	LASTSCORE,A0
	MOVE.W	RACESDONE,D0
	MOVE.W	D0,D1
	MOVEQ	#0,D2
.GETTENS	CMPI.W	#10,D1
	BCS.S	.GOTTEN
	SUBI.W	#10,D1
	ADDQ.W	#1,D2
	BRA.S	.GETTENS
.GOTTEN	ADDI.W	#"0",D2
	MOVE.B	D2,(A0)+
	ADDI.W	#"0",D1
	MOVE.B	D1,(A0)+
	MOVE.L	CASH,D1
	MOVE.L	D1,D2
	SWAP	D0
	DIVU	#25,D2
	MOVE.W	D2,D0
	LEA	POWERS,A1
	MOVEQ	#4,D2
.DOCASH	MOVEQ	#0,D3
	MOVE.L	(A1)+,D4
.GETCASH	CMP.L	D4,D1
	BCS.S	.GOTCASH
	SUB.L	D4,D1
	ADDQ.W	#1,D3
	BRA.S	.GETCASH
.GOTCASH	ADDI.W	#"0",D3
	MOVE.B	D3,(A0)+
	DBF	D2,.DOCASH
	ADDI.W	#"0",D1
	MOVE.B	D1,(A0)+
	LEA	HIGHSCORES+72,A0
	LEA	HIGHS+24,A1
	LEA	LASTSCORE+8,A2
	CMP.L	-4(A1),D0
	BCS.S	.NOTNEW
	MOVE.L	D0,-(A1)
	MOVE.L	-(A2),-(A0)
	MOVE.L	-(A2),-(A0)
	MOVE.L	NAME,-(A0)
	MOVEQ	#4,D0
.BUBBLE	MOVE.L	(A1),D1
	CMP.L	-4(A1),D1
	BCS.S	.NOTNEW
	MOVE.L	-4(A1),D2
	MOVE.L	D2,(A1)
	MOVE.L	D1,-(A1)
	MOVE.L	(A0),D1
	MOVE.L	4(A0),D2
	MOVE.L	8(A0),D3
	MOVE.L	-12(A0),D4
	MOVE.L	-8(A0),D5
	MOVE.L	-4(A0),D7
	MOVE.L	D4,(A0)
	MOVE.L	D5,4(A0)
	MOVE.L	D7,8(A0)
	MOVE.L	D3,-(A0)
	MOVE.L	D2,-(A0)
	MOVE.L	D1,-(A0)
	DBF	D0,.BUBBLE
.NOTNEW	RTS

.WINNER	LEA	PRIZES,A0
	MOVE.W	CLASS,D0
	ADD.W	D0,D0	2*CLASS
	MOVE.W	D0,D1	COPY IT
	SUBQ.W	#1,D2	POS 0-2
	ADD.W	D2,D0	2*CLASS+POS
	ADD.W	D0,D0	4*CLASS+2*POS
	ADD.W	D1,D0	6*CLASS+2*POS
	MOVE.W	(A0,D0.W),D0
	MOVE.W	D0,PRIZE
	EXT.L	D0
	ADD.L	D0,CASH
	LEA	TRACKSDONE,A0
	MOVE.W	TRACKNO,D0
	MOVE.B	#-1,(A0,D0.W)
	MOVE.W	RACENO,D0
	ADDQ.W	#1,RACESDONE
	CMPI.W	#9,D0
	BNE.S	.NOTFIRST
	CLR.L	TRACKSDONE
	CLR.L	TRACKSDONE+4
	CLR.W	TRACKSDONE+8
	MOVE.W	#1,CLASS
	MOVEQ	#2,D6
	BRA.S	.DOMESS1
.NOTFIRST	CMPI.W	#18,D0
	BNE.S	.NOTSECOND
	CLR.L	TRACKSDONE
	CLR.L	TRACKSDONE+4
	CLR.W	TRACKSDONE+8
	MOVE.W	#2,CLASS
	MOVEQ	#3,D6
	BRA.S	.DOMESS1
.NOTSECOND	CMPI.W	#27,D0
	BNE.S	.TRACKONLY
	BSR	.CHECKHIGH
	MOVEQ	#4,D6
.DOMESS1	MOVE.W	#200,.MESSWAIT+2
	BRA.S	.DOMESS
.TRACKONLY	MOVEQ	#1,D6
.DOMESS0	CLR.W	.MESSWAIT+2
.DOMESS	BSR	LOADMESSAGE
.MESSWAIT	MOVE.W	#0,D0
	BEQ.S	.NODELAY
	ADD.W	$468.W,D0
.WAITHERE	CMP.W	$468.W,D0
	BNE.S	.WAITHERE

.NODELAY	MOVE.W	#176,SPLIT1+2
	MOVE.W	#24,SPLIT2+2

	MOVE.L	NAME,D0
.FIXED	CMP.L	BRIDGE7,D0
	BNE.S	.NOTCHEAT
	LEA	whichengpercent,A0
	MOVE.L	#$1000000,D0
	MOVE.L	D0,(A0)+
	MOVE.L	D0,(A0)+
	MOVE.L	D0,(A0)+
	MOVE.L	D0,(A0)+

*	RELOAD AND STORE THE PANEL

.NOTCHEAT	BSR	NEWPANEL

*	LOAD IN ALL BITS FOR RESULTS/COMPLETION SCREENS

	LEA	RESULTS,A0
	LEA	EMPTYBIT,A1
	BSR	LOADFILE

*	DECOMPRESS RESULTS TYRES

	LEA	RESTYRES,A0
	BSR	ROTATETYRE

*	CHECK FOR TYRE/CARS

	TST.W	CRASHED
	BEQ	.NOT_TYRE
	LEA	TYRECMP,A0
	MOVE.L	A0,A1
	BSR	UNPACK
	LEA	TYRECMP,A2
	LEA	BIGCAR1,A0
	MOVEQ	#0,D1	1ST ROTATION 0
.ROT1	MOVE.L	A2,A1	TOP OF TYRE
	MOVEQ	#21,D2	22 LINES
.ROT2	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
	MOVEQ	#0,D7
	MOVE.W	(A1)+,D4
	MOVE.W	(A1)+,D5
	MOVE.W	(A1)+,D6
	MOVE.W	(A1)+,D7
	ROR.L	D1,D4
	ROR.L	D1,D5
	ROR.L	D1,D6
	ROR.L	D1,D7
	MOVE.L	D4,D3
	OR.L	D5,D3
	OR.L	D6,D3
	OR.L	D7,D3
	NOT.L	D3
	MOVE.W	D3,(A0)+
	MOVE.W	D3,(A0)+
	MOVE.W	D4,(A0)+
	MOVE.W	D5,(A0)+
	MOVE.W	D6,(A0)+
	MOVE.W	D7,(A0)+
	SWAP	D3
	SWAP	D4
	SWAP	D5
	SWAP	D6
	SWAP	D7
	MOVE.W	D3,(A0)
	MOVE.W	D3,2(A0)
	MOVE.W	D4,4(A0)
	MOVE.W	D5,6(A0)
	MOVE.W	D6,8(A0)
	MOVE.W	D7,10(A0)
	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
	MOVEQ	#0,D7
	MOVE.W	(A1)+,D4
	MOVE.W	(A1)+,D5
	MOVE.W	(A1)+,D6
	MOVE.W	(A1)+,D7
	ROR.L	D1,D4
	ROR.L	D1,D5
	ROR.L	D1,D6
	ROR.L	D1,D7
	MOVE.L	D4,D3
	OR.L	D5,D3
	OR.L	D6,D3
	OR.L	D7,D3
	NOT.L	D3
	AND.W	D3,(A0)+
	AND.W	D3,(A0)+
	OR.W	D4,(A0)+
	OR.W	D5,(A0)+
	OR.W	D6,(A0)+
	OR.W	D7,(A0)+
	SWAP	D3
	SWAP	D4
	SWAP	D5
	SWAP	D6
	SWAP	D7
	MOVE.W	D3,(A0)+
	MOVE.W	D3,(A0)+
	MOVE.W	D4,(A0)+
	MOVE.W	D5,(A0)+
	MOVE.W	D6,(A0)+
	MOVE.W	D7,(A0)+
	DBF	D2,.ROT2
	ADDQ.W	#1,D1
	CMPI.W	#16,D1
	BLT	.ROT1
	BRA.S	.NOW

*	DECOMPRESS AND ROTATE RESULTS CARS

.NOT_TYRE	LEA	RESCARS,A0
	BSR	ROTATECARS

*	DECOMPRESS RESULTS CHARACTERS

.NOW	LEA	RESNUMCMP,A0
	LEA	RESNUMS,A1
	BSR	UNPACK
	LEA	RESNUMS,A0
	LEA	RESNUMS+352,A1
	MOVEQ	#7,D0
.ARRG	MOVE.L	(A0)+,(A1)+
	DBF	D0,.ARRG

*	DECOMPRESS GAMEOVER ANIMATIONS

	LEA	GAMEOVERCMP,A0
	LEA	GAMEOVER,A1
	BSR	UNPACK

*	DECOMPRESS PEOPLE ANIMATIONS

	LEA	RESANIMCMP,A0
	LEA	RESANIMS,A1
	BSR	UNPACK

*	DECOMPRESS RESULTS SCREEN

	LEA	RESULTSCRN,A0
	BSR	DOSCREEN

*	COPY BACKGROUND AREA FOR DELETING CARS

	MOVE.L	BLITBASE+2,A0
	ADDA.W	#160*130,A0
	LEA	TITLEBACK,A1
	MOVE.W	#1679,D0
.LLOP	MOVE.L	(A0)+,(A1)+
	DBF	D0,.LLOP

	CMPI.L	#$61003CBE,THIS
	BEQ.S	.NOTFIXED
	MOVE.L	#NAME+4,.FIXED+2

*	SET UP MASK FOR SCREEN EDGES

.NOTFIXED	LEA	TITLEMASK,A0
	MOVEQ	#41,D0
.DOMASK	MOVEQ	#9,D1
.CLEAR1	CLR.L	(A0)+
	DBF	D1,.CLEAR1
	MOVEQ	#19,D1
.SETIT	MOVE.L	#-1,(A0)+
	DBF	D1,.SETIT
	MOVEQ	#9,D1
.CLEAR2	CLR.L	(A0)+
	DBF	D1,.CLEAR2
	DBF	D0,.DOMASK

*	SET UP OFFSETS FOR CHARACTER SCROLLING

	LEA	RESNUMPSTNS,A0
	MOVEQ	#32,D0	4 CHARACTER OFFSET
	MOVEQ	#1,D2
	MOVE.W	RACENO,D1
	BSR.S	.GETPOS
	MOVEQ	#0,D2
	MOVE.W	RACEPOS,D1
	BSR.S	.JUSTONE
	MOVEQ	#2,D2
	MOVE.W	MAXSPEED,D1
	BSR.S	.GETPOS
	MOVEQ	#2,D2
	MOVE.W	AVESPEED,D1
	BSR.S	.GETPOS
	MOVEQ	#3,D2
	MOVE.W	BESTLAP,D1
	BSR.S	.GETPOS
	MOVEQ	#5,D2
	MOVE.W	PRIZE,D1
	BSR.S	.GETPOS
	BRA.S	.SHOWRES

.GETPOS	EXT.L	D1
	BMI.S	.ALLDASH
	LEA	POWERS+20,A1
	MOVE.W	D2,D3
	SUBQ.W	#1,D2
	LSL.W	#2,D3
	SUBA.W	D3,A1
.NEXTPOWER	MOVEQ	#0,D3
	MOVE.L	(A1)+,D4
.GETUNITS	CMP.L	D4,D1
	BCS.S	.GOTIT
	SUB.L	D4,D1
	ADDQ.W	#1,D3
	BRA.S	.GETUNITS
.GOTIT	LSL.W	#3,D3
	MOVE.W	D3,D4
	SUB.W	D0,D3
	MOVE.W	D3,(A0)+
	MOVE.W	D4,(A0)+
	ADDQ.W	#2,D0
	DBF	D2,.NEXTPOWER
.JUSTONE	TST.W	D1
	BMI.S	.ALLDASH
	LSL.W	#3,D1
	MOVE.W	D1,D2
	SUB.W	D0,D2
	MOVE.W	D2,(A0)+
	MOVE.W	D1,(A0)+
	ADDQ.W	#8,D0
	RTS

.ALLDASH	MOVE.W	#80,D3
	SUB.W	D0,D3
	MOVE.W	D3,(A0)+
	MOVE.W	#80,(A0)+
	ADDQ.W	#2,D0
	DBF	D2,.ALLDASH
	ADDQ.W	#6,D0
	RTS

*	COPY SCREEN, SET UP PALLET FADE BUT DON'T START YET

.SHOWRES	BSR	PANELUP1

*	SET UP CAR AND TYRE SOURCES

	MOVE.W	CARTYPE,D1
	LSL.W	#1,D1
	ANDI.W	#$FFFC,D1
	CMPI.W	#12,D1
	BCS.S	.OK
	MOVEQ	#8,D1
.OK	NEG.W	D1
	ADDQ.W	#8,D1
	LEA	BIGCARS,A0
	MOVE.L	0(A0,D1.W),A0	BASE OF CAR
	LEA	CARTYRES,A1
	MOVE.L	0(A1,D1.W),A1	BASE OF CAR TYRES
	LEA	TYREOFFS,A5
	LSL.W	#1,D1
	ADDA.W	D1,A5	OFFSETS TO WHEELS FOR THIS CAR

	MOVE.B	#-1,TUNENO+1
	CLR.B	TUNEFLAG+1

	BSR	WVBL
	CLR.W	$466.W
	CLR.W	.CARPOS+2
	MOVE.W	#45,.CARSPEED+2
	MOVE.W	#1,.CARACCEL+2
	MOVE.W	#138,.TYREPOSX+2
	MOVE.W	#3,.TYRESPEEDX+2
	MOVE.L	#130*$10000,.TYREPOSY+2
	CLR.L	.TYRESPEEDY+2
	MOVE.W	#50,.CHEER+2

*	PUT BACKGROUND BACK

.RESULTS	MOVE.B	#-1,DOFLIP+1
	BSR	WDEIRQ
	BSR	KEYREAD
	MOVE.L	BLITBASE+2,A4
	ADDA.W	#160*130,A4
	LEA	TITLEBACK,A6
	MOVEQ	#41,D6

.LOP	REPT	40

	MOVE.L	(A6)+,(A4)+

	ENDR

	DBF	D6,.LOP

	MOVE.W	RACEPOS,D0	DIED/POS
	BMI.S	.NOCHEER
.CHEER	CMPI.W	#50,$466.W
	BCS.S	.NOCHEER
	MOVE.B	#8,SNDFLAG+1
	MOVE.W	#500,.CHEER+2
.NOCHEER	SUBQ.W	#1,D0	GET POS 0-2
	BEQ.S	.DOFIRST	0=FIRST
	BMI.S	.ENDANIMS	DIED
	SUBQ.W	#1,D0	SECOND ?
	BEQ.S	.DOSECOND	YES
	LEA	RESANIM3,A2	ELSE 3RD
	BRA.S	.DOANIMLIST
.DOSECOND	LEA	RESANIM2,A2	SECOND
	BRA.S	.DOANIMLIST
.ENDANIMS	LEA	RESANIM4,A2	DIED
	LEA	LASTANIMS,A6
	BRA.S	.DOANIMLIST
.DOFIRST	LEA	RESANIM1,A2	FIRST
.DOANIMLIST	MOVE.W	(A2)+,D0	GET ANIMATION NUMBER
	BMI	.DONELIST	- IF FINISHED LIST
	LEA	RESTAGES,A3	POSITIONS/SIZES/STAGES
	LSL.W	#4,D0	*16
	ADDA.W	D0,A3	CURRENT ANIMATION
	MOVE.L	BLITBASE+2,A4	SCREEN
	MOVE.W	(A3)+,D0	DESTINATION X (PIXELS)
	LSR.W	#1,D0	CONVERT TO BYTES
	MOVE.W	(A3)+,D1	DESTINATION Y (LINES)
	MULU	#160,D1	LINE WIDTH
	ADD.W	D1,D0	ADD X OFFSET
	ADDA.W	D0,A4	SCREEN BASE ADDRESS
	MOVE.W	(A3)+,D0	X WIDTH (PIXELS)
	LSR.W	#1,D0	X WIDTH (BYTES)
	MOVE.W	#160,D1
	SUB.W	D0,D1	LINE MODULUS
	LSR.W	#3,D0
	SUBQ.W	#1,D0	DBF FOR WIDTH
	MOVE.W	(A3)+,D2	Y HEIGHT (LINES)
	SUBQ.W	#1,D2	DBF FOR HEIGHT
	TST.W	RACEPOS
	BPL.S	.STAGE
	MOVE.L	#$E57D0050,D6
	BSR	RANDOM
	TST.W	D6
	BNE.S	.SAMEONE
	ADDQ.W	#2,(A6)
.SAMEONE	MOVE.W	(A6)+,D3
	BRA.S	.GOTD3
.STAGE	MOVEQ	#0,D3	STAGE (0-6)
	LSR.W	#1,D3
.GOTD3	ANDI.W	#6,D3
	MOVE.W	0(A3,D3.W),D3	OFFSET TO SPRITE OFFSET
	LEA	RESOFFSETS,A3	OFFSETS TO SPRITES
	ADD.W	D3,D3
	MOVE.W	(A3,D3.W),D3	SPRITE OFFSET
	LEA	RESANIMS,A3	SPRITE DATA
	ADDA.W	D3,A3	SPRITE ADDRESS
.ANIMLINE	MOVE.W	D0,D3
.DRAWANIM	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	DBF	D3,.DRAWANIM
	ADDA.W	D1,A4
	DBF	D2,.ANIMLINE
	BRA	.DOANIMLIST

.DONELIST	ADDQ.B	#1,.STAGE+1
	CMPI.W	#32,$466.W
	BCS	.DONECARS
	TST.W	CRASHED
	BEQ	.CARSPEED

.TYRESPEEDX	MOVE.W	#0,D2
.TYREPOSX	ADDI.W	#0,D2
	MOVE.W	D2,.TYREPOSX+2
	CMPI.W	#516,D2
	BCS.S	.TYRESPEEDY
	MOVEQ	#0,D2
	MOVE.W	D2,.TYREPOSX+2
	MOVE.W	D2,.TYRESPEEDX+2
.TYRESPEEDY	MOVE.L	#0,D7
.TYREACCEL	ADDI.L	#$2000,D7
	MOVE.L	D7,.TYRESPEEDY+2
.TYREPOSY	ADDI.L	#0,D7
	CMPI.L	#150*$10000,D7
	BCS.S	.TYREOK
	MOVE.B	#9,SNDFLAG+1
	MOVE.L	#150*$10000,D7
	MOVE.L	.TYRESPEEDY+2,D0
	NEG.L	D0
	MOVE.L	D0,D1
	ASR.L	#3,D1
	SUB.L	D1,D0
	MOVE.L	D0,.TYRESPEEDY+2
.TYREOK	MOVE.L	D7,.TYREPOSY+2
	SWAP	D7
	MULU	#160,D7
	MOVE.W	D2,D3	TYRE X POS (PIXELS)
	MOVE.W	D2,D4
	ANDI.W	#15,D4
	MULU	#36*22,D4
	LEA	BIGCAR1,A2	TYRE BASE
	ADDA.L	D4,A2	CAR ROTATION OFFSET
	ANDI.W	#$FFF0,D3	WORD POSITION
	LSR.W	#1,D3	BYTES ACROSS SCREEN AND MASK

	MOVE.L	BLITBASE+2,A3
	LEA	-80(A3,D7.W),A3
	LEA	TITLEMASK,A4
	ADDA.W	D3,A3
	LSR.W	#1,D3
	ADDA.W	D3,A4
	MOVEQ	#21,D3

.DOIT	REPT	3

	MOVE.L	(A4),D4	SCREEN MASK
	NOT.L	D4	INVERT
	OR.L	(A2)+,D4	COMBINE WITH TYRE MASK
	AND.L	D4,(A3)
	MOVE.L	(A2)+,D5	1ST 2 PLANES
	AND.L	(A4),D5
	OR.L	D5,(A3)+
	AND.L	D4,(A3)
	MOVE.L	(A2)+,D5	2ND 2 PLANES
	AND.L	(A4)+,D5
	OR.L	D5,(A3)+

	ENDR

	ADDA.W	#136,A3	NEXT SCREEN LINE
	ADDA.W	#148,A4	NEXT MASK LINE
	DBF	D3,.DOIT

	MOVE.W	D2,D3	COPY CAR X FOR TYRE STAGE
	EXT.L	D3	LONG FOR DIVIDE
	DIVU	#3,D3	NEXT STAGE EVERY 3 PIXELS
	ANDI.W	#3,D3	STAGE 0-3
	ROR.W	#4,D3	*16*16*16
	LEA	0(A1,D3.W),A2	STAGE BASE
	ADDQ.W	#3,D2	ADD X OFFSET TO REAR
	MOVE.W	D2,D5	COPY FOR WORD POSITION
	ANDI.W	#15,D2	ROTATION 0-15
	MOVE.W	D2,D4	COPY FOR MASKS
	LSL.W	#2,D4	*4 FOR LONGWORD
	LEA	MASKS,A3
	MOVE.L	0(A3,D4.W),TYREMASK+2
	LSL.W	#8,D2	*16*16
	ADDA.W	D2,A2	REAR TYRE START
	ANDI.W	#$FFF0,D5	WORD OFFSET
	LSR.W	#1,D5
	MOVEQ	#3,D4	Y OFFSET TO REAR

	BSR	TYREPRINT
	BRA.S	.DONECARS

.CARSPEED	MOVE.W	#0,D2
.CARACCEL	SUBI.W	#1,D2
	MOVE.W	D2,.CARSPEED+2
	BPL.S	.CARPOS
	TST.W	RACEPOS
	BMI.S	.STOPCAR
	CMPI.W	#-100,D2
	BCC.S	.WAITCAR
	MOVE.W	#-2,.CARACCEL+2
.STOPCAR	CLR.W	.CARSPEED+2
.WAITCAR	MOVEQ	#0,D2
.CARPOS	ADDI.W	#0,D2
	MOVE.W	D2,.CARPOS+2
	LSR.W	#2,D2
	CMPI.W	#512,D2
	BCC.S	.DONECARS
	ANDI.W	#$FFFE,D2
	MOVE.W	#130*160,D7
	BSR	DOBIGCARS

.DONECARS	LEA	RESNUMPSTNS,A3
	LEA	RESNUMADDS,A4
	MOVEQ	#18,D0

.DOCHARS	MOVE.L	BLITBASE+2,A2
	ADDA.W	(A4)+,A2
	MOVE.W	(A3)+,D3
	MOVE.W	D3,D4
	CMP.W	(A3)+,D3
	BEQ.S	.SCROLLED
	ADDQ.W	#1,D3
	MOVE.W	D3,-4(A3)
.SCROLLED	LEA	RESNUMS,A6
	TST.W	D4
.GETVAL	BPL.S	.PLUS
	ADDI.W	#88,D4
	BRA.S	.GETVAL
.PLUS	ADD.W	D4,D4
	ADD.W	D4,D4
	ADDA.W	D4,A6

.PRINTIT	REPT	8

	MOVE.B	(A6)+,(A2)+
	ADDQ	#1,A2
	MOVE.B	(A6)+,(A2)+
	ADDQ	#1,A2
	MOVE.B	(A6)+,(A2)+
	ADDQ	#1,A2
	MOVE.B	(A6)+,(A2)+
	ADDA.W	#153,A2

	ENDR

	DBF	D0,.DOCHARS

	TST.W	RACEPOS
	BPL	.WAITFORIT
	MOVE.W	$466.W,D0
	SUBI.W	#250,D0
	BMI	.WAITFORIT
	LSR.W	#2,D0
	NEG.W	D0
	ADDQ.W	#7,D0
	BPL.S	.GAMEOVEROK
	MOVEQ	#0,D0

.GAMEOVEROK	LEA	GAMEOVER,A6
	MULU	#19*80,D0
	ADDA.W	D0,A6
	MOVE.L	BLITBASE+2,A2
	ADDA.W	#80*160+40,A2
	MOVEQ	#18,D0

.DEADLINE	REPT	10

	MOVE.W	(A6)+,D1
	MOVE.W	(A6)+,D2
	MOVE.W	(A6)+,D3
	MOVE.W	(A6)+,D4
	MOVE.W	D1,D5
	OR.W	D2,D5
	OR.W	D3,D5
	OR.W	D4,D5
	NOT.W	D5
	AND.W	D5,(A2)
	OR.W	D1,(A2)+
	AND.W	D5,(A2)
	OR.W	D2,(A2)+
	AND.W	D5,(A2)
	OR.W	D3,(A2)+
	AND.W	D5,(A2)
	OR.W	D4,(A2)+

	ENDR

	ADDA.W	#80,A2
	DBF	D0,.DEADLINE

.WAITFORIT	BTST.B	#0,$467.W
	BNE.S	.WAITFORIT

	CMPI.W	#8,$466.W
	BNE.S	.FADEDONE

	MOVE.B	#16,FADEFLAG+1

.FADEDONE	TST.B	JOYSTICK+1
	BEQ.S	RESULTSDONE
.CAROK	CMPI.W	#400,$466.W
	BCS	.RESULTS

RESULTSDONE	TST.W	RACEPOS
	BMI	NEWTITLES
	CMPI.W	#27,RACENO
	BEQ.S	.COMPLETION
	BSR	LOADING
	BRA	NEXTRACE

.COMPLETION	BSR	LOADING

	LEA	COMPSCRN,A0
	BSR	DOSCREEN

	BSR	LOADOFF
	CLR.W	$466.W

.ENDWAIT	CMPI.W	#15*50,$466.W
	BCC.S	.EXIT
	TST.B	JOYSTICK+1
	BNE.S	.ENDWAIT

.EXIT	BRA	NEWTITLES

*	GET CAR WORD AND PIXEL POSITION

DOBIGCARS	MOVE.W	D2,D3	CAR X POS (PIXELS)
	MOVE.W	D2,D4
	ANDI.W	#15,D4
	LSR.W	#1,D4
	MULU	#11*12*42,D4
	MOVE.L	A0,A2	CAR BASE
	ADDA.L	D4,A2	CAR ROTATION OFFSET
	ANDI.W	#$FFF0,D3	WORD POSITION
	LSR.W	#1,D3	BYTES ACROSS SCREEN AND MASK

	MOVE.L	BLITBASE+2,A3
	LEA	-80(A3,D7.W),A3
	LEA	TITLEMASK,A4
	ADDA.W	D3,A3
	LSR.W	#1,D3
	ADDA.W	D3,A4
	MOVEQ	#41,D3

.DOIT	REPT	11

	MOVE.L	(A4),D4	SCREEN MASK
	NOT.L	D4	INVERT
	OR.L	(A2)+,D4	COMBINE WITH CAR MASK
	AND.L	D4,(A3)
	MOVE.L	(A2)+,D5	1ST 2 PLANES
	AND.L	(A4),D5
	OR.L	D5,(A3)+
	AND.L	D4,(A3)
	MOVE.L	(A2)+,D5	2ND 2 PLANES
	AND.L	(A4)+,D5
	OR.L	D5,(A3)+

	ENDR

	ADDA.W	#72,A3	NEXT SCREEN LINE
	ADDA.W	#116,A4	NEXT MASK LINE
	DBF	D3,.DOIT

	MOVE.W	D2,D3	COPY CAR X FOR TYRE STAGE
	EXT.L	D3	LONG FOR DIVIDE
	DIVU	#3,D3	NEXT STAGE EVERY 3 PIXELS
	MOVE.W	D3,D4	COPY FOR FRONT TYRE
	ANDI.W	#3,D4	STAGE 0-3
	LSL.W	#8,D4	*16*16
	LSL.W	#4,D4	*16
	LEA	0(A1,D4.W),A2	STAGE BASE
	MOVE.W	D2,D4	COPY CAR X FOR REAR TYRE
	ADD.W	(A5),D4	ADD X OFFSET TO REAR
	MOVE.W	D4,D5	COPY FOR WORD POSITION
	ANDI.W	#15,D4	ROTATION 0-15
	MOVE.W	D4,D6	COPY FOR MASKS
	LSL.W	#2,D6	*4 FOR LONGWORD
	LEA	MASKS,A3
	MOVE.L	0(A3,D6.W),TYREMASK+2
	LSL.W	#8,D4	*16*16
	ADDA.W	D4,A2	REAR TYRE START
	ANDI.W	#$FFF0,D5	WORD OFFSET
	LSR.W	#1,D5
	MOVE.W	2(A5),D4	Y OFFSET TO REAR

	BSR.S	TYREPRINT

	ADDQ	#2,D3
	ANDI.W	#3,D3	STAGE 0-3
	LSL.W	#8,D3	*16*16
	LSL.W	#4,D3	*16
	LEA	0(A1,D3.W),A2	STAGE BASE
	MOVE.W	D2,D4	COPY CAR X FOR FRONT TYRE
	ADD.W	4(A5),D4	ADD X OFFSET TO FRONT
	MOVE.W	D4,D5	COPY FOR WORD POSITION
	ANDI.W	#15,D4	ROTATION 0-15
	MOVE.W	D4,D6	COPY FOR MASKS
	LSL.W	#2,D6	*4 FOR LONGWORD
	LEA	MASKS,A3
	MOVE.L	0(A3,D6.W),TYREMASK+2
	LSL.W	#8,D4	*16*16
	ADDA.W	D4,A2	FRONT TYRE START
	ANDI.W	#$FFF0,D5	WORD OFFSET
	LSR.W	#1,D5
	MOVE.W	6(A5),D4	Y OFFSET TO FRONT

TYREPRINT	MULU	#160,D4
	MOVE.L	BLITBASE+2,A3
	LEA	-80(A3,D7.W),A3
	ADDA.W	D4,A3
	LEA	(A3,D5.W),A3
	LEA	TITLEMASK,A4
	ADDA.W	D4,A4
	LSR.W	#1,D5
	LEA	0(A4,D5.W),A4
TYREMASK	MOVE.L	#0,D6

.DOIT1	REPT	16

	MOVE.L	(A4),D4	SCREEN MASK
	NOT.L	D4	INVERT
	OR.L	D6,D4	COMBINE WITH WORD MASK
	AND.L	D4,(A3)
	MOVE.L	(A2)+,D5	1ST 2 PLANES
	AND.L	(A4),D5
	OR.L	D5,(A3)+
	AND.L	D4,(A3)
	MOVE.L	(A2)+,D5	2ND 2 PLANES
	AND.L	(A4)+,D5
	OR.L	D5,(A3)+

	MOVE.L	(A4),D4	SCREEN MASK
	NOT.L	D4	INVERT
	NOT.L	D6	INVERT WORD MASK
	OR.L	D6,D4	COMBINE WITH WORD MASK
	NOT.L	D6
	AND.L	D4,(A3)
	MOVE.L	(A2)+,D5	1ST 2 PLANES
	AND.L	(A4),D5
	OR.L	D5,(A3)+
	AND.L	D4,(A3)
	MOVE.L	(A2)+,D5	2ND 2 PLANES
	AND.L	(A4)+,D5
	OR.L	D5,(A3)+

	ADDA.W	#144,A3	NEXT SCREEN LINE
	ADDA.W	#152,A4	NEXT MASK LINE

	ENDR

	RTS

*	UNPACK AND PRE-ROTATE BIG CARS
*	NB. A0=COMPRESSED DATA

ROTATECARS	MOVE.L	BLITBASE+2,A1
	BSR	UNPACK
	MOVE.W	#3,LINECOUNT	3 CARS
	LEA	BIGCAR1,A0
	MOVE.L	BLITBASE+2,A1
.ROTATE	MOVE.L	A1,A2	TOP OF EACH CAR
	MOVEQ	#0,D1	1ST ROTATION 2
.ROT1	MOVE.L	A2,A1	TOP OF CAR
	MOVEQ	#41,D2	42 LINES
.ROT2	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
	MOVEQ	#0,D7
	MOVE.W	(A1)+,D4
	MOVE.W	(A1)+,D5
	MOVE.W	(A1)+,D6
	MOVE.W	(A1)+,D7
	ROR.L	D1,D4
	ROR.L	D1,D5
	ROR.L	D1,D6
	ROR.L	D1,D7
	MOVE.L	D4,D3
	OR.L	D5,D3
	OR.L	D6,D3
	OR.L	D7,D3
	NOT.L	D3
	MOVE.W	D3,(A0)+
	MOVE.W	D3,(A0)+
	MOVE.W	D4,(A0)+
	MOVE.W	D5,(A0)+
	MOVE.W	D6,(A0)+
	MOVE.W	D7,(A0)+
	SWAP	D3
	SWAP	D4
	SWAP	D5
	SWAP	D6
	SWAP	D7
	MOVE.W	D3,(A0)
	MOVE.W	D3,2(A0)
	MOVE.W	D4,4(A0)
	MOVE.W	D5,6(A0)
	MOVE.W	D6,8(A0)
	MOVE.W	D7,10(A0)
	MOVEQ	#8,D0
.ROT3	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
	MOVEQ	#0,D7
	MOVE.W	(A1)+,D4
	MOVE.W	(A1)+,D5
	MOVE.W	(A1)+,D6
	MOVE.W	(A1)+,D7
	ROR.L	D1,D4
	ROR.L	D1,D5
	ROR.L	D1,D6
	ROR.L	D1,D7
	MOVE.L	D4,D3
	OR.L	D5,D3
	OR.L	D6,D3
	OR.L	D7,D3
	NOT.L	D3
	AND.W	D3,(A0)+
	AND.W	D3,(A0)+
	OR.W	D4,(A0)+
	OR.W	D5,(A0)+
	OR.W	D6,(A0)+
	OR.W	D7,(A0)+
	SWAP	D3
	SWAP	D4
	SWAP	D5
	SWAP	D6
	SWAP	D7
	MOVE.W	D3,(A0)
	MOVE.W	D3,2(A0)
	MOVE.W	D4,4(A0)
	MOVE.W	D5,6(A0)
	MOVE.W	D6,8(A0)
	MOVE.W	D7,10(A0)
	DBF	D0,.ROT3
	ADDA.W	#12,A0
	DBF	D2,.ROT2
	ADDQ	#2,D1
	CMPI.W	#16,D1
	BLT	.ROT1
	SUBQ.W	#1,LINECOUNT
	BNE	.ROTATE
	RTS

*	UNPACK AND PRE-ROTATE BIG TYRES
*	NB. A0=COMPRESSED DATA

ROTATETYRE	MOVE.L	BLITBASE+2,A1
	BSR	UNPACK
	MOVE.W	#12,LINECOUNT	12 TYRES
	LEA	TYRE1,A0
	MOVE.L	BLITBASE+2,A1
ROTATE	MOVE.L	A1,A2	TOP OF EACH TYRE
	MOVEQ	#0,D1	1ST ROTATION 0
.ROT1	MOVE.L	A2,A1	TOP OF CAR
	MOVEQ	#15,D2	16 LINES
.ROT2	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
	MOVEQ	#0,D7
	MOVE.W	(A1)+,D4
	MOVE.W	(A1)+,D5
	MOVE.W	(A1)+,D6
	MOVE.W	(A1)+,D7
	ROR.L	D1,D4
	ROR.L	D1,D5
	ROR.L	D1,D6
	ROR.L	D1,D7
	MOVE.W	D4,(A0)+
	MOVE.W	D5,(A0)+
	MOVE.W	D6,(A0)+
	MOVE.W	D7,(A0)+
	SWAP	D4
	SWAP	D5
	SWAP	D6
	SWAP	D7
	MOVE.W	D4,(A0)+
	MOVE.W	D5,(A0)+
	MOVE.W	D6,(A0)+
	MOVE.W	D7,(A0)+
	DBF	D2,.ROT2
	ADDQ	#1,D1
	CMPI.W	#16,D1
	BLT	.ROT1
	SUBQ.W	#1,LINECOUNT
	BNE	ROTATE
	RTS

*	ROUTINE TO RANDOMIZE GARAGE COSTS

RANDOMSHOP	LEA	SHOPCOSTS,A2
	LEA	SHOPBASE,A1
	MOVEQ	#11,D4
.LOOP	MOVE.W	(A1)+,D5
	MOVE.W	#1000,D6
	BSR	RANDOM
	EXT.L	D6
	DIVU	#50,D6
	MULU	#50,D6
	ADD.W	D6,D5
	MOVE.W	D5,(A2)+
	DBF	D4,.LOOP
	RTS

STARTGAME	BTST.B	#1,$FFFFFC00.W	KYBRD CHIP READY ?
	BEQ.S	STARTGAME	NO
	MOVE.B	#$12,$FFFFFC02.W    MOUSE OFF
	BSR.S	RANDOMSHOP
	MOVE.W	D3,TRACKNO
	ADDQ.W	#1,RACENO
	MOVE.W	#-1,BESTLAP
	CLR.B	SALESENTRY+1

*************** MAIN GAME CODE **************

	BSR	LOADING
	MOVE.W	#160,SPLIT1+2
	MOVE.W	#40,SPLIT2+2

*	LOAD IN ALL GAME DATA

	LEA	GAMEFILE,A0
	LEA	BLUECAR,A1
	BSR	LOADFILE
THIS	BSR	check_prot

*	UNPACK THE REQUIRED CARS

	MOVE.W	CARTYPE,D0
	LSL.W	#2,D0
	ANDI.W	#$FFF8,D0
	CMPI.W	#24,D0
	BCS.S	.OK
	MOVEQ	#16,D0
.OK	LEA	CARADDS,A0
	ADDA.W	D0,A0
	MOVE.W	(A0)+,CARDARK
	MOVE.W	(A0)+,CARLIGHT
	MOVE.L	(A0)+,A0
	SUB.L	D6,D5
	CMPI.L	#61,D5
	BCC.S	.PASSED
	LEA	START+4,A0
	MOVE.L	#$429860FC,START
	BRA	START
.PASSED	LEA	CAR0,A1
	BSR	UNPACK
	LEA	COMPCAR1,A0
	LEA	CAR1,A1
	BSR	UNPACK
	LEA	COMPCAR2,A0
	LEA	CAR2,A1
	BSR	UNPACK
	LEA	COMPCAR3,A0
	LEA	CAR3,A1
	BSR	UNPACK

*	UNPACK COURSE MAPS

	LEA	CARMAPS,A0
	LEA	GAMEFREE,A1
	BSR	UNPACK

*	COPY REQUIRED MAP TO PICTUREDATA

	MOVE.W	TRACKNO,D0
	LEA	BRIDGELIST,A0
	ADD.W	D0,D0
	ADD.W	D0,D0
	MOVE.L	(A0,D0.W),BRIDGEREAD+2
	MULU	#2100,D0
	LEA	GAMEFREE,A0
	ADDA.L	D0,A0
	LEA	PICTUREDATA,A1
	MOVE.W	#2099,D0
.COPYMAP	MOVE.L	(A0)+,(A1)+
	DBF	D0,.COPYMAP

*	INITIALISE ALL COURSE/CAR PSTNS ETC. HERE

	BSR	setuprace
	CLR.W	SHOPFLAGS+2	ALL SHOP ITEMS NOW AVAILABLE

.FIXPROT	MOVE.L	#$70000,-(A7)
	TRAP	#13
	ADDQ	#4,A7
	TST.W	D0
	BEQ.S	.FIXPROT

*	UNPACK TOP VIEW MAP(S)

	LEA	COURSES,A0
	LEA	BLOCKS,A1
	BSR	UNPACK

*!!!!!!!! NOW GET ADDRESS OF MAP FOR CURRENT COURSE !!!!!!
*!!! CONVERT IT AT (BLITBASE+2)+2100

PROTECTION	MOVE.W	TRACKNO,D0
	ADDQ.W	#1,D0
	MULU	#1050,D0
	LEA	BLOCKS,A0
	ADDA.W	D0,A0	NB. 1050*COURSE
	MOVE.L	BLITBASE+2,A1
	ADDA.W	#2100,A1	NB. (BLITBASE+2)+2100
	MOVE.W	#1049,D0
.LOOPMAP	MOVEQ	#0,D1
	MOVE.B	-(A0),D1
	MOVE.W	D1,-(A1)
	DBF	D0,.LOOPMAP

*	UNPACK BLOCKS

	LEA	BLOCKSCMP,A0
	LEA	BLOCKS,A1
	BSR	UNPACK

*	NOW FIND THE USED BLOCKS,CONVERT THE NUMBERS AND
*	COPY THE UNROTATED ONES TO (SCREENON+2)

*	CLEAR NEW NUMBER/FLAG TABLE FOR BLOCKS ALREADY STORED

	LEA	BLOCKSUSED,A0
	MOVE.W	#99,D0
.CLEARTAB	CLR.L	(A0)+
	DBF	D0,.CLEARTAB

*	NOW CONVERT THE MAP AND COPY ANY USED BLOCKS

	MOVE.L	BLITBASE+2,A0
	LEA	PLANMAP,A1	NEW MAP GOES HERE
	LEA	oilblocklist,A2
	LEA	BLOCKSUSED,A3
	LEA	BLOCKS,A4
	MOVE.L	BLITBASE+2,A6
	ADDA.W	#3000,A6
	MOVE.W	#$BF,D0	6*128=768=192*4
.COPYMWO	MOVE.L	(A4)+,(A6)+
	DBF	D0,.COPYMWO
	MOVEQ	#6,D0
	MOVE.W	#1049,D1
.CONVERT	MOVE.W	(A0)+,D2	OLD BLOCK NUMBER
	MOVE.B	(A2)+,D3	FLAG/MUD/WATER/OIL
	BPL.S	.STOREIT	IF OBSTACLE
	MOVE.B	(A3,D2.W),D3	IS THERE A NEW NUMBER ?
	BNE.S	.STOREIT	YES SO USE IT IN NEW MAP
	MOVE.B	D0,(A3,D2.W)	ELSE STORE NEW BLOCK NUMBER
	LSL.W	#7,D2	OFFSET TO OLD BLOCK
	LEA	(A4,D2.W),A5
	MOVEQ	#31,D4	128 BYTES PER BLOCK
.COPYBLOCK	MOVE.L	(A5)+,(A6)+
	DBF	D4,.COPYBLOCK
	MOVE.W	D0,D3	NEW NUMBER FOR MAP
	ADDQ.W	#1,D0	ANOTHER NEW BLOCK
.STOREIT	ANDI.W	#$FF,D3
	LSL.W	#8,D3	256 PER ROTATED BLOCK
	ADDI.W	#$8000,D3
	MOVE.W	D3,(A1)+
	DBF	D1,.CONVERT

	LEA	LIGHTS,A0
	MOVE.L	BLITBASE+2,A1
	MOVE.W	#220,D7
.COPYLIGHT	MOVE.L	(A0)+,(A1)+
	DBF	D7,.COPYLIGHT

	SUBQ.W	#1,D0	REDUCE NUMBER FOR DBF
	MOVE.W	D0,D7

*	PRE-ROTATE THE BLOCKS

	LEA	BLOCKS,A0	DESTINATION
	LEA	BLOCKTABLE,A1
	LEA	ROTATIONS,A3
.LOOP	MOVE.W	(A3)+,D0
	BMI.S	.DONEROT
	MOVE.W	D7,D1	NO. OF BLOCKS-1
	MOVE.L	A0,(A1)+	BASE ADDRESS AT EACH ROTATION
	MOVE.L	BLITBASE+2,A2	UNROTATED
	ADDA.W	#3000,A2
.LOOP1	MOVEQ	#15,D2	16 LINES
.LOOP2	MOVEQ	#0,D3
	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
	MOVE.W	(A2)+,D3
	MOVE.W	(A2)+,D4
	MOVE.W	(A2)+,D5
	MOVE.W	(A2)+,D6
	ROL.L	D0,D3
	ROL.L	D0,D4
	ROL.L	D0,D5
	ROL.L	D0,D6
	SWAP	D3
	SWAP	D4
	SWAP	D5
	SWAP	D6
	MOVE.W	D3,(A0)+
	MOVE.W	D4,(A0)+
	MOVE.W	D5,(A0)+
	MOVE.W	D6,(A0)+
	SWAP	D3
	SWAP	D4
	SWAP	D5
	SWAP	D6
	MOVE.W	D3,(A0)+
	MOVE.W	D4,(A0)+
	MOVE.W	D5,(A0)+
	MOVE.W	D6,(A0)+
	DBF	D2,.LOOP2
	DBF	D1,.LOOP1
	BRA.S	.LOOP

.DONEROT	LEA	BLOCKTABLE+16*4,A2
	MOVE.L	-(A1),D0
	ADD.L	#$8000,D0
	MOVE.L	D0,-(A2)
	MOVE.L	D0,-(A2)
	MOVE.L	-(A1),D0
	ADD.L	#$8000,D0
	MOVE.L	D0,-(A2)
	MOVE.L	D0,-(A2)
	MOVE.L	D0,-(A2)
	MOVE.L	-(A1),D0
	ADD.L	#$8000,D0
	MOVE.L	D0,-(A2)
	MOVE.L	D0,-(A2)
	MOVE.L	D0,-(A2)
	MOVE.L	-(A1),D0
	ADD.L	#$8000,D0
	MOVE.L	D0,-(A2)
	MOVE.L	D0,-(A2)
	MOVE.L	-(A1),D0
	ADD.L	#$8000,D0
	MOVE.L	D0,-(A2)
	MOVE.L	D0,-(A2)
	MOVE.L	D0,-(A2)
	MOVE.L	-(A1),D0
	ADD.L	#$8000,D0
	MOVE.L	D0,-(A2)
	MOVE.L	D0,-(A2)
	MOVE.L	D0,-(A2)

*	PRE-ROTATE THE MISSILE

	LEA	MISSILE,A0
	MOVEQ	#0,D0
.DOMISS	LEA	SMALLMISSILE,A1
	MOVEQ	#7,D1
.DOMISSLINE	MOVEQ	#0,D2
	MOVEQ	#0,D3
	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVE.W	(A1)+,D2
	MOVE.W	(A1)+,D3
	MOVE.W	(A1)+,D4
	MOVE.W	(A1)+,D5
	ROR.L	D0,D2
	ROR.L	D0,D3
	ROR.L	D0,D4
	ROR.L	D0,D5
	MOVE.L	D2,D6
	OR.L	D3,D6
	OR.L	D4,D6
	OR.L	D5,D6
	NOT.L	D6
	MOVE.W	D6,(A0)+
	MOVE.W	D6,(A0)+
	MOVE.W	D2,(A0)+
	MOVE.W	D3,(A0)+
	MOVE.W	D4,(A0)+
	MOVE.W	D5,(A0)+
	SWAP	D2
	SWAP	D3
	SWAP	D4
	SWAP	D5
	SWAP	D6
	MOVE.W	D6,(A0)+
	MOVE.W	D6,(A0)+
	MOVE.W	D2,(A0)+
	MOVE.W	D3,(A0)+
	MOVE.W	D4,(A0)+
	MOVE.W	D5,(A0)+
	DBF	D1,.DOMISSLINE
	ADDQ.W	#1,D0
	CMPI.W	#16,D0
	BNE.S	.DOMISS

	MOVE.L	BLITBASE+2,A0
	MOVE.L	A0,A1
	BSR	UNPACK

	MOVE.B	#-1,TUNENO+1
	CLR.B	TUNEFLAG+1

	BSR	GAMEFADE	FADE TO BLACK,CLEAR SCREENON
	MOVE.L	SCREENON+2,A0
	ADDA.W	#164*160+16,A0
	LEA	GAMEPANEL,A1
	MOVEQ	#19,D0
.MOVE	MOVEQ	#7,D1
.MOVE1	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	DBF	D1,.MOVE1
	ADDA.W	#32,A0
	DBF	D0,.MOVE
	MOVE.W	numcars,D0
	MOVE.W	D0,RACEPOS
	LEA	GAMETEXT,A0
	MOVE.W	D0,D1
	ADD.W	D0,D0
	ADD.W	D0,D0
	ADD.W	D1,D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	ADDA.W	D0,A0
	MOVE.L	SCREENON+2,A1
	ADDA.W	#176*160+49,A1
.CHAR1	REPT	4
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDA.W	#153,A1
	ENDR
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	MOVE.W	numlaps,D0
	LEA	GAMETEXT,A0
	MOVE.W	D0,D1
	ADD.W	D0,D0
	ADD.W	D0,D0
	ADD.W	D1,D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	ADDA.W	D0,A0
	MOVE.L	SCREENON+2,A1
	ADDA.W	#176*160+65,A1
.CHAR2	REPT	4
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDA.W	#153,A1
	ENDR
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	MOVE.W	#201,LIGHTCOUNT+2
	MOVE.W	#2,$468.W	READY FOR FLIP
	CLR.B	FLIPFLAG+1	ENABLE FLIP SO THAT SCREENON BECOMES BLITBASE
	BSR	MAINSUB	DRAW SCREEN ON BLITBASE
.WAIT	TST.W	$468.W	WAIT FOR NEXT FLIP
	BNE.S	.WAIT	SO BLITBASE IS SCREENON
	MOVE.B	#-1,FLIPFLAG+1	DISABLE FLIP

*	ROUTINE TO DRAW LIGHTS GOES HERE

DOLIGHTS	BSR	WDEIRQ
LIGHTCOUNT	MOVE.W	#0,D0
	BEQ.S	MAINSTART
	SUBQ.W	#1,LIGHTCOUNT+2
	CMPI.W	#201,D0
	BCS.S	.NOFADE
	MOVE.B	#16,FADEFLAG+1
	BRA.S	DOLIGHTS
.NOFADE	DIVU	#50,D0
	MOVEQ	#4,D1
	SUB.W	D0,D1	USE D1 TO DECIDE TONE OF BEEP
	SWAP	D0	ONLY CALL IF REMAINDER = 0
	TST.W	D0
	BNE.S	.NOSOUND
	MOVEQ	#6,D2
	CMPI.W	#3,D1
	BNE.S	.BEEPS
	ADDQ.W	#1,D2
.BEEPS	MOVE.B	D2,SNDFLAG+1
.NOSOUND	MULU	#32*18,D1
	MOVE.L	BLITBASE+2,A0
	ADDA.W	D1,A0
	MOVE.L	SCREENON+2,A1
	ADDA.W	#16*160+24,A1
	MOVEQ	#17,D0
.DOLINE	MOVE.L	(A0)+,(A1)+
	MOVE.L	(A0)+,(A1)+
	MOVE.L	(A0)+,(A1)+
	MOVE.L	(A0)+,(A1)+
	MOVE.L	(A0)+,(A1)+
	MOVE.L	(A0)+,(A1)+
	MOVE.L	(A0)+,(A1)+
	MOVE.L	(A0)+,(A1)+
	ADDA.W	#128,A1
	DBF	D0,.DOLINE
	BRA.S	DOLIGHTS

MAINSTART	MOVE.W	TRACKNO,D0
	LEA	TUNES,A1
	MOVE.B	0(A1,D0.W),D0
	MOVE.B	D0,TUNENO+1
	MOVE.B	D0,TUNEFLAG+1
	MOVE.L	BLITBASE+2,A0
	MOVE.L	SCREENON+2,A1
	MOVE.W	#1999,D0
.COPY	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	DBF	D0,.COPY

	CLR.B	FLIPFLAG+1

MAIN	BSR.S	MAINSUB
	TST.W	FINISHEDFLAG
	BNE	DORESULTS
	BSR	KEYREAD
	CMPI.B	#$B9,D7
	BNE.S	.NOPAUSE
.WAIT	TST.W	$468.W
	BNE.S	.WAIT
	MOVE.B	#-1,FLIPFLAG+1
	MOVE.L	SCREENON+2,A0
	MOVE.L	BLITBASE+2,A1
	MOVE.W	#1999,D0
.COPY	MOVE.L	(A0)+,(A1)+
	MOVE.L	(A0)+,(A1)+
	MOVE.L	(A0)+,(A1)+
	MOVE.L	(A0)+,(A1)+
	DBF	D0,.COPY
.WAITPAUSE	BTST	#4,JOYSTICK+1
	BEQ.S	.PAUSEOFF
	BSR	KEYREAD
	ANDI.W	#$7F,D7
	BEQ.S	.WAITPAUSE
.PAUSEOFF	MOVE.W	#1,$468.W
	CLR.B	FLIPFLAG+1
.NOPAUSE	BSR	racegame
	BRA.S	MAIN

*	ROUTINE TO PRINT PLAN VIEW

MAINSUB	TST.W	$468.W
	BNE.S	MAINSUB

	MOVE.B	#-1,FLIPFLAG+1	DISABLE FLIP

BIGX	equ	672
BIGY	equ	400
VIEWX	equ	256
VIEWY	equ	160
OFFSET	equ	16

WAITSTART	LEA	cardataarea,A6
	MOVE.W	carxpos(A6),D0
	SUBI.W	#(BIGX/2),D0
	MOVE.W	D0,D3
	BPL.S	SIGN1
	NEG.W	D0
SIGN1	MOVE.W	#(BIGX/2-OFFSET),D2
	SUB.W	D0,D2
	MULU	D2,D2
	DIVS	#((BIGX/2-OFFSET)*(BIGX/2-OFFSET)/(BIGX/2-VIEWX/2)),D2
	MOVE.W	#(BIGX/2-VIEWX/2),D0
	SUB.W	D2,D0
	TST.W	D3
	BPL.S	SIGN2
	NEG.W	D0
SIGN2	ADDI.W	#(BIGX/2),D0
	SUBI.W	#(VIEWX/2),D0
	BPL.S	.OK1
	MOVEQ	#0,D0
	BRA.S	.OK
.OK1	CMPI.W	#416,D0
	BCS.S	.OK
	MOVE.W	#415,D0
.OK	MOVE.W	D0,D1
	ANDI.W	#$FFF0,D0
	ANDI.W	#$F,D1
	LEA	ALLROTATIONS,A0
	ADD.B	(A0,D1.W),D0
	MOVE.W	D0,SCREENX+2

	MOVE.W	carypos(A6),D1
	SUBI.W	#(BIGY/2),D1
	MOVE.W	D1,D3
	BPL.S	SIGN3
	NEG.W	D1
SIGN3	MOVE.W	#(BIGY/2-OFFSET),D2
	SUB.W	D1,D2
	MULU	D2,D2
	DIVS	#((BIGY/2-OFFSET)*(BIGY/2-OFFSET)/(BIGY/2-VIEWY/2)),D2
	MOVE.W	#(BIGY/2-VIEWY/2),D1
	SUB.W	D2,D1
	TST.W	D3
	BPL.S	SIGN4
	NEG.W	D1
SIGN4	ADDI.W	#(BIGY/2),D1
	SUBI.W	#(VIEWY/2),D1
	BPL.S	.OK1
	MOVEQ	#0,D1
	BRA.S	.OK
.OK1	CMPI.W	#241,D1
	BCS.S	.OK
	MOVE.W	#240,D1
.OK	MOVE.W	D1,SCREENY+2

	MOVE.L	BLITBASE+2,A0	FLIPSCREEN BASE
	ADDA.W	#16,A0	DRAWING POSITION
	LEA	PLANMAP,A1	MAP DATA
	MOVE.W	D1,D6	COPY Y-CO
	ANDI.W	#$FFF0,D1	BLOCKS DOWN*16
	MOVE.W	D1,D2
	LSR.W	#2,D2	*4
	MOVE.W	D1,D3	COPY
	LSL.W	#2,D1	BLOCKS DOWN*64
	ADD.W	D1,D3	=BLOCKS DOWN*80
	ADD.W	D2,D3	*84
	MOVE.W	D0,D1	COPY X-CO
	ANDI.W	#$FFF0,D0	BLOCKS ACROSS*16
	LSR.W	#3,D0	BLOCKS ACROSS*2
	ADD.W	D0,D3	MAP OFFSET
	ADDA.W	D3,A1	BASE MAP ADDRESS
	ANDI.W	#15,D1	PIXELS ACROSS
	LSL.W	#2,D1	*4 FOR LONGWORD ADDRESS
	LEA	BLOCKTABLE,A2	POINTERS TO SHIFTED BASES
	MOVE.L	0(A2,D1.W),A2	BASE ADDRESS FOR THIS PIXEL
	MOVE.L	A2,-(A7)
	MOVEQ	#15,D0	MAX DBF FOR HEIGHT
	AND.W	D0,D6	PIXELS DOWN
	MOVE.W	D6,D7	COPY FOR OFFSET DOWN FIRST ROW
	LSL.W	#4,D7	*16 (BYTES PER ROW OF BLOCK)
	ADDA.W	D7,A2	OFFSET DOWN BLOCK BASES
	SUB.W	D6,D0	CONVERT TO DBF FOR FIRST ROW
	SUBQ	#1,D6	GET DBF FOR LAST ROW
	MOVE.B	D6,LASTCOUNT+1
	BSR	FIRSTLAST	PRINT FIRST ROW
	MOVE.L	(A7)+,A2
	SUBA.W	#120,A0	NEXT SCREEN ROW
	ADDA.W	#50,A1	NEXT MAP ROW
	MOVE.W	#136,D5
	MOVE.W	#144,D6
	MOVE.W	#152,D7
	MOVEQ	#8,D0	8 WHOLE ROWS

ROWLOOP	MOVEM.W	(A1)+,D1-D4
	LEA	(A2,D1.W),A3
	LEA	(A2,D2.W),A4
	LEA	(A2,D3.W),A5
	LEA	(A2,D4.W),A6

BLOCK1	REPT	15

	MOVEM.L	(A4)+,D1-D4	ALL 2ND BLOCK
	ADDQ	#8,A3	SKIP 1ST BLOCK REMAINS
	OR.L	(A3)+,D1	1ST BLOCK CARRY + 2ND BLOCK REMAINS
	OR.L	(A3)+,D2	2ND 2 PLANES
	OR.L	(A5)+,D3	2ND BLOCK CARRY + 3RD BLOCK REMAINS
	OR.L	(A5)+,D4	2ND 2 PLANES
	MOVE.L	D1,(A0)+	1ST 2 BLOCKS TO SCREEN
	MOVE.L	D2,(A0)+	1ST 2 BLOCKS TO SCREEN
	MOVE.L	D3,(A0)+	1ST 2 BLOCKS TO SCREEN
	MOVE.L	D4,(A0)+	1ST 2 BLOCKS TO SCREEN
	MOVEM.L	(A6)+,D1-D4	ALL 4TH BLOCK
	OR.L	(A5)+,D1	3RD BLOCK CARRY +4TH BLOCK REMAINS
	OR.L	(A5)+,D2	2ND 2 PLANES
	MOVEM.L	D1-D4,(A0)	2ND 2 BLOCKS TO SCREEN
	ADDA.W	D6,A0

	ENDR

	MOVEM.L	(A4)+,D1-D4	ALL 2ND BLOCK
	ADDQ	#8,A3	SKIP 1ST BLOCK REMAINS
	OR.L	(A3)+,D1	1ST BLOCK CARRY + 2ND BLOCK REMAINS
	OR.L	(A3)+,D2	2ND 2 PLANES
	OR.L	(A5)+,D3	2ND BLOCK CARRY + 3RD BLOCK REMAINS
	OR.L	(A5)+,D4	2ND 2 PLANES
	MOVE.L	D1,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D2,(A0)+	2ND 2 PLANES
	MOVE.L	D3,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D4,(A0)+	2ND 2 PLANES
	MOVEM.L	(A6)+,D1-D4	ALL 4TH BLOCK
	OR.L	(A5)+,D1	3RD BLOCK CARRY +4TH BLOCK REMAINS
	OR.L	(A5)+,D2	2ND 2 PLANES
	MOVEM.L	D1-D4,(A0)	ALL TO SCREEN

	SUBA.W	#160*15-8,A0
	MOVEM.W	(A1)+,D1-D4
	LEA	(A2,D1.W),A3
	LEA	(A2,D2.W),A4
	LEA	(A2,D3.W),A5
	LEA	(A2,D4.W),A6

BLOCK2	REPT	15

	MOVE.L	(A3)+,D1
	MOVE.L	(A3)+,D2
	OR.L	D1,(A0)+
	OR.L	D2,(A0)+
	MOVEM.L	(A4)+,D1-D4	ALL 2ND BLOCK
	OR.L	(A3)+,D1	1ST BLOCK CARRY + 2ND BLOCK REMAINS
	OR.L	(A3)+,D2	2ND 2 PLANES
	OR.L	(A5)+,D3	2ND BLOCK CARRY + 3RD BLOCK REMAINS
	OR.L	(A5)+,D4	2ND 2 PLANES
	MOVE.L	D1,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D2,(A0)+	2ND 2 PLANES
	MOVE.L	D3,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D4,(A0)+	2ND 2 PLANES
	MOVEM.L	(A6)+,D1-D4	ALL 4TH BLOCK
	OR.L	(A5)+,D1	3RD BLOCK CARRY +4TH BLOCK REMAINS
	OR.L	(A5)+,D2	2ND 2 PLANES
	MOVEM.L	D1-D4,(A0)	ALL TO SCREEN
	ADDA.W	D5,A0

	ENDR

	MOVE.L	(A3)+,D1
	MOVE.L	(A3)+,D2
	OR.L	D1,(A0)+
	OR.L	D2,(A0)+
	MOVEM.L	(A4)+,D1-D4	ALL 2ND BLOCK
	OR.L	(A3)+,D1	1ST BLOCK CARRY + 2ND BLOCK REMAINS
	OR.L	(A3)+,D2	2ND 2 PLANES
	OR.L	(A5)+,D3	2ND BLOCK CARRY + 3RD BLOCK REMAINS
	OR.L	(A5)+,D4	2ND 2 PLANES
	MOVE.L	D1,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D2,(A0)+	2ND 2 PLANES
	MOVE.L	D3,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D4,(A0)+	2ND 2 PLANES
	MOVEM.L	(A6)+,D1-D4	ALL 4TH BLOCK
	OR.L	(A5)+,D1	3RD BLOCK CARRY +4TH BLOCK REMAINS
	OR.L	(A5)+,D2	2ND 2 PLANES
	MOVEM.L	D1-D4,(A0)	ALL TO SCREEN

	SUBA.W	#160*15-8,A0
	MOVEM.W	(A1)+,D1-D4
	LEA	(A2,D1.W),A3
	LEA	(A2,D2.W),A4
	LEA	(A2,D3.W),A5
	LEA	(A2,D4.W),A6

BLOCK3	REPT	15

	MOVE.L	(A3)+,D1
	MOVE.L	(A3)+,D2
	OR.L	D1,(A0)+
	OR.L	D2,(A0)+
	MOVEM.L	(A4)+,D1-D4	ALL 2ND BLOCK
	OR.L	(A3)+,D1	1ST BLOCK CARRY + 2ND BLOCK REMAINS
	OR.L	(A3)+,D2	2ND 2 PLANES
	OR.L	(A5)+,D3	2ND BLOCK CARRY + 3RD BLOCK REMAINS
	OR.L	(A5)+,D4	2ND 2 PLANES
	MOVE.L	D1,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D2,(A0)+	2ND 2 PLANES
	MOVE.L	D3,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D4,(A0)+	2ND 2 PLANES
	MOVEM.L	(A6)+,D1-D4	ALL 4TH BLOCK
	OR.L	(A5)+,D1	3RD BLOCK CARRY +4TH BLOCK REMAINS
	OR.L	(A5)+,D2	2ND 2 PLANES
	MOVEM.L	D1-D4,(A0)	ALL TO SCREEN
	ADDA.W	D5,A0

	ENDR

	MOVE.L	(A3)+,D1
	MOVE.L	(A3)+,D2
	OR.L	D1,(A0)+
	OR.L	D2,(A0)+
	MOVEM.L	(A4)+,D1-D4	ALL 2ND BLOCK
	OR.L	(A3)+,D1	1ST BLOCK CARRY + 2ND BLOCK REMAINS
	OR.L	(A3)+,D2	2ND 2 PLANES
	OR.L	(A5)+,D3	2ND BLOCK CARRY + 3RD BLOCK REMAINS
	OR.L	(A5)+,D4	2ND 2 PLANES
	MOVE.L	D1,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D2,(A0)+	2ND 2 PLANES
	MOVE.L	D3,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D4,(A0)+	2ND 2 PLANES
	MOVEM.L	(A6)+,D1-D4	ALL 4TH BLOCK
	OR.L	(A5)+,D1	3RD BLOCK CARRY +4TH BLOCK REMAINS
	OR.L	(A5)+,D2	2ND 2 PLANES
	MOVEM.L	D1-D4,(A0)	ALL TO SCREEN

	SUBA.W	#160*15-8,A0
	MOVEM.W	(A1)+,D1-D4
	LEA	(A2,D1.W),A3
	LEA	(A2,D2.W),A4
	LEA	(A2,D3.W),A5
	LEA	(A2,D4.W),A6

BLOCK4	REPT	15

	MOVE.L	(A3)+,D1
	MOVE.L	(A3)+,D2
	OR.L	D1,(A0)+
	OR.L	D2,(A0)+
	MOVEM.L	(A4)+,D1-D4	ALL 2ND BLOCK
	OR.L	(A3)+,D1	1ST BLOCK CARRY + 2ND BLOCK REMAINS
	OR.L	(A3)+,D2	2ND 2 PLANES
	OR.L	(A5)+,D3	2ND BLOCK CARRY + 3RD BLOCK REMAINS
	OR.L	(A5)+,D4	2ND 2 PLANES
	MOVE.L	D1,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D2,(A0)+	2ND 2 PLANES
	MOVE.L	D3,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D4,(A0)+	2ND 2 PLANES
	MOVEM.L	(A6)+,D1-D4	ALL 4TH BLOCK
	OR.L	(A5)+,D1	3RD BLOCK CARRY +4TH BLOCK REMAINS
	OR.L	(A5)+,D2	2ND 2 PLANES
	MOVEM.L	D1-D4,(A0)	ALL TO SCREEN
	ADDA.W	D5,A0

	ENDR

	MOVE.L	(A3)+,D1
	MOVE.L	(A3)+,D2
	OR.L	D1,(A0)+
	OR.L	D2,(A0)+
	MOVEM.L	(A4)+,D1-D4	ALL 2ND BLOCK
	OR.L	(A3)+,D1	1ST BLOCK CARRY + 2ND BLOCK REMAINS
	OR.L	(A3)+,D2	2ND 2 PLANES
	OR.L	(A5)+,D3	2ND BLOCK CARRY + 3RD BLOCK REMAINS
	OR.L	(A5)+,D4	2ND 2 PLANES
	MOVE.L	D1,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D2,(A0)+	2ND 2 PLANES
	MOVE.L	D3,(A0)+	1ST 2 PLANES TO SCREEN
	MOVE.L	D4,(A0)+	2ND 2 PLANES
	MOVEM.L	(A6)+,D1-D4	ALL 4TH BLOCK
	OR.L	(A5)+,D1	3RD BLOCK CARRY +4TH BLOCK REMAINS
	OR.L	(A5)+,D2	2ND 2 PLANES
	MOVEM.L	D1-D4,(A0)	ALL TO SCREEN

	SUBA.W	#160*15-8,A0
	MOVE.W	(A1)+,D1
	LEA	(A2,D1.W),A3

BLOCK5	REPT	15

	MOVE.L	(A3)+,D1
	MOVE.L	(A3)+,D2
	ADDQ	#8,A3
	OR.L	D1,(A0)+
	OR.L	D2,(A0)+
	ADDA.W	D7,A0

	ENDR

	MOVE.L	(A3)+,D1
	MOVE.L	(A3)+,D2
	OR.L	D1,(A0)+
	OR.L	D2,(A0)+

	ADDA.W	#32,A0	NEXT SCREEN ROW
	ADDA.W	#50,A1	NEXT MAP ROW

	DBF	D0,ROWLOOP

LASTCOUNT	MOVEQ	#0,D0
	BMI.S	DRAWCARS
	BSR	FIRSTLAST

DRAWCARS	LEA	cardataarea,A6
	MOVE.W	numcars,CARCOUNT
	LEA	CAR0,A1
	LEA	CARMASK0,A2
	BRA.S	YOURCAR
NEXTCAR	ADDA.W	#48,A6
	SUBQ.W	#1,CARCOUNT
	BEQ	DONECARS
	MOVE.W	cartype(A6),D0	CAR TYPE
	LSL.W	#3,D0
	LEA	CARPOINTERS,A0
	MOVE.L	0(A0,D0.W),A1	NB.ADD POINTERS TO
	MOVE.L	4(A0,D0.W),A2	HEIGHT TABLES IF REQUIRED
YOURCAR	MOVE.W	carxpos(A6),D0	CAR X
	SUBI.W	#16,D0
	MOVE.W	carypos(A6),D1	CAR Y
	SUBI.W	#13,D1
	MOVE.W	cardirec(A6),D2	ANIM NO.
	LSR.W	#1,D2
	ADDQ.W	#6,D2
	CMP.W	#24,D2
	BCS	.SKIP
	SUB.W	#24,D2
.SKIP	MOVE.W	carheight(A6),D3    BRIDGE CHECK FLAG
	MOVE.L	#-1,LEFTMASK
	MOVE.L	#-1,MIDMASK
	MOVE.L	#-1,RIGHTMASK
SCREENX	SUB.W	#0,D0
	MOVE.W	D0,D7
	BPL.S	CHECKRIGHT
	NOT.L	LEFTMASK
	CMPI.W	#-32,D7
	BLT.S	NEXTCAR
	CMPI.W	#-16,D7
	BGE.S	SCREENY
	NOT.L	MIDMASK
	BRA.S	SCREENY
CHECKRIGHT	CMPI.W	#224,D7
	BLT.S	SCREENY
	NOT.L	RIGHTMASK
	CMPI.W	#256,D7
	BGE	NEXTCAR
	CMPI.W	#240,D7
	BLT.S	SCREENY
	NOT.L	MIDMASK

* NB. FOR VARIABLE HEIGHT HAVE HEIGHT IN D4 HERE AND REMOVE THE MOVEQ #26,D4

SCREENY	SUB.W	#0,D1	Y POS
	BPL.S	CHECKBOTTOM
	MOVEQ	#26,D4
	ADD.W	D1,D4	REDUCE HEIGHT TO PRINT
	BLE	NEXTCAR
	MOVE.W	D1,D5
	NEG.W	D5	LINES DOWN SOURCE
	MOVEQ	#0,D1	TOP OF SCREEN
	BRA.S	DONECARY
CHECKBOTTOM	MOVE.W	#160,D4
	SUB.W	D1,D4
	BLE	NEXTCAR
	MOVEQ	#0,D5	TOP OF SOURCE
	CMPI.W	#26,D4
	BLE.S	DONECARY
	MOVEQ	#26,D4

*	D0=XPOS, D1=YPOS, D2=ANIM NO., D3=BRIDGE FLAG
*	D4=HEIGHT TO PRINT, D5=LINES DOWN SOURCE
*	A1=GRAPHIC BASE, A2=MASK BASE
*	ROUTINE FOR BRIDGE CUT GOES HERE
*	D6=BRIDGE X OR Y + FLAG FOR X/Y (- FOR X)

DONECARY	TST.W	D3
	BNE	BRIDGECUT
BRIDGEREAD	LEA	0,A3
.NEXTBRIDGE	MOVE.W	(A3)+,D7
	BEQ	BRIDGECUT
	MOVE.W	(A3)+,D6
	BMI.S	.CUTACROSS

*	CUT VERTICALLY

	TST.W	D7
	BMI.S	.NOCHECKX
	SUB.W	SCREENX+2,D7
	SUB.W	D0,D7
	CMPI.W	#32,D7
	BGE.S	.NEXTBRIDGE
	ADDI.W	#96,D7
	BLE.S	.NEXTBRIDGE
.NOCHECKX	SUB.W	SCREENY+2,D6
	SUB.W	D1,D6
	BLE.S	.NOTABOVE
	CMP.W	D4,D6
	BGE.S	.NEXTBRIDGE
	MOVE.W	D6,D4
	BRA.S	.NEXTBRIDGE
.NOTABOVE	ADDI.W	#80,D6
	BLE.S	.NEXTBRIDGE
	CMP.W	D4,D6
	BGE	NEXTCAR
	SUB.W	D6,D4
	ADD.W	D6,D1
	ADD.W	D6,D5
	BRA.S	.NEXTBRIDGE

*	CUT HORIZONTALLY

.CUTACROSS	TST.W	D7
	BMI.S	.NOCHECKY
	SUB.W	SCREENY+2,D7
	SUB.W	D1,D7
	CMP.W	D4,D7
	BGE.S	.NEXTBRIDGE
	ADDI.W	#72,D7
	BLE.S	.NEXTBRIDGE
.NOCHECKY	LEA	MASKS,A0
	NEG.W	D6
	SUB.W	SCREENX+2,D6
	MOVE.W	D6,D7
	ANDI.W	#15,D7
	LSL.W	#2,D7
	MOVE.L	0(A0,D7.W),D7
	ANDI.W	#$FFF0,D6
	SUB.W	D0,D6
	CMPI.W	#-16,D6
	BLE.S	.NOTLEFT
	CMPI.W	#32,D6
	BGE	.NEXTBRIDGE
	AND.L	D7,RIGHTMASK
	CMPI.W	#16,D6
	BGT	.NEXTBRIDGE
	CLR.L	RIGHTMASK
	AND.L	D7,MIDMASK
	TST.W	D6
	BGT	.NEXTBRIDGE
	CLR.L	MIDMASK
	AND.L	D7,LEFTMASK
	BRA	.NEXTBRIDGE
.NOTLEFT	NOT.L	D7
	ADD.W	#96,D6
	BLE	.NEXTBRIDGE
	CMPI.W	#48,D6
	BGE	NEXTCAR
	AND.L	D7,LEFTMASK
	CMPI.W	#16,D6
	BLE	.NEXTBRIDGE
	CLR.L	LEFTMASK
	AND.L	D7,MIDMASK
	CMPI.W	#32,D6
	BLE	.NEXTBRIDGE
	CLR.L	MIDMASK
	AND.L	D7,RIGHTMASK
	BRA	.NEXTBRIDGE

BRIDGECUT	MOVE.W	D4,LINECOUNT	HEIGHT TO PRINT
	MOVE.W	D0,D7	COPY X-CO
	ANDI.W	#$F,D7	REQUIRED ROTATION
	MOVE.W	D7,D3	COPY FOR REQ. ROT
	MOVE.B	D3,REQROT+1	STORE REQUIRED ROTATION
	ANDI.W	#$FFF0,D0	POSITION ACROSS
	ASR.W	#1,D0	/2 GIVES BYTE OFFSET
BLITBASE	MOVE.L	#0,A0	SCREEN BASE
	MULU	#160,D1	LINE OFFSET
	ADD.W	D0,D1	+BYTE OFFSET
	LEA	16(A0,D1.W),A0	+32 PIXELS ACROSS
	MULU	#208,D2	SIZE OF ONE CAR ROTATION
	MOVE.W	D5,D0	COPY LINES DOWN SOURCE FOR SOURCE ROTATION
	LSL.W	#3,D5	LINES DOWN SOURCE*8
	ADD.W	D5,D2	+OFFSET FOR ROTATION
	ADDA.W	D2,A1	SOURCE POSITION
	ADDA.W	D2,A2	MASK POSITION
	LSL.W	#2,D7	*4 FOR LONGWORD
	LEA	MASKS,A3
	MOVE.L	0(A3,D7.W),D1
	MOVE.L	D1,D2
	NOT.L	D2

	LEA	LEFTMASK,A3
	LEA	MIDMASK,A4
	LEA	RIGHTMASK,A5
	MOVE.L	(A3),D7
	NOT.L	D7
	MOVE.L	D7,4(A3)
	MOVE.L	(A4),D7
	NOT.L	D7
	MOVE.L	D7,4(A4)
	MOVE.L	(A5),D7
	NOT.L	D7
	MOVE.L	D7,4(A5)

MIDLINE	ANDI.W	#$F,D0	ROTATION 0-15
	SUB.W	D0,D3	REQUIRED-SOURCE ROTATION
	BMI	MIDREV	IF - THEN CARRY CORRECT FOR ROR OR REMAINS FOR ROL
	CMPI.W	#8,D3	IF 0-8 THEN REMAINS CORRECT FOR ROR
	BHI	MIDBACKL	ELSE CARRY CORRECT FOR ROL

MIDNORMR	SWAP	D0	STORE SOURCE ROTATION IN HIGH WORD
	MOVE.W	D3,D0	ROR 0-8

	MOVE.L	(A2)+,D5	MASK FOR 1ST HALF
	ROR.L	D0,D5	ROTATE
	MOVE.L	D5,D6	COPY FOR CARRY
	SWAP	D6	CORRECT POSITION OF CARRY MASK
	OR.L	D1,D5	SET CARRY BITS FOR REMAINS MASK
	OR.L	D2,D6	SET REMAINS BITS FOR CARRY MASK
	OR.L	4(A3),D5	OR WITH LEFTMASK

	MOVE.L	(A1)+,D3	GET 1ST TWO PLANES
	ROR.L	D0,D3	ROTATE
	MOVE.L	D3,D4	COPY FOR CARRY
	SWAP	D4	CORRECT CARRY POSITION
	AND.L	D1,D4	CARRY BITS ONLY
	AND.L	D2,D3	REMAINS BITS ONLY
	AND.L	(A3),D3	AND WITH LEFTMASK
	AND.L	D5,(A0)	CLEAR HOLE FOR REMAINS
	OR.L	D3,(A0)+	1ST TWO PLANES REMAINS DONE
	AND.W	D5,(A0)	CLEAR 3RD PLANE
	ADDQ	#4,A0	SKIP SHADOW PLANE

	MOVE.L	(A2)+,D5	MASK FOR 2ND HALF
	ROR.L	D0,D5	ROTATE
	MOVE.L	D5,D7	COPY FOR CARRY
	SWAP	D7	CORRECT POSIION OF CARRY MASK
	OR.L	D1,D5	SET CARRY BITS FOR REMAINS MASK
	OR.L	D2,D7	SET REMAINS BITS FOR CARRY MASK
	AND.L	D6,D5	CLEAR LAST CARRY BITS
	OR.L	4(A4),D5	OR WITH MIDMASK

	MOVE.L	(A1)+,D3
	ROR.L	D0,D3
	MOVE.L	D3,D6
	SWAP	D6
	AND.L	D1,D6
	AND.L	D2,D3
	OR.L	D4,D3
	AND.L	(A4),D3
	AND.L	D5,(A0)
	OR.L	D3,(A0)+
	AND.W	D5,(A0)
	ADDQ	#4,A0

	AND.L	(A5),D6
	OR.L	4(A5),D7
	AND.L	D7,(A0)
	OR.L	D6,(A0)+
	AND.W	D7,(A0)

	BRA	NEXTMIDLINE

MIDBACKL	SWAP	D0
	MOVE.W	#16,D0
	SUB.W	D3,D0	ROL 1-7

	MOVE.L	(A2)+,D5	MASK FOR 1ST HALF
	ROL.L	D0,D5	ROTATE
	MOVE.L	D5,D6	COPY FOR CARRY
	SWAP	D5	CORRECT POSITION OF REMAINS MASK
	OR.L	D1,D5	SET CARRY BITS FOR REMAINS MASK
	OR.L	D2,D6	SET REMAINS BITS FOR CARRY MASK
	OR.L	4(A3),D5

	MOVE.L	(A1)+,D3	GET 1ST TWO PLANES
	ROL.L	D0,D3	ROTATE
	MOVE.L	D3,D4	COPY FOR CARRY
	SWAP	D3	CORRECT POSITION
	AND.L	D1,D4	CARRY BITS ONLY
	AND.L	D2,D3	REMAINS BITS ONLY
	AND.L	(A3),D3	AND WITH LEFTMASK
	AND.L	D5,(A0)	CLEAR HOLE FOR REMAINS
	OR.L	D3,(A0)+	1ST TWO PLANES REMAINS DONE
	AND.W	D5,(A0)	CLEAR 3RD PLANE
	ADDQ	#4,A0	SKIP SHADOW PLANE

	MOVE.L	(A2)+,D5	MASK FOR 2ND HALF
	ROL.L	D0,D5	ROTATE
	MOVE.L	D5,D7	COPY FOR CARRY
	SWAP	D5	CORRECT POSIION OF REMAINS MASK
	OR.L	D1,D5	SET CARRY BITS FOR REMAINS MASK
	OR.L	D2,D7	SET REMAINS BITS FOR CARRY MASK
	AND.L	D6,D5
	OR.L	4(A4),D5

	MOVE.L	(A1)+,D3
	ROL.L	D0,D3
	MOVE.L	D3,D6
	SWAP	D3
	AND.L	D1,D6
	AND.L	D2,D3
	OR.L	D4,D3
	AND.L	(A4),D3
	AND.L	D5,(A0)
	OR.L	D3,(A0)+
	AND.W	D5,(A0)
	ADDQ	#4,A0

	AND.L	(A5),D6
	OR.L	4(A5),D7
	AND.L	D7,(A0)
	OR.L	D6,(A0)+
	AND.W	D7,(A0)

	BRA	NEXTMIDLINE

MIDREV	CMPI.W	#-7,D3
	BLT	MIDBACKR

MIDNORML	SWAP	D0
	MOVE.W	D3,D0
	NEG.W	D0

	MOVE.L	(A2)+,D5	MASK FOR 1ST HALF
	ROL.L	D0,D5	ROTATE
	MOVE.L	D5,D6	COPY FOR CARRY
	SWAP	D6	CORRECT POSITION OF CARRY MASK
	OR.L	D1,D5	SET CARRY BITS FOR REMAINS MASK
	OR.L	D2,D6	SET REMAINS BITS FOR CARRY MASK
	OR.L	4(A3),D5

	MOVE.L	(A1)+,D3	GET 1ST TWO PLANES
	ROL.L	D0,D3	ROTATE
	MOVE.L	D3,D4	COPY FOR CARRY
	SWAP	D4	CORRECT POSITION
	AND.L	D1,D4	CARRY BITS ONLY
	AND.L	D2,D3	REMAINS BITS ONLY
	AND.L	(A3),D3
	AND.L	D5,(A0)	CLEAR HOLE FOR REMAINS
	OR.L	D3,(A0)+	1ST TWO PLANES REMAINS DONE
	AND.W	D5,(A0)	CLEAR 3RD PLANE
	ADDQ	#4,A0	SKIP SHADOW PLANE

	MOVE.L	(A2)+,D5	MASK FOR 2ND HALF
	ROL.L	D0,D5	ROTATE
	MOVE.L	D5,D7	COPY FOR CARRY
	SWAP	D7	CORRECT POSIION OF CARRY MASK
	OR.L	D1,D5	SET CARRY BITS FOR REMAINS MASK
	OR.L	D2,D7	SET REMAINS BITS FOR CARRY MASK
	AND.L	D6,D5
	OR.L	4(A4),D5

	MOVE.L	(A1)+,D3
	ROL.L	D0,D3
	MOVE.L	D3,D6
	SWAP	D6
	AND.L	D1,D6
	AND.L	D2,D3
	OR.L	D4,D3
	AND.L	(A4),D3
	AND.L	D5,(A0)
	OR.L	D3,(A0)+
	AND.W	D5,(A0)
	ADDQ	#4,A0

	AND.L	(A5),D6
	OR.L	4(A5),D7
	AND.L	D7,(A0)
	OR.L	D6,(A0)+
	AND.W	D7,(A0)

	BRA	NEXTMIDLINE

MIDBACKR	SWAP	D0
	MOVE.W	#16,D0
	ADD.W	D3,D0

	MOVE.L	(A2)+,D5	MASK FOR 1ST HALF
	ROR.L	D0,D5	ROTATE
	MOVE.L	D5,D6	COPY FOR CARRY
	SWAP	D5	CORRECT POSITION OF REMAINS MASK
	OR.L	D1,D5	SET CARRY BITS FOR REMAINS MASK
	OR.L	D2,D6	SET REMAINS BITS FOR CARRY MASK
	OR.L	4(A3),D5

	MOVE.L	(A1)+,D3	GET 1ST TWO PLANES
	ROR.L	D0,D3	ROTATE
	MOVE.L	D3,D4	COPY FOR CARRY
	SWAP	D3	CORRECT POSITION
	AND.L	D1,D4	CARRY BITS ONLY
	AND.L	D2,D3	REMAINS BITS ONLY
	AND.L	(A3),D3
	AND.L	D5,(A0)	CLEAR HOLE FOR REMAINS
	OR.L	D3,(A0)+	1ST TWO PLANES REMAINS DONE
	AND.W	D5,(A0)	CLEAR HOLE FOR REMAINS
	ADDQ	#4,A0

	MOVE.L	(A2)+,D5	MASK FOR 2ND HALF
	ROR.L	D0,D5	ROTATE
	MOVE.L	D5,D7	COPY FOR CARRY
	SWAP	D5	CORRECT POSIION OF REMAINS MASK
	OR.L	D1,D5	SET CARRY BITS FOR REMAINS MASK
	OR.L	D2,D7	SET REMAINS BITS FOR CARRY MASK
	AND.L	D6,D5
	OR.L	4(A4),D5

	MOVE.L	(A1)+,D3
	ROR.L	D0,D3
	MOVE.L	D3,D6
	SWAP	D3
	AND.L	D1,D6
	AND.L	D2,D3
	OR.L	D4,D3
	AND.L	(A4),D3
	AND.L	D5,(A0)
	OR.L	D3,(A0)+
	AND.W	D5,(A0)
	ADDQ	#4,A0

	AND.L	(A5),D6
	OR.L	4(A5),D7
	AND.L	D7,(A0)
	OR.L	D6,(A0)+
	AND.W	D7,(A0)

NEXTMIDLINE	ADDA.W	#140,A0	NEXT DEST. LINE
	SWAP	D0
	ADDQ.W	#1,D0
REQROT	MOVEQ	#0,D3
	SUBQ.W	#1,LINECOUNT
	BNE	MIDLINE
	BRA	NEXTCAR

DONECARS	CLR.B	FLIPFLAG+1	ENABLE FLIP
	LEA	extradefs,A6
	MOVE.W	#2,CARCOUNT
.CHECKMISSILE	MOVE.L	(A6)+,D1
	BMI	.NEXTMISSILE
	MOVE.W	4(A6),D0
	SUBQ.W	#4,D0
	MOVE.W	12(A6),D1
	SUBQ.W	#4,D1
	MOVE.W	46(A6),D3
	MOVE.L	#-1,LEFTMASK
	MOVE.L	#-1,RIGHTMASK
	SUB.W	SCREENX+2,D0
	BPL.S	.CHECKRIGHT
	NOT.L	LEFTMASK
	CMPI.W	#-8,D0
	BLE	.NEXTMISSILE
	BRA.S	.CHECKY
.CHECKRIGHT	CMPI.W	#248,D0
	BLE.S	.CHECKY
	NOT.L	RIGHTMASK
	CMPI.W	#256,D0
	BGE	.NEXTMISSILE

.CHECKY	SUB.W	SCREENY+2,D1	Y POS
	BPL.S	.CHECKBOTTOM
	MOVEQ	#8,D4
	ADD.W	D1,D4	REDUCE HEIGHT TO PRINT
	BLE	.NEXTMISSILE
	MOVE.W	D1,D5
	NEG.W	D5	LINES DOWN SOURCE
	MOVEQ	#0,D1	TOP OF SCREEN
	BRA.S	.DONEMISSILEY
.CHECKBOTTOM	MOVE.W	#160,D4
	SUB.W	D1,D4
	BLE	.NEXTMISSILE
	MOVEQ	#0,D5	TOP OF SOURCE
	CMPI.W	#8,D4
	BLE.S	.DONEMISSILEY
	MOVEQ	#8,D4

*	D0=XPOS, D1=YPOS, D2=ANIM NO., D3=BRIDGE FLAG
*	D4=HEIGHT TO PRINT, D5=LINES DOWN SOURCE
*	A1=GRAPHIC BASE, A2=MASK BASE
*	ROUTINE FOR BRIDGE CUT GOES HERE
*	D6=BRIDGE X OR Y + FLAG FOR X/Y (- FOR X)

.DONEMISSILEY	TST.W	D3
	BNE	.BRIDGECUT
	MOVE.L	BRIDGEREAD+2,A3
.NEXTBRIDGE	MOVE.W	(A3)+,D7
	BEQ	.BRIDGECUT
	MOVE.W	(A3)+,D6
	BMI.S	.CUTACROSS

*	CUT VERTICALLY

	TST.W	D7
	BMI.S	.NOCHECKX
	SUB.W	SCREENX+2,D7
	SUB.W	D0,D7
	CMPI.W	#16,D7
	BGE.S	.NEXTBRIDGE
	ADDI.W	#96,D7
	BLE.S	.NEXTBRIDGE
.NOCHECKX	SUB.W	SCREENY+2,D6
	SUB.W	D1,D6
	BLE.S	.NOTABOVE
	CMP.W	D4,D6
	BGE.S	.NEXTBRIDGE
	MOVE.W	D6,D4
	BRA.S	.NEXTBRIDGE
.NOTABOVE	ADDI.W	#80,D6
	BLE.S	.NEXTBRIDGE
	CMP.W	D4,D6
	BGE	.NEXTMISSILE
	SUB.W	D6,D4
	ADD.W	D6,D1
	ADD.W	D6,D5
	BRA.S	.NEXTBRIDGE

*	CUT HORIZONTALLY

.CUTACROSS	TST.W	D7
	BMI.S	.NOCHECKY
	SUB.W	SCREENY+2,D7
	SUB.W	D1,D7
	CMP.W	D4,D7
	BGE.S	.NEXTBRIDGE
	ADDI.W	#72,D7
	BLE.S	.NEXTBRIDGE
.NOCHECKY	LEA	MASKS,A0
	NEG.W	D6
	SUB.W	SCREENX+2,D6
	MOVE.W	D6,D7
	ANDI.W	#15,D7
	LSL.W	#2,D7
	MOVE.L	0(A0,D7.W),D7
	ANDI.W	#$FFF0,D6
	SUB.W	D0,D6
	CMPI.W	#-16,D6
	BLE.S	.NOTLEFT
	CMPI.W	#8,D6
	BGE	.NEXTBRIDGE
	AND.L	D7,RIGHTMASK
	TST.W	D6
	BGT	.NEXTBRIDGE
	CLR.L	RIGHTMASK
	AND.L	D7,LEFTMASK
	BRA	.NEXTBRIDGE
.NOTLEFT	NOT.L	D7
	ADD.W	#96,D6
	BLE	.NEXTBRIDGE
	CMPI.W	#24,D6
	BGE	.NEXTMISSILE
	AND.L	D7,LEFTMASK
	CMPI.W	#16,D6
	BLT	.NEXTBRIDGE
	CLR.L	LEFTMASK
	AND.L	D7,RIGHTMASK
	BRA	.NEXTBRIDGE

.BRIDGECUT	MOVE.W	D0,D7
	ANDI.W	#15,D7
	LSL.W	#6,D7
	MOVE.W	D7,D6
	ADD.W	D7,D7
	LSL.W	#3,D5
	ADD.W	D5,D6
	ADD.W	D5,D5
	ADD.W	D5,D6
	ADD.W	D6,D7
	LEA	MISSILE,A0
	ADDA.W	D7,A0
	ANDI.W	#$FFF0,D0
	ASR.W	#1,D0
	MULU	#160,D1
	ADD.W	D0,D1
	MOVE.L	BLITBASE+2,A1
	LEA	16(A1,D1.W),A1
	MOVE.L	LEFTMASK,D0
	MOVE.L	D0,D1
	NOT.L	D1
	MOVE.L	RIGHTMASK,D2
	MOVE.L	D2,D3
	NOT.L	D3
	SUBQ.W	#1,D4

.DOMISSILE	MOVE.L	(A0)+,D5
	OR.L	D1,D5
	AND.L	D5,(A1)
	MOVE.L	(A0)+,D6
	AND.L	D0,D6
	OR.L	D6,(A1)+
	AND.L	D5,(A1)
	MOVE.L	(A0)+,D6
	AND.L	D0,D6
	OR.L	D6,(A1)+

	MOVE.L	(A0)+,D5
	OR.L	D3,D5
	AND.L	D5,(A1)
	MOVE.L	(A0)+,D6
	AND.L	D2,D6
	OR.L	D6,(A1)+
	AND.L	D5,(A1)
	MOVE.L	(A0)+,D6
	AND.L	D2,D6
	OR.L	D6,(A1)+

	ADDA.W	#144,A1

	DBF	D4,.DOMISSILE

.NEXTMISSILE	SUBQ.W	#1,CARCOUNT
	BNE	.CHECKMISSILE

	LEA	cardataarea,A2
	MOVE.W	carspd(A2),D0
	MOVE.L	BLITBASE+2,A0
	ADDA.W	#176*160+16,A0
	LEA	SPEEDLEVEL,A1
	MOVE.W	D0,D1
	ADD.W	D0,D0
	ADD.W	D0,D0
	ADD.W	D1,D0
	LSR.W	#6,D0
	ANDI.W	#$FFF8,D0
	MOVE.W	D0,D1
	ADD.W	D1,D0
	ADD.W	D1,D0
	ADDA.W	D0,A1
	MOVE.L	(A1)+,D0
	MOVE.L	(A1)+,D1
	MOVE.L	(A1)+,D2
	MOVE.L	(A1)+,D3
	MOVE.L	(A1)+,D4
	MOVE.L	(A1)+,D5
.SPEED	REPT	4
	MOVE.L	D0,(A0)+
	MOVE.L	D1,(A0)+
	MOVE.L	D2,(A0)+
	MOVE.L	D3,(A0)+
	MOVE.L	D4,(A0)+
	MOVE.L	D5,(A0)+
	ADDA.W	#136,A0
	ENDR
	MOVE.L	D0,(A0)+
	MOVE.L	D1,(A0)+
	MOVE.L	D2,(A0)+
	MOVE.L	D3,(A0)+
	MOVE.L	D4,(A0)+
	MOVE.L	D5,(A0)+
	MOVE.W	RACEPOS,D0
	LEA	GAMETEXT,A0
	MOVE.W	D0,D1
	ADD.W	D0,D0
	ADD.W	D0,D0
	ADD.W	D1,D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	ADDA.W	D0,A0
	MOVE.L	BLITBASE+2,A1
	ADDA.W	#176*160+41,A1
.CHAR1	REPT	4
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDA.W	#153,A1
	ENDR
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	MOVE.W	lapno(A2),D0
	CMP.W	numlaps,D0
	BCS.S	.LAPSOK
	MOVE.W	numlaps,D0
.LAPSOK	LEA	GAMETEXT,A0
	MOVE.W	D0,D1
	ADD.W	D0,D0
	ADD.W	D0,D0
	ADD.W	D1,D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	ADDA.W	D0,A0
	MOVE.L	BLITBASE+2,A1
	ADDA.W	#176*160+57,A1
.CHAR2	REPT	4
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDA.W	#153,A1
	ENDR
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	ADDQ	#1,A1
	MOVE.B	(A0)+,(A1)+
	MOVEQ	#3,D0	
.EBFT	MOVE.L	BLITBASE+2,A2
	ADDA.W	#176*160+80,A2
	BSR.S	EBFT
	DBF	D0,.EBFT
	RTS

*	ROUTINE TO UPDATE EBFT VALUES ON EITHER PANEL
*	A2=SCREEN ADDRESS D0=0-3 (E-T)

EBFT	MOVE.L	A2,A3
	MOVE.W	D0,D1
	ADD.W	D1,D1
	ADD.W	D1,D1
	LEA	whichengpercent,A4
	MOVE.W	0(A4,D1.W),D2
	MOVE.W	D2,D3
	ADD.W	D3,D2
	ADD.W	D3,D2
	LSR.W	#1,D2
	ANDI.W	#$FFF0,D2
	ADD.W	D1,D1
	ADD.W	D1,D1
	ADDA.W	D1,A3
	LEA	EBFTLEVELS,A4
	ADDA.W	D2,A4
	MOVE.L	#$FF00FF,D1
	MOVE.L	(A4)+,D2
	MOVE.L	(A4)+,D3
	MOVE.L	(A4)+,D4
	MOVE.L	(A4)+,D5
.DOEBFT	REPT	4
	MOVE.L	D2,(A3)+
	MOVE.L	D3,(A3)+
	AND.L	D1,(A3)
	OR.L	D4,(A3)+
	AND.L	D1,(A3)
	OR.L	D5,(A3)+
	ADDA.W	#144,A3
	ENDR
	MOVE.L	D2,(A3)+
	MOVE.L	D3,(A3)+
	AND.L	D1,(A3)
	OR.L	D4,(A3)+
	AND.L	D1,(A3)
	OR.L	D5,(A3)+
	RTS


**********************************************
*SHAUNSCODE***********************************
**********************************************
**********************************************
**********************************************
**********************************************
**********************************************
**********************************************
**********************************************
	
*****************************************
*					*
* GAME VALUES/AMOUNTS/COSTS/DAMAGES....	*
*					*
*****************************************

mul84tab	
	dc.w	00*84,01*84,02*84,03*84,04*84,05*84,06*84,07*84,08*84,09*84
	dc.w	10*84,11*84,12*84,13*84,14*84,15*84,16*84,17*84,18*84,19*84
	dc.w	20*84,21*84,22*84,23*84,24*84,25*84,26*84,27*84,28*84,29*84
	dc.w	30*84,31*84,32*84,33*84,34*84,35*84,36*84,37*84,38*84,39*84
	dc.w	40*84,41*84,42*84,43*84,44*84,45*84,46*84,47*84,48*84,49*84

engconsts	
	dc.w	120,130,140,150,160,170,180	; top spds
	dc.w	130,140,150,160,170,180,190	; with hispd
	dc.w	080,087,093,100,107,113,120	; min skid spds

spdlossinfr	equ	020	;in mph

engfracloss	equ	$18	;
bodfracloss	equ	$18	;

tyrskidfracloss	equ	$40	;

skidresist	equ	$00ea	;
skidresistas	equ	$00d6	;
speedmudfrac	equ	$b000	;

brakeamt	equ	75	;
brakeamtretro	equ	125	;

turnamtmul	equ	26	;
turnamtmulps	equ	34	;
turnamtmin	equ	$10000	;

toughval	equ	$0080	;
toughminspin	equ	20	;

maxhitobjspds	dc.w	$500,$500,$400,$400,$100,$100	;oil/wat/mud

fwdoffsetspd	equ	+$e00	;
bwdoffsetspd	equ	-$400	;

compcornerspd	equ	$500	;
compbrakeval	equ	$140	;
compcarpower	equ	$080	;
yourcarpower	equ	$080	;
yourcarpowplus	equ	$090	;

engspddam	equ	$020	;x spd as frac when accelling
fuelperspd	equ	$020	;x spd as frac always 
tyrskiddam	equ	$0a0	;x x+y skidspd as frac  
bodhitdam	equ	$1400	;x x+y spds added as frac
carvcardam	equ	$800	;x x+y spds added as frac

*****************************************
*			*
* DATA FOR EACH OF 27 RACES	*
*			*
*****************************************

allracedata

qnumlaps	dc.b	5,5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7,7,9,9,9,9,9,9,9,9,9	;
qnumofcars	dc.b	4,4,5,5,5,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	;
objectnumbers	dc.b	0,1,2,3,3,4,4,4,5,5,5,6,6,6,7,7,8,8,9,9,10,10,11,11,12,14,20	;

qccartypes0	dc.b	0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,2,1,2,2,2,1,0,0,2,1	;
qccartypes1	dc.b	0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,1,0,1,2,2,2,1,2	;
qccartypes2	dc.b	0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,1,2,2,2,2,2,1,2,2,1	;
qccartypes3	dc.b	9,9,1,1,1,1,1,1,2,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,2,2,2	;
qccartypes4	dc.b	9,9,9,9,9,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2	;
qccartypes5	dc.b	9,9,9,9,9,9,9,9,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2	;
qccartypes6	dc.b	9,9,9,9,9,9,9,9,9,9,9,9,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0	;

qccartopspds0	dc.b	070,075,070,075,080,075,080,085,080,085,090,095,090,095,100,105,110,115,120,125,130,135,140,145,150,155,160
qccartopspds1	dc.b	080,085,080,085,090,085,090,095,090,095,100,105,100,105,110,115,120,125,130,135,140,145,150,155,160,165,170
qccartopspds2	dc.b	090,095,090,095,100,095,100,105,100,105,110,115,110,115,120,125,130,135,140,145,150,155,160,165,170,175,180
qccartopspds3	dc.b	000,000,100,105,110,105,110,115,110,115,120,125,120,125,130,135,140,145,150,155,160,165,170,175,180,185,190
qccartopspds4	dc.b	000,000,000,000,000,115,120,125,120,125,130,135,130,135,140,145,150,155,160,165,170,175,180,185,190,195,200
qccartopspds5	dc.b	000,000,000,000,000,000,000,000,130,135,140,145,140,145,150,155,160,165,170,175,180,185,190,195,200,205,210
qccartopspds6	dc.b	000,000,000,000,000,000,000,000,000,000,000,000,150,155,160,165,170,175,180,185,190,195,200,205,210,215,220

	even

racedata

numlaps	ds.w	1
numcars	ds.w	1
numobjects	ds.w	1

ccartypes	ds.w	7
ccartopspds	ds.w	7

*****************************************
*			*
* VARIABLES		*
*			*
*****************************************

extradefs	ds.l	2
extraxposs	ds.l	2
extrayposs	ds.l	2
extraxspds	ds.l	2
extrayspds	ds.l	2
extracarlocks	ds.l	2
extraheights	ds.l	2

carcollsize	equ	16*16	
misscarsize	equ	12*12	

bounceminspd	equ	$0200	

whichthings	ds.w	8	

whichturbotype	equ	whichthings
whichaerotype	equ	whichthings+2
whichretrotype	equ	whichthings+4
whichaspintype	equ	whichthings+6
whichbouncetype	equ	whichthings+8
whichmissftype	equ	whichthings+10
whichmissbtype	equ	whichthings+12
whichpsteertype	equ	whichthings+14

FINISHEDFLAG	ds.w	1

*****************************************
*			*
* DAVES STUFF IVE INTEGRATED	*
*			*
*****************************************

random	MOVEM.L	D6/D7,-(A7)	;must alter no registers
	BSR	RANDOM
	MOVE.L	D7,D0
	MOVEM.L	(A7)+,D6/D7
	rts

*****************************************
*			*
* CAR START POSITIONS ON COURSES	*
*			*
*****************************************

allcoursedata

qxstarts	dc.b	53,62,71,77,77,68,59,50
qystarts	dc.b	75,75,75,81,89,93,93,93
qdirstarts	dc.b	1,1,1,1,1,1,1,1
qhghtstarts	dc.b	36,36,36,24,24,12,12,12

	dc.b	48,58,66,75,77,77,77,67
	dc.b	67,67,67,67,75,84,93,93
	dc.b	1,1,1,1,1,1,1,1
	dc.b	36,36,36,36,24,24,24,12

	dc.b	40,49,58,67,76,77,77,77
	dc.b	69,69,69,69,69,77,85,93
	dc.b	1,1,1,1,1,1,1,1
	dc.b	36,36,36,36,36,24,24,24

	dc.b	30,39,48,57,66,65,65,65
	dc.b	93,93,93,93,93,84,75,66
	dc.b	1,1,1,1,1,1,1,1
	dc.b	36,36,36,36,36,0,0,0

	dc.b	34,43,52,61,69,77,77,67
	dc.b	67,67,67,67,67,67,57,57
	dc.b	1,1,1,1,1,1,0,0
	dc.b	36,36,36,36,36,36,0,12

	dc.b	30,39,48,57,65,66,66,66
	dc.b	67,67,67,67,67,75,84,93
	dc.b	1,1,1,1,1,1,1,1
	dc.b	36,36,36,36,36,24,24,24

	dc.b	74,78,74,64,64,64,64,64
	dc.b	67,61,56,56,65,74,83,92
	dc.b	1,1,1,0,0,0,0,0
	dc.b	36,0,12,12,24,24,24,24

	dc.b	48,56,65,74,77,77,69,60
	dc.b	93,93,93,93,85,76,69,69
	dc.b	1,1,1,1,1,1,1,1
	dc.b	36,36,36,36,0,0,12,12

	dc.b	18,26,34,42,50,58,66,74
	dc.b	67,67,67,67,67,67,67,67
	dc.b	1,1,1,1,1,1,1,1
	dc.b	36,36,36,36,36,36,36,36

coursedata
xstarts	ds.w	8
ystarts	ds.w	8
heightstarts	ds.w	8
dirstarts	ds.w	8


crappositions

x0to7	dc.w	176,216,256,312,304,272,232,216
x8to16	dc.w	128,64,16,24,40,80,120,160
	dc.w	32,120,200,240,272,312,296,248
	dc.w	184,136,96,136,24,24,104,112
	dc.w	48,16,72,104,192,200,160,112
	dc.w	168,208,224,256,248,280,296,296
	dc.w	16,24,72,72,112,120,120,152
	dc.w	160,176,192,216,216,232,304,304
	dc.w	16,16,24,64,64,72,112,128
	dc.w	136,184,208,216,296,280,256,264
	dc.w	16,56,72,112,120,112,168,168
	dc.w	208,208,216,256,256,272,296,312
	dc.w	312,280,248,256,240,200,208,168
	dc.w	168,120,120,120,96,72,64,24
	dc.w	32,56,88,88,128,136,136,144
	dc.w	144,208,200,264,256,232,304,312
	dc.w	16,24,64,104,96,120,160,168
	dc.w	216,216,216,272,264,296,312,312

y0to7	dc.w	175,175,183,143,111,103,103,111
y8to16	dc.w	103,111,95,47,23,23,31,23
	dc.w	175,183,167,127,175,111,71,79
	dc.w	71,111,71,23,71,127,135,39
	dc.w	191,95,87,127,167,127,79,31
	dc.w	23,79,23,31,135,175,167,87
	dc.w	119,23,79,175,119,183,71,71
	dc.w	175,87,119,71,23,175,111,71
	dc.w	167,111,31,159,23,63,127,175
	dc.w	71,127,79,167,175,135,111,31
	dc.w	63,23,183,183,127,79,23,167
	dc.w	135,71,119,175,79,31,135,63
	dc.w	31,39,23,119,175,175,71,167
	dc.w	111,23,111,151,191,135,23,63
	dc.w	79,87,119,31,23,79,175,135
	dc.w	39,39,79,23,119,175,175,103
	dc.w	175,79,111,167,23,31,111,23
	dc.w	23,47,135,183,23,183,135,23

shad0to7	dc.w	0,0,0,0,0,0,0,0
shad8to16	dc.w	0,0,0,0,0,0,0,0
	dc.w	0,0,0,0,0,0,0,0
	dc.w	0,0,0,0,0,0,1,1
	dc.w	1,0,0,0,0,0,0,0
	dc.w	0,0,0,0,0,0,0,0
	dc.w	0,0,0,0,0,0,0,0
	dc.w	0,1,0,0,0,0,0,0
	dc.w	0,0,0,0,0,0,0,0
	dc.w	0,0,0,0,0,1,0,0
	dc.w	0,0,1,1,0,0,0,0
	dc.w	1,0,0,0,0,1,1,0
	dc.w	0,1,0,0,0,0,0,0
	dc.w	0,0,0,0,1,0,0,0
	dc.w	0,0,0,0,0,0,0,0
	dc.w	1,1,0,0,0,0,0,0
	dc.w	0,0,0,0,0,0,0,0
	dc.w	0,1,1,1,0,1,0,0

oilblocklist
	ds.b	42*25

*****************************************
*			*
* SIN AND COSINE TABLES WITH 24 VALUES	*
*			*
*****************************************

sintab	dc.w	$ff00,$ff0c,$ff25,$ff4b	;dir 0 = str up
	dc.w	$ffa0,$ffd8
costab	dc.w	$0000,$0028
	dc.w	$0060,$00b5,$00db,$00f4
	dc.w	$0100,$00f4,$00db,$00b5
	dc.w	$0060,$0028,$0000,$ffd8
	dc.w	$ffa0,$ff4b,$ff25,$ff0c
	dc.w	$ff00,$ff0c,$ff25,$ff4b
	dc.w	$ffa0,$ffd8

convcartypes
	dc.w	0,0,1,1,2,2,2

*****************************************
*			*
* OFFSETS FOR CORNERS OF CARS	*
*			*
*****************************************

carx1s	ds.w	72
cary1s	ds.w	72
carx2s	ds.w	72
cary2s	ds.w	72
carx3s	ds.w	72
cary3s	ds.w	72
carx4s	ds.w	72
cary4s	ds.w	72
carxsizes	dc.w	6,7,7
carysizes	dc.w	10,11,12
carxstore	ds.w	1
carystore	ds.w	1

yournumtrax	ds.w	1

*****************************************
*			*
* DATA HELD FOR EACH OF 8 CARS	*
*			*
*****************************************

cardataarea	;24 words per car

cartypes	ds.w	1	;0/1/2
carxposs	ds.w	1	;$000-$27f
carxposlos	ds.w	1	;$0000-$ffff
caryposs	ds.w	1	;$000-$18f
caryposlos	ds.w	1	;$0000-$ffff
cardirecs	ds.w	1	;$00-$2f
cargrounds	ds.w	1
carlodirecs	ds.w	1	;$0000-$ffff
carheights	ds.w	1	;0 bot 1 top
carspds	ds.w	1	;$0000-$0fff
caryskidspds	ds.w	1	;$0000-$0fff
carxskidspds	ds.w	1	;$0000-$0fff
carspincounts	ds.w	1	;0 no >0 numleft
carspindirs	ds.w	1	;0 clw 1 acl +$8000 controlled
delcardirecs	ds.w	1	;-$2f-$2f
delcarlodirecs	ds.w	1	;$0000-$ffff
caroutaraces	ds.w	1	;0 no 1 yes
carsavespds	ds.w	1	;$000-$fff
tracknos	ds.w	1	;0-f checkpoints
lapnos	ds.w	1	;0 on grid, >0 xth lap
lotracknos	ds.w	1	;0+
cartopspds	ds.w	1	;0-200 ish
carflags	ds.w	1
carnull2s	ds.w	1

	ds.w	24*7

cartype	equ	0
carxpos	equ	2
carypos	equ	6
cardirec	equ	10
carground	equ	14
carheight	equ	16
carspd	equ	18
caryskidspd	equ	20
carxskidspd	equ	22
carspincount	equ	24
carspindir	equ	26
delcardirec	equ	28
caroutarace	equ	32
carsavespd	equ	34
trackno	equ	36
lapno	equ	38
lotrackno	equ	40
cartopspd	equ	42
carflag	equ	44
carnull2	equ	46

*****************************************
*			*
* OTHER CAR DATA VARIABLES	*
*			*
*****************************************

oldcarxpos	ds.l	1
oldcarypos	ds.l	1
oldcarheight	ds.w	1
oldcarflag	ds.w	1
oldcardirec	ds.l	1
numtries	ds.w	1

carskidspd	ds.w	1
carskiddir	ds.w	1
minskidspd	ds.w	1
compbrakeamt	ds.w	1
gdir	ds.w	1

*****************************************
*			*
* VARIABLES		*
*			*
*****************************************

topspeed	ds.w	1
toplap	ds.w	1
checktime  	ds.w	1
totspeed	ds.l	1
tottime	ds.w	1

foundflag	ds.w	1

*****************************************
*			*
* MAIN SET UP RACE ROUTINE	*
*			*
*****************************************

*** This routine clears most of what its got to clear etc
*** and reads in the relevent data for the race from the program
*** It sets up the initial car positions, directions etc
*** and all the required number of oil patches, etc

setuprace:	

*** loadcourse

setupwhiches
	move.w	#7,d7
	move.w	#4,d5
	move.w	SHOPFLAGS+2,d0
	move.l	#whichthings,a0
.loop
	clr.w	d1
	btst	d5,d0
	beq	.notgot
	move.w	#1,d1
.notgot	move.w	d1,(a0)+
	addq.w	#1,d5
	dbra	d7,.loop

setupracedata
	move.l	#allracedata,a1
	move.l	#racedata,a0
	move.w	RACENO,d0
	SUBQ.W	#1,D0

	add.w	d0,a1
	move.w	#16,d7
nexaz3b	move.b	(a1),d0
	and.w	#$ff,d0
	move.w	d0,(a0)+
	add.l	#27,a1
	dbra	d7,nexaz3b

setupcoursedata
	move.l	#allcoursedata,a1
	move.l	#coursedata,a2
	move.w	TRACKNO,d0
	mulu.w	#32,d0
	adda.w	d0,a1

	move.w	#8,d0
	sub.w	numcars,d0
	SUBA.W	d0,a1

	move.w	#7,d7
	ADDQ.W	#8,A1
.loop1	move.b	-(a1),d0
	and.w	#$ff,d0
	lsl.w	#3,d0
	add.w	#4,d0
	move.w	d0,(a2)+
	dbra	d7,.loop1

	move.w	#7,d7
	ADDA.W	#16,A1
.loop2	move.b	-(a1),d0
	and.w	#$ff,d0
	move.w	#100,d1
	sub.w	d0,d1
	lsl.w	#3,d1
	add.w	#4,d1
	move.w	d1,(a2)+
	dbra	d7,.loop2

	move.w	#7,d7
	ADDA.W	#16,A1
.loop3	move.b	-(a1),d0
	and.w	#$ff,d0
	move.w	d0,(a2)+
	dbra	d7,.loop3
	move.w	#7,d7
	ADDA.W	#16,A1
.loop4	move.b	-(a1),d0
	and.w	#$ff,d0
	move.w	d0,(a2)+
	dbra	d7,.loop4
			;ok this is going to move crap
			;into things for cars which
			;dont move, so who cares
setupcarposits	
	move.w	#$ffff,toplap
	clr.w	FINISHEDFLAG
	clr.w	CRASHED
	clr.w	checktime
	clr.w	topspeed
	clr.w	tottime
	clr.l	totspeed

	move.l	#xstarts,a3
	move.l	#ystarts,a5
	move.l	#dirstarts,a1
	move.l	#heightstarts,a2
	move.w	#7,d7
	move.l	#cardataarea,a6
nextxypos	move.w	(a3)+,carxpos(a6)
	move.w	(a5)+,carypos(a6)
	move.w	(a1)+,cardirec(a6)
	move.w	(a2)+,carheight(a6)
	clr.w	carflag(a6)
	clr.w	carspd(a6)
	clr.w	carspincount(a6)
	clr.w	carxskidspd(a6)
	clr.w	caryskidspd(a6)
	clr.w	trackno(a6)
	clr.w	lotrackno(a6)
	clr.w	lapno(a6)
	clr.l	delcardirec(a6)
	clr.w	caroutarace(a6)
	add.l	#2*24,a6
	dbra	d7,nextxypos

	move.l	#ccartypes,a0
	move.l	#ccartopspds,a1
	move.l	#cardataarea,a6
	move.w	#6,d7
ncnc2	move.w	(a0)+,cartype+48(a6)
	move.w	(a1)+,cartopspd+48(a6)
	add.l	#2*24,a6
	dbra	d7,ncnc2

	move.w	CARTYPE,d0
	add.w	d0,d0
	move.l	#convcartypes,a0
	move.w	(a0,d0),cartypes
	move.l	#engconsts,a2
	move.w	CARTYPE,d1
	add.w	d1,d1

	tst.w	whichturbotype
	beq	noturbo
	move.w	14(a2,d1),cartopspds
	bra	gotturbo
noturbo	move.w	(a2,d1),cartopspds
gotturbo	move.w	28(a2,d1),d0
	lsl.w	#4,d0
	move.w	d0,minskidspd
	move.w	cartypes,d0
	mulu.w	#6,d0

	move.l	#extradefs,a0
	move.l	#-1,(a0)+
	move.l	#-1,(a0)+


setupcrapposits
	move.l	#oilblocklist,a0
	move.w	#42*25-1,d7
.loop4	move.b	#-1,(a0)+
	dbra	d7,.loop4

	move.l	#oilblocklist,a0	;base of oil block list, now all -1's

	move.w	numobjects,d7
	bra	.deebra

.next	move.l	#crappositions,a1
	move.w	TRACKNO,d0
	mulu.w	#32,d0
	adda.w	d0,a1		;base of this course's oil pos data

	bsr	random
	and.w	#15,d0
	add.w	d0,d0	0-30 step 2
	adda.w	d0,a1

	move.w	(a1),d4	;get x pos
	lsr.w	#3,d4
	move.w	#199,d5
	sub.w	288(a1),d5	;get y pos
	lsr.w	#3,d5
	move.w	576(a1),d6	;get shadow 0/1

.again	bsr	random
	and.w	#3,d0
	cmp.w	#3,d0
	beq	.again	;random 0/1/2 in d0
	add.w	d0,d0
	add.w	d6,d0	;0-5

	mulu.w	#42,d5
	add.w	d5,d4
	move.b	d0,(a0,d4)
	
.deebra	dbra	d7,.next

**** run through oilblocklist (42 * 25 table of bytes)
*** any non -1 bytes are, in order 0-5
*** sun oil/shad oil/sun water/shad water/sun mud/shad mud
*** replace these in your block list with the appropriate
*** ones before you print them/ use them

	rts

*****************************************
*			*
* ROTATE CORNERS OF CARS	*
*			*
*****************************************

*** This routine works out the offsets of the corners of the cars from the
*** centre. Just call it at the start of the program and forget about it

getcollpts
	move.l	#carxsizes,a4
	move.l	#carysizes,a5
	move.w	(a4)+,d6
	move.w	(a5)+,d7
	moveq	#0,d0
	moveq	#0,d3
	move.l	#sintab,a0
	move.l	#costab,a1
nrot	move.l	#carx1s,a2
	move.l	#cary1s,a3
	move.w	d6,d1
	move.w	d7,d2
	bsr.s	rotpoint
	move.l	#carx2s,a2
	move.l	#cary2s,a3
	move.w	d6,d1
	move.w	d7,d2
	neg.w	d1
	bsr.s	rotpoint
	move.l	#carx3s,a2
	move.l	#cary3s,a3
	move.w	d6,d1
	move.w	d7,d2
	neg.w	d2
	bsr.s	rotpoint
	move.l	#carx4s,a2
	move.l	#cary4s,a3
	move.w	d6,d1
	move.w	d7,d2
	neg.w	d1
	neg.w	d2
	bsr.s	rotpoint
	add.w	#2,d3
	cmp.w	#48,d3
	bne.s	not48
	move.w	#0,d3
	move.w	(a4)+,d6
	move.w	(a5)+,d7
not48	add.w	#2,d0
	cmp.w	#144,d0
	bne.s	nrot
	rts

rotpoint	move.w	d1,-(sp)
	move.w	d2,-(sp)
	neg.w	d1
	muls.w	(a0,d3),d1
	muls.w	(a1,d3),d2
	add.l	d2,d1
	asr.l	#8,d1
	move.w	d1,(a2,d0)
	move.w	(sp)+,d2
	move.w	(sp)+,d1
	neg.w	d2
	muls.w	(a0,d3),d2
	neg.w	d1
	muls.w	(a1,d3),d1
	add.l	d2,d1
	asr.l	#8,d1
	move.w	d1,(a3,d0)
	rts

*****************************************************
*****************************************************
***                                               ***
*** ACTUAL PROGRAM FOR EACH SECTION               ***
***                                               ***
*****************************************************
*****************************************************

*** get your position in the race > racepos.w
*** call this about once a second when you print up racepos

getrp	
	move.w	#1,RACEPOS
	move.l	#cardataarea,a6

	move.w	trackno(a6),d1
	move.w	lotrackno(a6),d5
	move.w	lapno(a6),d2
	add.l	#2*24,a6
	move.w	numcars,d0
	sub.w	#2,d0
nextcarrr	
	move.w	lapno(a6),d4
	cmp.w	d2,d4
	beq	maybee
	bcc	yup
	bcs	nope
maybee	
	move.w	trackno(a6),d4
	cmp.w	d1,d4
	beq	maybee2
	bcc	yup
	bcs	nope
maybee2	
	move.w	lotrackno(a6),d4
	cmp.w	d5,d4
	beq	yup
	bcc	yup
	bcs	nope
yup	add.w	#1,RACEPOS
nope	
checkselfskip	
	add.l	#2*24,a6
	dbra	d0,nextcarrr
	rts


*** game program

racegame	
	move.l	#cardataarea,a6
	move.w	#0,d7	
nextcar	
	bsr	movethecar
	add.w	#2,d7
	add.l	#2*24,a6

	move.w	numcars,d0
	add.w	d0,d0
	cmp.w	d0,d7
	bne	nextcar

	move.w	#0,d7	
	move.l	#cardataarea,a6
nextcarb	
	bsr	controlthecar
	add.w	#2,d7
	add.l	#2*24,a6




	move.w	numcars,d0
	add.w	d0,d0
	cmp.w	d0,d7
	bne	nextcarb

	bsr	movemissiles

	bsr	getrp
	
	move.w	numlaps,d0
	add.w	#1,d0
	cmp.w	lapnos,d0
	beq	anyfin

	move.w	#0,d1
	move.l	#cardataarea,a6
	move.w	#6,d7
neckst	move.w	numlaps,d0
	add.l	#2*24,a6
	cmp.w	lapno(a6),d0
	bcc	notanyfin	
	add.w	#1,d1
	cmp.w	#3,d1
	beq	anyfin	
notanyfin	dbra	d7,neckst	

	tst.w	whichfuepercent
	beq	nono3
	tst.w	whichengpercent
	beq	nono1
	tst.w	whichtyrpercent
	beq	nono4
	tst.w	whichbodpercent
	beq	nono2
notfini	rts

nono1	move.w	#1,d0
	bra	gotnono
nono2	move.w	#2,d0
	bra	gotnono
nono3	move.w	#3,d0
	bra	gotnono
nono4	move.w	#4,d0
gotnono	move.w	d0,CRASHED
	bra.s	loosa
anyfin	
	cmp.w	#4,RACEPOS
	bcs	winna
loosa	move.w	#-1,RACEPOS
winna
	move.w	#-1,FINISHEDFLAG
	
	MOVE.L	totspeed,d0
	divu.w	tottime,d0
	LSR.W	#4,D0
	move.w	d0,AVESPEED

	MOVE.W	toplap,D0
	BMI	.OK
	MULU.W	#5,d0
.OK
	move.w	D0,BESTLAP
	move.w	topspeed,D0
	LSR.W	#4,D0
	MOVE.W	D0,MAXSPEED	
	
	rts


*** update pos and lap counter on screen to make sure it is correct for finish
*** racegame is now finished
*** test crashed/racepos to see why....
*** if racepos is >=4 set to -1
*** crashed is zero after a race unless youve crashed out
*** then, 1 eng 2 bod 3 fue 4 tyr
*** you need to test this variable for e.g. does the tyre
*** roll onto the screen, etc

**************************************
**************************************
**************************************

movethecar:

pulldown1:
	move.l	carxpos(a6),oldcarxpos
	move.l	carypos(a6),oldcarypos
	move.w	carheight(a6),oldcarheight
	move.w	carflag(a6),oldcarflag
	move.l	cardirec(a6),oldcardirec
	move.w	#0,numtries

chngpos:
	move.l	delcardirec(a6),d0
	add.l	d0,cardirec(a6)
	bpl	positive
	add.w	#48,cardirec(a6)
	bra	dun
positive	cmp.w	#48,cardirec(a6)
	bcs	dun
	sub.w	#48,cardirec(a6)
dun	
	tst.w	d7
	beq	yesyou03
	and.w	#-2,cardirec(a6)
yesyou03	
	move.w	cardirec(a6),d0
	and.w	#$fffe,d0
	move.l	#costab,a0
	move.w	(a0,d0),d2
	muls.w	carspd(a6),d2
	add.l	d2,carxpos(a6)
	move.l	#sintab,a0
	move.w	(a0,d0),d2
	muls.w	carspd(a6),d2
	add.l	d2,carypos(a6)
noaddspd
	move.w	carxskidspd(a6),d1
	ext.l	d1
	asl.l	#8,d1
	add.l	d1,carxpos(a6)
	move.w	caryskidspd(a6),d1
	ext.l	d1
	asl.l	#8,d1
	add.l	d1,carypos(a6)

checkheight:
	bsr	finddata
	TST.W	carflag(A6)
	BEQ.S	.SKIP
	CMP.W	#12,D1
	BNE.S	.SKIP
	eor.w	#1,carheight(a6)
	CLR.W	carflag(A6)
	BRA.S	notswap
.SKIP	cmp.w	#14,d1
	bne	notswap
	eor.w	#1,carheight(a6)
	move.w	#1,carflag(a6)
notswap	

collision:
	move.l	#cardataarea,a5
	move.w	numcars,d3
	add.w	d3,d3
	clr.w	d6
nextone	
	cmp.w	d6,d7
	beq	nocoll
	move.w	carheight(a5),d0
	cmp.w	carheight(a6),d0
	bne	nocoll
	move.w	carxpos(a5),d0
	sub.w	carxpos(a6),d0
	muls.w	d0,d0
	move.w	carypos(a5),d1
	sub.w	carypos(a6),d1
	muls.w	d1,d1
	add.l	d0,d1
	cmp.l	#carcollsize,d1	
	bcs	collide
nocoll	add.w	#2,d6
	add.w	#2*24,a5	
	cmp.w	d6,d3
	bne	nextone
	bra	hitthings
collide	
	move.l	#sintab,a0
	move.l	#costab,a1

	move.w	cardirec(a5),d0
	and.w	#$fffe,d0
	move.w	(a0,d0),d1
	muls.w	carspd(a5),d1
	asr.l	#8,d1
	add.w	caryskidspd(a5),d1
	move.w	(a1,d0),d2
	muls.w	carspd(a5),d2
	asr.l	#8,d2
	add.w	carxskidspd(a5),d2

	move.w	cardirec(a6),d0
	and.w	#$fffe,d0
	move.w	(a0,d0),d3
	muls.w	carspd(a6),d3
	asr.l	#8,d3
	add.w	caryskidspd(a6),d3
	move.w	(a1,d0),d4
	muls.w	carspd(a6),d4
	asr.l	#8,d4
	add.w	carxskidspd(a6),d4

	move.w	d1,caryskidspd(a6)
	move.w	d2,carxskidspd(a6)
	clr.w	carspd(a6)
	move.w	d3,caryskidspd(a5)
	move.w	d4,carxskidspd(a5)
	clr.w	carspd(a5)
cardamage		
	tst.w	d6
	beq	yipyoua
	tst.w	d7
	bne	nospinoff
yipyoua	MOVE.B	#2,SNDFLAG+1

	sub.w	d2,d4
	bpl	skip03
	neg.w	d4
skip03	sub.w	d1,d3
	bpl	skip04
	neg.w	d3
skip04	add.w	d3,d4	
	lsr.w	#4,d4
	move.w	d4,d0
	mulu.w	#carvcardam,d0
	sub.l	d0,whichbodpercent
	bcc	zeero1
	clr.l	whichbodpercent
zeero1
	tst.w	whichbouncetype
	beq	nospinoff
	sub.w	#toughval,d4
	bcs	nospinoff
spinoff
	move.w	#0,d0	;car spin direction
	move.w	d4,d1
	lsr.w	#3,d1
	add.w	#toughminspin,d1

	tst.w	d7
	bne	notyou9
	move.w	d0,carspindir(a5)
	move.w	d1,carspincount(a5)

	bra	nospinoff		
notyou9	move.w	d0,carspindir(a6)
	move.w	d1,carspincount(a6)
nospinoff
	clr.l	delcardirec(a6)
	move.l	oldcarxpos,carxpos(a6)
	move.l	oldcarypos,carypos(a6)
	move.w	oldcarheight,carheight(a6)
	move.w	oldcarflag,carflag(a6)
	move.l	oldcardirec,cardirec(a6)

	addq.w	#1,numtries
	cmp.w	#2,numtries
	bcs	chngpos
	bra	pushback1

hitthings:	
	move.w	carxpos(a6),carxstore
	move.w	carypos(a6),carystore

	move.l	#carx1s,a4
	move.w	cartype(a6),d0
	add.w	cartype(a6),d0
	add.w	cartype(a6),d0
	lsl.w	#4,d0	;mul by 48
	add.w	d0,a4	
	move.l	a4,a5

	move.w	cardirec(a6),d0
	and.w	#-2,d0
	add.w	d0,a4

	move.w	#0,foundflag
	
	clr.w	d4
npt	move.w	carxstore,d0
	add.w	(a4),d0
	move.w	d0,carxpos(a6)
	move.w	carystore,d0
	add.w	144(a4),d0
	move.w	d0,carypos(a6)

	bsr	finddata
	cmp.w	#12,d1
	bne	not12
	
	move.w	#1,foundflag
	
	tst.w	carflag(a6)
	beq	foundbar
not12
	cmp.w	#15,d1
	beq	foundbar
nextcorner
	add.l	#288,a4
	add.w	#1,d4
	cmp.w	#4,d4
	bne	npt

	move.w	foundflag,carflag(a6)
	
	move.w	carxstore,carxpos(a6)
	move.w	carystore,carypos(a6)
	bra	dunnhit

foundbar
	move.w	#0,carflag(a6)
	
	tst.w	d7
	bne	okbodleft
	MOVE.B	#2,SNDFLAG+1
	move.w	carspd(a6),d0
	mulu.w	d0,d0
	move.w	carxskidspd(a6),d1
	bpl	skip01
	neg.w	d1
skip01	move.w	caryskidspd(a6),d0
	bpl	skip02
	neg.w	d0
skip02	add.w	d1,d0
	lsr.w	#4,d0
	mulu.w	#bodhitdam,d0
	sub.l	d0,whichbodpercent
	bcc	okbodleft
	clr.l	whichbodpercent
okbodleft
	clr.l	delcardirec(a6)
	clr.w	carspincount(a6)
	clr.w	carspindir(a6)

	move.l	oldcarxpos,carxpos(a6)
	move.l	oldcarypos,carypos(a6)
	move.w	oldcarheight,carheight(a6)
	move.w	oldcarflag,carflag(a6)
	move.l	oldcardirec,cardirec(a6)

	move.l	a5,a4
	mulu.w	#288,d4
	add.w	d4,a4
	move.w	cardirec(a6),d0
	and.w	#-2,d0
	add.w	d0,a4
	move.w	carxpos(a6),d0
	add.w	(a4),d0
	move.w	d0,carxpos(a6)
	move.w	carypos(a6),d0
	add.w	144(a4),d0
	move.w	d0,carypos(a6)

	bsr	finddata

	move.w	d0,d1
	add.w	d1,d0
	add.w	d1,d0
	add.w	d0,d0
	move.w	d0,carskiddir
	move.w	carspd(a6),d0
	lsr.w	#1,d0
	cmp.w	#bounceminspd,d0
	bcc	oknuff
	move.w	#bounceminspd,d0
oknuff	move.w	d0,carskidspd
	clr.w	carxskidspd(a6)
	clr.w	caryskidspd(a6)
	clr.w	carspd(a6)
	bsr	addskidspd

	move.l	oldcarxpos,carxpos(a6)
	move.l	oldcarypos,carypos(a6)
	
	add.w	#1,numtries
	cmp.w	#2,numtries
	bcs	chngpos


dunnhit:


pushback1:
	rts

**************************************
**************************************
**************************************

controlthecar:

pulldown2:
updatepos:
	addq.w	#1,lotrackno(a6)
	bsr	finddata
	move.w	d0,gdir
	move.w	d1,carground(a6)

	beq	finupdate
	cmp.w	#12,d1	;used to be 11 but now its 12; ha ha
	bcc	finupdate
	move.w	trackno(a6),d0
	addq.w	#1,d0
	cmp.w	#11,d0	;used to be 11 but now its 12; ha ha
	bne	notneq
	move.w	#1,d0
notneq	cmp.w	d1,d0
	beq	yesnextflag
	bra	finupdate
yesnextflag	clr.w	lotrackno(a6)
	move.w	d1,trackno(a6)
	cmp.w	#1,trackno(a6)
	bne	finupdate
newlap	add.w	#1,lapno(a6)
	tst.w	d7
	bne	finupdate
	move.w	tottime,d0
	sub.w	checktime,d0
	move.w	tottime,checktime
	cmp.w	toplap,d0
	bcc	finupdate
	cmp.w	#1,lapno(a6)
	beq	finupdate
	move.w	d0,toplap
finupdate	

	tst.w	d7
	bne	yit
	move.w	lapno(a6),d0
	lsl.w	#4,d0
	add.w	trackno(a6),d0
	lsl.w	#8,d0
	add.w	lotrackno(a6),d0
	move.w	d0,yournumtrax
yit

*****************************************

checkhitobj:
	move.l	#oilblocklist,a5

	move.w	carxpos(a6),d1
	lsr.w	#4,d1
	move.w	carypos(a6),d2
	lsr.w	#4,d2
	mulu.w	#42,d2
	add.w	d1,d2

	move.b	(a5,d2),d0
	bmi	noheet	;nothing there

	EXT.W	D0
	add.w	d0,d0
	move.l	#maxhitobjspds,a5
	move.w	(a5,d0),d2

	move.w	carspd(a6),d1
	cmp.w	d2,d1
	bcs	noheet
heet			
	cmp.w	#4,d0
	bcs	hitoil
	cmp.w	#8,d0
	bcs	hitwat
hitmud
	move.w	carspd(a6),d0
	mulu.w	#speedmudfrac,d0
	swap	d0
	move.w	d0,carspd(a6)
	bra	noheet
hitwat
	tst.w	d7
	bne	noheet
	CLR.B	SNDFLAG+1
	tst.w	whichaspintype
	bne	noheet	

	move.w	#4,carspincount(a6)
	move.w	d5,d0
	and.w	#1,d0
	move.w	d0,carspindir(a6)
	move.w	cardirec(a6),carskiddir
	move.w	carspd(a6),carskidspd
	move.w	#0,carspd(a6)
	bsr	addskidspd
	bra	noheet
hitoil
	tst.w	d7
	bne	gotaspinsys
	MOVE.B	#1,SNDFLAG+1
	tst.w	whichaspintype
	beq	notgotaspin

gotaspinsys	move.w	#12,carspincount(a6)
	move.w	d5,d0
	and.w	#1,d0
	or.w	#$8000,d0
	move.w	d0,carspindir(a6)
	move.w	cardirec(a6),carskiddir
	move.w	carspd(a6),carskidspd
	move.w	carspd(a6),carsavespd(a6)
	move.w	#0,carspd(a6)
	bsr	addskidspd
	bra	noheet
notgotaspin
	move.w	carspd(a6),d0
	lsr.w	#7,d0
	cmp.w	#15,d0
	bcc	enuf
	move.w	#15,d0
enuf	move.w	d0,carspincount(a6)
	move.w	d5,d0
	and.w	#1,d0
	move.w	d0,carspindir(a6)
	move.w	cardirec(a6),carskiddir
	move.w	carspd(a6),carskidspd
	move.w	#0,carspd(a6)
	bsr	addskidspd
noheet	

*****************************************

rdjoystick:
	move.l	#0,delcardirec(a6)
	tst.w	d7
	bne	compjoy
	bsr	plyrjoy
	bra	joygot
compjoy	
	move.w	gdir,d0
	move.w	d0,d1
	add.w	d1,d0
	add.w	d1,d0	
	add.w	d0,d0
	move.w	cardirec(a6),d1
	sub.w	d1,d0
	beq	rightdir
	tst.w	d0
	bpl	pos
	add.w	#48,d0
pos	cmp.w	#24,d0
	bhi	ok41
	move.w	#8,d1
	bra	ok42
ok41	move.w	#4,d1
	bra	ok42
rightdir	clr.w	d1
ok42	
	cmp.w	#13,carground(a6)
	bne	sureaccel
	move.w	carspd(a6),d0
	sub.w	#compcornerspd,d0
	bcs	sureaccel
	cmp.w	#compbrakeval,d0
	bcs	gotcbra
	move.w	#compbrakeval,d0
gotcbra	move.w	d0,compbrakeamt
	bra	gotaccel
sureaccel	or.w	#$10,d1
gotaccel	move.w	d1,d5
joygot

chkskid:	
	tst.w	d7
	bne.s	checkfire
	move.w	d5,d0
	and.w	#12,d0
	beq.s	dontsetskid	
maybesetskid
	move.w	minskidspd,d3
	sub.w	carspd(a6),d3
	bpl.s	dontsetskid
	btst	#4,d5
	beq.s	brayking
	TST.W	SKIDCOUNT
	BNE.S	.BIGSKID
	CLR.B	SNDFLAG+1
	BRA.S	.NOSKID
.BIGSKID	CMPI.W	#6,SKIDCOUNT
	BNE.S	.NOSKID
	MOVE.B	#1,SNDFLAG+1
.NOSKID	ADDQ.W	#1,SKIDCOUNT
	neg.w	d3
	lsr.w	#1,d3
	sub.w	d3,carspd(a6)
	move.w	d3,carskidspd
	bra.s	addskeed
brayking	
	move.w	carspd(a6),carskidspd
	MOVE.B	#1,SNDFLAG+1
	clr.w	carspd(a6)
addskeed	move.w	cardirec(a6),carskiddir
	bsr	addskidspd
	bra.s	checkfire
dontsetskid	clr.w	SKIDCOUNT



joyread:

checkfire:
	tst.w	d7
	bne	nofirebwd
	btst.l	#2,d5
	bne	nofirebwd
	btst.l	#3,d5
	bne	nofirebwd

	btst.l	#0,d5
	beq	nofirefwd
	tst.w	whichmissftype
	beq	nofirefwd
MISS1	move.w	#0,whichmissftype
firefwd
	move.l	#sintab,a0
	move.l	#costab,a1
	move.w	#fwdoffsetspd,d1
	move.w	cardirec(a6),d0
	and.w	#$fffe,d0
	move.w	(a0,d0),d3
	muls.w	d1,d3
	asr.l	#8,d3
	move.w	(a1,d0),d4
	muls.w	d1,d4
	asr.l	#8,d4

	move.l	carxpos(a6),extraxposs
	move.l	carypos(a6),extrayposs
	ext.l	d3
	asl.l	#8,d3	
	ext.l	d4
	asl.l	#8,d4
	move.l	d4,extraxspds
	move.l	d3,extrayspds
	move.w	carheight(a6),extraheights+2
	move.l	#0,extradefs
	MOVE.B	#4,SNDFLAG+1

nofirefwd
	btst.l	#1,d5
	beq	nofirebwd
	tst.w	whichmissbtype
	beq	nofirebwd
MISS2	move.w	#0,whichmissbtype
firebwd
	move.l	#sintab,a0
	move.l	#costab,a1
	move.w	#bwdoffsetspd,d1
	move.w	cardirec(a6),d0
	and.w	#$fffe,d0
	move.w	(a0,d0),d3
	muls.w	d1,d3
	asr.l	#8,d3
	move.w	(a1,d0),d4
	muls.w	d1,d4
	asr.l	#8,d4

	move.l	carxpos(a6),extraxposs+4
	move.l	carypos(a6),extrayposs+4
	ext.l	d3
	asl.l	#8,d3	
	ext.l	d4
	asl.l	#8,d4
	move.l	d4,extraxspds+4
	move.l	d3,extrayspds+4
	move.w	carheight(a6),extraheights+6
	move.l	#0,extradefs+4
	MOVE.B	#4,SNDFLAG+1
nofirebwd
spin:
	move.w	carspincount(a6),d0
	beq	nospin
	subq.w	#1,carspincount(a6)
	bne	stillspin
	tst.w	carspindir(a6)
	bpl	stillspin
	move.w	carsavespd(a6),carspd(a6)
	clr.w	carxskidspd(a6)
	clr.w	caryskidspd(a6)
	and.w	#1,carspindir(a6)
stillspin
	tst.w	caroutarace(a6)
	bne	.notsoluckyscum
	tst.w	d7
	bne	gotaspinsys2
	tst.w	whichaspintype
	bne	gotaspinsys2
.notsoluckyscum	addq.w	#3,d0
	and.l	#$ffff,d0
	swap	d0
	lsr.l	#2,d0
	cmp.l	#$60000,d0
	bls	nottoofastspin
	move.l	#$60000,d0
	bra	nottoofastspin
gotaspinsys2	move.l	#$40000,d0

nottoofastspin	move.w	carspindir(a6),d1
	and.w	#1,d1	
	bne	anticlockwise
	add.l	d0,delcardirec(a6)
	bra	dunn
anticlockwise	sub.l	d0,delcardirec(a6)
	bra	dunn
nospin	

control:
	tst.w	caroutarace(a6)
	bne	dunn

	tst.w	d7
	beq.s	difturn
	move.l	#$20000,d0
	bra.s	notsmall
difturn
	move.w	carspd(a6),d0
	tst.w	whichpsteertype
	beq.s	nopst
	mulu.w	#turnamtmulps,d0
	bra.s	eqeq
nopst	mulu.w	#turnamtmul,d0
eqeq
	cmp.l	#turnamtmin,d0
	bcc.s	notsmall
	move.l	#turnamtmin,d0
notsmall
	btst	#3,d5
	beq.s	norotright
	add.l	d0,delcardirec(a6)
norotright	btst	#2,d5
	beq.s	norotleft
	sub.l	d0,delcardirec(a6)
norotleft	

fastslow:
	btst	#4,d5
	bne.s	accelerate
	tst.w	d7
	beq.s	nagoodbrakes
	move.w	compbrakeamt,d0
	bra.s	gotbra
nagoodbrakes	tst.w	whichretrotype
	bne	goodbrakes
	move.w	#brakeamt,d0
	bra.s	gotbra
goodbrakes	move.w	#brakeamtretro,d0
gotbra	sub.w	d0,carspd(a6)
	bcc	dunn
	move.w	#0,carspd(a6)
	bra	dunn

accelerate	
	move.w	cartopspd(a6),d3
	tst.w	d7
	beq.s	yourcarspd
	move.w	lapno(a6),d0
	lsl.w	#4,d0
	add.w	trackno(a6),d0
	lsl.w	#8,d0
	add.w	lotrackno(a6),d0
	cmp.w	yournumtrax,d0
	bcs.s	nospdloss
	sub.w	#spdlossinfr,d3
nospdloss	lsl.w	#4,d3
	bra.s	notyour8
yourcarspd
	lsl.w	#4,d3
	move.w	#$100,d4
	move.w	#bodfracloss,d0
	move.w	d0,d1
	mulu.w	whichbodpercent,d0
	lsr.l	#8,d0
	sub.w	d0,d1
	sub.w	d1,d4
	mulu.w	d4,d3
	lsr.l	#8,d3
notyour8	
	move.w	#compcarpower,d2
	tst.w	d7
	bne.s	notyour8a
yaryou
	move.w	#yourcarpower,d2
	tst.w	whichaerotype
	beq.s	noaero
	move.w	#yourcarpowplus,d2
noaero	
	move.w	#$100,d4
	move.w	#engfracloss,d0
	move.w	d0,d1
	mulu.w	whichengpercent,d0
	lsr.l	#8,d0
	sub.w	d0,d1
	sub.w	d1,d4
	mulu.w	d4,d2
	lsr.l	#8,d2
notyour8a	
	move.w	d2,d0
	mulu.w	carspd(a6),d0
	divu.w	d3,d0
	sub.w	d0,d2
	move.w	#$fff,d1
	add.w	d2,carspd(a6)
	cmp.w	carspd(a6),d1
	bhi.s	dunn
	move.w	d1,carspd(a6)
dunn	

slofric:
	tst.w	carspindir(a6)
	bmi.s	noskidreduce
	move.w	#skidresistas,d1
	tst.w	d7
	bne.s	skidas
	tst.w	whichretrotype
	bne.s	skidas22
	move.w	#skidresist,d1
skidas22	
	move.w	#$100,d4
	sub.w	whichtyrpercent,d4	
	mulu.w	#tyrskidfracloss,d4
	lsr.w	#8,d4
	move.w	#$100,d2
	sub.w	d1,d2
	mulu.w	d4,d2
	lsr.w	#8,d2
	add.w	d2,d1
skidas
	move.w	carxskidspd(a6),d0
	bpl.s	ax1
	neg.w	d0
	mulu.w	d1,d0
	lsr.l	#8,d0
	neg.w	d0
	bra.s	ac1
ax1	mulu.w	d1,d0
	lsr.l	#8,d0
ac1	move.w	d0,carxskidspd(a6)
	move.w	caryskidspd(a6),d0
	bpl.s	ax2
	neg.w	d0
	mulu.w	d1,d0
	lsr.l	#8,d0
	neg.w	d0
	bra.s	ac2
ax2	mulu.w	d1,d0
	lsr.l	#8,d0
ac2	move.w	d0,caryskidspd(a6)
noskidreduce

engtyrfue:
	tst.w	d7
	bne	oktyrleft

	move.w	topspeed,d0
	cmp.w	carspd(a6),d0
	bcc.s	notecl1
	move.w	carspd(a6),topspeed
notecl1	addq.w	#1,tottime
	move.w	carspd(a6),d0
	and.l	#$ffff,d0
	add.l	d0,totspeed

	btst	#4,d5
	beq.s	okengleft
	move.w	carspd(a6),d0
	lsr.w	#4,d0
	mulu.w	#engspddam,d0
	sub.l	d0,whichengpercent
	bcc.s	okengleft
	move.l	#0,whichengpercent
okengleft	
	move.w	carspd(a6),d0
	lsr.w	#4,d0
	mulu.w	#fuelperspd,d0
	sub.l	d0,whichfuepercent
	bcc.s	okfueleft
	move.l	#0,whichfuepercent
okfueleft	
	move.w	carxskidspd(a6),d0
	bpl.s	skip05
	neg.w	d0
skip05	move.w	caryskidspd(a6),d1
	bpl.s	skip06
	neg.w	d1
skip06	add.w	d1,d0
	lsr.w	#4,d0
	mulu.w	#tyrskiddam,d0
	sub.l	d0,whichtyrpercent
	bcc.s	oktyrleft
	move.l	#0,whichtyrpercent
oktyrleft	


pushback2:
	rts

*******************************************
*******************************************
*******************************************

movemissiles
	moveq	#0,d7
nextmissmove
	move.l	#extradefs,a0

	move.l	(a0,d7),d0
	bmi	nomove

	move.l	#extraxposs,a1
	move.l	#extrayposs,a2
	move.l	#extraxspds,a3
	move.l	#extrayspds,a4

	move.l	(a3,d7),d0
	add.l	d0,(a1,d7)
	move.l	(a4,d7),d0
	add.l	d0,(a2,d7)

	move.w	(a1,d7),d0
	move.w	(a2,d7),d1
findmisstype
finddata2	; repeated to use a5 ???, and read missile pos not carpos

	lsr.w	#3,d1
	add.w	d1,d1		;3 lines 30 cycles
	move.l	#mul84tab,a5
	move.w	(a5,d1),d1
	move.l	#PICTUREDATA,a5
	adda.w	d1,a5
	lsr.w	#3,d0
	adda.w	d0,a5
	move.b	(a5),d0	;course data 0-15, forget direcs

	move.l	#extraheights,a5
	tst.l	(a5,d7)
	beq	usebot222
	lsr.w	#4,d0
usebot222	and.b	#15,d0
	cmp.b	#14,d0
	bne	nochht	;if change height
	eor.l	#1,(a5,d7)	;do so; ha ha ha ha ha ha
	bra	nohitwall
nochht
	cmp.b	#12,d0	;will never do this but I'll leave it in
	beq	yahitwall
	cmp.b	#15,d0
	bne	nohitwall
yahitwall	
	move.l	#-1,(a0,d7)
	MOVE.B	#5,SNDFLAG+1
	bra	nomove

;+=============================================================+;
; Gremlin protection check NB. BUFFER ADDRESS BLITBASE+2	;
;-=============================================================-;

select_drive_A
	move.w	sr,-(a7)	save status
	ori.w	#$700,sr	no interrupts
	move.b	#14,$ffff8800.W	select port A
	move.b	$ffff8800.W,d3	read port A
	andi.b	#248,d3	clear lower three bits
	or.b	d1,d3
	move.b	d3,$ffff8802.W	write port A
	move.w	(a7)+,sr	reset status
	rts

seek_track
	bsr.s	wait
	move.w	#$86,2(a5)	select data register
	bsr.s	d02fdc
	moveq	#16,d0
	move.w	#$80,2(a5)	select command register
	bsr.s	d02fdc

	move.l	#$60000,d3	allow for motor start-up
.wait	subq.l	#1,d3
	beq	OLDKEYVEC
	btst	#5,$fffffa01.W	INTRQ ?
	bne.s	.wait	yes
	move.w	#200,d0
.hold	bsr.s	wait
	dbf	d0,.hold
	bsr.s	get_status
	rts

wait	move.w	#8000,d1
.wait	dbf	d1,.wait
	rts

check_prot	lea	$ffff8604.W,a5
	st	$43e.w
;select side 0, drive A
	moveq	#5,d1
	bsr.s	select_drive_A
	moveq	#0,d0
	bsr.s	seek_track	seek track 0
	bsr.s	read_track	read it
	bsr.s	get_dma	get length
	move.l	d0,d5
	MOVE.L	D0,-(A7)
	moveq	#79,d0
	bsr.s	seek_track	seek track 79
	bsr.s	read_track	read it
	bsr.s	get_dma	get length
	move.l	d0,d6
	SUB.L	D0,(A7)
	CMPI.L	#60,(A7)+
	BLE	OLDKEYVEC
okay	clr.w	$43e.w
	rts

get_status
	move.w	#$80,2(a5)	select status register
	bsr.s	fdc_delay
	move.w	(a5),d1
	bra.s	fdc_delay

d02fdc	bsr.s	fdc_delay
	move.w	d0,(a5)		send command/data
fdc_delay
	moveq	#36,d4
.delay	dbf	d4,.delay
	rts

read_track	bsr.s	wait
	bsr.s	set_dma
	move.w	#$90,2(a5)
	move.w	#$190,2(a5)		select read
	move.w	#$90,2(a5)
	bsr.s	fdc_delay
	move.w	#$1f,(a5)		set sector count register
	bsr.s	fdc_delay
	move.w	#$80,2(a5)		get command register
	bsr.s	fdc_delay
	move.w	#$e4,(a5)		read track (with settling delay)
	bsr.s	fdc_delay
	MOVE.L	#TRACKNO,(A6)
.w_wait	btst	#5,$fffffa01.W		INTRQ ?
	bne.s	.w_wait
	rts

get_dma	moveq	#0,d0
	move.b	5(a5),d0		get dma high
	swap	d0
	move.b	7(a5),d0		get dma mid
	lsl.w	#8,d0
	move.b	9(a5),d0		set dma low
	rts

set_dma	move.l	BLITBASE+2,d0
	move.b	d0,9(a5)		set dma low
	lsr.w	#8,d0
	move.b	d0,7(a5)		set dma mid
	swap	d0
	move.b	d0,5(a5)		set dma high
	rts

nohitwall
	move.l	#cardataarea+2*24,a6
	move.w	#2,d6
nextmchk
	move.w	carheight(a6),d0
	move.l	#extraheights,a5
	cmp.w	2(a5,d7),d0
	bne	nothitacar

	move.w	carxpos(a6),d0
	sub.w	(a1,d7),d0
	muls.w	d0,d0
	move.w	carypos(a6),d1
	sub.w	(a2,d7),d1
	muls.w	d1,d1
	add.l	d0,d1
	cmp.l	#misscarsize,d1	
	bcs	hitacar
nothitacar
	add.w	#2,d6
	add.l	#2*24,a6
	move.w	numcars,d0
	add.w	d0,d0
	cmp.w	d6,d0
	bne	nextmchk
	bra	nomove
hitacar
	MOVE.B	#3,SNDFLAG+1
	move.l	#-1,(a0,d7)
	move.w	#1,caroutarace(a6)
	move.w	carspd(a6),carskidspd
	MOVE.W	#30,carspincount(a6)
	move.w	cardirec(a6),carskiddir
	bsr	addskidspd
	move.w	#0,carspd(a6)
nomove
	add.w	#4,d7
	cmp.w	#8,d7
	bne	nextmissmove
	rts

*******************************************

*** must return in d5, the appropriate bits set
*** 0-3 u/d/l/r, I'm not sure of the order, bit 4 fire

plyrjoy	
JOYSTICK	MOVEQ	#$10,D5
	eori.w	#$10,d5
	rts

*******************************************

addskidspd
	move.w	carskiddir,d0
	and.w	#$fffe,d0
	move.l	#sintab,a0
	move.w	(a0,d0),d1
	muls.w	carskidspd,d1
	asr.l	#8,d1
	add.w	d1,caryskidspd(a6)
	move.l	#costab,a0
	move.w	(a0,d0),d1
	muls.w	carskidspd,d1
	asr.l	#8,d1
	add.w	d1,carxskidspd(a6)
	rts

*******************************************

finddata

	move.w	carypos(a6),d1
	lsr.w	#3,d1

	add.w	d1,d1		;3 lines 30 cycles
	move.l	#mul84tab,a0
	move.w	(a0,d1),d1

	move.l	#PICTUREDATA,a0

	adda.w	d1,a0

	move.w	carxpos(a6),d0
	lsr.w	#3,d0

	add.w	d0,a0

	move.b	(a0),d1	;course data 0-15
	move.b	4200(a0),d0	;direction 0-7 (15 = off course)
	tst.w	carheight(a6)
	beq.s	usebot2
	lsr.w	#4,d0
	lsr.w	#4,d1
usebot2	and.w	#15,d0
	and.w	#15,d1
	rts

*************************************************
*ENDSHAUN****************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************

KEYREAD	MOVEQ	#0,D7
	BMI.S	.GOTKEY
	RTS
.GOTKEY	CLR.B	KEYREAD+1
	CMPI.B	#$81,D7
	BEQ	RESTART
	CMPI.B	#$C4,D7
	BNE.S	NOTHERTZ
	EORI.B	#2,$FFFF820A.W
	RTS
NOTHERTZ	CMPI.B	#$B2,D7
	BNE.S	.NOTMUSIC1
	NOT.B	TUNEDISABLE+1
	BNE.S	.OFF
	CLR.B	TUNEON+1
	BRA.S	.SWITCHED
.OFF	CLR.B	TUNEFLAG+1
	BRA.S	.SWITCHED
.NOTMUSIC1	CMPI.B	#$9F,D7
	BNE.S	.NOTMUSIC
.SWITCHED	NOT.B	ANYSOUND+1
	RTS
.NOTMUSIC	LEA	CHEATWORD,A6
	CMP.B	(A6),D7
	BNE.S	.BALLS
	ADDQ	#1,A6
	TST.B	(A6)
	BNE.S	.NOTALL
	EORI.W	#$3985,MISS1
	EORI.W	#$3985,MISS2
.BALLS	LEA	CHEATWORD,A6
.NOTALL	MOVE.L	A6,.NOTMUSIC+2
	RTS

*	ROUTINE TO DISPLAY LOADING MESSAGE

LOADING	MOVEQ	#0,D6
LOADMESSAGE	BSR	FADEOFF
	MOVE.L	SCREENON+2,A0
	MOVE.L	A0,A1
	MOVE.W	#7999,D0
.LOOP	CLR.L	(A1)+
	DBF	D0,.LOOP
	ADDA.W	#80*160+32,A0
	MOVEQ	#34,D0	35 LINES
.LINE	MOVEQ	#11,D1	12*2 CHARS
.PLANE	MOVE.L	#$FFFF,(A0)+
	NOT.L	(A0)+
	DBF	D1,.PLANE
	ADDA.W	#64,A0
	DBF	D0,.LINE
	LEA	LOADTEXT,A4
	MULU	#66,D6
	ADDA.W	D6,A4
	MOVE.L	SCREENON+2,A5
	ADDA.W	#82*160+32,A5
	MOVEQ	#2,D3	3 LINES
.TEXT	MOVEQ	#21,D4
	BSR	PRINTROW
	ADDA.W	#72+160*10,A5
	DBF	D3,.TEXT
	LEA	MESSPAL,A0
	BRA.S	SAMEFADEW

LOADOFF	BSR.S	DISPLAYONE
	BRA.S	NEWPALLETS

FADEUP	BSR.S	SHOWONE

NEWPALLETS	LEA	PALLET,A0
	BRA.S	SAMEFADEW

PANELUP	BSR.S	PANELUPR
	LEA	PANELCOLORS,A4
	BRA.S	FADEWAIT

PANELUPR	BSR.S	SHOWONE
	LEA	PALLET,A0
	RTS

PANELUP1	BSR.S	FADEOFF
	BSR.S	PANELUPR
	BRA.S	NOWAIT

FADEOFF	LEA	NOCOLORS,A0

SAMEFADEW	MOVE.L	A0,A4
FADEWAIT	BSR.S	MAINFADE
	MOVE.L	A4,A0
.FADEPANEL	BSR.S	PANELFADE
	MOVE.B	D0,FADEFLAG+1
.WAIT	TST.B	FADEFLAG+1
	BNE.S	.WAIT

WDEIRQ	MOVE.W	$468.W,D7
.WVBL	CMP.W	$468.W,D7
	BEQ.S	.WVBL
	RTS

DISPLAYONE	BSR.S	FADEOFF
SHOWONE	MOVE.L	BLITBASE+2,A0
	MOVE.L	SCREENON+2,A1
	MOVE.W	#7999,D0
.LL	MOVE.L	(A0)+,(A1)+
	DBF	D0,.LL
	RTS

GAMEFADE	BSR.S	FADEOFF
	MOVE.L	SCREENON+2,A0
	MOVE.W	#1999,D0
.CLEAR	CLR.L	(A0)+
	CLR.L	(A0)+
	CLR.L	(A0)+
	CLR.L	(A0)+
	DBF	D0,.CLEAR
	LEA	MAINCOLORS,A0
NOWAIT	BSR.S	MAINFADE
	LEA	PANELCOLORS,A0

PANELFADE	LEA	PANELPAL,A1
	LEA	PANELSTORE,A2
	LEA	PANELVALS,A3
	BRA.S	SETFADE

MAINFADE	LEA	MAINPAL,A1	PALLET TO CHANGE (=INITIAL VALS)
	LEA	MAINSTORE,A2
	LEA	MAINVALS,A3
	BSR.S	WDEIRQ

SETFADE	MOVEQ	#-1,D0
	BNE.S	SLOWFADE
FASTFADE	MOVEQ	#7,D1
.PAL	MOVE.L	(A0)+,(A1)+
	DBF	D1,.PAL
	RTS
SLOWFADE	MOVEQ	#15,D0	16 COLOURS
.FADE1	MOVE.W	(A0)+,D1	DESTINATION PALLET
	MOVE.W	(A1)+,D2	SOURCE PALLET
	MOVEQ	#2,D3	RGB
.FADE2	MOVE.W	D1,D4
	MOVE.W	D2,D5
	ANDI.W	#$700,D4
	ANDI.W	#$700,D5
	MOVE.W	D5,(A2)+	CURRENT VALUES
	SUB.W	D5,D4
	ASR.W	#4,D4	16 CHANGES
	MOVE.W	D4,(A3)+	ADDITION
	LSL.W	#4,D1
	LSL.W	#4,D2
	DBF	D3,.FADE2
	DBF	D0,.FADE1
	MOVEQ	#16,D0
	RTS

WVBL	MOVE.W	$466.W,D7
.WVBL	CMP.W	$466.W,D7
	BEQ.S	.WVBL
	RTS

*	RANDOM ROUTINE

RANDOM	MOVE.L	#0,D7
	ADD.B	$FFFF8209.W,D7
	ROL.L	#7,D7
	ADD.B	$FFFF8209.W,D7
	ROL.L	#7,D7
	ADD.B	$FFFF8209.W,D7
	ROL.L	#7,D7
	ADD.B	$FFFF8209.W,D7
	ROL.L	#7,D7
	ADD.L	D6,D7
	MOVE.L	D7,RANDOM+2
	MULU	D7,D6
	SWAP	D6
	RTS

*	DISK LOAD ROUTINES

LOADFILE	MOVEQ	#0,D0
	BEQ.S	.DISKLOAD
	MOVE.L	(A0)+,A2	SOURCE BASE
	MOVE.L	(A0)+,D0	SOURCE LENGTH
	LSR.L	#4,D0	/16
.COPYIT	MOVE.L	(A2)+,(A1)+
	MOVE.L	(A2)+,(A1)+
	MOVE.L	(A2)+,(A1)+
	MOVE.L	(A2)+,(A1)+
	DBF	D0,.COPYIT
	LEA	PROTECTION+2,A6
	MOVE.L	D5,D6
	RTS
.DISKLOAD       MOVE.L  FLENGTH+2,D0
        JMP     $208.W

	BSR.S	OPENFILE

CLOSEFILE	MOVE.W	FHANDLE+2,-(A7)	CLOSE FILE
	MOVE.W	#$3E,-(A7)
	TRAP	#1
	ADDQ	#4,A7
	LEA	PROTECTION+2,A6
	MOVE.L	D5,D6
	RTS

OPENFILE	MOVE.W	#2,-(A7)	OPEN FILE
	MOVE.L	A0,-(A7)
	MOVE.L	A1,READFILE+2
	MOVE.W	#$3D,-(A7)
	TRAP	#1
	ADDQ	#8,A7
	MOVE.W	D0,FHANDLE+2

READFILE	MOVE.L	#0,-(A7)	LOAD ADDRESS
FLENGTH	MOVE.L	#130000,-(A7)	LENGTH
FHANDLE	MOVE.W	#0,-(A7)
	MOVE.W	#$3F,-(A7)	LOAD FILE
	TRAP	#1
*	MOVE.L	D0,LOADED+2
	ADDA.W	#12,A7
	RTS

DOSCREEN	MOVE.L	BLITBASE+2,A1
	BSR.S	UNPACK

	MOVE.L	BLITBASE+2,A0
LOADED	MOVE.L	#0,D0
	LEA	-32(A0,D0.W),A0
	LEA	PALLET,A1

.LOOP	REPT	8

	MOVE.L	(A0),(A1)+
	CLR.L	(A0)+

	ENDR

	RTS

;+=============================================================+;
; DECHOMP data at (a0) to (a1), can be the same address...	;
; Don't overlap with a1<a0 or it won't work		;
;-=============================================================-;
getbit	macro
	add.l	d0,d0
	bne.s	.\@
	move.l	-(a0),d0
	move	#-1,ccr
	addx.l	d0,d0
.\@
	endm

UNPACK	move.l	#"*FUN",d0	Find the end of the data.
	move.l	#"GUS*",d1	There is a 1:7.379x10^19/datalength
.suss_end	cmp.l	(a0)+,d0	Chance this will fail...
	beq.s	.yup
	cmp.l	(a0)+,d0	...I like the odds!
	bne.s	.suss_end
.yup	cmp.l	(a0)+,d1
	bne.s	.suss_end

	subq.w	#8,a0	Skip the "*FUNGUS*"
	move.l	-(a0),a2	Length
	MOVE.L	A2,LOADED+2
	add.l	a1,a2	Data goes to -(a2)
	move.l	-(a0),d0	Get first data out...

loop	getbit	See what to do
	bcs.s	code1xx
	moveq	#3,d1	Set up for small block
	moveq	#0,d3
	getbit
	bcs.s	block
;code 00 - tiny copy
code00	moveq	#1,d3
	moveq	#8,d1
	bra.s	copy

;code 111 - big block of data
code111	moveq	#8,d1
	moveq	#8,d3
;get a block of straight data out, size in d1
block	bsr.s	get_data	get count
	add.w	d2,d3
.0	moveq	#7,d1	Get byte out
.1	getbit
	addx.w	d2,d2
	dbra	d1,.1
	move.b	d2,-(a2)	Save it
	dbra	d3,.0	Do all block
	bra.s	next
;code is 1xx - work out where to go from here
code1xx	moveq	#0,d2	get next 2 bits out
	getbit
	addx.w	d2,d2
	getbit
	addx.w	d2,d2
	cmp.b	#2,d2
	blt.s	small_copy
	cmp.b	#3,d2
	beq.s	code111

big_copy	moveq	#8,d1
	bsr.s	get_data
	move.w	d2,d3
	move.w	#$c,d1
	bra.s	copy

small_copy	moveq	#2,d3
	add.w	d2,d3
	move.w	#9,d1
	add.w	d2,d1
;+=============================================================+;
; copy a block of memory, bit like the beeb copy key.	;
;-=============================================================-;
copy	bsr.s	get_data	Get offset size
	lea	1(a2,d2.w),a3	Point to matching block
.0	move.b	-(a3),-(a2)	Copy it backwards
	dbf	d3,.0
next	cmpa.l	a2,a1
	blt	loop
	rts
;+=============================================================+;
; get d1 bits of data in d2			;
;-=============================================================-;
get_data	subq.w	#1,d1
	clr.w	d2
.1	getbit
	addx.w	d2,d2
	dbf	d1,.1
	rts

*	RESTORE COLOUR PALLETTE, MOUSE, STACK AND EXIT

OLDKEYVEC	CLR.L	$420.W
	CLR.L	$426.W
	MOVE.L	$4.W,A0
	JMP	(A0)

FIRSTLAST	MOVE.W	#136,D7
	MOVE.L	A0,D5	STORE SCREEN ADDRESS
	MOVE.W	D0,D6	COPY FOR DBF
	MOVEM.W	(A1)+,D1-D4
	LEA	(A2,D1.W),A3
	LEA	(A2,D2.W),A4
	LEA	(A2,D3.W),A5
	LEA	(A2,D4.W),A6

.BLOCK1	MOVEM.L	(A4)+,D1-D4
	ADDQ	#8,A3
	OR.L	(A3)+,D1
	OR.L	(A3)+,D2
	OR.L	(A5)+,D3
	OR.L	(A5)+,D4
	MOVE.L	D1,(A0)+
	MOVE.L	D2,(A0)+
	MOVE.L	D3,(A0)+
	MOVE.L	D4,(A0)+
	MOVEM.L	(A6)+,D1-D4
	OR.L	(A5)+,D1
	OR.L	(A5)+,D2
	MOVEM.L	D1-D4,(A0)
	ADDA.W	#144,A0
	DBF	D6,.BLOCK1

	MOVE.L	D5,A0
	ADDA.W	#24,A0
	MOVE.L	A0,D5
	MOVE.W	D0,D6	COPY FOR DBF
	MOVEM.W	(A1)+,D1-D4
	LEA	(A2,D1.W),A3
	LEA	(A2,D2.W),A4
	LEA	(A2,D3.W),A5
	LEA	(A2,D4.W),A6

.BLOCK2	MOVE.L	(A3)+,D1
	MOVE.L	(A3)+,D2
	OR.L	D1,(A0)+
	OR.L	D2,(A0)+
	MOVEM.L	(A4)+,D1-D4
	OR.L	(A3)+,D1
	OR.L	(A3)+,D2
	OR.L	(A5)+,D3
	OR.L	(A5)+,D4
	MOVE.L	D1,(A0)+
	MOVE.L	D2,(A0)+
	MOVE.L	D3,(A0)+
	MOVE.L	D4,(A0)+
	MOVEM.L	(A6)+,D1-D4
	OR.L	(A5)+,D1
	OR.L	(A5)+,D2
	MOVEM.L	D1-D4,(A0)
	ADDA.W	D7,A0
	DBF	D6,.BLOCK2

	MOVE.L	D5,A0
	ADDA.W	#32,A0
	MOVE.L	A0,D5
	MOVE.W	D0,D6	COPY FOR DBF
	MOVEM.W	(A1)+,D1-D4
	LEA	(A2,D1.W),A3
	LEA	(A2,D2.W),A4
	LEA	(A2,D3.W),A5
	LEA	(A2,D4.W),A6

.BLOCK3	MOVE.L	(A3)+,D1
	MOVE.L	(A3)+,D2
	OR.L	D1,(A0)+
	OR.L	D2,(A0)+
	MOVEM.L	(A4)+,D1-D4
	OR.L	(A3)+,D1
	OR.L	(A3)+,D2
	OR.L	(A5)+,D3
	OR.L	(A5)+,D4
	MOVE.L	D1,(A0)+
	MOVE.L	D2,(A0)+
	MOVE.L	D3,(A0)+
	MOVE.L	D4,(A0)+
	MOVEM.L	(A6)+,D1-D4
	OR.L	(A5)+,D1
	OR.L	(A5)+,D2
	MOVEM.L	D1-D4,(A0)
	ADDA.W	D7,A0
	DBF	D6,.BLOCK3

	MOVE.L	D5,A0
	ADDA.W	#32,A0
	MOVE.L	A0,D5
	MOVE.W	D0,D6	COPY FOR DBF
	MOVEM.W	(A1)+,D1-D4
	LEA	(A2,D1.W),A3
	LEA	(A2,D2.W),A4
	LEA	(A2,D3.W),A5
	LEA	(A2,D4.W),A6

.BLOCK4	MOVE.L	(A3)+,D1
	MOVE.L	(A3)+,D2
	OR.L	D1,(A0)+
	OR.L	D2,(A0)+
	MOVEM.L	(A4)+,D1-D4
	OR.L	(A3)+,D1
	OR.L	(A3)+,D2
	OR.L	(A5)+,D3
	OR.L	(A5)+,D4
	MOVE.L	D1,(A0)+
	MOVE.L	D2,(A0)+
	MOVE.L	D3,(A0)+
	MOVE.L	D4,(A0)+
	MOVEM.L	(A6)+,D1-D4
	OR.L	(A5)+,D1
	OR.L	(A5)+,D2
	MOVEM.L	D1-D4,(A0)
	ADDA.W	D7,A0
	DBF	D6,.BLOCK4

	MOVE.L	D5,A0
	ADDA.W	#32,A0
	MOVE.L	A0,D5
	MOVE.W	(A1)+,D1
	LEA	(A2,D1.W),A3

.BLOCK5	MOVE.L	(A3)+,D1	1ST BLOCK 1ST 2 PLANES
	MOVE.L	(A3)+,D2	1ST BLOCK 2ND 2 PLANES
	ADDQ	#8,A3
	OR.L	D1,(A0)+
	OR.L	D2,(A0)+
	ADDA.W	#152,A0
	DBF	D0,.BLOCK5

	RTS

*	READ KYBRD/JOYSTICK

READKEY	MOVEM.L	D0/D1/A0,-(A7)
	LEA	$FFFFFC00.W,A0
	MOVE.B	(A0),D0
	MOVE.B	2(A0),D0

MKFLG	MOVEQ	#0,D1
	BNE.S	MOUSEVAL

JKFLG	MOVEQ	#0,D1
	BNE.S	JOYVAL

	CMPI.B	#$FD,D0
	BHI.S	NEWJOY

	CMPI.B	#$F7,D0
	BHI.S	NEWMOUSE

	MOVE.B	D0,KEYREAD+1
	BRA.S	JKDONE

NEWJOY	MOVE.B	D0,D1
	BRA.S	JKDONE

NEWMOUSE	MOVE.B	#2,MKFLG+1
	BSET	#4,JOYSTICK+1
	ANDI.B	#3,D0
	BEQ.S	MOUSEDONE
	BCLR	#4,JOYSTICK+1
	BRA.S	MOUSEDONE

MOUSEVAL	EXT.W	D0
	SUBQ.B	#1,MKFLG+1
	BEQ.S	NEWY
	ADD.W	D0,MOUSEX+2
	BRA.S	MOUSEDONE
NEWY	ADD.W	D0,MOUSEY+2
	BRA.S	MOUSEDONE

JOYVAL	MOVEQ	#0,D1
	TST.B	D0
	BPL.S	.NOFIRE
	ANDI.B	#$F,D0
	BRA.S	.STOREIT
.NOFIRE	BSET	#4,D0
.STOREIT	MOVE.B	D0,JOYSTICK+1

JKDONE	MOVE.B	D1,JKFLG+1
MOUSEDONE	BCLR	#6,$FFFFFA11.W
	MOVEM.L	(A7)+,D0/D1/A0
	RTE

*	ROUTINE TO FADE CURRENT PALLET

FADEPALLET	MOVEQ	#15,D0	16 COLOURS
.FADE	MOVE.W	(A1),D1	GET CURRENT RED
	ADD.W	(A2)+,D1	ADD CHANGE
	MOVE.W	D1,(A1)+	STORE AS CURRENT
	ANDI.W	#$700,D1	ISOLATE RED
	MOVE.W	D1,D2	COPY
	MOVE.W	(A1),D1	GET CURRENT GREEN
	ADD.W	(A2)+,D1	ADD CHANGE
	MOVE.W	D1,(A1)+	STORE AS CURRENT
	ANDI.W	#$700,D1	ISOLATE GREEN
	LSR.W	#4,D1	PUT IN CORRECT PLACE
	OR.W	D1,D2	COPY
	MOVE.W	(A1),D1	GET CURRENT BLUE
	ADD.W	(A2)+,D1	ADD CHANGE
	MOVE.W	D1,(A1)+	STORE AS CURRENT
	ANDI.W	#$700,D1	ISOLATE BLUE
	LSR.W	#8,D1	PUT IN CORRECT PLACE
	OR.W	D1,D2	COPY
	MOVE.W	D2,(A0)+	NEW DISPLAY COLOUR
	DBF	D0,.FADE	DO ALL 16
	RTS

*	MY VBL ROUTINE

MYVBL	MOVEM.L	D0-D7/A0-A6,-(A7)
	ADDQ.W	#1,$466.W
	MOVE.B	#0,$FFFFFA1B.W	STOP TIMER B
SPLIT1	MOVE.B	#160,$FFFFFA21.W
	MOVE.B	#8,$FFFFFA1B.W	RESTART TIMER B
	MOVE.B	#-1,DECOUNT+1
FADEFLAG	MOVEQ	#0,D0	ANY FADE ?
	BEQ.S	.NOFADE	NO
	LEA	MAINPAL,A0	COLOURS
	LEA	MAINSTORE,A1	CURRENT VALUES OF RGB
	LEA	MAINVALS,A2	FRACTIONAL CHANGES
	BSR.S	FADEPALLET
	LEA	PANELPAL,A0	COLOURS
	LEA	PANELSTORE,A1	CURRENT VALUES OF RGB
	LEA	PANELVALS,A2	FRACTIONAL CHANGES
	BSR.S	FADEPALLET
	SUBQ.B	#1,FADEFLAG+1
.NOFADE	LEA	$FFFF8240.W,A0
	LEA	MAINPAL,A1
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
DISKWAIT	TST.W	$43E.W	FLOPPIES IN USE ?
	BEQ.S	FLOPFLAG	NO
	MOVE.B	#-1,FLOPFLAG+1	ENABLE DESELECT
	BRA.S	SNDFLAG
FLOPFLAG	MOVEQ	#-1,D0	FLOPPIES DESELECTED ?
	BEQ.S	SNDFLAG	YES
	MOVE.W	#$80,$FFFF8606.W   SELECT STATUS REG.
.WAIT	MOVE.W	$FFFF8604.W,D0	GET STATUS
	BTST	#7,D0	MOTOR ON ?
	BNE.S	SNDFLAG	YES
	MOVE.B	#$E,$FFFF8800.W SELECT PORT A
	MOVE.B	$FFFF8800.W,D0	READ BYTE
	ORI.W	#7,D0	SET BITS FOR DESELECT
	MOVE.B	D0,$FFFF8802.W
	CLR.B	FLOPFLAG+1	FLOPPIES DESELECTED
SNDFLAG	MOVEQ	#-1,D0	A NEW EFFECT ?
	BMI.S	TUNEON	NO
	MOVE.B	#-1,SNDFLAG+1
	CMPI.W	#3,D0
	BCC.S	DOIT
ANYSOUND	MOVEQ	#-1,D1
	BNE.S	TUNEON
DOIT	BSR.S	SOUND+10	INITIATE EFFECT
TUNEON	MOVEQ	#0,D0	TUNES ON ? 
	BNE.S	TUNEDONE	NO
TUNEFLAG	MOVEQ	#-1,D0	CHANGE TUNE/TUNE OFF ?
	BMI.S	SAMETUNE	NO
	BSR.S	SOUND+14	TURN IT OFF
TUNEDISABLE	MOVEQ	#0,D0
	MOVE.B	D0,TUNEON+1
	BNE.S	TUNEDONE
TUNENO	MOVEQ	#3,D0	CURRENT TUNE NO.
	BMI.S	TUNESET	NO TUNE
	BSR.S	SOUND	START TUNE
SAMETUNE	CMPI.B	#2,SOUND+8	TUNE READY FOR LOOP ?
	BCS.S	TUNENO	YES
TUNESET	MOVE.B	#-1,TUNEFLAG+1	TUNE CHANGED
TUNEDONE	BSR.S	SOUND+4
EXITVBL	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTE

SOUND	INCBIN	CARS.MUS

PANELON	CLR.B	DECOUNT+1
SPLIT2	MOVE.B	#40,$FFFFFA21.W    SET NUMBER OF LINES
	MOVE.B	#8,$FFFFFA1B.W	RESTART TIMER B
	LEA	$FFFF8240.W,A0
	LEA	PANELPAL,A1
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVE.L	(A1)+,(A0)+
	MOVEM.L	(A7)+,D0-D2/A0-A2
	BCLR	#0,$FFFFFA0F.W
	RTE

*	DEIRQ ROUTINE
*	COUNT,FLIP,FADE AND RESET NO. OF LINES FOR DE TIMER B

DEIRQ	CLR.B	$FFFFFA1B.W	STOP TIMER B
	MOVEM.L	D0-D2/A0-A2,-(A7)
DECOUNT	MOVEQ	#0,D0
	BNE.S	PANELON
	ADDQ.W	#1,$468.W
DOFLIP	MOVEQ	#0,D0	FORCED FLIP ?
	BNE.S	SCREEN1	YES
FLIPFLAG	MOVEQ	#-1,D0	FLIP ENABLED ?
	BNE.S	EXITDEIRQ	NO
FLIPCOUNT	CMPI.W	#3,$468.W	FLIP YET ?
	BCS.S	EXITDEIRQ	NO
	CLR.W	$468.W	RESET COUNTER
SCREEN1	MOVE.L	#0,D0	FLIP SCREEN 1
SCREEN2	MOVE.L	#0,D1	FLIP SCREEN 2
	CLR.B	DOFLIP+1
	NOT.W	FLIP	DRAW ON SCREEN 1 ?
	BNE.S	DISPLAY2	YES
	MOVE.L	D1,BLITBASE+2	DRAW ON SCREEN 2
	BRA.S	SETDISPLAY	AND DISPLAY SCREEN 1
DISPLAY2	MOVE.L	D0,BLITBASE+2	DRAW ON SCREEN 1
	MOVE.L	D1,D0	AND DISPLAY SCREEN 2
SETDISPLAY	MOVE.L	D0,SCREENON+2
	SWAP	D0	HIGH WORD
	MOVE.B	D0,$FFFF8201.W	LOW BYTE
	SWAP	D0	LOW WORD
	LSR.W	#8,D0	HIGH BYTE
	MOVE.B	D0,$FFFF8203.W
EXITDEIRQ	MOVEM.L	(A7)+,D0-D2/A0-A2
	BCLR	#0,$FFFFFA0F.W
	RTE

KEYS1	DC.B	$80,1	RESET KEY READ STATE
	DC.B	$12	MOUSE OFF

	EVEN

GAMEFILE	DC.B	"GAMEPLAY",0,0
TITLES	DC.B	"TITLES",0,0
ALLOPTIONS	DC.B	"OPTIONS",0
RESULTS	DC.B	"RESULTS",0
PANELNAM	DC.B	"PANEL.CMP",0

HEADS	DC.B	3,2,2,3,2,2,2,3,2,3,2,3,2,3,2,3
	DC.B	2,3,3,3,2,2,2,3,2,2,2,2,3,2,3,3
	DC.B	2,2,2,2,3,2,2,2,2,2,2,3,3,2,2,2
	DC.B	3,2,3,2,3,2,2,2,2,2,2,2,2,2,1,2
	DC.B	1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1
	DC.B	1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,3
	DC.B	1,1,0,1,1,1,1,0,1,1,1,1,0,1,0,2
	DC.B	1,1,1,1,2,1,1,1,1,1,1,0,0,1,1,0
	DC.B	1,1,0,1,1,2,1,3,1,1,1,0,1,0,1,0
	DC.B	1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1
	DC.B	1,1,1,0,0,1,0,1,1,1,0,0,1,1,0,1
	DC.B	0,0,1,0,0,1,0,1,1,3,0,0,1,1,1,1

	EVEN

LOADTEXT	DC.B	"                      "
	DC.B	"      Loading...      "
	DC.B	"                      "
	DC.B	"   Congratulations.   "
	DC.B	"  Track % completed.  "
	DC.B	"  Results to follow.  "
	DC.B	"  Stage 1 finished.   "
	DC.B	"Stage 2 password ODIE."
	DC.B	" Results follow soon. "
	DC.B	"  Stage 2 finished.   "
	DC.B	"Stage 3 password BIGC."
	DC.B	" Results follow soon. "
	DC.B	"  Stage 3 finished.   "
	DC.B	"     Well done !      "
	DC.B	" Results follow soon. "
	DC.B	"It's tough at the top."
	DC.B	" You weren't placed.  "
	DC.B	" Results follow soon. "
	DC.B	"  Your race is over.  "
	DC.B	" Your engine exploded "
	DC.B	"into a million pieces."
	DC.B	" You crashed once too "
	DC.B	" often and destroyed  "
	DC.B	"      your car.       "
	DC.B	" You ran out of fuel  "
	DC.B	"and rolled silently to"
	DC.B	" an embarassing stop. "
	DC.B	" You skidded once too "
	DC.B	"often, and your tyres "
	DC.B	"      exploded.       "

HIGHSCORES	DC.B	"DAVE03006000"
	DC.B	"SOUT03005000"
	DC.B	"JEZZ03004000"
	DC.B	"PETE03003000"
	DC.B	"DOUG03002000"
	DC.B	"NEIL03001000"
BESTLAPTIMES	DC.B	"DAVE1500"
	DC.B	"SOUT1500"
	DC.B	"JEZZ2000"
	DC.B	"PETE2000"
	DC.B	"DOUG2500"
	DC.B	"NEIL2500"
	DC.B	"LUGA3000"
	DC.B	"MARK3000"
	DC.B	"DREW3000"

HIGHS	DC.W	3,240,3,200,3,160,3,120,3,80,3,40
BESTLAPS	DC.W	1500,1500,2000,2000,2500,2500,3000,3000,3000

CARNAMES	DC.B	"1.6 Taraco Neo"
	DC.B	"1.9 Taraco Neo"
	DC.B	"2.3 Vaug Inter"
	DC.B	"3.0 Vaug Inter"
	DC.B	"5.0 Ret Parsec"
	DC.B	"6.5 Ret Parsec"
	DC.B	"8.0 Ret Parsec"

NAME	DC.B	"FRED","REDO"
CHEATS	DC.L	"ODIE","BIGC","POOR","QUIT","EXIT","HELP","FUCK"
	DC.L	"SHIT","CUNT","TWAT","TURD","WANK","PISS","CRAP",-1

CHEATVALS	DC.W	9,2,0,20000,18,4,0,50000,0,0
	DC.L	500000

FLIP	DC.W	0

PANELCOLORS	DC.W	$000,$777,$111,$200,$210,$130,$320,$004
	DC.W	$421,$431,$333,$025,$531,$610,$550,$666

MAINCOLORS	DC.W	$000,$111,$220
CARDARK	DC.W	$400,$010,$020,$030,$040,$222,$444,$651
CARLIGHT	DC.W	$700,$333,$321,$112,$125

MESSPAL	DS.W	14
	DC.W	$007,$777

MASKS	DC.L	$00000000,$80008000,$C000C000,$E000E000
	DC.L	$F000F000,$F800F800,$FC00FC00,$FE00FE00
	DC.L	$FF00FF00,$FF80FF80,$FFC0FFC0,$FFE0FFE0
	DC.L	$FFF0FFF0,$FFF8FFF8,$FFFCFFFC,$FFFEFFFE

MASKS2	DC.L	$00000000,$00010001,$00030003,$00070007
	DC.L	$000F000F,$001F001F,$003F003F,$007F007F
	DC.L	$00FF00FF,$01FF01FF,$03FF03FF,$07FF07FF
	DC.L	$0FFF0FFF,$1FFF1FFF,$3FFF3FFF,$7FFF7FFF

ROTATIONS	DC.W	0,3,6,8,11,14,-1
ALLROTATIONS	DC.B	0,0,0,3,3,3,6,6,8,8,8,11,11,11,14,14

SPECSCREENS	DC.L	PARSPEC,TAROSPEC,VAUGSPEC

BIGCARS	DC.L	BIGCAR1,BIGCAR2,BIGCAR3
CARTYRES	DC.L	TYRE1,TYRE2,TYRE3
TYREOFFS	DC.W	17,23,115,23,24,23,111,23,13,24,94,24

NUMLINES	DC.W	8,4,4,4,4,4,4,8,8,4,4,4,4,4,4,4,4,4,8

POWERS	DC.L	100000,10000,1000,100,10

PRIZES	DC.W	20000,12000,5000
	DC.W	25000,15000,8000
	DC.W	30000,20000,10000

OPTLIST	DC.W	16,24,23,100	TRACKS
	DC.W	24,32,23,100
	DC.W	32,40,23,100
	DC.W	40,48,23,100
	DC.W	48,56,23,100
	DC.W	56,64,23,100
	DC.W	64,72,23,100
	DC.W	72,80,23,100
	DC.W	80,88,23,100
	DC.W	94,105,23,100	GARAGE
	DC.W	32,112,224,277	SALES
	DC.W	124,152,56,115	WHITE CAR1
	DC.W	113,128,88,152	WHITE CAR2
	DC.W	132,165,117,188	BLUE CAR1
	DC.W	117,136,168,221	BLUE CAR2
	DC.W	150,169,200,291	RED CAR1
	DC.W	120,160,240,320	RED CAR2
	DC.W	-1

SHOPLIST	DC.W	153,162,10,105
	DC.W	153,162,106,201
	DC.W	161,170,106,201
	DC.W	161,170,10,105
	DC.W	12,36,98,146
	DC.W	6,36,165,220
	DC.W	44,69,106,156
	DC.W	45,71,159,220
	DC.W	111,135,166,240
	DC.W	75,102,89,142
	DC.W	75,102,160,209
	DC.W	7,36,0,68
	DC.W	0,132,268,320
	DC.W	132,176,297,320
	DC.W	61,75,248,262
	DC.W	180,200,192,216
	DC.W	180,200,224,248
	DC.W	180,200,256,280
	DC.W	180,200,288,312
	DC.W	-1

SHOPCOORDS	DC.W	155,9,155,21,163,21,163,9,29,13,29,21,63,14,63,22,129,25,97,14,97,21,29,1
SHOPCOSTS	DS.W	12
SHOPBASE	DC.W	4000,4000,1000,2000,4000,4000,1000,1000,3000,4000,3000,2000	;e/b/f/t/extras

SALESLIST	DC.W	126,134,0,320
	DC.W	134,142,0,320
	DC.W	142,150,0,320
	DC.W	150,158,0,320
	DC.W	158,166,0,320
	DC.W	166,174,0,320
	DC.W	0,120,0,45
	DC.W	0,200,0,320
	DC.W	-1

NOCARS	DC.B	"Oh no, not you again ! Car designers"
	DC.B	" obviously aren't up to your standards as yet. "
	DC.B	"The ] is the best car currently available !",0

RESNUMADDS	DC.W	18*160+56,18*160+57
	DC.W	35*160+57
	DC.W	52*160+49,52*160+56,52*160+57
	DC.W	69*160+49,69*160+56,69*160+57
	DC.W	86*160+41,86*160+48,86*160+56,86*160+57
	DC.W	103*160+40,103*160+41,103*160+48,103*160+49,103*160+56,103*160+57

RESANIM1	DC.W	1,4,5,9
RESANIM2	DC.W	2,3,6,8
RESANIM3	DC.W	0,7,16,19,-1
RESANIM4	DC.W	10,11,12,13,14,15,20,-1

RESTAGES	DC.W	240,86,32,76,0,1,0,1
	DC.W	160,112,64,31,2,3,4,3
	DC.W	32,111,32,32,5,6,7,6
	DC.W	80,111,32,27,8,9,10,9
	DC.W	144,104,16,58,11,12,13,12
	DC.W	64,124,16,27,14,14,15,15
	DC.W	16,114,16,30,16,16,17,17
	DC.W	96,144,32,5,18,18,19,19
	DC.W	224,111,16,17,20,20,21,21
	DC.W	288,123,32,3,22,22,23,23
	DC.W	16,118,16,8,24,24,25,25
	DC.W	128,115,16,8,26,26,27,27
	DC.W	144,114,16,9,28,28,29,29
	DC.W	208,119,16,6,30,30,31,31
	DC.W	80,115,32,11,32,32,33,33
	DC.W	96,137,32,10,34,35,36,35
	DC.W	0,115,16,22,37,37,38,38
	DC.W	128,113,16,29,39,39,40,40
	DC.W	144,115,16,8,41,41,42,42
	DC.W	272,114,16,30,43,43,44,44
	DC.W	288,116,32,12,45,45,46,46

CARPOINTERS	DC.L	CAR1,CARMASK1,CAR2,CARMASK2,CAR3,CARMASK3
CARADDS	DC.L	$00130125,BLUECAR,$04000700,REDCAR,$02220666,WHITECAR
BRIDGELIST	DC.L	BRIDGE1,BRIDGE2,BRIDGE3,BRIDGE4,BRIDGE5
	DC.L	BRIDGE6,BRIDGE7,BRIDGE8,BRIDGE9

BRIDGE1	DC.W	-1,152,0
BRIDGE2	DC.W	-1,216,0
BRIDGE3	DC.W	-1,200,0
BRIDGE4	DC.W	-1,-104,-1,-488,0
BRIDGE5	DC.W	-1,216,0
BRIDGE6	DC.W	104,216,296,216,104,-296,104,-488,0
BRIDGE7	DC.W	-1,216,0
BRIDGE8	DC.W	152,200,488,200,0
BRIDGE9	DC.W	104,216,200,216,296,216,392,216,488,216
	DC.W	104,-200,104,-488,0

TUNES	DC.B	2,1,0,5,2,1,0,5,2,1

RONCHARS	INCBIN	RONCHARS
POINTER	EQU	RONCHARS+612
TICKS	EQU	POINTER+128
EBFTLEVELS	INCBIN	PANEL2
GAMEPANEL	EQU	EBFTLEVELS+400
SPEEDLEVEL	EQU	GAMEPANEL+2560
GAMETEXT	EQU	SPEEDLEVEL+984
RESOFFSETS	INCBIN	RESOFFS
SMALLMISSILE	INCBIN	MISSILE
PROTECT	INCBIN	PROTECT
PROTECT1	INCBIN	PROTECT1

TESTING	SECTION	BSS

SHOPFLAGS	DS.L	1
BLOCKTABLE	DS.L	16
LEFTMASK	DS.L	2
MIDMASK	DS.L	2
RIGHTMASK	DS.L	2
LINECOUNT	DS.W	1
SKIDCOUNT	DS.W	1
CARCOUNT	DS.W	1
TRADECOUNT	DS.W	1
CASH	DS.L	1
OLDCASH	DS.L	1
LASTSCORE	DS.L	2
CRASHED	DS.W	1
RACENO	DS.W	1
RACESDONE	DS.W	1
RACEPOS	DS.W	1
MAXSPEED	DS.W	1
AVESPEED	DS.W	1
BESTLAP	DS.W	1
PRIZE	DS.W	1
CARTYPE	DS.W	1
CLASS	DS.W	1
TRACKNO	DS.W	1
TRACKSDONE	DS.W	5
whichengpercent	DS.L	1
whichbodpercent	DS.L	1
whichfuepercent	DS.L	1
whichtyrpercent	DS.L	1
NOCOLORS	DS.W	16
MAINPAL	DS.W	16
MAINSTORE	DS.W	48
MAINVALS	DS.W	48
PANELPAL	DS.W	16
PANELSTORE	DS.W	48
PANELVALS	DS.W	48
	DS.B	256
DISPLAY	DS.B	32032
PALLET	DS.B	32

EMPTYBIT	DS.B	61008
MISSILE	EQU	EMPTYBIT
PLANMAP	EQU	MISSILE+3072
CAR0	EQU	PLANMAP+2104
CARMASK0	EQU	CAR0+4992
CAR1	EQU	CARMASK0+4992
CARMASK1	EQU	CAR1+4992
CAR2	EQU	CARMASK1+4992
CARMASK2	EQU	CAR2+4992
CAR3	EQU	CARMASK2+4992
CARMASK3	EQU	CAR3+4992
PICTUREDATA	EQU	CARMASK3+4992
BLOCKS	EQU	PICTUREDATA+8400

*	COMPRESSED GAME BIT

BLUECAR	EQU	BLOCKS
REDCAR	EQU	BLUECAR+4660
WHITECAR	EQU	REDCAR+5184
COMPCAR1	EQU	WHITECAR+5488
COMPCAR2	EQU	COMPCAR1+4332
COMPCAR3	EQU	COMPCAR2+4804
CARMAPS	EQU	COMPCAR3+5100
COURSES	EQU	CARMAPS+6040
BLOCKSCMP	EQU	COURSES+4136
LIGHTS	EQU	BLOCKSCMP+12160
GAMEFREE	EQU	LIGHTS+884

*	COMPRESSED TITLES BIT

TITLEMASKCMP	EQU	EMPTYBIT
TITLECARS	EQU	TITLEMASKCMP+340
TITLETYRES	EQU	TITLECARS+4844
TITLESCRN	EQU	TITLETYRES+1264
RONANIMCMP	EQU	TITLESCRN+17892
RONSCRN	EQU	RONANIMCMP+3688
CREDSCRN	EQU	RONSCRN+8452
NAMESCRN	EQU	CREDSCRN+13504
NAMECMP	EQU	NAMESCRN+10080

*	UNCOMPRESSED TITLES BIT

TITLEMASK	DS.B	42*160	(TITLE FRONT MASK)
RONANIM	EQU	TITLEMASK
RON	EQU	RONANIM+6*8*14+4*3*16
NAMELETR	EQU	TITLEMASK
TITLEBACK	DS.B	42*160	(TITLE BACKGROUND)
BIGCAR1	DS.B	11*12*42*8
BIGCAR2	DS.B	11*12*42*8
BIGCAR3	DS.B	11*12*42*8
TYRE1	DS.B	16*16*4*16
TYRE2	DS.B	16*16*4*16
TYRE3	DS.B	16*16*4*16
PANEL	DS.B	50*1024
ATEND	EQU	*

*	EXTRA BITS

PANELTEXT	EQU	PANEL+3200
CURPANEL	EQU	PANEL+7040
RESANIMS	EQU	CURPANEL+3200
RESNUMS	EQU	RESANIMS+14208
RESNUMPSTNS	EQU	RESNUMS+384
GAMEOVER	EQU	RESNUMPSTNS+200
LASTANIMS	EQU	GAMEOVER+12160
ZEND	EQU	LASTANIMS+20

*	COMPRESSED OPTIONS BIT

OPTSCRN	EQU	EMPTYBIT
SHOPANIMCMP	EQU	OPTSCRN+17412
GARAGE	EQU	SHOPANIMCMP+908
SALESMAN	EQU	GARAGE+15560
SALESCMP	EQU	SALESMAN+9280
SALEANIMCMP	EQU	SALESCMP+6360
SALETEXTCMP	EQU	SALEANIMCMP+2364
PARSPEC	EQU	SALETEXTCMP+13088
TAROSPEC	EQU	PARSPEC+13936
VAUGSPEC	EQU	TAROSPEC+12236

*	UNCOMPRESSED OPTIONS BIT

SHOPANIM	EQU	EMPTYBIT+104136
SALES	EQU	SHOPANIM
SALEANIMS	EQU	SALES+8320
SALETEXT	EQU	SALEANIMS+3680
TEXTADDS	EQU	SALETEXT+23624
REPLIES	EQU	TEXTADDS+1760
SALEBUFFER	EQU	REPLIES+10
SALESTORE	EQU	SALEBUFFER+228
TEMPBUFF	EQU	SALESTORE+7680

*	COMPRESSED RESULTS BIT

RESCARS	EQU	EMPTYBIT
RESTYRES	EQU	RESCARS+4804
RESNUMCMP	EQU	RESTYRES+1264
RESANIMCMP	EQU	RESNUMCMP+152
RESULTSCRN	EQU	RESANIMCMP+9408
COMPSCRN	EQU	RESULTSCRN+15672
GAMEOVERCMP	EQU	COMPSCRN+7108
TYRECMP	EQU	GAMEOVERCMP+2912

BLOCKSUSED	EQU	BLOCKS+102400

	END
