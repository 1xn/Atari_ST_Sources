INLINE sprites%,6198
print_sprite%=sprites%
print_sprites%=sprites%+4
erase_sprites%=sprites%+8
clip_sprites%=sprites%+12
print_mask%=sprites%+16
print_invmask%=sprites%+20
fast_sprite%=sprites%+24
fast_mask%=sprites%+28
fast_invmask%=sprites%+32
store_sprite%=sprites%+36
sprite_width%=sprites%+40
' ~C:print_sprite%(frame,x,y,width,height,L:gfx,L:screen)
' ~C:print_sprites%(nspr,L:records)
' ~C:erase_sprites%(nspr,L:records)
' ~C:clip_sprites%(xmin,ymin,xmax,ymax)
' ~C:print_mask%(frame,x,y,width,height,L:gfx,L:screen)
' ~C:print_invmask%(frame,x,y,width,height,L:gfx,L:screen)
> PROCEDURE setup_sprites
  nspr=1                                      ! <- Insert number of sprites here
  DIM records|(26*nspr)                       ! Space for sprite records
  records%=V:records|(0)                      ! Pointer to records
  DIM sb|(nspr*1552)                          ! Buffer space for sprites
  sprite_buffer%=V:sb|(0)                     ! Pointer to buffer
  buffer_size%=0
  '
  FOR a=0 TO nspr-1
    '    setup_sprite(a,1,graphics32%,32,32)
  NEXT a
  '
  ' Buffer_size% holds the actual size used by the sprites. Use this value
  ' in the DIM sb|(insert size) statement.
  '
  buffer_size%=sprite_buffer%-V:sb|(0)
RETURN
> PROCEDURE setup_sprite(frame,mode,data%,w,h)
  LOCAL width,size,o%,erase%
  o%=ADD(records%,MUL(frame,26))               ! Pointer to sprite record
  IF w=16
    width=0
    size=MUL(10,h)                             ! Size of 16x sprite
    erase%=MUL(16,h)+8                         ! Erase buffer size
  ELSE
    width=1
    size=MUL(20,h)                             ! Size of 32x sprite
    erase%=MUL(24,h)+8                         ! Erase buffer size
  ENDIF
  WORD{o%}=mode                                ! New mode
  LONG{o%+2}=data%                             ! Graphics
  WORD{o%+12}=width                            ! Width
  WORD{o%+14}=h                                ! Height
  WORD{o%+16}=size                             ! Sprite data size
  LONG{o%+18}=sprite_buffer%                   ! Erase buffer 1
  ADD sprite_buffer%,erase%
  LONG{o%+22}=sprite_buffer%                   ! Erase buffer 2
  ADD sprite_buffer%,erase%
RETURN
> PROCEDURE get_xy(n,VAR x,y)
  LOCAL o%
  o%=ADD(records%,MUL(n,26))                   ! Pointer to sprite record
  x=WORD{o%+8}                                 ! Get x
  y=WORD{o%+10}                                ! Get y
RETURN
> PROCEDURE get_frame(n,VAR frame)
  LOCAL o%
  o%=ADD(records%,MUL(n,26))                   ! Pointer to sprite record
  frame=WORD{o%+6}                             ! Get frame number
RETURN
> PROCEDURE sprite_off(n)
  LOCAL o%
  o%=ADD(records%,MUL(n,26))                   ! Pointer to sprite record
  WORD{o%}=0                                   ! Turn mode OFF
RETURN
> PROCEDURE sprite_on(n)
  LOCAL o%
  o%=ADD(records%,MUL(n,26))                   ! Pointer to sprite record
  WORD{o%}=1                                   ! Turn mode ON
RETURN
> PROCEDURE clear_sprite(n)
  LOCAL o%
  o%=ADD(records%,MUL(n,26))
  WORD{LONG{o%+18}}=0
  WORD{LONG{o%+22}}=0
RETURN
> PROCEDURE sprite(n,frame,xs,ys)
  LOCAL o%
  o%=ADD(records%,MUL(n,26))                   ! Pointer to sprite record
  WORD{o%+6}=frame                             ! New frame
  WORD{o%+8}=xs                                ! New x
  WORD{o%+10}=ys                               ! New y
RETURN
