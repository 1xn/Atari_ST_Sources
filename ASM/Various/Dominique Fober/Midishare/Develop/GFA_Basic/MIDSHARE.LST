'
' **************************************************************************
' **************** Les fonctions d'interfa‡age de MidiShare ****************
' **************************************************************************
'
> PROCEDURE lisez_moi_midi_share
  '
  '
  ' MIDISHARE est un module logiciel con‡u sp‚cialement pour permettre le
  ' fonctionnement et le d‚veloppement d'applications Midi dans un contexte
  ' multi-tƒches et temps r‚el.
  '
  ' MIDISHARE prend en charge la plupart des problŠmes sp‚cifiques li‚s au
  ' d‚veloppement d'applications Midi: gestion des flux Midi, gestion du
  ' temp, gestion des tƒches. En outre, MIDISHARE permet le fonctionnement
  ' simultan‚ de ces applications, ainsi que l'‚tablissement de connections
  ' Midi virtuelles entre celles-ci.
  ' ------------------------------------------------------------------------
  '  		            c GRAME 1989, 1990, 1991, 1992
  ' 	          [Yann Orlarey, Herv‚ Lequay, Dominique fober]						
  ' ------------------------------------------------------------------------
  '
  '
  ' Le pr‚sent fichier doit etre ins‚r‚ dans tout programme utilisant les
  ' fonctions de MidiShare.
  ' Il d‚crit les points d'entr‚e de MidiShare, ainsi que les structures
  ' de donn‚es et les constantes utilis‚es. Le code MidiShare proprement
  ' dit est contenu dans le fichier MIDSHARE.PRG, qui doit etre plac‚
  ' dans un dossier Auto. Au d‚marrage de la machine, ce code est charg‚
  ' en m‚moire, il est ancr‚ au vecteur $94 (trap 5). Toutes les
  ' proc‚dures et fonctions d‚finies ci-dessous se servent de cette "ancre"
  ' pour acc‚der au code.
  '
  ' ___________________________________________________________________________
  '
  '       TYPES D'EVENEMENTS
  ' ___________________________________________________________________________
  '
  ' Constantes d‚finissant les types d'‚v‚nements manipul‚s par MidiShare.
  ' Cette typologie inclut bien entendu les diff‚rents types Midi, mais
  ' aussi d'autres cat‚gories d'‚v‚nements, en particulier les Notes, les
  ' Streams, les Process et les types Priv‚s. Ces codes sont … utiliser
  ' entre autre avec la fonction midi_new_ev.
  ' ***************************************************************************
  '
  ' type_note        = 0       ! note avec hauteur, v‚locit‚ et dur‚e en ms
  '
  ' type_key_on      = 1       ! Note On avec hauteur et v‚locit‚
  ' type_key_off     = 2       ! Note Off avec hauteur et v‚locit‚
  ' type_key_press   = 3       ! Poly KeyPress avec hauteur et pression
  ' type_ctrl_change = 4       ! Control Change avec controleur et valeur
  ' type_prog_change = 5       ! Program Change avec num‚ro de programme
  ' type_chan_press  = 6       ! Channel Pressure avec pression
  ' type_pitch_wheel = 7       ! Pitch Wheel avec LSB et MSB
  ' type_song_pos    = 8       ! Song Position Pointer avec LSB et MSB
  ' type_song_sel    = 9       ! Song Select avec num‚ro de song
  ' type_clock       = 10      ! Timing Clock
  ' type_start       = 11      ! Start
  ' type_continue    = 12      ! Continue
  ' type_stop        = 13      ! Stop
  ' type_tune        = 14      ! Tune Request
  ' type_active_sens = 15      ! Active Sensing
  ' type_reset       = 16      ! System Reset
  ' type_sys_ex      = 17      ! System Exclusive de longueur variable
  ' type_stream      = 18      ! Flot Midi quelconque de longueur variable
  ' type_private     = 19      ! 19...127  ‚v‚nement priv‚ … usage libre
  ' type_process     = 128     ! ‚vŠnement priv‚ servant au MidiCall
  ' type_dprocess    = 129     ! ‚vŠnement priv‚ servant au midi_dtask
  ' typeQuarterFrame = 130     ! ‚v‚nement de synchronisation MTC
  ' typeCtrl14b      = 131     ! controleur 14 bits
  ' typeNonRegParam  = 132     ! non registered parameter
  ' typeRegParam     = 133     ! registered parameter
  '
  ' Tous les ‚vŠnements suivants sont des ‚vŠnements de la norme MIDIFILE.
  '
  ' typeSeqNum       = 134     ! num‚ro de s‚quence
  ' typeText         = 135     ! ‚v‚nement texte
  ' typeCopyright    = 136     ! message copyright
  ' typeSeqName      = 137     ! nom de s‚quence ou de piste
  ' typeInstrName    = 138     ! nom d'instrument
  ' typeLyric        = 139     ! paroles d‚stin‚es … etre chant‚es
  ' typeMarker       = 140     ! marqueur
  ' typeCuePoint     = 141     ! cue point
  ' typeChanPrefix   = 142     ! Midi Channel Prefix
  ' typeEndTrack     = 143     ! fin de piste
  ' typeTempo        = 144     ! changement de tempo
  ' typeSMPTEOffset  = 145     ! offset smpte
  ' typeTimeSign     = 146     ! indication de mesure
  ' typeKeySign      = 147     ! signature tonale
  ' typeSpecific     = 148     ! m‚ta evt sp‚cifique … un s‚quenceur
  '
  ' typeReserved     = 149..254! reserved for future extensions
  '
  ' type_dead        = 255     ! ‚vŠnement priv‚ invalid‚
  '
  '
  ' ***************************************************************************
  '       CODES MIDI
  ' ___________________________________________________________________________
  ' Constantes d‚finissant les codes de statut Midi.
  ' ***************************************************************************
  '
  ' note_off     = &H80
  ' note_on      = &H90
  ' poly_touch   = &HA0
  ' control_chg  = &HB0
  ' program_chg  = &HC0
  ' after_touch  = &HD0
  ' pitch_bend   = &HE0
  ' sysreal_time = &HF0
  ' sys_ex       = &HF0
  ' undef_1      = &HF1
  ' song_pos     = &HF2
  ' song_sel     = &HF3
  ' undef_2      = &HF4
  ' undef_3      = &HF5
  ' tune         = &HF6
  ' end_sys_x    = &HF7
  ' m_clock      = &HF8
  ' undef_4      = &HF9
  ' m_start      = &HFA
  ' m_cont       = &HFB
  ' m_stop       = &HFC
  ' undef_5      = &HFD
  ' act_sense    = &HFE
  ' m_reset      = &HFF
  '
  '
  ' ***************************************************************************
  '       PORTS MIDI
  ' __________________________________________________________________________
  ' Constantes d‚finissant les ports Modem et Printer.
  ' ***************************************************************************
  '
  ' port_modem   = 0
  ' port_printer = 1
  '
  '
  ' ***************************************************************************
  '       CODES D'ERREURS
  ' __________________________________________________________________________
  ' Constantes d‚finissant les codes d'erreurs renvoy‚s par certaine
  ' fonctions de MidiShare.
  ' ***************************************************************************
  '
  ' midi_err_space   = -1        ! plus de place dans la freeList
  ' midi_err_refnum  = -2        ! mauvais numero de reference
  ' midi_err_badtype = -3        ! mauvais type d'‚v‚nement
  ' midi_err_index   = -4        ! mauvais index d'acces … un ‚v‚nement
  '
  '
  ' ****************************************************************************
  ' 							SYNCHRONISATION CODES								
  ' ****************************************************************************
  '
  ' MIDISyncExternal = &H8000     ! bit-15 for external synchronisation
  ' MIDISyncAnyPort  = &H4000     ! bit-14 for synchronisation on any port
  '
  '
  ' **************************************************************************
  '       CODES D'APPLICATIONS
  ' __________________________________________________________________________
  ' Constantes d‚finissant les codes de modification du statut des
  ' applications. Codes utilis‚s pour signaler … une application, toute
  ' modification survenue aux autres applications (ouverture, connexion,
  ' d‚connexion...). Ce code est toujours fourni avec le num‚ro de
  ' r‚f‚rence de l'application modifi‚e sous la forme d'un long:
  ' $rrrrcccc (r= refnum, c=code)
  ' ***************************************************************************
  '
  '
  ' midi_open_appl     = 1
  ' midi_close_appl    = 2
  ' midi_chg_name      = 3
  ' midi_chg_connect   = 4
  ' midi_open_modem    = 5
  ' midi_close_modem   = 6
  ' midi_open_printer  = 7
  ' midi_close_printer = 8
  '
  '
  ' **************************************************************************
  '       STRUCTURES DES EVENEMENTS
  ' __________________________________________________________________________
  ' Tous les ‚v‚nements sont construits … l'aide d'une ou plusieurs
  ' cellules de taille fixe (16 octets). La plupart ne n‚cessitent
  ' qu'une seule cellule. D'autres, comme les System Exclusive n‚cessitent
  ' plusieurs cellules chain‚es.
  ' ***************************************************************************
  '
  ' /*----------------Cellule d'extension d'un System Exclusive---------------*/
  ' offset        contenu         type            signification
  '   0            link           long       lien de chainage cellule suivante
  '   4            data           byte       12 octets de donn‚es
  '
  ' /*----------------Cellule d'extension d'un Private------------------------*/
  ' offset        contenu         type            signification
  '   0            ptr1           long       pointeurs … utiliser librement
  '   4            ptr2           long       par l'application
  '   8            ptr3           long
  '   12           ptr4           long
  '
  ' /*----------------Cellule d'un ‚v‚nement normal---------------------------*/
  ' offset        contenu         type            signification
  '   0            link           long       chainage: adresse de l'evt  suivant
  '   4            date           long       date de l'‚v‚nement en ms
  '   8            ev_type        byte       type de l'‚v‚nement
  '   9            refNum         byte       num‚ro de r‚f‚rence de l'application
  '  10            port           byte       port Midi
  '  11            chan           byte       canal Midi
  ' puis selon le type de l'‚v‚nement:
  ' ----------------------------------- pour un ‚v‚nement de type note:
  '  12            pitch          byte       hauteur de la note
  '  13            vel            byte       sa v‚locit‚
  '  14            dur            word       sa dur‚e
  ' ----------------------------------- pour un autre message Midi:
  '  12            data 1         byte       les octets de donn‚e au format
  '  13            data 2         byte       de la norme Midi
  '  14            data 3         byte
  '  15            data 4         byte
  ' ----------------------------------- pour un systŠme exclusive:
  '  12            linkSE         long       pointeur extension system exclusive
  ' ----------------------------------- pour un message priv‚:
  '  12            linkST         long       pointeur extension msg priv‚
  ' ----------------------------------- pour MidiFile time signature:
  '  12            numerateur     byte       le num‚rateur
  '  13            denominateur   byte       d‚nominateur comme puissance n‚g. de 2
  '  14            nClocks        byte       nombre  de clocks Midi par battue
  '  15            n32nd          byte       nombre de 32nd notes par noire
  ' ----------------------------------- pour MidiFile key signature:
  '  12            ton            byte       0: key of C, 1: 1 sharp -1: 1 flat etc...
  '  13            mode           byte       0: major 1: minor
  '  14            unused         word       inutilis‚
  ' ----------------------------------- pour MidiFile sequence number:
  '  12            number         word       num‚ro de la s‚quence
  '  14            unused         word       inutilis‚
  ' ----------------------------------- pour MidiFile tempo:
  '  12            tempo          long       en microsec par Midi quarter note
  '
  '
  ' /*----------------En tete de s‚quence-------------------------------------*/
  ' offset        contenu         type            signification
  '   0            first          long       ptr sur le premier ‚vt de la s‚quence
  '   4            last           long       ptr sur le dernier ‚vt de la s‚quence
  '   8            undef1         long       r‚serv‚
  '   12           undef2         long       r‚serv‚
  '
  '
  ' /*----------------Filtres Midi--------------------------------------------*/
  ' offset        contenu         type            signification
  '   0            port[16]       word       ports 0 … 255 : 256 bits
  '  32            ev_type[16]    word       types 0 … 255 : 256 bits
  '  64            channel        word       canaux 0 … 15 :  16 bits
  '  80            unused         word       r‚serv‚
  '
  ' /*----------------Nom d'application Midi Share----------------------------*/
  ' doit etre au format 'C' standard c'est … dire, doit se terminer par un
  ' z‚ro (indicateur de fin de chaine). De plus, il ne doit pas exc‚der
  ' 32 caractŠres ( '0' inclus).
  '
  '
  ' /*----------------Infos de synchronisation -------------------------------*/
  ' offset        contenu         type            signification
  '   0            time           long       date courante
  '   4            reenter        long       nombre de r‚entrance de l'horloge
  '   8            mode           word       mode de synchronisation
  '  10            locked         byte       synchro locked
  '  11            port           byte       port de synchronisation
  '  12            start          long       date de d‚but de synchronisation
  '  16            stop           long       date de fin de synchronisation
  '  20            offset         long       offset de la synchro
  '  24            speed          long       sa vitesse
  '  28            breaks         long       nombre de ruptures de synchro
  '  32            format         word       format de la synchro
  '
  ' /*----------------Location smpte -----------------------------------------*/
  ' offset        contenu         type            signification
  '   0            format         word       0:24f/s, 1:25f/s, 2:30DFf/s, 3:30f/s
  '   2            heures         word       0..23
  '   4            minutes        word       0..59
  '   6            secondes       word       0..59
  '   8            frames         word       0..30 (according to format)
  '  10            fracs          word       0..99 (1/100 of frames)
  '
  '
  ' ****************************************************************************
  ' ----------------------------------------------------------------------------
  '
  '       D‚finition des fonctions et proc‚dures d'appel … Midishare
  '
  ' Le code de MidiShare proprement dit est charg‚ par MIDSHARE.PRG.
  ' Les fonctions et proc‚dures d‚finies ci-dessous donnent accŠs au
  ' code r‚sident de MidiShare par l'interm‚diaire d'un sous-programme
  ' assembleur rang‚ dans la variable 'msh_adr%' et contenant le code
  ' suivant:      addq.l #4,sp
  '               trap   #5
  '               subq.l #4,sp
  '               rts
  ' Ce code permet de formatter les paramŠtres pass‚s en argument aux
  ' fonctions et proc‚dures d'appel … MidiShare. L'appel des fonctions
  ' r‚sidentes de MidiShare se fait ensuite comme pour les appels
  ' systŠme (gemdos, bios, xbios): les paramŠtres sont pouss‚s sur la
  ' pile, puis le num‚ro de la fonction, enfin le programme effectue un
  ' saut vectoris‚ … l'adresse point‚e par &H94 (vecteur du trap 5 en
  ' principe inutilis‚, point d'ancrage de MidiShare qui contient l'adresse
  ' d'une routine de dispatch qui r‚alise l'appel effectif de la fonction).
  ' Le vecteur &H94 est initialis‚ au chargement par MIDSHARE.PRG.
  ' La variable 'msh_adr%' doit etre initialis‚e par le programme appelant
  ' avant toute utilisation des fonctions ou proc‚dures d‚finies ci-dessous,
  ' grace … l'appel pr‚alable de la proc‚dure 'init_midishare'.
  '
  ' Pour plus d'infos sur les proc‚dures suivantes,
  ' voir la documentation d‚veloppeur MIDISHARE ou l'accessoire MIDIHELP
  '
  '
  ' ***************************************************************************
  '
  ' (@) GRAME 1989, Yann Orlarey, Herv‚ Lequay, Dominique Fober
  '
  ' ***************************************************************************
RETURN
'
' ---------------------- initialisation de MidiShare ----------------------
'
> FUNCTION init_midishare
LOCAL midi_dispatch%,a$
msh_mem%=MALLOC(36)
IF msh_mem%
  RESTORE msh_data
  FOR i%=0 TO 8
    READ midi_dispatch%
    LPOKE msh_mem%+(i%*4),midi_dispatch%
  NEXT i%
  msh_adr%=msh_mem%
  msh_set_alarm%=msh_mem%+4
  msh_alarm%=msh_mem%+16
ENDIF
RETURN (msh_mem%)
'
msh_data:
DATA &H4E464E75
DATA &H202F0004,&H41FA0014,&H20804E75
DATA &H202F0006,&H41FA0008,&H20502080
DATA &H4E750000,&H00000000
'
ENDFUNC
'
' -------------------- AccŠs … l'environnement ----------------------------
'
> FUNCTION midi_get_version
LOCAL v%
v%=C:msh_adr%(0)
RETURN (DPEEK(VARPTR(v%)+2))
ENDFUNC
'
> FUNCTION midi_count_appls
LOCAL c%
c%=C:msh_adr%(1)
RETURN (DPEEK(VARPTR(c%)+2))
ENDFUNC
'
> FUNCTION midi_get_ind_appl(index&)
LOCAL r%
r%=C:msh_adr%(2,index&)
RETURN (DPEEK(VARPTR(r%)+2))
ENDFUNC
'
> FUNCTION midi_get_named_appl(midi_name$)
LOCAL r%
r%=C:msh_adr%(3,L:VARPTR(midi_name$))
RETURN (DPEEK(VARPTR(r%)+2))
ENDFUNC
'
' --------------------- Synchronisation smpte ------------------------------
'
> PROCEDURE midi_get_sync_info(info$)
~C:msh_adr%(&H39,L:VARPTR(info$))  ! info est une chaine d'au moins 34 caractŠres
RETURN
'
> PROCEDURE midi_set_sync_mode(mode&)
~C:msh_adr%(&H3A,refnum&)
RETURN
'
> FUNCTION midi_get_ext_time(void)
RETURN (C:msh_adr%(&H3E))
ENDFUNC
'
> FUNCTION midi_int_2_ext_time(time%)
RETURN (C:msh_adr%(&H3F,L:time%))
ENDFUNC
'
> FUNCTION midi_ext_2_int_time(time%)
RETURN (C:msh_adr%(&H40,L:time%))
ENDFUNC
'
> PROCEDURE midi_time_2_smpte(time%,format&,loc%)
~C:msh_adr%(&H41,L:time%,format&,L:VARPTR(loc%))
RETURN
'
> FUNCTION midi_smpte_2_time(loc%)
RETURN (C:msh_adr%(&H42,L:VARPTR(loc%)))
ENDFUNC
'
' --------------------- Ouverture / Fermeture ------------------------------
'
> FUNCTION midi_open(midi_name$)
LOCAL r%
r%=C:msh_adr%(4,L:VARPTR(midi_name$))
RETURN (DPEEK(VARPTR(r%)+2))
ENDFUNC
'
> PROCEDURE midi_close(refnum&)
~C:msh_adr%(5,refnum&)
RETURN
'
' ----------------- Configuration de l'application ------------------------
'
> FUNCTION midi_get_name(refnum&)
RETURN (C:msh_adr%(6,refnum&))
ENDFUNC
'
> PROCEDURE midi_set_name(refnum&,midi_name$)
~C:msh_adr%(7,refnum&,L:VARPTR(midi_name$))
RETURN
'
> FUNCTION midi_get_info(refnum&)
RETURN (C:msh_adr%(8,refnum&))
ENDFUNC
'
> PROCEDURE midi_set_info(refnum&,info_ptr%)
~C:msh_adr%(9,refnum&,L:info_ptr%)
RETURN
'
> FUNCTION midi_get_filter(refnum&)
RETURN (C:msh_adr%(&HA,refnum&))
ENDFUNC
'
> PROCEDURE midi_set_filter(refnum&,filter_ptr%)
~C:msh_adr%(&HB,refnum&,L:filter_ptr%)
RETURN
'
'
' ------------------------- Connexions internes --------------------------
'
> PROCEDURE midi_connect(src&,dest&,state!)
~C:msh_adr%(&H10,src&,dest&,state!)
RETURN
'
> FUNCTION midi_is_connected(src&,dest&)
LOCAL state!
state!=C:msh_adr%(&H11,src&,dest&)
RETURN (state!)
ENDFUNC
'
' ------------------------ Gestion des ports midi -----------------------
'
> FUNCTION midi_get_port_state(port&)
LOCAL state!
state!=C:msh_adr%(&H12,port&)
RETURN (state!)
ENDFUNC
'
> PROCEDURE midi_set_port_state(port&,state!)
~C:msh_adr%(&H13,port&,state!)
RETURN
'
' -------------------------- Gestion des ‚v‚nements ----------------------
'
> FUNCTION midi_free_space
RETURN (C:msh_adr%(&H14))
ENDFUNC
'
> FUNCTION midi_new_cell
RETURN (C:msh_adr%(&H33))
ENDFUNC
'
> PROCEDURE midi_free_cell(event_ptr%)
~C:msh_adr%(&H34,L:event_ptr%)
RETURN
'
> FUNCTION midi_total_space
RETURN (C:msh_adr%(&H35))
ENDFUNC
'
> FUNCTION midi_new_ev(type&)
RETURN (C:msh_adr%(&H15,type&))
ENDFUNC
'
> FUNCTION midi_copy_ev(event_ptr%)
RETURN (C:msh_adr%(&H16,L:event_ptr%))
ENDFUNC
'
> PROCEDURE midi_free_ev(event_ptr%)
~C:msh_adr%(&H17,L:event_ptr%)
RETURN
'
> PROCEDURE midi_set_field(event_ptr%,field%,val%)
~C:msh_adr%(&H3B,L:event_ptr%,L:field%,L:val%)
RETURN
'
> FUNCTION midi_get_field(event_ptr%,field%)
RETURN (C:msh_adr%(&H3C,L:event_ptr%,L:field%))
ENDFUNC
'
> PROCEDURE midi_add_field(event_ptr%,val%)
~C:msh_adr%(&H1A,L:event_ptr%,L:val%)
RETURN
'
> FUNCTION midi_count_fields(event_ptr%)
RETURN (C:msh_adr%(&H3D,L:event_ptr%))
ENDFUNC
'
' ------------------------- Gestion des s‚quences -------------------------
'
> FUNCTION midi_new_seq
RETURN (C:msh_adr%(&H1D))
ENDFUNC
'
> PROCEDURE midi_add_seq(seq_ptr%,event_ptr%)
~C:msh_adr%(&H1E,L:seq_ptr%,L:event_ptr%)
RETURN
'
> PROCEDURE midi_free_seq(seq_ptr%)
~C:msh_adr%(&H1F,L:seq_ptr%)
RETURN
'
> PROCEDURE midi_clear_seq(seq_ptr%)
~C:msh_adr%(&H20,L:seq_ptr%)
RETURN
'
' --------------------------------- Date courante -------------------------
'
> FUNCTION midi_get_time
RETURN (C:msh_adr%(&H22))
ENDFUNC
'
' ------------------------------- Emissions Midi --------------------------
'
> PROCEDURE midi_send_im(refnum&,event_ptr%)
~C:msh_adr%(&H23,refnum&,L:event_ptr%)
RETURN
'
> PROCEDURE midi_send(refnum&,event_ptr%)
~C:msh_adr%(&H24,refnum&,L:event_ptr%)
RETURN
'
> PROCEDURE midi_send_at(refnum&,event_ptr%,date%)
~C:msh_adr%(&H25,refnum&,L:event_ptr%,L:date%)
RETURN
'
' ------------------------------ Receptions Midi --------------------------
'
> FUNCTION midi_count_evs(refnum&)
RETURN (C:msh_adr%(&H26,refnum&))
ENDFUNC
'
> FUNCTION midi_get_ev(refnum&)
RETURN (C:msh_adr%(&H27,refnum&))
ENDFUNC
'
> FUNCTION midi_avail_ev(refnum&)
RETURN (C:msh_adr%(&H28,refnum&))
ENDFUNC
'
> PROCEDURE midi_flush_evs(refnum&)
~C:msh_adr%(&H29,refnum&)
RETURN
'
' ---------------------------- Boite aux lettres --------------------------
'
> FUNCTION midi_read_sync(adr_mem%)
RETURN (C:msh_adr%(&H2A,L:adr_mem%))
ENDFUNC
'
> FUNCTION midi_write_sync(adr_mem%,val%)
RETURN (C:msh_adr%(&H2B,L:adr_mem%,L:val%))
ENDFUNC
'
' ---------------------------- Controle MidiShare ------------------------
'
> FUNCTION midi_share
LOCAL is!
LOCAL stack_ptr%,strg_ptr%
'
stack_ptr%=BIOS(&H20,L:0)
strg_ptr%=LPEEK(&H94)-18
IF (LPEEK(strg_ptr%)=&H4D494449) AND (LPEEK(strg_ptr%+4)=&H53484152) AND (DPEEK(strg_ptr%+8)=&H4500)
is!=TRUE
ELSE
is!=FALSE
ENDIF
~BIOS(&H20,L:stack_ptr%)
RETURN (is!)
ENDFUNC
'
' ------------------------- Fonctions d'acces aux filtres ----------------
> PROCEDURE accept_bit(adr%,n&)
LOCAL offset&
offset&=n&
DIV offset&,8
POKE adr%+offset&,BSET(PEEK(adr%+offset&),MOD(n&,8))
RETURN
'
> PROCEDURE reject_bit(adr%,n&)
LOCAL offset&
offset&=n&
DIV offset&,8
POKE adr%+offset&,BCLR(PEEK(adr%+offset&),MOD(n&,8))
RETURN
'
> PROCEDURE invert_bit(adr%,n&)
LOCAL offset&
offset&=n&
DIV offset&,8
POKE adr%+offset&,BCHG(PEEK(adr%+offset&),MOD(n&,8))
RETURN
'
> FUNCTION is_accepted_bit(adr%,n&)
LOCAL offset&
offset&=n&
DIV offset&,8
RETURN BTST(PEEK(adr%+offset&),MOD(n&,8))
ENDFUNC
'
'
' ---------------------- Lecture des attributs d'un event ----------------
'
> FUNCTION event_link(event%)       ! retourne le lien de chainage
RETURN LPEEK(event%)
ENDFUNC
'
> FUNCTION event_date(event%)       ! retourne la date en ms (4 octets)
RETURN LPEEK(event%+4)              ! attention... 4 octets (mot long)
ENDFUNC
'
> FUNCTION event_type(event%)       ! retourne le type
RETURN PEEK(event%+8)               ! ex= 1 si key on
ENDFUNC                             !     2 si key off etc...
'
> FUNCTION event_refnum(event%)     ! retourne le numero de l'application source
RETURN PEEK(event%+9)
ENDFUNC
'
> FUNCTION event_port(event%)       ! retourne le num‚ro de port midi
RETURN PEEK(event%+10)
ENDFUNC
'
> FUNCTION event_chan(event%)       ! retourne le canal midi
RETURN PEEK(event%+11)
ENDFUNC
'
' Pour un ‚v‚nement de type note:
'
> FUNCTION event_pitch(event%)      ! retourne la hauteur de la note
RETURN PEEK(event%+12)
ENDFUNC
'
> FUNCTION event_velo(event%)       ! retourne la v‚locit‚
RETURN PEEK(event%+13)
ENDFUNC
'
> FUNCTION event_len(event%)        ! retourne la longueur de la note
RETURN DPEEK(event%+14)             ! attention... 2 octets
ENDFUNC
'
'
' --------------- Modification des attributs d'un event --------------------------
'
> PROCEDURE set_event_link(event%,next%)  ! modification du lien de
LPOKE event%,date%                      ! chainage d'un ‚v‚nement
RETURN
'
> PROCEDURE set_event_date(event%,date%)  ! affecte la date en ms (4 octets)
LPOKE event%+4,date%                      ! attention... 4 octets (mot long)
RETURN
'
> PROCEDURE set_event_type(event%,type|)  ! affecte le type … l'event
POKE event%+8,type|                       ! ex= 1 si key on
RETURN                                    !     2 si key off etc...
'
> PROCEDURE set_event_refnum(event%,ref_num|) ! affecte le numero de l'application source
POKE event%+9,refnum|
RETURN
'
> PROCEDURE set_event_port(event%,port|)   ! affecte le num‚ro de port midi
POKE event%+10,port|
RETURN
'
> PROCEDURE set_event_chan(event%,chan|)   ! affecte le canal midi
POKE event%+11,chan|
RETURN
'
' Pour un ‚v‚nement de type note:
'
> PROCEDURE set_event_pitch(event%,pitch|) ! change la hauteur de la note
POKE event%+12,pitch|
RETURN
'
> PROCEDURE set_event_velo(event%,velo|)   ! change la v‚locit‚
POKE event%+13,velo|
RETURN
'
> PROCEDURE set_event_len(event%,len%)     ! change la longueur de la note
DPOKE event%+14,len%                       ! attention, 2 octets
RETURN
