Tableau de bord du stage


Dimamche 11/4
-------------

La fonction objc_realoc() est fausse puisqu'on ne lui donne pas l'adresse du
pointeur vers l'ob_spec. Il faut donc en r‚‚crire une partie de cette
fonction pour que ce pointeur puisse etre passer a xaloc_aloc.

La solution la plus simple que j'ai trouv‚ est de passer directement
l'adresse de l'objet a r‚alouer a la fonction objc_realoc().

Mais tout cela est a voire apres le gestionnaire de memoire avec tableau de
pointeur sur pointeur.

Lundi 12/4
----------

Le stage commence. Je d‚but la r‚‚criture du gestionnaire de pointeur sur
block du gestionnaire de m‚moire. Il faut que l'on puisse d‚clarer un pointeur
vers n'importe quel adresse dans un bloc m‚moire. En effet, les blocs g‚r‚s
par le gestionnaire peuvent bouger grace a un "garbage collection".

On d‚finit donc la fonction xaloc_addptr() qui ajoute un pointeur dans le
tableau de pointeur suplementaire, et xaloc_supptr() suprime un pointeur.
Pour g‚rer cela de maniŠre rapide, on utilise un tableau de pointeur sur
pointeur rang‚ par ordre d'adresse (celle que l'application veut pointer).
Le gestionnaire poura faire une recherche dicotomique lorsqu'il veut
recherche tous les pointeur sur un bloc donn‚ lorsque celui-ci doit ˆtre
d‚placer lors d'un garbage collection.

Je modifie alors la structure d'un bloc m‚moire dans le gestionnaire :

	rsreset
blk_next	rs.l	1		; pointeur sur bloc suivant
blk_prec	rs.l	1		; pointeur sur bloc precedent
blk_num		rs.l	1
blk_size	rs.l	1		; taille du bloc
blk_state	rs.w	1	!!!	; etat du bloc (0 = vide, 1 = occupe)
blk_struc_size	rs.w	1

devient alors :

	rsreset
blk_next	rs.l	1		; pointeur sur bloc suivant
blk_prec	rs.l	1		; pointeur sur bloc precedent
blk_num		rs.l	1
blk_size	rs.l	1		; taille du bloc
blk_state	rs.b	1	!!!	; etat du bloc (0 = vide, 1 = occupe)
blk_numref	rs.b	1	!!!	; Nombre de reference faite au bloc memoire autre que le pointeur principal
blk_struc_size	rs.w	1

Le gestionnaire doit ˆtre modifier pour que blk_state soit maintenant sur
un word, et pour gerer les choses suivantes :

- Ajouter la recherche dicotomique de "pointeurs secondaires" dans la table blk_tbl lors de deplacement d'un bloc
- Ajouter la fonction xaloc_addptr avec Recherche du bloc vers lequel on pointe et increment de blk_numref
- Ajouter la fonction xaloc_supptr
- Ajouter la realocation du pointeur "principal" lors du deplacement d'un bloc
* Ajouter le test "plus de pointeurs" dans le xaloc_free pour ne pas effacer des bloc encore point‚
* Test et debuguage au moyen du source de test qu'il faut enrichir pour tester la validite du tableau de pointeur

Pour v‚rifier que tout se passe bien, j'utilise un source "mem_tst.s" pour
afficher et d‚buger la liste chain‚ et le tableau de pointeur.

Ce soir, les fonction xaloc_addptr et xaloc_supptr sont ecrite, ainsi que la fonction de realocation des
pointeur point‚ par les pointeur du tableau lors du garbage-collection. Elle ne sont pas encore teste et
debugue, je ferais cela demain. Manque aussi le test dans la fonction mfree permettant de verifier qu'aucun
pointeur ne pointe vers le bloc que l'on veut desalouer.

Mardi 13/04
-----------

Je me rend compte que on peut avoir besoin de deplacer un pointeur, dans le cas ou, par exemple, un pointeur
change de place. Il faut donc faire une fonction xaloc_moveptr(). Dans un 1er temps, cela peut se faire en
un xaloc_supptr() puis xaloc_addptr(). Mais cela n'est pas optimiser, puisqu'on vat faire 2 recherche consecutive
dans le tableau.
De plus, lors du garbage collection - ou plus exactement lors d'un deplacement de bloc - ce bloc peut contenir
des pointeurs. Il faut en informer le tableau de pointeur sur pointeur, ce qui n'etait pas fait hier.

Nottons que ma technique permet d'utiliser des pointeur dans un bloc, ces pointeur POUVANT pointer a l'interieur
du meme bloc, tout ‚tant r‚alou‚ a la vol‚.

Nottons enfin que ce gestionnaire m‚moire, s'il est utilis‚ dans mon application, peut trŠs bien se voire
proposer comme librairie dinamique, car a la fin des modifs, il sera totalement complet. Il est necessaire
y compris si on utilise la PMMU pour g‚rer la m‚moire, car si toutes les applications demande plein de petit
bloc m‚moire, alors l'arbre de PMMU devient trŠs vite hyper compliquer. Dans mon cas, puisqu'il y a d‚fragmentation
m‚moire (garbage collection) le systŠme tend … se simplifier de lui-meme.

Minuit, je decide de faire une defragmentation de mon D, ca fait au moins 4 mois
que je l'ai pas fait.
Arrrrg... Je viens de subir le bug du dernier secteur... Edge, lors d'une
defragmentation, m'a ecraser le boot-sector de ma partition E, celle contenant
tous les softs...
Je vais sur le net, rencontre kellis qui peut m'envoyer devpac. Ouf, je peux
bosser demain. Mais je peux pas lire mon courier ce soir.

Mercredi 14/04
--------------

A 16h20 tout le gestionnaire m‚moire est test‚ (grace au programme de test). Il fonctionne et est maintenant
operationnel.
Il manque cependant un fonction permettant de d‚placer l'adresses des pointeurs contenus dans le tableau
blk_tbl si se pointeur est contenue dans le bloc qui se d‚place. Je fais ca tout de suite.

C'esit.

Je passla modification de la routine objc_rloc() pour que celle-ci prenne bien en compte l'utilisation
des pointeurs. Pour etre sure de ne pas oublier de changer un des appels a la fonction, celle-ci change de
nom (des messages d'erreur arriveront pendant la compilation pour m'aider a changer les appels). Elle devient
objc_real().
De plus, elle doit maintenant tenir compte du bit "indirect" utilis‚ par david et moi pour ‚tendre les
possibilit‚es d'une ressource.

La fonction ne retourne plus rien, puiqu'avant elle retournais la nouvelle adresse de l'ob_spec (maintenant
elle doit le modifier toute seule !).

Ce soir, Xavier passe pour tenter de reparer ma partition E. Apres 2 heures 30 de travail acharner, il a
reussit a me reconstruire un boot-sector correct. OUF, J'AI TOUT RECUPERER. De plus, j'ai declarer 2 secteurs
de moins dans le boot-sector de ma partition D. Cela ne risque donc plus d'arriver a nouveau.

Note pour plus tard: penser a faire un backup de TOUT sur mes partitions C,D,E
et F, ne pas backuper uniquement mes sources.

Jeudi 15/04
-----------

Correction de 2 bugs dans le gestionnaire de memoire (une info n'etait pas copier lors d'un deplacement de
bloc (garbage collection) et il trainait des bugs dans le programme de test (beaucoup moins grave). Par
contre, j'ai mis pas mal de temps a m'en rendre compte...

Reecriture de objc_realoc() pour permettre l'utilisation du nouveau gestionnaire de memoire. Maintenant,
la routine est beaucoup plus sure (mais moins optimise, notament au niveau de la sauvegarde des registres).

Vendredi 16/04
--------------

Le bug du bus-error lors d'un double clic sur un icone de formulaire (fenetre liste de formulaire) est ENFIN
corrige ! Ca fait maintenant 1 an que je le traque, et je ne savais jamais si il est present (apres modification)
car ce bug est intermitant (depend-il de l'allignement du code ??? bisard...). En fait, cela venait du fait
que lors de la creation d'un nouveau formulaire, je teste pour savoir si il reste un pointeur en cherchant
une place vide (zero). Mais le tableau n'a jamais ete efface !!! Du coup, les pointeurs ne corresponde pas
avec le numero de l'arbre, et on pointe n'importe ou... sauf si par "chance" le tableau est rempli de zero
apres le malloc (ce qui arrive tout de meme assez souvent). Ce bug majeur est maintenant corrige en rajoutant
une info "nombre d'arbre present" dans la structure "mrsc". Je modifi donc les fonction "nouveau ressource",
"charge ressource", "nouvel arbre".

De plus, j'ai remarquer que la fonction xmalloc (malloc + effacement de la zone reserve) n'effacait pas la
bonne zone en memoire. J'utilise maintenant la fonctoin que m'a donner Sacha.

Je tente de corriger la sauvegarde.
Ca fait plus bus-error, par contre, il y a toujours un problem au niveau de la sauvegarde. Methode utilise
pour debuger : je prend un ressource sauver par interface que j'incbin en data. Au fur et a mesure de la sauvegarde
d'un ressource complet (genre compliquer avec beaucoup de formulaire) je verifie que ce que je sauve est cooerent
avec le ressource de interface.

Lors d'un deplacement d'un objet (exemple : copy de celui-ci, effacement d'un objet donc deplacement d'une
partie de l'arbre, etc...) il faut penser a en informer le gestionnaire de memoire car l'ob_spec peut
contenir un pointeur vers un bloc. Cela reste a faire.


Reste a faire pour ameliorer le gestionnaire de memoire (pour l'instant, pas urgent) :
--------------------------------------------------------------------------------------

Une fonction xaloc_grow() doit etre creer pour permetre l'agrandissement ou le retrecissement d'un bloc.
Pour ce faire, on fait un xaloc_aloc avec comme pointeur principale celui du bloc a resizer. On copie alors
le contenue de l'ancien bloc dans le nouveau et on declare l'ancien comme vide (prevoir une fusion si un
bloc a cote est vide). Pour optimiser, on peut :
	- Verifier s'il s'agit d'un retrecissement (auquel cas on change la taille et on fabrique un bloc vide
		a gauche du bloc a retrecir)
	- Verifier si le bloc immediatement a gauche est vide (si il est assez grand on l'utilise)

Ce que je vais faire la semaine prochaine :
-------------------------------------------

- Fiabilisation de la routine de sauvegarde.
- Edition des menus deroulants

Lundi 19/04
-----------

Apres 4 heures de tracage de la routine de sauvegarde, j'ai enlever de nombreuses erreurs. La premiere dans le comptage
du nombre de resol dans les icones couleurs (manquait un "bra boucle") et la seconde dans la transformation
ecran->vdi des icones couleurs. De plus, l'ob_spec d'un icone couleur doit contenir le numero de l'icone couleur
qu'il contient (donc on place la valeur courante du compteur).

Maintenant, ca sauve correctement.

Je passe donc a l'edition des menus !

Mardi 20/04
-----------

J'ai modifier les routines "nouvel arbre" et "charger arbre" pour qu'elle prenne en compte l'option "menu deroulant"
en plus de l'option "dialogue". Il y a maintenant deux type d'icones dans la fenetre liste d'arbre.

Je commence la routine de redraw. Impossible de trouver comment on fait pour tracer un rectangle en gris...
C pas grave, je le met en blanc et j'attend de demander a Sacha.

Mercredi 21/04
--------------

Maintenant, on se balade dans les menus (on peut selectionner un titre, qui deroule alors la liste de G_STRING),
ou une entree de menu. J'ai aussi realiser l'option "ajouter titre de menu" qui ajoute un G_TITLE, un G_BOX et une
G_STRING, ces deux dernier etant aligne avec le titre de menu, et les trois etant place a la fin de la liste.

Jeudi 22/04
-----------

J'ai rajouter la fonction "ajouter entree" et deux fleches (en haut en bas) pour permettre de deplacer les titres
de menus et les options dans le menu.

Vendredi 23/04
--------------

J'attaque la suppression d'un titre (et de ce qui se deroule) ou d'une entree.

A la fin de la semaine, les fonctions du menu fonctionne toutes, sauf la suppression.

Lundi 26/04
-----------

Petite seance de debugage et de stabilisation de l'appli. Les menus fonctionne maintenant sans bug (du moins,
je l'espere). De plus, j'ai trouve un bug dans le calcul de la mfdb permetant de realiser un "sprite" a partir
d'un objet. Le word "larg_mot" contenait la largeur en pixel * nombre de plan au lieu de :
	(largeur en pixel + 15) /16

Cela est surrement du a ma mauvaise lecture du compendium, qui il est vrai n'est pas tres clair la dessus.

Maintenant, la routine de copie realise aussi un objc_real() sur chaque objet copie. Les objets sont donc copier,
mais aussi ce que pointe leur ob_spec. Notton qu'il faudrait prevoir une option de copie "virtuelle", cet a dire
que justement, l'ob_spec ne devrait pas etre realoue, et dans ce cas, l'objet serait sauve dans le fichier ressource
avec le meme ob_spec (d'ou economie en memoire et sur disque). Cette option n'etant pas urgente, je la remet a plus
tard.

Mardi 27/04
-----------

Je n'ai pue bosser que le matin (environ 3 heures) ce qui fait que j'ai pas trop avance. Par contre, j'ai
decouvert un bug dans la partie "effacement des objets du vecteur arbre" de la routine d'effacement. En effet,
lors de l'effacement d'un menu, il s'est avere qu'un objet a son ob_next qui pointe sur lui-meme, ce qui fait
que la boucle objc_draw() devient infini (d'ou plantage lors du redessinement). Mais je n'ai pas trouve la
cause de cet effet...

Mercredi 28/04
--------------

C'est mon anniversaire !
Je n'ai pas reussi a trouver le bug dans la routine d'effacement, meme apres avoir trace pendant plus de 1h30.
Je passe donc a autre chose : je re-ecrit le remplissage de la boite de dialogue "label" (celle qui apparait
lors d'un double clic sur un objet).

[ ... quelques heures plus tard ... ]

J'ai trouve le bug de la fonction "delete". Il s'agissait d'un probleme lors de la boucle verifiant si deux
objets sont dans la liste des objets a efface, ce qui peut arriver si un objet est selectionne en meme temps
qu'un de ses peres (l'objet sera alors rajoute, puisque fils d'un des objets a effacer).
Remarque pour plus tard : les bugs ne sont JAMAIS la ou on les cherches !

J'envois une version par le net, puisque il ne reste plus aucun bug connus (sauf le cas du probleme de resolution
lors du vr_trnfm.

Jeudi 29/04
-----------

J'ajoute une fonction xaloc_grow() au gestionnaire de memoire. Celle-ci permet de changer (agrandir ou reduire) la
taille d'un bloc memoire. Cela me permetra de re-ecrire la fonction d'edition du texte des objets.

[ ... week-end a Paris de vendredi a mardi matin ... ]

Mardi 4/05 a Jeudi 6/05
-----------------------

J'ai corrige un bug dans la fonction xaloc_free() (un pointeur qui etait mal mis a jours) car la fonction xaloc_grow()
qui l'utilisait plantait.
Puis je suis rester pendant 2 jours sur un bug que je croyais situe dans le gestionnaire de memoire (puisque c'est
a un appel d'une de ses fonction que cela plantait). En fait, il s'agissait d'une erreur lors d'un remplissage d'une
zone de donnee d'un bloc. Les donnees depassait la taille du bloc et vennaient ecraser le pointeur sur bloc suivant
du bloc suivant (on me suit ???). Du coup, le pointeur sur bloc suivant du bloc suivant le bloc que l'on ecrit
etait remplis d'une adresse incoherente, ce qui faisait plante (normal...). Que de temps de perdu !!!

Vendredi 10/05
--------------

Correction d'un bug dans la copie d'un objet. Le calcul de la taille du malloc du buffer de copie (permettant
la sauvegarde de l'ecran lors de l'animation d'un "sprite") etait faux (trop petit). Cela detruisait du coup
un partie du ressource. Nottons que il y a de nouveaux problemes d'affichage qui sont apparu lors de la correction
d'un autre bug dans cette routine (uniquement de l'affichage, donc pas trop genant).

Lundi 10/05
-----------

Correction d'un bug lors de la sauvegarde. Si plus d'un G_IMAGE etait present dans le ressource a sauver,
cela produisait n'importe quoi (j'ai fait un add.l au lieu d'un move.l ...).

Lorsque une fenetre d'edition d'un dialogue s'ouvrai et que TOUT etait visible en largeur ou en hauteur,
le calcul de la position du slider vertical/horizontal provoquait une division par zero. C'est maintenant OK.

Fashion commence a REELEMENT etre stable et utilisable. Il n'y a plus un seul bug connu (sauf lors d'une sauvegarde
d'un icone lorsque l'affichage se trouve dans une resolution differente de la meilleur de celui-ci).

Mercredi 12/05
--------------

David m'a donner les infos sur les nouveaux objets Dolmen : les G_PIX (objet contenant un chemin d'une image
sur disque), les G_BOUNDING & G_BOUDED (affichant un formulaire dans un formulaire, et ce recursivement), les
G_LINE (affichant une ligne avec les extremites et la position reglables).

Mardi 11/05 a Jeudi 13/05
-------------------------

Je commence la fenetre apparaissant lorsqu'on double clic sur un objet. Il faut donc remplir les different champs
de cette fenettre en prenant les caracteristiques de l'objet et en le recopiant dans ces champs.

Une fois qu'on clique sur OK ou sur APPLIQUER il faut faire l'inverse : recopier les caracteristiques de l'objet
dans la fenetre, et les placer dans l'objet. Ces methodes sont fortement orientes objet.

Samedi 15/05
------------

On peut maintenant effacer un/des arbre(s) entier(s) en cliquant dans le menu deroulant (edition/delete).

Dimanche 16/05
--------------

Lorsqu'on appuis sur ESC, les objets selectionne sont deselectionne et les fenetres de modification des couleurs,
des flags et du textes sont grise (puisqu'aucun objet n'est selectionne).

Lorsqu'on passe la sourie au dessus d'une fenetre d'edition de boite de dialogue, les coordonnees de l'objet sous
le pointeur sourie s'affiche dans la fenetre principale, ainsi que le numero de l'objet et son ob_type etendu.

Les coordonnees de l'objet en cours de redimentionnement/deplacement sont aussi affiche.

Lundi 17/05
-----------

Un pointeur n'etait pas update dans la fonction objc_realoc() ce qui faisait que les masques des icones monochromes
etaient copier, mais le nouveau pointeur pas ajour faisait planter si l'icone source venait a disparaitre.

J'ai confondu le tableau intout et int_out (VDI/AES) dans le test de la taille d'un formulaire pour savoir si il est
trop grand pour faire disparaitre les sliders. Ca marche maintenant.

Mardi 18/05
-----------

La grille est totalement operationnel, y compris pour le redimentionnement. Malheureusement, il va quand meme faloir
changer des choses dedant, puisque Sacha m'a expliquer qu'il veut pouvoir changer le point d'originine de cette grille.

Mercredi 19/05
--------------

Avec David, nous avons defini un nouveau format de ressource sur disque. Il n'a plus rien a voire avec l'ancien format,
et il permet de placer n'importe quel type d'objet, y compris ceux auquel nous n'avons pas encore penser. Une table
de relocation est presente dans ce fichier, ce qui permet un chargement ultra rapide. J'ai maintenant la nouvelle
fonction objc_draw() de David et je vais pouvoir m'attaquer a l'edition des nouveaux objets.

Voici l'ordre dans lequel je compte faire les choses :
	1 - Routine de sauvegarde au nouveau format
	2 - Routine de chargement du systeme au nouveau format
	3 - Edition des nouveau type d'objet et ajout au differentes routines du soft

Nottons que les routines dependante du type d'objet ne sont pas encore identifie, et que lors de l'ajout du premier
nouveau type d'objet je ferais une liste des routines modifie

Jeudi 20/05
-----------

La fonction de sauvegarde est maintenant ecrite, il reste a la debuger.

Vendredi 21/05
--------------

Debugage de la routine de sauvegarde. J'ai trace toute la fonction, et j'ai retirer deux bugs. Je ne peux
pas encore tester la sauvegarde correctement car la fonction de chargement n'est pas encore ecrite.

Mardi 25/05
-----------

Ecriture de la grille au pixel pres. Elle fonctionne, mais Sacha et David me font savoir qu'elle ne remplis
pas les fonctions demandes. Je dois ecrire une fonction permettant de choisir l'origine de celle-ci.

Jeudi 27/05
-----------

La grille est maintenant totalement fonctionnelle. En choisissant l'option "Choisir objet origine", et en
cliquant sur un objet d'une boite de dialogue, on peut definir l'origine debutant au zero de cet objet.
On peut aussi definir une origine n'importe ou dans l'ecran, meme si aucune fenetre n'est sous la sourie.

Vendredi 28 a Lundi 31/05
-------------------------

Prestation Laser Class4 a Ermenonville. J'ai pue voire de mes propres yeux ce que donne un spectacle lazer
sur ecran d'eau pilot‚ par Jalousy.

Mardi 01/06
-----------

L'edition des menus permet maintenant de changer le texte de ceux-ci et on peut modifier les flags gris‚
et marqu‚ des options/titres de menu.
De plus, les menus sont maintenant alligne en fonction de la longueur du texte. En effet, lorsque l'on change
le texte d'un titre et donc sa taille, les suivant sont deplace, et lorsque l'on change le texte d'une entree,
et donc sa taille aussi, toutes les entrees de menus sont mise a la bonne taille.

Mercredi 02/06
--------------

Pour profiter du debogage source de notre outil maison (CENTinel) je decide de passer tout mon programme
de Assemble (l'assembleur de Brainstorm) vers Devpac (celui de Hisoft). Malheureusement, ils ne sont
pas totalement compatible entre eux, et la doc des parametres de l'assembleur et du linker de Hisoft n'est
pas du tout clair. Resultat, j'y ai passer presque deux jours (depuis mardi soire jusqu'a jeudi matin).

Jeudi 03/06
-----------

J'ai fait l'editeur de G_LINE, les objets GEMs contenant des ligne VDI parametrables (extremite en fleches,
arrondi ou rectangle, couleur parametrable, et position de la fleche dans le rectangle de l'objet, type de
motif (pointille, continue, etc...) et taille de la fleche). Nottons que la VDI de dolmen n'est pour l'instant
pas encore capable de gerer tous les attributs que mon logiciel edite.

Vendredi 04/06
--------------

La fonction systeme realisant un popup ne me plais pas du tout. Je code donc la mienne, qui est beaucoup plus
souple.

Samedi 05/06
------------

Pour pouvoir fabriquer un G_PIX et commencer l'edition de celui-ci je fabrique un debut de fonction de
transformation de type d'objet. On peut maintenant changer une G_BOX en G_PIX.

Lundi 07/06 a Jeudi 10/06
-------------------------

Je continue la fonction de transformation d'objet. Pour qu'elle soit reelement utilisable, je decide d'ecrire
une fonction par source/destination. Puisqu'il y a 18 type d'objet different, cela fait 18*17 routines, ce
qui fait 306 fonctions differentes. Heureusement, de nombreuse se recoupe et les copies de blocs dans le source
sont nombreuses. Cela fait tout de meme un gros travail, qui represente plus de 65 Ko de sources.
Ici, on voit que le "jmp ([table.w,pc,d0.w*4])" prend toute sa dimmention, puisqu'il aurait falu 300 comparaisons
differente, et jusqu'a 36 serie de "cmp/beq" pour acceder a une routine de transformation d'objet si j'avais
du me passer de table de saut. Et vive l'assembleur !

Vendredi 11/06
--------------

J'ai fait ce qu'il faut pour que les G_PIX fonctionne dans mon soft. Ca tourne au poil !

