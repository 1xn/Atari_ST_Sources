GWVA_COUNT_BYTES_0:			; a0=ptr string
GWVA_COUNT_BYTES:			; a0=ptr string d1=end of string char
GWVA_APP_OBJ_STORE_CURRENT_PATH:		; a0=ptr => U:\PATH\
GWVA_APP_OBJ_SET_PATH:		; a0=ptr => U:\PATH\
GWVA_APP_OBJ_SEARCH_SYSTEM_COOKIES:
GWVA_APP_OBJ_SEARCH_ONE_COOKIE:	; In : GWVA_APP_OBJ_SEARCH_IN_OUT, Out : GWVA_APP_OBJ_SEARCH_IN_OUT = ptr sur le mot long aprŠs la chaine donn‚e comme recherche ou 0.l si pas trouv‚
GWVA_APP_OBJ_SEARCH_ONE_XBRA:	; In : GWVA_APP_OBJ_SEARCH_IN_OUT : vecteur
GWVA_APP_OBJ_INSTALL_ONE_XBRA:	; In : GWVA_APP_OBJ_SEARCH_IN_OUT : vecteur
GWVA_APP_OBJ_REMOVE_ONE_XBRA:	; In : GWVA_APP_OBJ_SEARCH_IN_OUT : vecteur
GWVA_SHOW_MENU:	; Passe dans a0.l l'adresse de l'objet MENU … afficher
GWVA_HIDE_MENU:	; Passe dans a0.l l'adresse de l'objet MENU … effacer
GWVA_CHECK_MENU: 	; Passe dans a0.l l'adresse de l'objet MENU
GWVA_GREY_MENU: 	; Passe dans a0.l l'adresse de l'objet MENU
GWVA_FIND_FATHER_OBJECT:	; a0:pointeur objet root d'un form  d0:num‚ro du fils dont on cherche le pŠre
GWVA_ENABLE_DISABLE_OBJECT:	; d0.w : num‚ro du formulaire, d1.w : num‚ro de l'objet, d2=nouvel ‚tat (1=disable)
GWVA_SHOW_HIDE_TREE:	; d0.w : num‚ro du formulaire, d1.w : num‚ro de l'objet, d2=nouvel ‚tat (1 = hide)
RSC_ALERT_BOX:	; d0=num‚ro dans le ressource, d1=bouton d‚faut (1->3) sortie : d0=bouton
ALERT_BOX:	; a0=ptr chaine, d0=bouton d‚faut(1->3) sortie : d0=bouton
RETURN_TREE_OBJ_PTR:		; a0=adresse de stockage de l'adresse de base du
GWVA_PRG_MODAL_FORM:	; entr‚e : d0.w = num‚ro formulaire / sortie : d0.w = objet EXIT ou TOUCHEXIT
RETURN_FORM_OBJ_SCULPTURE:
RETURN_OBJ_IN_FORM_OBJ_PTR:
RETURN_TEXT_OBJ_IN_FORM_OBJ_PTR:	; d0=idx form, d1=idx obj txt => a1=ptr
AFFICH_HEXA:	; 'affichage hexa d'1 registre : d0=donn‚e d1=nb bits
STOCK_HEXA:	; sous routine transformation hexa-ASCII d'1 registre
HEXA2VALUE:	; a0=chaine, d0.b=fin de chaine, d1.l=sortie, d7.w : erreur (-1) -1(a0)=d0 si d7=0
STOCK_DECI:	; d0=valeur, a1 : destination o— stocker le chiffre en d‚cimal sign‚, sortie -1(a1)=0
DECI2VALUE:		; a0=chaine, d0.b=fin de chaine, d1.l=sortie, d7 = erreur, -1(a0)=d0 si d7=0
FILE_SELECTOR:	; In : a0=txt, a1=mask, a2=old pathname, Out:d0, a0=name ,a1=path, a2=pathname
GWVA_FSEL_DISK_PATH:		ds.b GWVA_MAX_PATH_LENGTH
GWVA_FSEL_FILE_PATHNAME:	ds.b GWVA_MAX_PATH_LENGTH
GWVA_FSEL_FILE_SELECTOR_PTR_NAME:	ds.b 8+1+3+1	; fileselect filename.
SAVE_PALETTES:
RESTORE_PALETTES:
GET_FILE_LENGTH:	; a0 = filename	retour d0.l (<0 si non trouv‚)
LOAD_FILE_IN_MEM:	; a0 : filename,d0=mxallox-mode	retour a0=ptr,d0=length (d0<=0 erreur)
RS232_SEND_STRING_WITH_TIMEOUT:	; a0=buffer,d0.l=length,d1.w=port,d2.l=timeout in 1/200 s
RS232_SEND_STRING_WITHOUT_CONTROL:	; a0=buffer,d0.l=length,d1.w=port
RS232_TEST_IF_CHAR_PRESENT:	; d0.w=port sortie d7=-1 : non
RS232_GET_AVAILABLE_CHARS:	; a0=buffer,d0.l=max store length,d1.w=port =>d0.l=nb captur‚s
GWVA_GET_FORMATED_DATE:		; a1=ptr destination : "29/06/1995"
GWVA_GET_FORMATED_TIME:		; a1=ptr destination : "19:20:00"
GWVA_GET_200HZ_COUNTER:		; … executer en superviseur (SUPEXEC)
GWVA_GET_200HZ_DELAY_SINCE_LAST_CALL:	; faire clr.l GWVA_OLD_200HZ_COUNTER avant 1er appel => retour d0.l
GWVA_OLD_200HZ_COUNTER:		ds.l 1
GWVA_CUR_200HZ_COUNTER:		ds.l 1
