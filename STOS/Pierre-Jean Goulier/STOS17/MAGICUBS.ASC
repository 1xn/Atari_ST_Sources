10 rem ************************************
20 rem *            MAGICUBS              *
30 rem ************************************
40 rem
50 fade 1
60 wait 50
70 curs off : key off 
80 hide 
90 mode 0
100 key off 
110 load "main.pi1"
120 load "bank.mbk"
130 locate 30,9 : print "SCORE:" : locate 29,13 : print "LIGNES:"
140 rem
150 rem * creation des tableaux *
160 dim TBLE(12,12)
170 dim RANG(12,12)
180 LEVEL=1
190 RANG=0
200 gosub 10000 : rem * calcule coordonn‚es et numero du cube *
210 gosub 15000 : rem * adapte la vitesse de chute … la difficult‚ *
220 sprite 1,XSTART,0,CUBE : wait vbl : move y 1,MVE$ : move on (1) : OK=true
230 rem * * * * * * * * * * * * * * * *
240 rem ****   DEBUT BOUCLE DE JEU ****
250 repeat 
260 XTABLE=x sprite(1)/16 : YTABLE=y sprite(1)/16 : rem * calcule coordonnees DANS LE TABLEAU du sprite *
270 if YTABLE=11 or TBLE(XTABLE,YTABLE+1)<>0 then gosub 16000
280 if fire and OK then gosub 30000
290 if jright and OK and XTABLE<12 then if TBLE(XTABLE+1,YTABLE)=0 then gosub 31000 : wait 6
300 if jleft and OK and XTABLE>1 then if TBLE(XTABLE-1,YTABLE)=0 then gosub 32000 : wait 6
310 until FIN=-1
320 end 
10000 rem ****
10010 rem * Tirage al‚atoire *
10020 rem ****
10030 rem
10040 CUBE#=1+(int(rnd(15)))
10050 if int(CUBE#/2)=CUBE#/2 then 10040
10060 CUBE=CUBE#
10070 rem
10080 XSTART=(1+(int(rnd(11))))*16
10090 RANG=0
10100 return 
15000 rem ****
15010 rem * Adapatation des vitesse
15020 rem ****
15030 rem
15040 if LEVEL=1 then MVE$="(10,16,0)e176"
15050 if LEVEL=2 then MVE$="(9,16,0)e176"
15060 if LEVEL=3 then MVE$="(8,16,0)e176"
15070 if LEVEL=4 then MVE$="(6,16,0)e176"
15080 if LEVEL=5 then MVE$="(7,16,0)e176"
15090 if LEVEL=6 then MVE$="(2,16,0)e176"
15100 if LEVEL>6 then MVE$="(1,16,0)e176"
15500 return 
16000 rem ****
16010 rem * arete chute du cube
16020 rem ****
16030 rem
16040 move off (1) : put sprite (1) : wait vbl : sprite off (1) : OK=false
16050 TBLE(XTABLE,YTABLE)=CUBE : RANG(XTABLE,YTABLE)=RANG
16060 if XTABLE<11 then if TBLE(XTABLE+1,YTABLE)=CUBE and RANG(XTABLE+1,YTABLE)=RANG then ink 14 : bar XTABLE*16,YTABLE*16 to (XTABLE*16)+16,(YTABLE*16)+16 : RANG(XTABLE,YTABLE)=0 : TBLE(XTABLE,YTABLE)=0 : RANG(XTABLE+1,YTABLE)=0 : TBLE(XTABLE+1,YTABLE)=0 : gosub 40000 : gosub 50000 : goto 16090
16070 if XTABLE>1 then if TBLE(XTABLE-1,YTABLE)=CUBE and RANG(XTABLE-1,YTABLE)=RANG then ink 14 : bar (XTABLE*16),YTABLE*16 to (XTABLE*16)+16,(YTABLE*16)+16 : RANG(XTABLE,YTABLE)=0 : TBLE(XTABLE,YTABLE)=0 : RANG(XTABLE-1,YTABLE)=0 : TBLE(XTABLE-1,YTABLE)=0 : gosub 41000 : gosub 50000 : goto 16090
16080 if YTABLE<11 then if TBLE(XTABLE,YTABLE+1)=CUBE and RANG(XTABLE,YTABLE+1)=RANG then ink 0 : bar (XTABLE*16),YTABLE*16 to (XTABLE+1)*16,(YTABLE+2)*16 : TBLE(XTABLE,YTABLE)=0 : TBLE(XTABLE,YTABLE)=0 : RANG(XTABLE,YTABLE+1)=0 : TBLE(XTABLE,YTABLE+1)=0 : FOIS=1 : gosub 50000
16090 rem * point d'attache *
16100 if YTABLE=1 then FIN=-1
16110 gosub 20000
16120 return 
20000 rem ****
20010 rem * New cube
20020 rem ****
20030 rem
20040 gosub 10000
20050 gosub 15000
20060 wait vbl : move off (1) : sprite 1,XSTART,0,CUBE : wait vbl : move y 1,MVE$ : move on (1) : OK=true
20990 return 
30000 rem ****
30010 rem * appui feu!
30020 rem ****
30030 rem
30040 if RANG=1 then RANG=0 else RANG=RANG+1
30045 sprite 1,x sprite(1),y sprite(1),CUBE+RANG : for I=1 to 9 : wait vbl : next I
30050 return 
31000 rem * D‚placement … droite *
31010 move x 1,"(1,16,1)" : move on (1) : wait vbl 
31020 return 
32000 rem * Deplacement … gauche *
32010 move x 1,"(1,-16,1)" : move on (1) : wait vbl 
32020 return 
40000 rem ****
40010 rem * Chutes … DROITE du cube
40020 rem ****
40030 rem * calcul du nombre de cube pr‚sents au-dessus du cube de droite
40040 FOIS=0
40050 while TBLE(XTABLE+1,YTABLE-(1+FOIS))<>0
40060 inc FOIS
40070 wend 
40080 rem * Dessine portion d'‚cran d‚cal‚e de 1 unit‚ vers le bas *
40090 for I=0 to FOIS : sprite 2,(XTABLE+1)*16,(YTABLE-I)*16,TBLE(XTABLE+1,YTABLE-I-1)+RANG(XTABLE+1,YTABLE-I-1) : wait vbl : put sprite (2) : wait vbl : sprite off (2) : next I
40100 rem * Effacement du cube au sommet *
40110 ink 14 : bar (XTABLE+1)*16,(YTABLE-FOIS)*16 to (XTABLE+2)*16,(YTABLE-FOIS+1)*16 : wait vbl 
40120 rem * Mise … jour des tableaux (essentielle) *
40130 for I=0 to FOIS
40140 TBLE(XTABLE+1,YTABLE-I)=TBLE(XTABLE+1,YTABLE-I-1) : RANG(XTABLE+1,YTABLE-I)=RANG(XTABLE+1,YTABLE-I-1)
40150 next I
40160 rem * augmentation du niveau (pour alonger le jeu, remplacer le >=3 par >=10 par exemple) *
40170 SC=SC+(FOIS*50) : LS=LS+FOIS : if LS>=3 then inc LEVEL : LS=0
40180 locate 31,10 : print SC : locate 31,14 : print LS
40190 return 
41000 rem ****
41010 rem * Chutes … GAUCHE du cube
41020 rem ****
41030 rem
41040 FOIS=0
41050 while TBLE(XTABLE-1,YTABLE-(1+FOIS))<>0
41060 inc FOIS
41070 wend 
41080 for I=0 to FOIS : sprite 2,(XTABLE-1)*16,(YTABLE-I)*16,TBLE(XTABLE-1,YTABLE-I-1)+RANG(XTABLE-1,YTABLE-I-1) : wait vbl : put sprite (2) : sprite off (2) : next I
41090 ink 14 : bar (XTABLE-1)*16,(YTABLE-FOIS)*16 to (XTABLE)*16,(YTABLE-FOIS+1)*16 : wait vbl 
41100 for I=0 to FOIS
41110 TBLE(XTABLE-1,YTABLE-I)=TBLE(XTABLE-1,YTABLE-I-1) : RANG(XTABLE-1,YTABLE-I)=RANG(XTABLE-1,YTABLE-I-1)
41120 next I
41130 SC=SC+(FOIS*50) : LS=LS+FOIS : if LS>=3 then inc LEVEL : LS=0
41140 locate 31,10 : print SC : locate 31,14 : print LS
41150 return 
50000 rem * Augmentation de niveau ‚ventuelle *
50010 SC=SC+(FOIS*50) : LS=LS+FOIS : if LS>=3 then inc LEVEL : LS=0
50020 locate 31,10 : print SC : locate 31,14 : print LS
50030 return 
