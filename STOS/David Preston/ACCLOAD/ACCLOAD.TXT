
                                  ACCLOAD.BAS

                                By David Preston

     David Seaman's note  on  the  "PUT  KEY"  STOS  command  in Ictari #27
     reminded me of some (unsuccessful) experimenting  I'd done in the past
     with that very command. I  was  trying  to  emulate some of the tricky
     stuff that the 8-bit Atari's "return-key" mode was capable of, but was
     snookered by  the  limit  David  referred  to.  After  re-applying  my
     thoughts to the issue, I came up  with ACCLOAD, which addresses one of
     the purposes I was trying to achieve originally.

     STOS accessories are enormously useful  and  reasonably flexible - you
     can load them selectively and  unload  them  all at any time. However,
     the standard way of loading  them  is to type 'accload "filename.ACB"'
     for each one you want to load, and what  I wanted to do was be able to
     load them more easily than by all that typing. So I eventually came up
     with ACCLOAD.

     ACCLOAD.BAS is *not* an accessory itself,  it  is more of an accessory
     manager. It must be  loaded  into  one  of  the  four program slots. I
     usually load it into program area 4,  since I've never needed all four
     slots for ordinary program development.  You  can  then  RUN it at any
     time and use any of the other three slots as normal.

     In use, it is fairly obvious and I hope needs little explanation, save
     to point out that you can use  it  to unload all accessories in memory
     (ACCNEW) and to load accessories using the file selector.

     How it works is another story. Program  logic and flow are tortured to
     say the very least! Apart from direct jumps (goto's), which I normally
     avoid as a matter of good practise,  it actually works by ENDing after
     squirting direct commands  into  the  keyboard  buffer,  which include
     RUNning itself again, but not from the very beginning(?!?).

     Anyway, I'm not going  to  try  to  explain  it  in  detail, since you
     *might* be able  to  work  it  out  yourself,  and  you  don't need to
     understand how software works to use it.

     I hope you find it useful.
