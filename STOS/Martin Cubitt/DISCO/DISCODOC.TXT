                          DISCO: The full explanation

                               by Martin Cubitt

                                 5th Sept 1994


     This text document offers an explanation of how my STOS BASIC program, 
DISCO operates. The program was written because I wanted to offer a disco light 
type of effect with colours flashing on the screen in time to music. The 
original idea was to allow a sample to be loaded and played. This was
restrictive in both size and quality. So I decided to allow a sound sampler
cartridge to be used to interface a CD player, giving real time flashing
lights. It is not as powerful, or as colourful, as Jeff Minters superb effort
but I hope you like it all the same.

     I will take you through the program as this is probably the easiest way to 
ensure nothing is omitted.


     Firstly, the customary REMarks...

    1 rem                                **************
    2 rem                       ********** STOS DISCO ***********
    3 rem                                **************
    4 rem
    5 rem      Version 1  -  Martin Cubitt 15/10/1990
    6 rem              1.1                 22/10/1990 (+ effects,esc,bugs)
    7 rem              2                   19/05/1991 (+ screen,improved code)
    8 rem              2.1                  2/05/1992 (+ Status of freq)
    9 rem              2.2                 27/04/1993 (+ direction,etc)
   10 rem              2.3                 04/09/1994 (+ use EXTRA 2.01 cmds,
   11 rem                                               remove obsolete Misty)
   12 rem
   13 rem
   14 rem
   15 rem
   16 rem
   17 rem
   18 rem
   19 rem
   30 rem             THRU  -  sample currently being played via cartridge
   31 rem             MEMP  -  sample currently being from one in memory
   32 rem             MEM   -  a sample is currently stored in memory
   33 rem

     The set up part of the program is pretty standard. Notice the "disable 
mouse" command turns off the mouse. This is a command from the EXTRA extension 
version 2.01, available from me for the cost of return postage and a disc
please. The command is not absolutely necessary for the program but will stop
the music from distorting when the mouse is moved.

  997 rem   ---------------------------------------------------------------------
  998 rem   ***                    Initialise & Set up                        ***
  999 rem   ---------------------------------------------------------------------
 1000 mode 0 : key off : disable mouse : hide : curs off : flash off : click off 

     There are three types of picture file recognised, MBK (STOS packed), 
NEOchrome and Degas. All low resolution only.

 1010 dim TYPE$(3)

     SMPL is a variable holding the sample bank. This is used simply as an easy 
reference for accessing the bank, such as loading a sample. SMPLSPEED holds the 
current sample speed, initially set at 8 KHz.

 1020 SMPL=13 : SMPLSPEED=8

     You'll need the STOS Maestro extension, the easiest and best way to play 
samples in STOS. The command "sound init" is a command required by STOS Maestro 
to initialise the STs sound chip for the sample commands. It must precede any 
sample playing command. The command "sambank" tells STOS which memory bank is 
going to or already does hold the sample data which will later be played.
"samdir forward" tells STOS to play any sample forwards. "samloop on" means
that once set playing, the sample will loop continuously each time the end of
the sample is reached. 

 1030 sound init : sambank SMPL : samdir forward : samloop on 

     I have used a few variables: THRU = playing sample through the cartridge 
port, true or false. MEM = sample in memory, true or false. MEMP = sample in 
memory which is playing, again true or false. DONE = user exited, true or
false.

 1040 THRU=false : MEM=false : MEMP=false : DONE=false

     More variables: TYPE = file type to use, this ranges from 1 to 3 and is 
associated with the array TYPE$ to access the data. EFFECT = the effect type 
selected from one of many. NO_EFFECT = the number of effects available.

 1050 TYPE=2 : EFFECT=1 : NO_EFFECT=11

     COUNT = a counter used for some of the effects. It holds a colour index. 
"timer" is an internal system clock which is used to wait a while to give the 
user a chance to press a key at the start of the system, but continue after
the delay.

 1060 COUNT=1 : timer=0

     ESCAPE is set to true when the Esc key is pressed. If pressed twice the 
program exits.

 1070 ESCAPE=false

     The three file types are read into the array.

 1080 for I=1 to 3
 1090 read TYPE$(I)
 1100 next I

     The keyboard buffer is cleared, a screen is reserved for holding the 
selected "pattern" screen. The packed screen in bank 5 is unpacked to the 
reserved screen. The screen is then displayed onto the physical screen and
the colours SHIFTed to make the screen look almost pretty! The pen is changed
to index 1 and paper to 0. A short message is then displayed. A key is waited
for or for the internal timer to reach 500 ticks. The screen in bank 6 is
re-displayed using the (now) dated appear command. Finally the shift is turned
off.

 1110 clear key 
 1120 reserve as screen 6
 1130 unpack 5,6
 1140 gosub 7000
 1150 shift 4,2
 1160 pen 1 : paper 0
 1170 locate 0,11
 1180 centre " Written in STOS by M.Cubitt "
 1190 locate 0,14
 1200 centre "Press HELP for information"
 1210 timer=0
 1220 clear key 
 1230 repeat 
 1240 A$=inkey$ : S=scancode
 1250 until timer>500 or A$<>"" or S>0
 1260 appear 6,rnd(60)
 1270 shift off 
 1280 gosub 7000

     The main process keeps checking to see if any key has been pressed. Note 
that if a key was pressed in the previous section it will be remembered here
and processed. If Esc key is pressed for a second time (ie. ESCAPE is already
true) the variable DONE is set so the program may exit. This part also processes
any signal being played or coming in through the cartridge port.

 1997 rem  ---------------------------------------------------------------------
 1998 rem  ***                    Main processing                            ***
 1999 rem  ---------------------------------------------------------------------
 2000 repeat 
 2010 while A$<>"" and S>0
 2020 clear key 
 2030 while A$=chr$(27)
 2040 while ESCAPE
 2050 DONE=true
 2060 ESCAPE=false
 2070 wend 
 2080 ESCAPE=true
 2090 A$="!"
 2100 wend 
 2110 while upper$(A$)="P" : gosub 11000 : A$="" : wend 
 2120 while upper$(A$)="S" : gosub 12000 : A$="" : wend 
 2130 while upper$(A$)="F" : gosub 13000 : A$="" : wend 
 2140 while upper$(A$)="T" : gosub 14000 : A$="" : wend 
 2150 while upper$(A$)="C" : gosub 15000 : A$="" : wend 
 2160 while upper$(A$)="M" : gosub 16000 : A$="" : wend 
 2170 while upper$(A$)="E" : gosub 21000 : A$="" : wend 
 2180 while upper$(A$)="U" : gosub 25000 : A$="" : wend 
 2181 while A$="<" : gosub 24300 : A$="" : wend 
 2182 while A$=">" : gosub 24400 : A$="" : wend 
 2190 while A$="+" : gosub 17000 : A$="" : wend 
 2200 while A$="-" : gosub 18000 : A$="" : wend 
 2210 while A$="*" : gosub 20000 : A$="" : wend 
 2220 while S=98 : gosub 19000 : S=0 : wend 

     If a key (not Esc) was pressed, clear the fact that Esc was the last key 
pressed.

 2230 while A$<>"!"
 2240 gosub 22000
 2250 A$="!"
 2260 wend 
 2270 A$="" : S=0
 2280 wend 

     This is the important bit! If THRU is set then take a piece of data from
the cartridge port. The command "cartridge input" is taken from the EXTRA
extension version 2.01. (You may use the STOS Maestro equivalent of "sample"
if you wish, but add 127 to the value.) The value is in the range 0 to 255. If
a sample in memory is currently being played (MEMP is true) interrogate the
byte (piece of memory) which is currently being played. This is accessed by
looking at samplace, a system variable holding the offset of the byte currently
being played.

 2290 if THRU then A=cartridge input : gosub 10000 else if MEMP then 
      A=peek(start(SMPL)+samplace) : gosub 10000
 2300 A$=inkey$ : S=scancode
 2310 until DONE

     Terminate nicely, fade the screen, stop any samples, clear the keyboard 
buffer, turn the mouse back on and end the program!

 2320 fade 3 : samstop : clear key : enable mouse : default : end 

     Show a loading message, politely.

 3997 rem  ---------------------------------------------------------------------
 3998 rem  ***                    Display Loading message                    ***
 3999 rem  ---------------------------------------------------------------------
 4000 paper 4 : D=1 : X=4 : Y=5 : W=30 : H=1 : C=3 : gosub 5000
 4010 gosub 6000
 4020 pen 1 : paper 4
 4030 centre " Loading "+A$+" "
 4040 return 
 4997 rem  ---------------------------------------------------------------------
 4998 rem  ***                       Set up Window                           ***
 4999 rem  ---------------------------------------------------------------------
 5000 windopen D,X,Y,W,H,0,C
 5010 curs off 
 5020 flash off 
 5030 return 
 5997 rem  ---------------------------------------------------------------------
 5998 rem  ***                      Change Palette                           ***
 5999 rem  ---------------------------------------------------------------------
 6000 palette $0,$777,$456,$171,$234
 6010 return 
 6997 rem  ---------------------------------------------------------------------
 6998 rem  ***                    Display Screen 6                           ***
 6999 rem  ---------------------------------------------------------------------
 7000 get palette (6)
 7010 screen copy 6 to physic

     Copies physical screen to background. Consult STOS manual, page 261.

 7020 dreg(0)=22 : trap 5
 7030 return 
 7997 rem  ---------------------------------------------------------------------
 7998 rem  ***                      Get Key Input                            ***
 7999 rem  ---------------------------------------------------------------------
 8000 clear key 
 8010 repeat 
 8020 A=instr(A$,upper$(inkey$))
 8030 until A>0
 8040 return 

     Play sample. "samraw" allows a sample (not necessarily a STOS sample) to be 
played. The first parameter is the start and the second is the end of the data.

 8997 rem  ---------------------------------------------------------------------
 8998 rem  ***                    Play Memory Sample                         ***
 8999 rem  ---------------------------------------------------------------------
 9000 samspeed SMPLSPEED
 9010 samloop on 
 9020 samraw start(SMPL),start(SMPL)+SMPLSIZE
 9030 return 

     This bit changes the screen to affect the note being played. The variable
A holds the value of the byte, 0-255. Note that this really is a value -127 to
128, representing the volume of the sound in a digital form. There is a small
but useful couple of pages in the STOS Maestro manual explaining a little bit
about sample data. It is, however, beyond the scope of this document. Anyhow,
the value is taken and used to determine the screen colours depending on which
effect type is selected.

10000 A=abs(A-30) : B=A/15
10010 on EFFECT goto 10020,10040,10060,10080,10100,10120,10150,10180,10210,
      10240,10270
10020 colour B,A*(B/2)
10030 return 
10040 colour B,A
10050 return 
10060 colour B,A*(B/2) : colour 15-B,A*(B/2)
10070 return 
10080 colour B,A : colour 15-B,A
10090 return 
10100 colour B,B*A/2
10110 return 
10120 colour COUNT,A*(B/2)
10130 gosub 23000
10140 return 
10150 colour COUNT,A
10160 gosub 24000
10170 return 
10180 colour COUNT,$777-A
10190 gosub 23000
10200 return 
10210 colour COUNT,$777-A
10220 gosub 24000
10230 return 
10240 colour COUNT,COUNT*B
10250 gosub 23000
10260 return 
10270 colour COUNT,$777-COUNT*B
10280 gosub 24000
10290 return 
10997 rem ---------------------------------------------------------------------
10998 rem ***                        Load Picture                           ***
10999 rem ---------------------------------------------------------------------
11000 M$="" : pen 1 : paper 4
11010 gosub 6000 : show : enable mouse : A$=file select$("*."+TYPE$(TYPE),
      "Load a "+TYPE$(TYPE)+" PICTURE"+space$(14)+M$) : disable mouse : hide :
      gosub 7000
11020 if A$="" then 11300
11030 A$=upper$(A$)
11040 B$=dir first$(A$,-1)
11050 if B$<>"" then 11080
11060 M$="**ERROR: File not found"
11070 goto 11010
11080 if right$(A$,4)="."+TYPE$(TYPE) then 11100
11090 M$="**ERROR: Incorrect file type"
11100 SIZE=val(mid$(B$,13,8))
11110 if SIZE<free-$8000 then 11140
11120 M$="**ERROR: Not enough memory"
11130 goto 11010
11140 on TYPE goto 11150,11280,11280
11150 erase 5
11160 reserve as work 5,SIZE
11170 on error goto 11240
11180 gosub 4000
11190 load A$,5
11200 windel 1
11210 unpack 5,6
11220 on error goto 0
11230 goto 11290
11240 on error goto 0
11260 M$="**ERROR: Invalid format"
11270 resume 11010
11280 load A$,6
11290 gosub 7000
11300 return 
11997 rem ---------------------------------------------------------------------
11998 rem ***                        Load Sample                            ***
11999 rem ---------------------------------------------------------------------
12000 gosub 6000
12010 M$="" : pen 1 : paper 4
12020 show : enable mouse : A$=file select$("*.*",
      "Load a SAMPLE"+space$(11)+M$) : disable mouse : hide : gosub 7000
12030 if A$="" then 12330
12040 B$=dir first$(A$,-1)
12050 if B$<>"" then 12080
12060 M$="**ERROR: File not found"
12070 goto 12020
12080 SIZE=val(mid$(B$,13,8))
12090 if SIZE<free-$8000 then 12120
12100 M$="**ERROR: File too large"
12110 goto 12020
12120 while MEM
12130 while MEMP
12140 samstop 
12150 erase SMPL
12160 MEMP=false
12170 wend 
12180 MEM=false
12190 wend 
12200 SMPLSIZE=SIZE
12210 MEM=true
12220 MEMP=true

     If playing sample through cartridge (THRU = true) turn THRU off.

12230 while THRU
12240 THRU=false
12250 samstop 
12260 wend 
12270 erase SMPL
12280 reserve as work SMPL,SIZE
12290 gosub 4000
12300 bload A$,SMPL
12310 windel 1
12320 gosub 9000
12330 gosub 7000
12340 return 
12997 rem ---------------------------------------------------------------------
12998 rem ***                  Toggle Monitor scan frequency                ***
12999 rem ---------------------------------------------------------------------
13000 paper 0 : D=1 : X=3 : Y=2 : W=34 : H=9 : C=3 : gosub 5000
13010 gosub 6000
13020 pen 3 : centre "TOGGLE SCAN FREQUENCY"
13030 pen 4 : paper 2
13040 print 
13050 cdown
13060 centre "! WARNING !" : print 
13070 paper 0 : pen 1
13080 cdown
13090 centre "  Do NOT use this function" : print 
13100 centre "with a normal television set." : print 
13110 cdown
13120 centre "Press (C)ancel or (G)o"
13130 A$="CG" : gosub 8000
13140 while A=2

     "set screen hz" toggles the screen frequency between 50 and 60 Hz. It is
an EXTRA 2.01 extension.

13150 set screen hz 
13160 A=0
13170 wend 
13180 windel 1
13190 gosub 7000
13200 return 
13997 rem ---------------------------------------------------------------------
13998 rem ***                        Change file type                       ***
13999 rem ---------------------------------------------------------------------
14000 paper 0 : D=1 : X=3 : Y=1 : W=34 : H=11 : C=3 : gosub 5000
14010 gosub 6000
14020 pen 3 paper 0 : centre "CHANGE PICTURE FORMAT"
14030 pen 4
14040 print 
14050 cdown
14060 centre "Current Type       " : cleft : cleft : cleft : cleft : cleft
14070 paper 2 : print " ";TYPE$(TYPE);" "
14080 pen 1 : paper 0
14090 cdown
14100 centre "1. MBK (STOS packed)   " : cdown
14110 centre "2. NEO (Neochrome)     " : cdown
14120 centre "3. PI1 (Degas low res) "
14130 cdown : cdown
14140 centre "9. Retain current value" : cdown
14150 cdown : pen 2
14160 centre "Select one of the above"
14170 A$="1239" : gosub 8000
14180 while A<4
14190 TYPE=A
14200 A=4
14210 wend 
14220 windel 1
14230 gosub 7000
14240 return 
14997 rem ---------------------------------------------------------------------
14998 rem ***                       Play via Cartridge                      ***
14999 rem ---------------------------------------------------------------------
15000 while THRU=false
15010 while MEMP
15020 samstop 
15030 MEMP=false
15040 wend 

     Use a speed of 22 when playing through the cartridge, this is a fairly
high frequency but not enough to cause too many processing speed problems.

15050 samspeed 22

     "samthru" is a maestro command which plays a sample directly through the 
cartridge port at the current speed. Please ensure that you insert the
cartridge BEFORE turning on your computer. If you insert the cartridge with the
computers power turned on there is a great chance you will damage the cartridge
and the Atari. 

15060 samthru 
15070 THRU=true
15080 wend 
15090 return 
15997 rem ---------------------------------------------------------------------
15998 rem ***                       Play sample in memory                   ***
15999 rem ---------------------------------------------------------------------
16000 while MEMP=false
16010 while MEM
16020 while THRU
16030 samstop 
16040 THRU=false
16050 wend 
16060 gosub 9000
16070 MEM=false
16080 wend 
16090 MEMP=true
16100 MEM=true
16110 wend 
16120 return 
16997 rem ---------------------------------------------------------------------
16998 rem ***                       Speed up sample play                    ***
16999 rem ---------------------------------------------------------------------
17000 if MEMP=false then 17050
17010 if SMPLSPEED=21 then 17050
17020 inc SMPLSPEED
17030 samspeed SMPLSPEED
17040 clear key 
17050 return 
17997 rem ---------------------------------------------------------------------
17998 rem ***                      Slow down sample play                    ***
17999 rem ---------------------------------------------------------------------
18000 if MEMP=false then 18050
18010 if SMPLSPEED=6 then 18050
18020 dec SMPLSPEED
18030 samspeed SMPLSPEED
18040 clear key 
18050 return 
18997 rem ---------------------------------------------------------------------
18998 rem ***                      Display HELP text                        ***
18999 rem ---------------------------------------------------------------------
19000 cls : D=1 : X=0 : Y=0 : W=40 : H=1 : C=3 : gosub 5000
19010 gosub 6000
19020 pen 3 : centre "DISCO HELP"
19030 pen 1
19040 D=2 : X=0 : Y=3 : W=40 : H=16 : C=1 : gosub 5000
19050 print "S   :   Load a SAMPLE"
19060 print "P   :   Load a PICTURE"
19070 print "T   :   Change picture FORMAT for load"
19080 print "C   :   Play sounds via CARTRIDGE"
19090 print "M   :   Play sample currently in MEMORY"
19100 print "E   :   Select effect type"
19110 print "F   :   Toggle 50/60 Hz screen"
19120 print "U   :   Display status"
19130 print "*   :   Turn off sound (until C/M/S)"
19140 print "+ - :   Speed up/down sample frequency"
19150 print "< > :   Sample direction in memory"
19160 print "Esc :   Press twice to exit program"
19170 D=3 : X=0 : Y=11 : W=40 : H=1 : C=3 : gosub 5000
19180 paper 4 : pen 2
19190 centre "Press SPACEBAR please"
19200 A$=" " : gosub 8000
19210 windel 2
19220 windel 1
19230 gosub 7000
19240 return 
19997 rem ---------------------------------------------------------------------
19998 rem ***                      Stop sample                              ***
19999 rem ---------------------------------------------------------------------
20000 samstop 
20010 THRU=false
20020 MEMP=false
20030 return 
20997 rem ---------------------------------------------------------------------
20998 rem ***                      Select Effect                            ***
20999 rem ---------------------------------------------------------------------
21000 paper 0 : D=1 : X=3 : Y=1 : W=34 : H=11 : C=3 : gosub 5000
21010 gosub 6000
21020 pen 3 : paper 0 : centre "SELECT EFFECT TYPE"
21030 cdown : cdown
21040 cdown : pen 2
21050 centre "Select 1 -"+str$(NO_EFFECT)+" "
21060 cdown
21070 centre "by using -/+ & RETURN to select"
21080 pen 4
21090 locate 10,7
21100 print "Current Type"
21110 CHOSEN=false
21120 repeat 
21130 paper 2
21140 A$=str$(EFFECT)-" "
21150 if len(A$)=1 then A$=" "+A$
21160 locate 25,7 : print " ";A$;
21170 paper 0
21180 print "    "
21190 A$=inkey$
21200 while A$="+"
21210 while EFFECT=NO_EFFECT
21220 EFFECT=0
21230 wend 
21240 inc EFFECT
21250 A$=""
21260 wend 
21270 while A$="-"
21280 while EFFECT=1
21290 EFFECT=NO_EFFECT
21300 inc EFFECT
21310 wend 
21320 dec EFFECT
21330 A$=""
21340 wend 
21350 I=instr("123456789AB",upper$(A$))
21360 while I>0
21370 EFFECT=I
21380 I=0
21390 wend 
21400 while A$=chr$(13)
21410 CHOSEN=true
21420 A$=""
21430 wend 
21440 until CHOSEN
21450 windel 1
21460 gosub 7000
21470 clear key 
21480 return 
21997 rem ---------------------------------------------------------------------
21998 rem ***                      Cancel escape                            ***
21999 rem ---------------------------------------------------------------------
22000 A$="" : S=0
22010 ESCAPE=false
22020 return 
22997 rem ---------------------------------------------------------------------
22998 rem ***                      Increment counter                        ***
22999 rem ---------------------------------------------------------------------
23000 inc COUNT
23010 while COUNT>15
23020 COUNT=1
23030 wend 
23040 return 
23997 rem ---------------------------------------------------------------------
23998 rem ***                      Decrement counter                        ***
23999 rem ---------------------------------------------------------------------
24000 dec COUNT
24010 while COUNT<1
24020 COUNT=15
24030 wend 
24040 return 
24297 rem ---------------------------------------------------------------------
24298 rem ***                      Play sample backward                     ***
24299 rem ---------------------------------------------------------------------
24300 if not(MEM) then 24320

     Allows the sample to be played backwards, great fun?!

24310 samdir backward 
24311 gosub 9000
24320 return 
24397 rem ---------------------------------------------------------------------
24398 rem ***                      Play sample forward                      ***
24399 rem ---------------------------------------------------------------------
24400 if not(MEM) then 24320
24410 samdir forward 
24411 gosub 9000
24420 return 
24997 rem ---------------------------------------------------------------------
24998 rem ***                      Display Status                           ***
24999 rem ---------------------------------------------------------------------
25000 paper 0
25010 D=1 : X=3 : Y=1 : W=34 : H=11 : C=3 : gosub 5000
25020 gosub 6000
25030 pen 3 : centre "STATUS"
25040 cdown
25050 cdown : pen 1
25060 A$="None"
25070 if THRU then A$="Via Cartridge"
25080 if MEMP then A$="Via Memory"
25090 centre "Sample playing:"+A$
25100 cdown
25110 if MEM then A$="YES" else A$="NO"
25120 centre "Sample in memory:"+A$
25122 cdown
25124 centre "Sample speed:"+(str$(SMPLSPEED)-" ")
25130 cdown

     Use screen hz to return the current screen frequency, an EXTRA 2.01
command.

25140 A$=(str$(screen hz)-" ")+" Hz"
25150 centre "Current scan frequency:"+A$
25160 cdown
25170 centre "Current Effect:"+str$(EFFECT)
25180 cdown

     Use GEMDOS trap 64 to obtain the blitter status.

25190 trap 14,64, .w-1
25200 I=dreg(0)
25210 A$="Not present"
25220 if I=2 then A$="Off"
25230 if I=3 then A$="On"
25240 centre "Blitter:"+A$
25250 cdown
25260 centre "Free Memory:"+str$(free)
25270 cdown : cdown
25280 paper 4
25290 pen 2
25300 centre "Press SPACEBAR please"
25310 A$=" " : gosub 8000
25320 windel 1
25330 gosub 7000
25340 return 
49997 rem ---------------------------------------------------------------------
49998 rem ***                      File type datas                          ***
49999 rem ---------------------------------------------------------------------
50000 data "MBK","NEO","PI1"


     So you can see that the basic sample handling is pretty straight forward.
I strongly recommend any STOS user to obtain the Maestro extension as there are 
many other useful commands including one which even allows you to copy memory on 
an uneven address boundary, unlike the copy command. The manual explains each 
command in great detail with examples throughout, even showing how it would be 
possible to write a sampling package in STOS. I have only tested the program
with the STOS Maestro cartridge so I cannot guarantee other sampling cartridges
will work but I can see no reason why they would not.

     I hope that you find the program to be fun, especially if you are able to 
connect a CD player directly to the sampling cartridge. You could also connect
a camcorder to the cartridge and see how your voice lights up the colours on
screen. I have included a few patterns which may help show how the sound and the
screen are synchronised.

     Martin Cubitt
     14 Deepdene Avenue
     Rayleigh
     Essex
     SS6 9LG
     England

     5th September 1994
