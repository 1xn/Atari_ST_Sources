
*************************************************************************
**************************** GEMMA release ******************************
******************************* V0.37 ***********************************

Hi there, and welcome to the world of GEM in STOS!

The GEMMA team would like to thank you for getting yourself a copy of 
GEMMA v0.37. There have been so many people involved in the project and 
who keep in touch with me about the project that I can't list them all.

What is GEMMA and how do I install it?
ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ

GEMMA is an extension for STOS BASIC which allows you to use GEM in STOS. 
It doesn't emulate GEM; it uses the real thing. For this reason STOS 
should be ran from the desktop instead of the autofolder. The commands 
that the extension provide are as near to the Atari names as possible. To 
install GEMMA, copy 'GEMMA.DAT' to the STOS folder, and rename it (using 
the show info option) to 'GEMMA.EX?' where the question mark is the 
extension letter. The examples should be copied to the root directory, or 
where ever STOS BASIC is.

Disclaimer
ÿÿÿÿÿÿÿÿÿÿ

No one in the GEMMA team can be responcible for any damaged caused to the 
user's computer or other equipment.

The commands
ÿÿÿÿÿÿÿÿÿÿÿÿ

SUB gemcomlist

Syntax: gemcomlist

This command lists all the programmed commands.

SUB gemhelp

Syntax: gemhelp <command>

gemhelp returns help on the <command>. For example, 'gemhelp alert' will 
bring up information on the alert command.

FUNCTION alert ()

Syntax: number=alert (text$,number)

Alert brings up a GEM alertbox. text$ must be a string containing no more 
then 255 characters. text$ is made by of three parts, the icon number, the 
message and the button names:

The format for text$ is [icon number][message][button names].

Icon number 1 is an '!" symbol. Icon 2 is a '?' and icon 3 is a 'Stop 
message'. 'message' and 'button names' are best used by having a space at 
the start and end of the text. In 'message' having a '|' character will 
separate the text onto another line. A '|' in 'button names' will create 
another button. Thus...

[1][ Hello | there | World! ][ Ok | Cancel | Info ]

...would produce an alert box like...

 ______________________________________
|                                      |
|  !!!    Hello                        |
|  !!!    there                        |
|  !!!    World!                       |
|  !!!                                 |
|          ____   ________   ______    |
|  !!!    [ Ok ] [ Cancel ] [ Info ]   |
|          ÿÿÿÿ   ÿÿÿÿÿÿÿÿ   ÿÿÿÿÿÿ    |
 ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ

Returned is the button number the user clicked on.

Check the ALERGRAF.ASC for an example of alertboxes, gemmaver$, 
graf_growbox and graf_shrinkbox.

FUNCTION gemmaver$

Syntax: text$=gemmaver$

This function returns the current GEMMA version in text$.

Check ALERGRAF.ASC for an example of alertboxes, gemmaver$, graf_growbox 
and graf_shrinkbox.

SUB graf_growbox

Syntax: graf_growbox x1,y1,h1,w1,x2,y2,h2,w2

Graf_growbox calls GEM to draw a number of boxes growing from x1,y1 of 
size h1,h1 to x2,y2 of the size h2,w2.

Check ALERGRAF.ASC for an example of alertboxes, gemmaver$, graf_growbox 
and graf_shrinkbox.

SUB graf_shrinkbox

Syntax: graf_shrinkbox x1,y1,h1,w1,x2,y2,h2,w2

Does the same as graf_growbox but instead shrinks.

Check ALERGRAF.ASC for an example of alertboxes, gemmaver$, graf_growbox 
and graf_shrinkbox.

SUB graf_movebox

Syntax: w,h,x1,y1,x2,y2

This draws a box of width w and height h moving from (x1,y1) to (x2,y2)

FUNCTION frm_error ()

Syntax: number=frm_error (errorcode)

Brings up a alertbox corresponding to the 'PCDOS error code'. Anything 
above 64 (really -64) is ignored. Not all of the errors are recoginised, 
but here are the ones that are:

 ______________________________________________________________________
|  Code   |  Error produced                                            |
|---------|-------------------------------------------------------------
|         |                                                            |
| 2,3,18  | This application cannot find the folder or file that you   |
|         | tried to access.                                           |
|         |                                                            |
|   4     | This application does not have room to open another        |
|         | document. To make room, close any document that you do not |
|         | need.                                                      |
|         |                                                            |
|   5     | An item with this name already exists in the directory, or |
|         | this item is set to read-only status.                      |
|         |                                                            |
| 8,10,11 | There is not enough memory for the application you tried   |
|         | to run.                                                    |
|         |                                                            |
|   15    | The drive you specified does not exist.                    |
 ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ

Check FRMALERT.ASC for an example.

SUB graf_mouse ()

Syntax: graf_mouse (flag,varptr(user_form))

Flag is what to change the GEM mouse pointer to:

 ______________________________________________________________________
|  Code  |  Arrow form                                                 |
|--------|-------------------------------------------------------------|
|   0    | Arrow                                                       |
|   1    | Text cursor                                                 |
|   2    | Busy bee                                                    |
|   3    | Pointing finger                                             |
|   4    | Exended fingers                                             |
|   5    | Thin cross hair                                             |
|   6    | Thick cross hair                                            |
|   7    | Outline cross hair                                          |
|  255   | User defined. user_form is the address of the new pointer.  |
|  256   | Hide mouse                                                  |
|  257   | Show mouse                                                  |
 ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ

user_form can be an array, with the following structure:

 ___________________________________________________________
| Byte | Function                                           |
|------|----------------------------------------------------|                                                                       |
|  1   | x co-ordinate of hot spot                          |
|  2   | y co-ordinate of hot spot                          |
|  3   | should be 1                                        |
|  4   | mask colour                                        |
|  5   | data colour                                        |
| 6-22 | bits of mask                                       |
|22-38 | bits of data                                       |
 ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
 
For example:

arrow(1)=1
arrow(2)=1
arrow(3)=1
arrow(4)=0
arrow(5)=1
arrow(6)=%10110100

etc.

SUB fsel_input & fsel_exinput

Syntax: ok=0 : fsel_input path$,name$,varptr(ok)
Syntax: ok=0 : fsel_exinput path$,name$,varptr(ok),promt$

Brings up the GEM fileselector, or another replacement one such as 
Selectric. 

path$ contains the path. path$ should be *128* characters long, this is 
the Atari defined maximum

path$="C:\STOS\*.EX?"+string$(chr$(0),115)

This will have 115 zeros on the end, plenty of space for folders. Remember 
to put a chr$(0) on the end if not using the above method! path$ after the 
call will contain the path of the file, so it's modified. path$ should be 
*valid*, and have a file mask.

name$ will contain the name of the file selected. It can contain a name at 
the start, which like with Selectric, is automatically found and 
highlighted for you. You'll have to make sure that the string is 13 
characters long, even though it shouldn't matter if it's longer, but you 
will be wasting memory:

name$="GEMMA.EXZ"+string$(chr$(0),4)

ok is a address to which will contain the status of the fileselector, ie 
if the 'ok' or 'cancel' button was pressed. This should be four bytes 
long. ok will contain will be 0 if canceled, 1 if ok pressed.

In the second filselector (which was added in TOS v1.6) the promt$ string 
contains a message when the selector appears:

promt$="Please select file to view..."+chr$(0)

The promt$ will not change after the command has been issued.

The Internet
ÿÿÿÿÿÿÿÿÿÿÿÿ

If you have access to the World Wide Web, then check out the URL:

http://www.users.zetnet.co.uk/pjones/home.htm

You can also get the latest versions of GEMMA from here. If you have any 
comments of GEMMA, send an email to:

paulat.jones@zetnet.co.uk


Documentation by Paul Jones for the GEMMA group, 
29/03/1997 (Saturday 29th March 1997)