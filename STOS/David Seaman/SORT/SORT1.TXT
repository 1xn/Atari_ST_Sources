Sort Routine.

       This routine sorts a dimensioned  array  (or a group of related
arrays) into the same order you would  find them sorted on disk if you
selected "Sort by name".  ie smallest  to largest, lower case to upper
case to numbers etc.  This works  by  sorting the position of each new
entry into the array(s), so  it  doesn't  take  ages to, for instance,
sort 100 different arrays into order, because  it doesn't do it all at
once.  This is a far better method than sorting them by using the "Dir
first" to get them into order, because  you don't have to keep messing
about with disk access,  which  takes  longer,  or  to  sort them at a
different  time,  because  once  you've  entered  the  array(s),  it's
already done.

        Once again,  this  routine  is  taken  straight  out  of STock
Controller v.1.5, and  none  of  the  strings  or  anything  have been
changed, because this is to show you  the  technique, not to be a demo
or anything.  If you wish to use the routine, simply change/delete/add
the strings and  variables  names.   Now  for  a  guided  tour of this
routine.

        After the REM, this is the first line:

46001 if A=0 then ST_N$(A)=STCK_NUMBER$ : DESC$(A)=DESCRIPTION$ :
HELD(A)=STCK_HELD  :   PRCE(A)=STCK_PRICE   :   SUPP$(A)=SUPPLIER$   :
MN_SL(A)=MN_STCK_LVL : S_CST(A)=STCK_CST : goto 46400

        This simply checks if the string STCK_NUMBER$ is the first one
to be  entered, and if it is then  to copy it into the first positions
in the string ST_N$(x).  The  sorting  is all done using STCK_NUMBER$,
and the rest of  the  associated  files  are  copied  into position in
tandem  with  it.   Please  note  that   you  need  to  have  separate
strings/variables (ie STCK_NUMBER$)  to  check TO  BE  COPIED INTO THE
DIMENSIONED  ARRAYS.   The  routine  will  not  work  otherwise.   The
variable "A" stores the current position reached in the arrays.

46005 rem CHECK LENGTH
46010 N_S=0 : DONE=0
46015 if N_S=A then goto 46350

        This sets up the variables N_S and DONE.  N_S is the number of
items in the array already checked against.   DONE  is set to 0, it is
becomes 1000 when the routine is ready to return.

46020 OBJ_LNGTH=len(STCK_NUMBER$) : CMP_LNGTH=len(ST_N$(N_S))
46030 if OBJ_LNGTH>CMP_LNGTH then inc N_S : goto 46015
46040 if OBJ_LNGTH<CMP_LNGTH then gosub 46500
46045 if DONE=1000 then goto 46400

        This checks the length  of  STCK_NUMBER$  against the ST_N$(x)
already in the array.  OBJ_LNGTH and CMP_LNGTH are the "Object length"
and "Comparison length".  If  OBJ_LNGTH  is  found  to be shorter than
CMP_LNGTH,  then  it  jumps  to  another  routine  which  will  insert
STCK_NUMBER$  and  the  associated   files   into  the  position  that
ST_N$(N_S) was, and moves all  the  other  strings  etc  up one in the
array.  If OBJ_LNGTH is longer, N_S  will be incremented and this part
of the routine will loop.  If  both  strings are EQUAL in length, then
the next part of the routine will start, which is:

46050 rem CHECK CHARACTERS
46060 TX=1 : repeat
46070 OBJ=asc(mid$(STCK_NUMBER$,TX,1)) : CMP=asc(mid$(ST_N$(N_S),TX,1))
46080 inc TX
46085 until OBJ<>CMP
46090 if OBJ>CMP then inc N_S : goto 46015
46100 if OBJ<CMP then gosub 46500
46110 if DONE=1000 then goto 46400

        The part of the routine  above  checks  the ASCII code of each
letter of the string.  Don't worry,  this  works if numbers are in the
string as well.  If you have used non-alphanumeric characters (ie -, /
? \ | etc), then unless they are in the same position in every string,
the results of the sort  can  be confusing and unpredictable.  Unless,
of course, you happened  to  have  memorised  the  ASCII code of every
single key on a QWERTY keyboard!

        N_S is again  incremented  if  the  result  of STCK_NUMBER$ is
greater than ST_N$(x), if less it will jump to 46500, if DONE=100 (the
sort is completed) then it will goto 46400 (EXIT).

46350 ST_N$(A)=STCK_NUMBER$
46360 DESC$(A)=DESCRIPTION$
46370 HELD(A)=STCK_HELD
46380 PRCE(A)=STCK_PRICE
46390 SUPP$(A)=SUPPLIER$
46395 MN_SL(A)=MN_STCK_LVL
46396 S_CST(A)=STCK_CST

        This puts the strings STCK_NUMBER$ etc in place if it is found
to be AFTER all of the  existing  strings.   (A is the position of the
current position).

46400 rem EXIT ROUTINE
46410 cls
46415 inc A
46420 return


        Pretty obvious, this.  It returns you from the routine.  (A is
incremented, because whenever you put a  new  string in, A will always
be the TOTAL NUMBER  OF  STRINGS  IN  THE  ARRAY  AT  THE START OF THE
ROUTINE.  Remember  this  if  you  want  to  save,  always  save  upto
ST_N$(x), (or whatever), upto A-1.   This  is also useful for checking
at the start of this  routine  that  you  don't  try and go beyond the
limit of the dimensioned array (which will cause an error).

46500 rem SHIFT POSITIONS
46510 for X=N_S to A-1
46520 S__N$(X)=ST_N$(X)
46530 D__N$(X)=DESC$(X)
46540 H__N(X)=HELD(X)
46550 P__N(X)=PRCE(X)
46555 SP_N$(X)=SUPP$(X)
46556 MS_L(X)=MN_SL(X)
46557 X_S_CST(X)=S_CST(X)
46560 next X
46570 for X=N_S to A-1
46580 ST_N$(X+1)=S__N$(X)
46590 DESC$(X+1)=D__N$(X)
46600 HELD(X+1)=H__N(X)
46610 PRCE(X+1)=P__N(X)
46615 SUPP$(X+1)=SP_N$(X)
46616 MN_SL(X+1)=MS_L(X)
46617 S_CST(X+1)=X_S_CST(X)
46620 next X
46630 ST_N$(N_S)=STCK_NUMBER$
46640 DESC$(N_S)=DESCRIPTION$
46650 HELD(N_S)=STCK_HELD
46660 PRCE(N_S)=STCK_PRICE
46665 SUPP$(N_S)=SUPPLIER$
46666 MN_SL(N_S)=MN_STCK_LVL
46667 S_CST(N_S)=STCK_CST
46670 DONE=1000
46680 return

        The above performs  all  the  nasty  business  of shifting the
positions of the arrays.  It does this  by copying all of the contents
of the strings and variables into  another set (at the same position),
then copying them back (at the  next  position in the original array),
then copying the new strings  and  variables into the position vacated
by all that moving about!  And that, ladies and gentlemen, is that!

        I hope that someone out there has use for a routine like this.
Happy Coding folks!

Coding and Documentation by David Seaman of Digital Designs
----------------------------------------------------------------------
