### ALERT ###

A GEM-like Alert box routine for STOS programmers
by David Preston


If you've ever tried to write a serious or semi-serious program using
STOS, especially a GEM-like prog with menus etc, you'll probably have
missed the ease of using alerts from other GEM-based Basics like
Hisoft/Power Basic or GFA Basic. So had I!

Well here's an answer. If you've run the demo, you'll have seen most
of what the routine can do, but I'll run through it in a bit more
detail...

The routine is a single subroutine, callable via a 'gosub'. Before use
within your program you'll have to dimension two string arrays (see
ALERT.BAS), ALERT_MESS$(3) - for up to four lines of message text, and
ALERT_BUTT$(2) for up to three buttons. There are three 'control'
variables - ALERT_DBUT specifies the default button (0-3 - 0 for no
default), ALERT_BORDER (1-15) specifies the border pattern and
ALERT_CENTRE (true/false) controls text justification. On return,
ALERT_REPLY will contain the number of the button causing the exit.

You may have noticed that all variable names start 'ALERT_', so as
long as you steer clear of these in the rest of your program (apart
from when calling this routine of course!), you won't have any
conflicts. The only other restrictions are that the routine uses
Window 13 and Zones 120-122. On the subject of screenzones, bear in
mind that overlapping zones can return funny results, so make sure you
don't have any of your own 'underneath' the alert box.

There is no internal error-checking to speak of, so in use the
programmer will have to ensure that everything 'fits' and that too
long a message or button text doesn't cause an error, but apart from
that caveat everything is pretty much automatic in use. The alert is
centred on screen, sized as appropriate, and the button(s) centred
within the alert. (There is a small limitation here as all characters
(text & border) are snapped to standard text mode coordinates - ie
unlike GEM, a character cannot occupy a half & half x-coordinate.)

In use in a completed program user input can be in pretty much all the
standard and most of the usual extended GEM ways - point & click via
mouse or ALT-keyboard, <Return> for the default button, keyboard
shortcuts like Let 'Em Fly and function keys (f1-f3) like various
auto-folder progs.

You are welcome to use this routine in its existing form or with any
improvements you see fit. If you do come up with any enhancements I'd
love to see them. And if you do use it in any of your own progs, a bit
of an acknowledgement would be very nice!

Happy coding,
David
