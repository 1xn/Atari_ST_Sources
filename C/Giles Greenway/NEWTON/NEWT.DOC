NEWT.TTP

WARNING ! THIS IS AN EXTREMELY  UNFRIENDLY .TTP PROGRAM THAT USES  LINEA
AND EXPECTS STANDARD  ST RESOLUTIONS. ALSO,  IT'S GOT MATHS  IN IT.  NOW
READ ON...

Actually, an embryonic GEM version of this program does exist, but  it's
nowhere near ready to show to  people yet. It already works better  than
lasts month's effort, which was recieved with a deathly silence. What do
you make of my small efforts ?

The cube, fourth and fifth roots of  one can all be defined as one,  but
every nth root  has exactly n  complex values. (I  completely failed  to
introduce complex  numbers last  time...) The  only problem  is  finding
them, but a little dimly remembered A-level maths allows us to do  this.
If you wanted to find solutions to: (the nth roots of one...)

        f(x) = x^n - 1 = 0
        
you can use the good 'ole Newton-Raphson method:

        x([i+1] = x[i] - f'(x[i])
                         --------
                         f(x[i])
                         
                         
Sorry if you are a calculusphope, this comes to:

        x[i+1] = x[i] - n.x[i]^(n-1)
                        -----------
                          x^n - 1
                          
Anyway, the upshot of  this is that  if x[i] is an  initial guess as  to
what the nth  root is, n[i+1]  is a  better guess. If  you continue  the
process x[i] will eventually approach one  of the n roots, the  question
is, which one ?

This is the almost interesting bit.  Take a chunk of the complex  plane,
(real numbers on the X axis, imaginary numbers on the Y axis) and pick a
point on it. Cycle in through the Newton-Raphson method (yep, do all the
nasty maths again, this time using  complex numbers) and see which  root
it lands on in the end. Colour  the original point a nice pretty  colour
depending on what the root was and how long it took to get there. Do  it
for the whole of our chunk of the complex plane and you've got  yourself
a fractal.

NEWT.TTP takes the following command line arguments:

    newt [mode] [order] [real min] [real max] [imag min] [imag max]
    
MODE can take  the value  0 or 1.  Mode 0  works best in  ST low-res.  A
colour gets assigned to each point depending on which root it  converges
to, the  shade of  that colour  used  gives an  indication of  how  many
iterations the program took before it decided that convergence had taken
place. Mode 1 just  assigns a colour based  on the number of  iterations
used, it looks good in ST mono.

ORDER is just the order of the root, Start with a minimum of three.

The last four arguments define the real and imaginary boundaries of  the
image.

I've included some example images in mono and colour format. Here are
the parameters used to create them:

    NEWT3.PC1   0 3 -1.6 1.6 -1 1
    NEWT4.PC1   0 4 -1.6 1.6 -1 1
    NEWT3.PCœ   1 3 -1.6 1.6 -1 1
    NEWT4.PC3   1 4 -1.6 1.6 -1 1
    
These images take quite a while to plot, so you'll want to know how  the
program saves them. It  doesn't. It's *that*  bad. Just press  ALT+HELP,
send the screen to your favourite  capture utility, then press a key  to
quit the program. Sorry. Role on the GEM version. I've included a rather
nice little screen-dump utility called Barrel on this month's disk.

If you want a proper introduction  to this sort of thing, I'd  recommend
"Chaos And  Fractals, New  Frontiers Science"  by Peitgen,  Jurgens  and
Saupe. (Springer-Verlag)

                        Anyway,
                          Have Fun,
                             Giles.
 
                                                                                                                                                               
