
                       GEM PROGRAMMING by Jonathan White

                                   ARTICLE IV

     Hello again. Time to take  a  further  look  at the intricacies of GEM
     programming. Some of you may know that GEM is a WIMP interface, a posh
     name for a GUI  though?  Well  no,  actually;  the  WIMP  idea is very
     important. The four things those letters stand for :-

             W       Windows
             I       Icons
             M       Menus
             P       Pointers

     are the four essential requirements  the  research team at Xerox first
     identified as being required for a properly functioning Graphical User
     Interface. If you don't have all of these all you have is a fancy menu
     system.

     We've already dealt with windows, although  not how to put anything in
     them. That's coming next. The next WIMP aspect we are going to look at
     is the menu.

     CONSTRUCTING MENUS

     GEM has one menu,  regardless  of  how  many applications are present,
     unlike, say Windows, where you have one menu per window you have open.
     Some people write code which allows  for  each  GEM window to have its
     own menu, but they actually aren't GEM menus. They are resources, just
     like the file selector that just happen to look like a menu.

     Here is the first confusing part. The GEM menu is actually a resource,
     and is stored in the resource  file.  So  what makes it different from
     the 'window menus' programs like GEMVIEW  use?  One thing. The AES has
     direct support for the GEM menu. Window menus you have to do yourself.

     So the menu is a resource? But what IS a resource? Well, I'm not going
     to go into all of that right  now,  but as an introduction, we can say
     that a resource is a 'tree of  objects'. We start with one object, the
     'root' object. That can have many sub-objects called 'children', which
     can themselves have  many  sub-objects.  Incidentally,  objects in the
     same 'level' of the tree are  called  'siblings'. The way to visualise
     it is much like the tree of directories  on  a disk. Say you have a C:
     drive. The 'C:\' directory is  the  'root', and all the subdirectories
     of that are its 'children' and  are  'siblings' of each other. Each of
     those directories might have  subdirectories  too,  which  will be the
     'children' of, say, 'C:\FONTS' and the 'grandchildren' of 'C:\'.

     So how is the 'MENU' tree  organised?  The  root object is a rectangle
     the size of the screen. That's  the green background you see (although
     you might change  the  colour)  on  the  desktop.  Then,  you have two
     children. A solid white bar, which  the  menu  fits into and a box for
     any objects on the screen below.  The  menu  box  has each of the menu
     titles as children, and the box has (taking the desktop as an example)
     any drive icons or other ones you put  on it (TOS2+). Now you can see,
     for example, how programs that place  a  picture on your desktop work.
     They change the screen box or  the  root  box  for a picture. The menu
     itself consists of several children  of  the  menu  bar, which are the
     menu titles (in fact WERCS, the RSC  editor  I use, has a special item
     for a menu title). With each title is  a box, and this box has several
     menu items as its children. Each menu item is a string object. This is
     illustrated in the diagram in FIG1.IMG.

     Anyway, nice as this all is, you  don't  STRICTLY need to know this to

     use menus but it makes a  nice  introduction to what resources are, so
     why not? There'll be MUCH more on resources later..

     The reason you don't NEED to know this is that a good resource editor,
     such as WERCS or even the  shareware  one  MKRSC will handle the basic
     structure for you. All you have to do  is place the strings of text in
     the right place and it will  handle  all  the nitty gritty for you. So
     you set the menu up by  first  placing  your title objects in the menu
     bar, then you fill in  the  items,  sizing  the  box  as you go if the
     editor doesn't do  it  for  you.  The  only  restriction  you  have to
     remember is that the box can only be one third the size of the screen,
     'cos that's how much memory GEM has to use for it.

     There are several style  guidelines  for  menus.  The  order of titles
     should start as follows from the left...

     The first  title should be the  name  of  the program. That used to be
     'desk' or the fuji symbol (if  you  were  a  poseur, it was a rotating
     fuji, but anyway..). Since  the  advent  of  multitasking, it has been
     decided to use  the  program  name,  so  you  can  always  check which
     program's menu bar you are using.  This menu should contain the 'ABOUT
     <yourprogram>' item, followed by a  separator  (a  line of minus signs
     with the disabled flag set) followed by 6 empty strings to use to fill
     in accessory names.

     The second title should  be  'File'  and  should contain the following
     list (although you might drop out items which are irrelevant).

     New, Open..., Save, Save as...,Save all (optional), Recall (optional),
     Separator, Import,  Export,  Any  other  file  commands  (see  below),
     Separator, Page Setup..., Print,  Any  other output relevant commands,
     Separator, Quit

     NOTE: 'Save all' saves all the files your application has open. Recall
     restores the current document / image  /  whatever to the state it was
     when last saved 'Any other file  commands'  SHOULD NOT include such as
     'format disk' or delete file. File  management tasks should be left to
     the desktop or other multitasking interface, NOT done by applications.

     The third title should be 'Edit', containing items as follows..

     Undo, Redo (if  multiple  undos  are  allowed),  Separator  Cut, Copy,
     Paste, Delete, Separator (we'll be going into the clipboard at a later
     date)

     Select All (optional), Separator
     Find, Replace, Find Next (all optional), Separator
     Any other editing commands

     Other pointers are that 'save preferences'  and / or 'set preferences'
     should be in an 'Options'  menu,  not  the  file  menu. Menu items for
     Bold, Underline etc should actually  BE  bold, underlined etc (you can
     use settings for these). 'Help' should be at the far right.

     So, after you have built your  menu  you  can  save it in the resource
     file. It's a good idea to name menu Titles the same as their text, for
     reasons we shall see later.  The  resource  editor will usually save a
     file too, a .H file for C, which contains defined variables so you can
     work by the menu titles names  rather than their object numbers, which
     will be easier to understand and read.

     USING MENUS

     Once you have your .RSC file  loaded  (that's  in article two, in case
     you were wondering) the first thing you  have to do is get the address
     of the menu tree out of this structure. You do this with the call :-

     int status
     OBJECT *menutree (don't worry  what  an  OBJECT  is  just  yet. It's a
     resource file structure)

     status=rsrc_gaddr(R_TREE,MAINMENU,&menutree)

     Here, MAINMENU is the name I gave  to the menu in the resource editor.
     R_TREE tells the routine to  search  for  a particular tree of objects
     (it can search for other things  too.  See this months reference file)
     and menutree is the pointer  to  the  object structure, which will now
     point to where our menu is.

     Note it is perfectly allowed to have  more  than one menu tree in your
     resource file, and shift between them  as  you wish. Each will have to
     have a separate pointer though, to keep things neat.

     If status=0 afterwards, you have  found  your  tree.  If it's not, you
     have a problem, and should really quit the program.

     Once you have  your  menu,  you  can  display  it  with  the following
     commands..

     graf_mouse(256,&dummy);         (stop the mouse interfering with the
     menu draw)
     status=menu_bar(menutree,1);    (draw the menu)
     graf_mouse(257,&dummy);         (turn the mouse back on)

     I have includes set up  so  I  can  use  the two graf_mouse calls with
     MOUSE_OFF and MOUSE_ON, respectively. If  status  is  >0, an error has
     occurred and if it is 0 you are OK.

     Should you want to remove the menu bar, you can do it like this..

     graf_mouse(256,&dummy);         (stop the mouse  interfering  with the
     menu draw)
     status=menu_bar(menutree,0);    (erase the menu)
     graf_mouse(257,&dummy);         (turn the mouse back on)

     Note  forgetting  to  turn  the  mouse  back  on  afterwards  is  very
     embarrassing..

     Once you have your  menu  drawn,  the  system  deals with dropping the
     menus down, making the selected item invert, all that. What it expects
     you to deal with is the effects of a click. Actually, it will probably
     also send you a message  telling  you  to redraw the window underneath
     the menu, but that's for another  time.  How  does it tell you about a
     click? It sends you a message!

     We have gone over how to  receive  messages  before, so I won't repeat
     that. The message you get has the following form..

     Menu Word       Contents
         0           10 (will be defined somewhere as MN_SELECTED, so you
                         can use that)
         3           Object number of menu title
         4           Object number of menu item

     The last two should be  defined  in  the  include  file the RSC editor
     produced, so instead of :-

     if ((message[3]=5) AND (message[4]=8)) THEN Do_Quit()

     You can do :-

     if ((message[3]=FILE) AND (message[4]=QUIT) THEN Do_Quit()

     (I know, it's not C, but AND  is  clearer  than && or whatever. If you
     care, SUE  ME).  Actually,  you  are  better  off  using  nested  CASE
     statements rather than lots of IF's as well, if you are programming in
     C.

     When you have dealt with the click,  the  last thing you have to do is
     reset the inverted menu title back to normal. You do this with :-

     status=menu_tnormal(menutree,message[3],1);
     If status is <0, you were OK, if it equals 0, you have an error.

     (status=menu_tnormal(menutree,message[3],0) will make it inverted)

     Now, some menus have to be  disabled,  some of the time, and sometimes
     you want  little  checkmarks  next  to  menus,  yes?  That's  the next
     thing.,.

     CHANGING MENUS

     You could, of course have different  menu trees and swap between them,
     but that's  somewhat  wasteful.  Luckily,  the  AES  provides  several
     routines to deal with changes to menu items.

     a) Disabling /enabling menu items.

     You want to disable a menu item  either if it isn't relevant right now
     (i.e. save... if no document is open, or  if it might be dangerous - I
     have seen menus  where  'quit'  was  disabled  if  you  had an unsaved
     document, but that's  a  little  bit  strong).  You  could  do this by
     directly altering the objects structure, but  that's the long way. The
     easy way is to use..

     status=menu_ienable(menutree,ITEMNO (or name, if you have a .H),flag)
             flag=0 to disable, 1 to enable
             status=0 for an error.

     Note you TECHNICALLY cannot  enable  /  disable  menu titles. However,
     there is an undocumented feature such  that  if you call this with the
     top bit of the object no  set  to  1 (requires bit-twiddling), the AES
     will disable the title. I haven't  been  able to verify which versions
     of the  AES this works in, so really you  ought to do this by directly
     altering the object structure, which we'll know how to do soon enough.

     b) Checking /Unchecking items

     If you want to put  a  checkmark  next  to  an  item, you have to have
     remembered to make the box big  enough  in  the menu, and the text far
     enough over to the right to do it.  If you don't, It'll force the text
     out of the box and your program will crash. So remember that when you
     are in the editor.

     To set / remove checkmarks, you use a call much like the one above :-

     status=menu_icheck(menutree,ITEMNO,flag)
             flag=0 to uncheck, 1 to check
             status=0 if you have an error.

     C) Changing the text of menus

     You can actually change the text of menu items if you wish. Again, you
     can do it by hacking the  menu  structure (indeed, that's the only way
     to change menu TITLE strings) but if  you want to change the menu item
     string, you can use the following call :-

     char *text
     status=menu_text(menutree,itemno,text)

     *text is a pointer to a  standard  C  string WHICH MUST FIT INSIDE THE
     DROP DOWN BOX or your program will crash.

     Remember, ANYTHING in the menu  structure  can  be changed if you know
     enough about resource structures. However, things can also go horribly
     wrong this way. You are better off using these routines, believe me...

     Well, that about covers it for  menus  and  along  the way we've had a
     little about resources (although not very much). Next time, we'll look
     at our first VDI section and  go  through how to display standard text
     on the screen in  a  window  (I'm  leaving  GDOS  text for now. Partly
     because I can't decide whether  to  include  Speedo GDOS or not. Could
     those of you reading this pass  a  message  to  Peter Hibbs yes or no?
     Please bear in  mind  whether  you  want  to  write  speedo compatible
     programs is the issue,  rather  than  whether  you use speedo programs
     yourself.)

     So, it's goodbye from  me.  I'm  off  to  enjoy  the sunshine while it
     lasts.  See you next time.
