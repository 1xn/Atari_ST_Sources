                   
                             Article 5 The VDI
                              Quick Reference

First off, I'm not going to repeat the information on wind_get(),v_opnvwk() 
and graf_handle(); we covered those earlier on. Also, we will presume the 
variable 'handle' refers to the VDI workstation handle unless we say otherwise.

VOID vs_clip(handle, flag, points)
WORD handle, flag
WORD *points

      This routine sets the VDI clipping rectangle. Flag is a switch value 
      (0=clipping off, 1=clipping on) If clipping is set on, points is an array
      of four words defining the top left and bottom right corners of the 
      rectangle to draw in. Any drawing outside this area will be clipped out. 
      If flag=0, *points=NULL.
        

TEXT SETTING EFFECTS

WORD vst_color(handle, pen)
WORD handle, pen
      Sets text to be displayed using pen 'pen'. Therefore, all text after 
      this call will be drawn using the colour set in palette entry number 
      'pen'.
      Returns the actual colour set.

WORD vst_rotation(handle,angle)
WORD handle, angle
      Sets all text written after to be rotated by 'angle', where angle is in 
      .1 of a degree, with 0 at east (3 o'clock). Returns the actual rotation 
      set. 
      For bitmap fonts, the only valid values of angle are 0, 900,1800,2700
      (3600=0). FSM and speedo fonts may be rotated by any angle.
        
        
VOID vst_alignment(handle,halign, valign, *hout, *vout)
WORD handle, halign, valign
WORD *hout, *vout

      Set the alignment of text. The following values are allowed; The actual 
      values set are returned in hout and vout.

        halign  0= left justified
                1= center justified
                2= right justified
        
        valign  0=Base line
                1=Half line
                2=Ascent line
                3=Descent line
                4=Bottom
                5=Top
        
        see figure1.img for an illustration of these settings.
        

WORD vst_effects(handle, effects)
WORD handle, effects
      Sets the text effects put onto any text displayed. 'Effects' is a set of 
      binary flags, each setting / unsetting one text effect.
        
                bit     effect
                 0       Thickened (bold)
                 1       Lightened (grayed)
                 2       Skewed (italic)
                 3       Underlined
                 4       Outlined
                 5       Shadowed (not currently working)
        
        The actual effects set are returned. 
        
        
VOID v_gtext(handle, x, y, str)
WORD handle, x, y
char *str
      Prints text to the workstation display. x and y are the starting 
      location for the string to be printed, which is held in memory pointed 
      to by str. It is a standard C null terminated string.
        
        
VOID v_justified(handle, x, y, str, length, wflag, cflag)
WORD handle, x, y,
char *str
WORD length, wflag,cflag
      Prints micro justified (justified using pixel width bands between 
      characters). handle, x, y and str are the same as for v_gtext(). Length 
      defines the pixel width the text is to be justified within. wflag and 
      cflag are switch variables, referring to words and characters 
      respectively. If set to 1, microspacing is allowed between words/ 
      characters, if 0 microspacing is not allowed.
        

VOID vqt_extent(handle,str,points)
WORD handle
char *str
WORD *points
      Str points to a standard C string. This function returns the dimensions 
      of a rectangle the string will fit in given current text attributes. 
      points is therefore an 8 WORD array, defined as follows
       
                0       X coord of point 1
                1       Y coord pf point 1
                2       X coord of point 2
                3       Y coord of point 2
                4       X coord of point 3
                5       Y coord of point 3
                6       X coord of point 4
                7       Y coord of point 4
                
      Arranged on the screen according to the arrangement in figure 2.
        
        

VDI GRAPHIC PRIMITIVES

VOID v_bar (handle,points)
WORD handle
WORD *points
      Draws a filled rectangle. The VDI format rectangle is defined in the 
      four WORD array 'points'.
        
VOID v_arc(handle, x, y, radius, startangle, endangle)
WORD handle, x, y, radius, startangle, endangle
      Outputs an arc in the current line properties. The center and radius of 
      the circle the arc is part of are x,y and radius, and the start and end 
      points of the arc are defined as two angles 'round the circle', 
      startangle and endangle, in .1 of a  degree steps with 0 at due east.
        
VOID v_pieslice(handle, x, y, radius, startangle, endangle)
(all parameters as above)
      Draws a pie slice with the current line and fill properties. All 
      parameters serve the same function as for v_arc, and the pie is defined 
      as the v_arc with a line from each end of the arc intersecting at x,y.
        
VOID v_circle(handle, x, y, radius)
WORD handle, x, y, radius
      Draws a circle with the current fill and line properties. The center is 
      x,y and the radius is radius.
        
VOID v_ellipse(handle, x, y, xradius, yradius)
WORD handle, x, y, xradius, yradius
      Draws an ellipse centered at x,y 2*xradius pixels wide and 2*yradius 
      deep.

VOID v_ellarc(handle, x, y, xradius, yradius, startangle, endangle)
WORD handle, x, y, xradius, yradius, startangle, endangle
      Draws an elliptical arc round an ellipse defined by x,y, xradius and 
      yradius as above, from startangle to endangle around the circumference.
        
VOID v_ellpie(handle, x, y, xradius, yradius, startangle, endangle)
WORD handle, x, y, xradius, yradius, startangle, endangle
      Draws an elliptical pie slice, made up of an elliptical arc defined as 
      above, with a line for each arc end point intersecting with x,y.

VOID v_rbox(handle,points)
WORD handle,
WORD *points
      Displays a rounded cornered rectangle. 'points' is a four WORD array 
      defining a VDI rectangle. There is currently no way to set the degree of 
      'roundedness' of the corners.
        
VOID v_rfbox(handle,points)
WORD handle,
WORD *points
      Displays a rounded rectangle as above, and fill it with the currently 
      set fill.
        


GRAPHIC PROPERTY SETTING FUNCTIONS

WORD vsf_color(handle, colour)
WORD handle, colour
      Changes the current fill colour. Colour is the palette index to change 
      to. Returns the actual colour set.
        
WORD vsf_interior(handle, interior)
WORD handle, interior
      Sets the interior fill style for objects, according to the following 
      values of 'interior' (note that standard aliases exist for these 
      settings)
        
         0      FIS_HOLLOW      No fill (colour index 0)
         1      FIS_SOLID       Filled with colour as set by vsf_color()
         2      FIS_PATTERN     Patterned fill set by vsf_style()
         3      FIS_HATCH       Hatched fill as set by vsf_style()
         4      FIS_USER        User defined fill style, as set by vsf_udpat()
         
        Returns the value actually set.
        
WORD vsf_style(handle,style)
word handle, style
      Sets the current defined style. You must first set whether you are using 
      hatched or patterned style, and then this function sets the appropriate 
      one. Valid pattern styles are 1-24, valid hatch styles are 1-12.

VOID vsf_udpat(handle,pattern,planes)
WORD handle, planes
WORD *pattern
      Sets the user defined fill pattern. 'planes' is the number of bit planes 
      of the pattern. In palette based modes, 'pattern' points to an array of 
      WORDs (each pattern MUST be 16*16 pixles in size) arranged in bitplane 
      order.

        [16*planes]=16 bits of bitplane 'planes' for 16 pixels of row 16
        
        In truecolour modes, pattern points to a 16*16 array of 32-bit LONGS, 
        each of which contains a 32 bit colour value for one pixel.
        
        The value of 'planes' is set to 32 for  truecolour displays.
        
WORD vsf_perimeter(handle,flag)
WORD handle,flag
      Sets whether a border will be drawn around objects. A value of 1 for 
      planes means draw a border, a value of 0 means don't. Borders have the 
      currently set line properties.
      Returns the value set.
        
WORD vsl_color(handle,colour)
WORD handle, colour
      Sets the current line colour. 'colour' defines which palette entry is 
      used for line drawing.  

WORD vsl_type(handle,type)
WORD handle, type
      Sets the current line type. 'Type; is as follows (one '-' is one pixel in 
      the line)
        
                0       SOLID       ----------------
                1       LDASHED     ------ ------ --
                2       DOTTED      --- -- -- -- ---
                3       DASHDOT     ------ -- ------
                4       DASH        ----------
                5       DASHDOTDOT  ------- -- -- --
                6       USERLINE    User defines, see below
        Returns the line style set
        
VOID vsl_udsty(handle,pattern)
WORD handle,pattern
      Creates a user defined line style. The value of 'pattern' is taken as 16 
      binary settings for the 16 pixels in a line segment.
        
VOID vsl_width(handle,width)
WORD handle,width
       Sets the width of future lines and perimeters. 'width' is the width in 
       pixels. The VDI can only handle uneven line widths. Note that setting 
       line width to more than one may disable line styles other than SOLID.
