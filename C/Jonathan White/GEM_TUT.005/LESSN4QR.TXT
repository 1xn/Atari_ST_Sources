                              Article 4 Menus                                                
                              Quick Reference

WORD rsrc_gaddr(type, index, address)
WORD type, index
VOID* address

        This function returns the address of a resource file loaded with 
        rsrc_load(). The address of the indexth item of type 'type' will be 
        placed in the address pointed to by address.
        
        Type can take the following values
        
                R_TREE          (0)     An object tree
                R_OBJECT        (1)     A single object
                R_TEDINFO       (2)     A TEDINFO structure
                R_ICONBLK       (3)     An ICONBLK structure
                R_BITBLK        (4)     A BITBLK structure
                R_STRING        (5)     A Free String
                R_IMAGEDATA     (6)     An Image Block
                R_OBSPEC        (7)     The OB_SPEC field within an object 
                                        structure
                R_TEPTEXT       (8)     The te_ptext with in a ted_info struct
                ....
                
        And so on. I haven't listed the whole thing because right now, we 
        haven't explained what most of them are. However, it is useful to 
        introduce the concept of a function that can find the address of a 
        part of the object tree, or a variable within that structure. Big pink 
        happy hat to the first person to figure out why this is so useful...
        
        Returns a 0 if an error occurred.
        

WORD graf_mouse (flag, pointer)
WORD flag
VOID* pointer

      Controls the appearance and shape of the pointer. The value of flag can 
      vary as follows..
        
              ARROW           0       Make the pointer the standard arrow shape
              TEXT_CRSR       1       Make the pointer an 'I-bar'
              BUSY_BEE        2       Makes the pointer the 'busy bee' 
              POINT_HAND      3       The pointer changes to the pointing hand
              FLAT_HAND       4       The pointer becomes the 'dragging' hand
              THIN_CROSS      5       The pointer becomes a 1 pixel bar cross
              THICK_CROSS     6       The pointer becomes a 3 pixel bar cross
              OUTLN_CROSS     7       The pointer is a 3 pixel cross, with an 
                                      overlaid white 1 pixel cross
              USER_DEF        255     (see below)
              M_OFF           256     remove the pointer from the screen
              M_ON            257     guess.
                
        If mode=USER_DEF, the pointer points to a MFORM structure, as follows..
        
        typedef struct{
                        short mf_xhot;          (x coord of hot spot 0-15)
                        short mf_yhot;          (y coord of hot spot 0-15)
                        short mf_nplanes;       (no. bitplanes; must = 1 )
                        short mf_fg;            (foreground colour index 0-15)
                        short mf_fg;            (background colour index 0-15)
                        short mf_mask[16];      (16 bytes of mask data)
                        short mf_data[16];      (16 bytes of data for pointer)
        }MFORM;
        
        Note that the foreground and background colours are usually 0 and 1.
        pointer should be set to NULL if not used.
        
        Returns a 0 if an error occurred.
        
        
WORD menu_bar( tree, mode )
OBJECT *tree
WORD mode

        Displays a specialised form of object tree as the application menu, or 
        removes it. In a multitasking OS, it can be used to find out which 
        application's menu bar is currently being displayed.
        
        tree is a pointer to an object structure which conforms to a standard 
        menu structure
        
        mode defines the way the function operates.....
        
        mode = 0      Erase the menu bar from the screen
        mode = 1      Display the tree pointed to by tree as a menu bar
        mode = -1     return the AES application identifier of the application 
                      whose menu bar is currently being displayed. tree can be 
                      set to NULL. You should use appl_getinfo() to check this 
                      mode is available.
                        
        If mode !=-1, the function returns 0 if an error occurs. 
        
        
WORD menu_tnormal( tree, object, flag )
OBJECT *tree
WORD object
WORD flag

      Highlights / unhighlights a menu title, highlighting the object 'object' 
      in tree 'tree' if flag=0. If flag = 1 the title is displayed normally.
        
      returns a 0 if an error occurs.
        

WORD menu_ienable(tree,object,flag)
OBJECT *tree
WORD object
WORD flag

      Enables the item 'item' in tree 'tree' if flag=1. Disables it if flag=0.
      returns a 0 if an error occurs.
        
WORD menu_icheck(tree,object,flag)
OBJECT *tree
WORD object
WORD flag
        
      checks the item 'item' in the tree 'tree' if flag=1. No check will be 
      displayed if flag=0.
      Returns a 0 if an error occurs.
        
WORD menu_text(tree,object,text)
OBJECT *tree
WORD object
CHAR *text

      changes the text of menu item 'item' in tree 'tree' to the C string 
      pointed to by 'text'. This must be no larger than the text it is 
      replacing.
      Returns a 0 if an error occurs.
