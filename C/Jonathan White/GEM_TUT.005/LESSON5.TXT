
                       GEM PROGRAMMING by Jonathan White

                                   ARTICLE V

     Well folks, first of all  I  have  to  apologise for the missing quick
     reference last month. I forgot to put it on the disk I send to Peter..
     So you can stop cursing him and start cursing me. It should be on this
     month's disk, along (barring  Twilight  Zone  style cockups) with this
     months QR..

     Anyway, we should get on. This month we are going to change tack for a
     while. First of all, we are going to  give  the AES a rest and look at
     the VDI. Secondly, we are (finally)  going to look at output routines,
     involving basic text (GDOS is for another day) and look at the 'alpha'
     control codes for basic terminals.

     INITIALISING THE VDI

     It is important to remember that  the  AES  and the VDI, although they
     work  together  (the  AES  uses   the   VDI's  drawing  routines)  are
     independent, and in fact conflict in some annoying ways.   You can use
     VDI calls without starting the AES, and you can use AES functions like
     menus and  dialogue  boxes  without  having  to  initialise  the  VDI.
     However, the majority of programs will use both.

     Why should you user the VDI? For  any given VDI call there are usually
     quicker ways to do whatever output you wish, via BIOS and XBIOS calls.
     The reason is simple. Any add-on  graphics  device like a card or even
     the enhanced  graphics  of  the  Falcon  are  VDI  compatible  but not
     necessarily BIOS / XBIOS compatible. Therefore, unless you use the VDI
     system your program might or might  not work with graphic cards. Since
     the in-built graphic displays  of  the  ST  are  looking more and more
     outdated compared to  other  systems,  more  people  are  buying these
     adapters. Again, it's a  question  of  giving  your program the widest
     possible base of users. If  it's  just  for  YOU, that's cool, but for
     anything you put into the  public  domain  or  put  out  as one of the
     various forms of shareware, you really should consider these aspects.

     I HAVE actually covered initialising  the  VDI  before,  so I won't go
     over it all again; however, I will cover each step as a reminder.

     The first thing you  have  to  do  is  find  out  the screens physical
     workstation handle (which I will refer  to as phys_handle from now on.
     Please note there  are  more  handles  in  this  article  than in your
     average door factory, but if you  get  them mixed up your program will
     crash, so it pays to be careful..). The AES automatically sets this up
     on bootup, so you can  get  it  with  the  call to graf_handle(). This
     returns the handle, and also the  pixel  size of a standard character,
     which will be important later on.

     Using this handle, we can then  open a virtual workstation (the screen
     is a virtual workstation, other  devices are 'real' workstations) with
     a call to v_opnvwk(). This  returns  much useful information about the
     screen display,  along  with  the  vdi  workstation  handle (hereafter
     called stat_handle). This is the handle  you  use to reference all VDI
     calls, and is NOT the same as the  window handle of the window you are
     drawing in. See what I mean about the handles?

     So, once you have the VDI workstation handle, you open a window to put
     your output into. The  problem  is  the  VDI doesn't  understand about
     windows, so you still  have  to  reference  the  place you are putting
     output to by  absolute  screen  co-ordinates  (640*400 or whatever..).
     This gives us our  first  problem.  How  do  you  find the correct co-
     ordinates to draw within. You  must  also  remember  that the area you

     have is the size of the window minus  the size of all the gadgets like
     sliders and closers and stuff..

     Luckily we have a way to do this,  provided you know the handle of the
     window you want to keep your drawing  within.  You do this with an AES
     function, wind_get(). If  you  use  wind_get()  with  a  mode  flag of
     WF_WORKXYWH, the four words returned  contain  the  X,Y coords and the
     width and height of the windows work  area.  BINGO! Now all we have to
     do is feed those co-ordinates to  the  VDI  and we're away, yes? Err..
     NO. This is one of the ways  the  AES and the VDI conflict and frankly
     it's VERY IRRITATING. Why? because  it's  one  of  the things I always
     forget! I sit there for hours thinking  'why is that the wrong shape?'
     or 'why is that  drawn  over  there?'  and  it's  all because I didn't
     convert the co-ordinates. So  remember  this,  it's a guaranteed 'slap
     head' bug (a slap head bug, by  the  way, is one so blindingly obvious
     and simple that, after say two  days looking at interrupt conflicts or
     some  such,  you  notice   this   is   the   problem  and  are  almost
     subconsciously forced to slap the palm of your hand repeatedly against
     your forehead).

     So, what's the problem?  The  AES   defines  screen rectangles as four
     words. X and Y co-ordinates  of  the  rectangle, followed by the width
     and height. The VDI does rectangles as  a pair of points, top left and
     bottom right hand corners.

     The first two words of both are the  same.  To get from AES to VDI you
     convert like this

     VDI3rdword = AES3rdword + AES1stword
     VDI4thword = AES4thword + AES2ndword

     AES3rdword = VDI3rdword - AES1stword
     AES4thword = VDI4thword - AES2ndword

     (You could have worked this out yourself,  I'm sure, but I thought I'd
     save you the trouble).

     So by now you have the  VDI  rectangle  within which you can draw. The
     next thing to do is set  the  VDI  clipping rectangle. This makes sure
     none of the things you  draw  'spill  out'  onto  the desktop or other
     windows. It often helps speed your program up if you limit the drawing
     as much as you can yourself, but  it's  better to be safe. The call is
     quite simple, vs_clip().  You  pass  it  the  workstation  handle, the
     coordinates and a 'true'  flag to set clipping on, and a 0 flag with a
     NULL rectangle to set clipping off.  Note  you should set clipping off
     when your program exits...

     After that, you are free (in theory) to draw away at your leisure..


     BASIC OUTPUT FORMS

     There are two basic forms  of  visual  output; text and graphics (even
     though on a pixel based display,  text  is actually graphics but we'll
     leave the philosophical  exactitudes  thankyouverymuch).  Text  is the
     most easy to deal with so we'll deal with that first..

     The commands used to output via the VDI are quite simple. First of all
     you should set any aspects of the text  you wish. You do this with the
     following calls. Note these calls AREN'T  retroactive. You have to set
     the various things BEFORE you print your text.

     a) Colour

     You set the colour of text by setting which 'pen' is used to print it.
     There are as many 'pens' as there  are  colours in the palette, i.e in
     ST low there are 16, in ST med there are 4 etc.. In true colour modes,
     at least on the falcon, there are 256, but changing the palette entry
     doesn't affect anything already on the screen. The call is :-

     vst_color(handle,pen) !NOTE THE AMERICAN SPELLING!

     The pen is by default 1, which is black.

     b) Rotation

     You can also set the  amount  of  rotation  of the text. Bitmaps fonts
     have 90 degree steps of rotation,  whereas vector fonts can be rotated
     freely. The call is :-

     vst_rotate (handle,angle)

     0 is normal, 90 is 'up  the  screen',  180  is  upside down and 270 is
     'down the screen'.

     You can see  examples  of  this  in  figure1.img.  The  numbers become
     important in a moment..

     c) Alignment

     Unfortunately, alignment does not only  cover  left / right aligned or
     centered text. It also covers VERTICAL alignment. The various 'levels'
     of alignment are illustrated in figure2.img, and should be familiar to
     anyone who knows much about  typography.  Note  that subscript text is
     actually text aligned in the descent  line, and superscript is aligned
     on the ascent line. Normally, you will use the default setting of left
     aligned and base aligned.

     Microspace justified text is actually  available  via  the VDI (if you
     don't know what  'microspace  justified'  is,  it's  justified text in
     which the words are laid out  on  the  line  so  as not to create huge
     gaps.

     However, you have to use a special version of the 'text print' command
     to do it. You unfortunately cannot set it as a default alignment.

     The command to set the alignment is like this...

     vst_alignment(handle, halign, valign, &hset, &vset)

     You put the alignment flags  you  WANT  in  halign and valign, but the
     ones you GET are returned in  hset  and  vset, as some devices may not
     support all forms of alignment (although the screen does).


     d) Effects

     You can apply numerous text  effects  to  your output. Although, using
     GDOS fonts, it is  usually  better  to  use  a  bold  font rather then
     enboldening (is that a  word?)  a  standard  weight font. Anyway.. the
     effects you might have are  bold, underline, italic, outlined, greyed,
     and shadowed.
     However, in every version of GDOS before speedo, the 'shadowed' option
     is not functional. I have  no  information  as  to whether Speedo from
     Atari or the new Speedo / NVDI  font renderers fix this problem, but I
     wouldn't rely on  it.  Actually,  making  your  own  shadowed  text is
     relatively easy to do anyway,  with  a  little thought! The command to
     assign these effects is :-

     vst_effects(handle,effects)


     effects is a  set  of  binary  flags  which  define  what  effects are
     applied. Obviously, you  call  this  function  with  effects=0  to get
     normal text back.


     TEXT OUTPUT FUNCTIONS

     There are two text  output  functions,  regardless  of whether you are
     using GDOS or not. One displays  text  according to the formatting you
     have set, the other with the  special microjustified form (although it
     still retains the effects and  colour  information  you have set). The
     most basic one is

     v_gtext(handle, x, y, str)

     Handle is the workstation handle, x  and  y  are the position to start
     printing in -  given  the  alignment  attributes  you  have  set, this
     defines where the text goes only vaguely :-) - and str is a standard C
     null terminated string containing the text you wish to print.

     The other call,  to  print  out  microjustified  text  is  similar, as
     follows :-

     v_justified(handle, x, y, str, length, wordflag, charflag)

     handle,x,y and str are as  above.  length  is  the  'width' of area in
     pixels across which the text is  to be 'spread'. wordflag and charflag
     specify whether  justification  can  be  performed  between  words and
     characters respectively (0=not, 1=can).

     One useful tip to speed up your  screen displays is to only display as
     many characters as you can fit in the window, plus possibly one extra,
     thereby reducing the amount of clipping  the  system has to do. How do
     you do this? Well, you already  know  the   size of your working area,
     and you can find  the  width  of  any  given  string  of text with the
     following command :-

     vqt_extent(handle,string,points)

     Handle and string are obvious.  Points  is  a  series of four pairs of
     four words (e.g x,y word pairs) which  define the minimum size box the
     text will fit in. The problem is  the ORDER in which those pairs come.
     That's what the 1,2,3,4 on figure 2  were about. What order (or indeed
     what shape) the  box  is  with  Speedo  free  rotated  text  I have no
     experience of (I HAVEN'T TRIED IT,  OK?  I'm too busy writing articles
     and stuff..) but I should imagine  the system translated them somehow.
     Is it just me, or would  it  have  been  better  just  to have it in a
     standard order? Oh well..

     So you can run a  loop  down  until  you  have  one more character (or
     ideally, part of one character)  running  over,  print that string and
     let the system tidy up for  you.  This  applies  to both forms of text
     output.


     GRAPHIC PRIMITIVES

     And no, this is nothing to do with  sad Tarzan cartoons. The VDI has a
     few  'standard'  shapes  it  can   draw,  called  the  graphic  device
     primitives. The reason these are special  is that ANY device driver is
     supposed to at least support these,  so  you  can usually rely on them
     being available.  They  are  also  noteworthy  in  that  they  are the
     functions GEM files are usually built  up  from.  One of the values of
     work_out (work_out[14]) is the number  of GDP functions the particular
     VDI device supports. It is important to remember that they inherit any
     properties already  set  (colour  etc)  BUT  they  have  a  few  other
     properties that must be set before they  are used. We'll look at those
     in a mo..

     The functions are :-

             Filled Bar
             Arc
             Filled Pie
             Filled Circle
             Filled Ellipse
             Elliptical Arc
             Filled Elliptical Pie
             Rounded Rectangles
             Filled Rounded Rectangle
             Justified Text.

     NOTE: Although this say's 'filled'  it  is  entirely possible for that
     fill to be 'none'.

     The last one we've already dealt with, the rest we'll do in order..

     a) Filled bar
             v_bar(handle, points)
                     Handle = the VDI handle
                     Points = a VDI format set of points to draw

     b) Arc
             v_arc(handle,x,y,radius,beginangle,endangle)
                     Handle = the VDI handle
                     X,Y    = the centre of the circle round which the arc
                              is to go.
                     Radius = The horizontal radius of the circle (vertical
                              fixed by aspect ratio of device)
                     Beginangle,
                     Endangle = The angles of start and finish in 1\10 of a
                                degree with 'East' as 0.

     c) Filled Pie
             Hmm.. Here I have a problem. The Compendium defines this
             function as v_pieslice(), whereas  the  Compute! guide says it
     is v_pie(). The Lattice C documentation says v_pieslice too.
             I advise you to check your compiler documentation.

             Anyhow, the function takes exactly the same arguments as the
             v_arc() call, so there you go..

     d) Filled Circle
             v_circle(handle,x,y,radius)

             Simple, huh?

     e) Filled Ellipse
             v_ellipse(handle,x,y,xradius,yradius)
             Handle = the VDI handle (in fact, take that as read from now
                                     on OK?)
             x,y = center point
             xradius = the horizontal radius
             yradius = the vertical radius

             NOTE: unless you are using Normalised DEvice Coordinates, this
             will come out a different shape in different resolutions

     f) Elliptical arc
             v_ellarc(handle,x,y,xradius,yradius,beginangle,endangle)
                     All of these should be familiar by now..

     g) Filled Elliptical Pie
             v_ellpie(handle,x,y,xradius,yradius,beginangle,endangle)
                     My sister was bitten by a moose once. No, Really...

     h) Rounded Rectangle
             v_rbox(handle,points)
                     Again, remember that the points are a VDI format
                     rectangle.

     i) Filled Rounded Rectangles
             v_rfbox(handle,points)
                     Well, there's a surprise..

     And there we  are.  These  (along  with  justified  text)  are the ten
     primitives that any VDI is  supposed  to  support.  If  you want to be
     supersafe, you can check when you open the workstation.

     These functions are modified by several VDI setting functions. These
     include :-

     The clipping rectangle (we've already seen that)
     The fill color (set with vsf_color() )
     The fill interior style (vsf_interior() )
     The fill style index (vsf_style() )
     The fill perimeter outline (vsf_perimeter() )
     The perimeter line colour (vsl_color() )
     The perimeter line style (vsl_type() )
     The perimeter line width (vsl_width() )

     It's fairly obvious what each of these does, full details can be found
     in this month's quick reference.

     And that'll do for this month.  I'll leave you all drawing psychedelic
     circles all over your desktop,  and  next  month we'll finish off with
     the other VDI functions such as line  and polyline drawing, as well as
     some stuff on using the VDI to  read the mouse and keyboard (although,
     really you should be using AES messages; we'll cover those too..)

             TTFN!
