
 ANTIC PUBLISHING INC.,COPYRIGHT 1986.  REPRINTED BY PERMISSION.

                        Coping with GEMDOS


     While it's fun playing with windows and object trees,  one of
the  day-to-day realities of working with the ST is its  operating
system, GEMDOS.  A successful application should insulate the user
from  the foibles and occasional calamities of the machine's  file
system.  The GEM environment provides some minimal tools for doing
this,  but a good deal of responsibility still rests with you, the
programmer.

      This column (#15 in the ST PRO GEM series) tries to  address
the  GEM/DOS integration problem by providing you some stock  code
for common functions, along with a discussion of some of the worst
"gotchas" lurking for the unwary.  The download for this column is
GMCL15.C.  You should obtain and list this file before proceeding.

     A  BIT OF HISTORY.   There has been a good deal of  confusion
in  the Atari press and among developers over what GEMDOS is,  and
how it relates to TOS and CP/M-68K.   It's important to clear this
up,  so  you can get a true picture of what GEMDOS is intended  to
do.  The best way is to tell the story of GEMDOS' origins, which I
can do, because I was there.

     As  most developers are aware,  GEM was first implemented  on
the  IBM  PC.   PC GEM performed two functions.   The first was  a
windowed graphics extension to the PC environment.  The second was
a  visual  shell,  the Desktop,  which ran on top of the  existing
operating system, PC-DOS.

     When work started on moving GEM to the ST, there were two big
problems.   First,  no STs actually existed.  Second, there was no
operating system on the 68000 with which GEM and the Desktop could
run.   Unix  was  too  large,  and  CP/M-68K lacked  a  number  of
capabilities,  such  as  hierarchical files,  which were needed to
support GEM.

     Work on porting the graphics parts of GEM to the 68000 had to
start immediately to meet schedules.   Therefore, CP/M-68K running
on  Apple Lisa's was used to get this part of the project off  the
ground.   Naturally,  the  Alcyon C compiler and other tools which
were native to this environment were used.

     In  parallel,  an  effort was begun to write a new  operating
system for the 68000,  which would ultimately become the ST's file
system.   It was designed to be a close clone of PC-DOS,  since it
would   perform   the   same  functions  for  GEM   in   the   new
environment.  At  this  point,  the term TOS was introduced.   TOS
really meant "the operating system,  whatever it may be, that will
run on the ST",  since not even the specifications,  let alone the
code, were complete at that time.

     The  first engineer to work on "TOS" at Digital Research  was
Jason  Loveman.   This  name  leaked  to the press,  and  in  some
distorted  fashion generated a rumor about "Jason DOS",  which was
still  just  the same unfinished project.   As "TOS"  became  more
solid,  the  developer's tools were ported to the new  environment
one by one, and the GEM programming moved with them.  CP/M-68K was
completely  abandoned,  though the old manuals for C and the tools
lived on and are still found in the Atari developer's kit.

     All of this work had been done on Lisas or Compupro  systems
fitted with 68000 boards.  
At this point notice  that  the  result of the  file  selector  is
returned via its third argument,  rather than as a function value.
If  the result is TRUE,  get_file() merges the temporary path  and
file  string,  storing the result via the second input  parameter.
This  result  string is suitable for use with Fopen,  and  may  be
resubmitted  to get_file() when the next operation is  invoked  by
the user.

     Parse_fname() is straight-forward C.  It looks backward along
the  file to find the first character which is part of  the  path.
The tail of the filename is copied off, and its former location is
overlaid with the wild card specification.

     Get_path()  is a bit more interesting.   It makes use of  two
GEMDOS  functions,  Dgetdrv() and Dgetpath() to obtain the default
disk drive and directory, respectively.  Note that Dgetpath() will
return  a null string if the current default is the root,  but  it
puts  a back-slash at the beginning of the path  otherwise.   This
forces  a  check for insertion in the root case,  since  the  file
selector  wants  to  see something like  "A:\*.RSC",  rather  than
"A:*.RSC".   After  making  this fix,  get_path() concatenates the
wild card specification derived from the input extent.

     The last routine in the download is new_ext().   This utility
is  useful if your application uses more than one associated  file
at a time.   For instance, the Resource Construction Set uses both
an RSC and a DEF file, with the same base name.  New_ext() takes a
fully  formed file name,  and replaces its old extent with the new
one  which you supply.   This lets you quickly generate both  file
names after one call to the file selector.   Notice that new_ext()
looks BACKWARD along the name to find the delimiting period, since
this  character  can also be part of a subdirectory  name  in  the
path.

     So  we reach the end of the code and this column.   Hopefully
both will keep you profitably occupied for a while.  July's column
will return to graphics topics,  with a look at writing customized
rubber  box and drag box routines,  and ways to implement your own
"pop-up"  menus.   August  will  bring techniques  for  displaying
progress  indicators,  associating  dialog and menu  entries  with
keystrokes, and customizing objc_edit.

     I  CAN'T HEAR YOU!   The Feedback mailbag has been  noticably
flat  of  late.   There have been a number of compliments  on  the
column,  which  are  much  appreciated,  and some suggestions  for
topics  which fall outside the bounds of this series.   The latter
have  been passed on to Antic for possible inclusion in their  new
ST quarterly, START.

     Undoubtedly,  one reason for the shortage of questions is the
amazing ability to get a quick answer on the Developer's SIG, PCS-
57.   This  is  a  good  sign  of  a  strong  Atari  community  on
Compuserve.   However,  the  SIG message style doesn't really lend
itself  to lengthy explanation,  so suggestions for longer  topics
are always welcome here.

     Finally,  I  am now beginning the process of collecting these
columns and some additional material into a book.  In doing so, it
would  be  helpful to know if you feel that any part of  GEM  has
been  slighted  in my discussions.   If so,  let  me  know.   Your
suggestions will appear in future columns and finally make their
way into the book.



