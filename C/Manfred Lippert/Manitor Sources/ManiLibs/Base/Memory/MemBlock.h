// !!!!!! NOT VERY EFFICIENT !!!!!!!!!!// (Each memory block has to hold vtable ...)// Better: "Allocators"! (-> Allocator.h)/*----------------------------------------------------------------------------------------	MemBlock.h, class for handling memory blocks		3.6.2000 by Manfred Lippert, mani@mani.de	last change: 8.7.2000----------------------------------------------------------------------------------------*/#ifndef __ManiLibs_MemBlock_h__#define __ManiLibs_MemBlock_h__#include <Types2B.h>#include <stdlib.h>class MemBlock {public:	virtual ~MemBlock();	virtual void *get_adr() = 0;	virtual size_t get_size() = 0;	virtual void *set_size(size_t size) = 0;	virtual void free() = 0;	// be careful: free memory as last action - MemBlock itself can be part of this memory!	void *copy(MemBlock *block);};#if TARGET_MACOS#include <MacMemBlock.h>typedef class MacMemBlock NativeMemBlock;#elif TARGET_TOS#include <TOSMemBlock.h>typedef class TOSMemBlock NativeMemBlock;#else#include <StdMemBlock.h>typedef class StdMemBlock NativeMemBlock;#endif#endif