/*----------------------------------------------------------------------------------------	TOSMemBlock.cp, class for handling memory blocks, using Malloc/Mfree/Mshrink		4.6.2000 by Manfred Lippert, mani@mani.de	last change: 8.7.2000----------------------------------------------------------------------------------------*/#include <TOSMemBlock.h>#include <SysInfo.h>#include <gemdos.h>#include <string.h>TOSMemBlock::TOSMemBlock() {	adr = 0;	size = 0;}TOSxMemBlock::TOSxMemBlock(int16 mode, SysInfo *sysinfo) {	this->mode = (mode & sysinfo->Mxmask);	this->sysinfo = sysinfo;}TOSMemBlock::~TOSMemBlock() {	free();}TOSxMemBlock::~TOSxMemBlock() {	free();}void *TOSMemBlock::get_adr() {	return adr;}size_t TOSMemBlock::get_size() {	return size;}void *TOSMemBlock::set_size(size_t size) {	if (size == 0) {		free();		return adr;	}	if (adr) {		if (Mshrink(0, adr, (int32)size) == E_OK) {			this->size = size;			return adr;		}		void *neu = Malloc((int32)size);		if (neu) {			memcpy(neu, adr, this->size < size ? this->size : size);			Mfree(adr);			adr = neu;			this->size = size;			return adr;		}		return 0;	}	adr = Malloc((int32)size);	if (adr) {		this->size = size;	}	return adr;}void *TOSxMemBlock::set_size(size_t size) {	if (size == 0) {		free();		return adr;	}	if (adr) {		if (Mshrink(0, adr, (int32)size) == E_OK) {			this->size = size;			return adr;		}		void *neu;		if (!sysinfo->Mxalloc || (neu = Mxalloc((int32)size, mode)) == (void *)EINVFN) {			neu = Malloc((int32)size);		}		if (neu) {			memcpy(neu, adr, this->size < size ? this->size : size);			Mfree(adr);			adr = neu;			this->size = size;			return adr;		}		return 0;	}	if (!sysinfo->Mxalloc || (adr = Mxalloc((int32)size, mode)) == (void *)EINVFN) {		adr = Malloc((int32)size);	}	if (adr) {		this->size = size;	}	return adr;}void TOSMemBlock::free() {	if (adr) {		void *the_adr = adr;		adr = 0;		size = 0;		Mfree(the_adr);	// should be last action - TOSMemBlock can be embedded itself in memory block!	}}