/*----------------------------------------------------------------------------------------	ResidentAllocator.h, allocator for resident RAM that is not swapped to disc		20.7.2001 by Manfred Lippert, mani@mani.de	last change: 20.7.2001----------------------------------------------------------------------------------------*/#include <ResidentAllocator.h>#include <MacMemory.h>#include <Gestalt.h>#include <string.h>void ResidentAllocator::init(boolean mandatory) {	set_mandatory(mandatory);#if TARGET_MACOS#if 0	mlock = 0;	munlock = 0;	SInt32 response;	if (Gestalt(gestaltSystemVersion, &response) == noErr && response >= 0x1000) {	// Mac OS X ?// To Do !!!!!!!!!!!!!!!!!			}#endif#endif}#if TARGET_MACOStypedef struct {	boolean is_resident;	size_t size;} ResidentAllocatorHeader;#endifvoid *ResidentAllocator::allocate(size_t bytes) {#if TARGET_MACOS	ResidentAllocatorHeader *head = (ResidentAllocatorHeader *)malloc(bytes + sizeof(ResidentAllocatorHeader));	if (head) {		head->is_resident = (HoldMemory(head + 1, bytes) == noErr);		if (mandatory && !head->is_resident) {	// mandatory to be resident?			free(head);			return 0;		}		head->size = bytes;		return (head + 1);	}	return 0;#elif TARGET_TOS	return malloc(bytes);	// TOS normally has no virtual memory#else	if (mandatory) {		return 0;				// we don't know it systems swaps out	}	return malloc(bytes);	// we don't know but it's not mandatory#endif}void ResidentAllocator::deallocate(void *addr) {#if TARGET_MACOS	ResidentAllocatorHeader *head = ((ResidentAllocatorHeader *)addr) - 1;	if (head->is_resident) {		UnholdMemory(addr, head->size);	}	free(((ResidentAllocatorHeader *)addr) - 1);#else	free(addr);#endif}void *ResidentAllocator::reallocate(void *addr, size_t bytes) {#if TARGET_MACOS	ResidentAllocatorHeader *head = ((ResidentAllocatorHeader *)addr) - 1;	void *addr2 = allocate(bytes);	if (addr2) {		memcpy(addr2, addr, head->size < bytes ? head->size : bytes);		free(addr);	}	return addr2;#else	return realloc(addr, bytes);#endif}