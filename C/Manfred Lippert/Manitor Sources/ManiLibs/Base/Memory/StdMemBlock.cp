/*----------------------------------------------------------------------------------------	StdMemBlock.cp, class for handling memory blocks, using malloc/free/realloc		4.6.2000 by Manfred Lippert, mani@mani.de	last change: 18.7.2001----------------------------------------------------------------------------------------*/#include <StdMemBlock.h>#include <string.h>StdMemBlock::StdMemBlock() {	adr = 0;	size = 0;}StdMemBlock::~StdMemBlock() {	free();}void *StdMemBlock::get_adr() {	return adr;}size_t StdMemBlock::get_size() {	return size;}void *StdMemBlock::set_size(size_t size) {	if (size == 0) {		free();		return 0;	}	if (adr) {		void *neu = realloc(adr, size);		if (neu) {			adr = neu;			this->size = size;			return adr;		}		neu = malloc(size);		if (neu) {			memcpy(neu, adr, this->size < size ? this->size : size);			::free(adr);			adr = neu;			this->size = size;			return adr;		}		return 0;	}	adr = malloc(size);	if (adr) {		this->size = size;	}	return adr;}void StdMemBlock::free() {	if (adr) {		void *the_adr = adr;		adr = 0;		size = 0;		::free(the_adr);	// should be last action - StdMemBlock can be embedded itself in memory block!	}}