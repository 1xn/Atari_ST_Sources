#ifndef __Trapper_XbiosTrap_H__#define __Trapper_XbiosTrap_H__#include "TrapperDebug.h"#include <xbra.h>#include <AVLTree.h>#include <LinkedList.h>#include <trapper.h>#undef OSTRAP_IS_BIOS#undef OSTRAP_IS_XBIOS#undef OSTRAP_IS_GEMDOS#define OSTRAP_IS_BIOS		0#define OSTRAP_IS_XBIOS		1#define OSTRAP_IS_GEMDOS	0#undef LABEL_TRACED#undef LABEL_CALL_TRACED#undef LABEL_RETURN_TRACED#undef LABEL_XBRA#undef CALL_TRACE#undef RETURN_TRACE#undef INSERT_CALL#undef REMOVE_CALL#undef INSERT_RETURN#undef REMOVE_RETURN#undef CALLFUNC#undef RETURNFUNC#undef OSCALL#undef CALLKETTE#undef CALLSAVL#undef CALLSAVLTREE#undef OSRETURN#undef RETURNKETTE#undef RETURNSAVL#undef RETURNSAVLTREE#undef JUMPTABLEENTRY#undef JUMPTABLE#undef JUMPTABLENEXT#undef JUMPTABLECOUNTER#undef JUMPTABLECOUNTERMAX#define LABEL_TRACED		xbios_traced#define LABEL_CALL_TRACED	xbios_call_traced#define LABEL_RETURN_TRACED	xbios_return_traced#define LABEL_XBRA			xbios_XBRA#define CALL_TRACE			xbios_call_trace#define RETURN_TRACE		xbios_return_trace#define INSERT_CALL			xbios_insert_call#define REMOVE_CALL			xbios_remove_call#define INSERT_RETURN		xbios_insert_return#define REMOVE_RETURN		xbios_remove_return#define CALLFUNC			XbiosCallFunc#define RETURNFUNC			XbiosReturnFunc#define OSCALL				XbiosCall#define CALLKETTE			XbiosCallKette#define CALLSAVL			XbiosCallsAVL#define CALLSAVLTREE		XbiosCallsAVLTree#define OSRETURN			XbiosReturn#define RETURNKETTE			XbiosReturnKette#define RETURNSAVL			XbiosReturnsAVL#define RETURNSAVLTREE		XbiosReturnsAVLTree#define JUMPTABLEENTRY		XbiosJumpTableEntry#define JUMPTABLE			xbios_jump_table#define JUMPTABLENEXT		xbios_next_entry#if COUNT_JUMPTABLE_USE	#define JUMPTABLECOUNTER	xbios_debug_counter	#define JUMPTABLECOUNTERMAX	xbios_debug_counter_max#endif#include "OSTrap1.h"#if 0extern int16 xbios_traced;			// Flag, ob Xbios grundsŠtzlich getraced werden sollextern int16 xbios_call_traced;		// Flag, ob vor Xbios-Aufrufen getraced werden sollextern int16 xbios_return_traced;	// Flag, ob nach Xbios-Aufrufen getraced werden sollextern XBRA xbios_XBRA;extern int16 xbios_insert_call(int16 opcode, XbiosCallFunc func);extern int16 xbios_remove_call(int16 opcode, XbiosCallFunc func);extern int16 xbios_insert_return(int16 opcode, XbiosReturnFunc func);extern int16 xbios_remove_return(int16 opcode, XbiosReturnFunc func);/* Klasses for Call-Trace: */class XbiosCall : public Glied {	XbiosCallFunc func;	// eingeklinkte Routinepublic:	XbiosCall(XbiosCallFunc func) {this->func = func;};	int32 call(int16 *para, int16 *call_original, int16 super_called) const {		return func(para, call_original, super_called);	}	XbiosCall *get_next() const {return (XbiosCall *)Glied::get_next();};	XbiosCall *get_prev() const {return (XbiosCall *)Glied::get_prev();};	XbiosCallFunc get_func() const {return func;};};class XbiosCallKette : public Kette {public:	void insert(XbiosCall *glied, XbiosCall *pos = 0, int16 posdef = KETT_END) {		Kette::insert(glied, pos, posdef);	};	void remove(XbiosCall *glied) {Kette::remove(glied);};	void kill(XbiosCall *glied) {Kette::kill(glied);};	XbiosCall *get_first() const {return (XbiosCall *)Kette::get_first();};	XbiosCall *get_last() const {return (XbiosCall *)Kette::get_last();};};class XbiosCallsAVL : public AVL {	int16 opcode;			// Xbios-Call, in den sich diese Routinen eingeklinkt haben	XbiosCallKette calls;	// eingeklinkte Routinenpublic:	XbiosCallsAVL(int16 opcode) {this->opcode = opcode;};	int16 get_opcode() const {return opcode;};	XbiosCallKette *get_calls() {return &calls;};};class XbiosCallsAVLTree : public AVLTree {	int32 counter;public:	int32 compare(AVL *a, AVL *b) const {return compare((XbiosCallsAVL *)a, (XbiosCallsAVL *)b);};	int32 compare(XbiosCallsAVL *a, XbiosCallsAVL *b) const {		return (int32)(a->get_opcode() - b->get_opcode());	}	void add_counter(int16 val);	void insert(XbiosCallsAVL *elem) {AVLTree::insert(elem); add_counter(1);};	void remove(XbiosCallsAVL *elem) {add_counter(-1); AVLTree::remove(elem);};	void kill(XbiosCallsAVL *elem) {add_counter(-1); AVLTree::kill(elem);};	XbiosCallsAVL *search(XbiosCallsAVL *elem) const {		return (XbiosCallsAVL *)AVLTree::search(elem);	};	XbiosCallsAVL *search(int16 opcode) const {		XbiosCallsAVL elem(opcode);		return search(&elem);	};};/* Klasses for Return-Trace: */class XbiosReturn : public Glied {	XbiosReturnFunc func;	// eingeklinkte Routinepublic:	XbiosReturn(XbiosReturnFunc func) {this->func = func;};	int32 call(int32 ret, int16 *para, int16 is_super) const {		return func(ret, para, is_super);	}	XbiosReturn *get_next() const {return (XbiosReturn *)Glied::get_next();};	XbiosReturn *get_prev() const {return (XbiosReturn *)Glied::get_prev();};	XbiosReturnFunc get_func() const {return func;};};class XbiosReturnKette : public Kette {public:	void insert(XbiosReturn *glied, XbiosReturn *pos = 0, int16 posdef = KETT_END) {		Kette::insert(glied, pos, posdef);	};	void remove(XbiosReturn *glied) {Kette::remove(glied);};	void kill(XbiosReturn *glied) {Kette::kill(glied);};	XbiosReturn *get_first() const {return (XbiosReturn *)Kette::get_first();};	XbiosReturn *get_last() const {return (XbiosReturn *)Kette::get_last();};};class XbiosReturnsAVL : public AVL {	int16 opcode;			// Xbios-Return, in den sich diese Routinen eingeklinkt haben	XbiosReturnKette calls;	// eingeklinkte Routinenpublic:	XbiosReturnsAVL(int16 opcode) {this->opcode = opcode;};	int16 get_opcode() const {return opcode;};	XbiosReturnKette *get_calls() {return &calls;};};class XbiosReturnsAVLTree : public AVLTree {	int32 counter;public:	int32 compare(AVL *a, AVL *b) const {return compare((XbiosReturnsAVL *)a, (XbiosReturnsAVL *)b);};	int32 compare(XbiosReturnsAVL *a, XbiosReturnsAVL *b) const {		return (int32)(a->get_opcode() - b->get_opcode());	}	void add_counter(int16 val);	void insert(XbiosReturnsAVL *elem) {AVLTree::insert(elem); add_counter(1);};	void remove(XbiosReturnsAVL *elem) {add_counter(-1); AVLTree::remove(elem);};	void kill(XbiosReturnsAVL *elem) {add_counter(-1); AVLTree::kill(elem);};	XbiosReturnsAVL *search(XbiosReturnsAVL *elem) const {		return (XbiosReturnsAVL *)AVLTree::search(elem);	};	XbiosReturnsAVL *search(int16 opcode) const {		XbiosReturnsAVL elem(opcode);		return search(&elem);	};};#endif#endif