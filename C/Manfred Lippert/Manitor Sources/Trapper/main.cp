#include "TrapperDebug.h"#include <portab.h>#include "GemdosTrap.h"#include "XbiosTrap.h"#include "BiosTrap.h"#include "VDITrap.h"#include "AESTrap.h"#include <xbios.h>#include <Semaphore.h>#define TRAPPER_VERSION 0x200#if COUNT_JUMPTABLE_USE	#define TRAPPER_INFOTEXT "\r\n\r\nTrapper V2.0 DEBUG-VERSION! installed\r\n(c) 2000 Manfred Lippert\r\nEmail: mani@mani.de\r\n\r\n"#else	#define TRAPPER_INFOTEXT "\r\n\r\nTrapper V2.0 installed\r\n(c) 2000 Manfred Lippert\r\nEmail: mani@mani.de\r\n\r\n"#endifextern int8 _StackEnd;static int32 bios5_trace_instgem(int16 *para, int16 *call_original, int16 super_called) {#pragma unused(call_original, super_called)//	ENTER_CALLBACK(); Ist schon, da Trapper selbst im Trap hŠngt 	if (super_called && para[1] == 257) {	// Bios(5,257) (Setexc(0x101)) im Supermode -> GEM-Traps ggf. neu einhŠngen		if (!check_XBRA_super(&GEM_XBRA, (xbra_function *)0x88)) {			install_XBRA_super(&GEM_XBRA, (xbra_function *)0x88);		}	}//	EXIT_CALLBACK();	return 0;}static int32 trapper_call(int16 *para, int16 *call_original, int16 super_called) {#pragma unused(para, super_called)//	ENTER_CALLBACK(); Ist schon, da Trapper selbst im Trap hŠngt 	*call_original = 0;	// es gibt keinen originalen Gemdos(TRAPPER_OPCODE) Call//	EXIT_CALLBACK();	return E_OK;}static TrapperInfo trapper_info = {TRAPPER_VERSION, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};static int32 trapper_return(int32 ret, int16 *para, int16 is_super) {//	ENTER_CALLBACK(); Ist schon, da Trapper selbst im Trap hŠngt 	static int16 semaphore;	if (!is_super) {		while (!get_Semaphore(&semaphore)) {			Fselect(10, 0L, 0L, 0L);		}	}// Aufruf: Xbios(TRAPPER_OPCODE, int16 layer, int16 install, int16 opcode, void *function);	para++;						// TRAPPER_OPCODE (555)	int16 layer = *para++;	int16 install = *para++;	int16 opcode = *para++;	ret = E_OK;	switch(layer) {	case TRAPPER_CHECK:		// -1		TrapperInfo *info = *(TrapperInfo **)para;		if (info) {			*info = trapper_info;		}		break;	case TRAPPER_BIOS:		// 0		switch (install) {		case TRAPPER_INSTALL_CALL:			ret = bios_insert_call(opcode, *(BiosCallFunc *)para);			break;		case TRAPPER_REMOVE_CALL:			ret = bios_remove_call(opcode, *(BiosCallFunc *)para);			break;		case TRAPPER_INSTALL_RETURN:			ret = bios_insert_return(opcode, *(BiosReturnFunc *)para);			break;		case TRAPPER_REMOVE_RETURN:			ret = bios_remove_return(opcode, *(BiosReturnFunc *)para);			break;		default:			ret = ERROR;		}		break;	case TRAPPER_XBIOS:	// 1		switch (install) {		case TRAPPER_INSTALL_CALL:			ret = xbios_insert_call(opcode, *(XbiosCallFunc *)para);			break;		case TRAPPER_REMOVE_CALL:			ret = xbios_remove_call(opcode, *(XbiosCallFunc *)para);			break;		case TRAPPER_INSTALL_RETURN:			ret = xbios_insert_return(opcode, *(XbiosReturnFunc *)para);			break;		case TRAPPER_REMOVE_RETURN:			ret = xbios_remove_return(opcode, *(XbiosReturnFunc *)para);			break;		default:			ret = ERROR;		}		break;	case TRAPPER_GEMDOS:	// 2		switch (install) {		case TRAPPER_INSTALL_CALL:			ret = gemdos_insert_call(opcode, *(GemdosCallFunc *)para);			break;		case TRAPPER_REMOVE_CALL:			ret = gemdos_remove_call(opcode, *(GemdosCallFunc *)para);			break;		case TRAPPER_INSTALL_RETURN:			ret = gemdos_insert_return(opcode, *(GemdosReturnFunc *)para);			break;		case TRAPPER_REMOVE_RETURN:			ret = gemdos_remove_return(opcode, *(GemdosReturnFunc *)para);			break;		default:			ret = ERROR;		}		break;	case TRAPPER_VDI:		// 3		switch (install) {		case TRAPPER_INSTALL_CALL:			ret = VDI_insert_call(opcode, *(VDICallFunc *)para);			break;		case TRAPPER_REMOVE_CALL:			ret = VDI_remove_call(opcode, *(VDICallFunc *)para);			break;		case TRAPPER_INSTALL_RETURN:			ret = VDI_insert_return(opcode, *(VDIReturnFunc *)para);			break;		case TRAPPER_REMOVE_RETURN:			ret = VDI_remove_return(opcode, *(VDIReturnFunc *)para);			break;		default:			ret = ERROR;		}		break;	case TRAPPER_AES:		// 4		switch (install) {		case TRAPPER_INSTALL_CALL:			ret = AES_insert_call(opcode, *(AESCallFunc *)para);			break;		case TRAPPER_REMOVE_CALL:			ret = AES_remove_call(opcode, *(AESCallFunc *)para);			break;		case TRAPPER_INSTALL_RETURN:			ret = AES_insert_return(opcode, *(AESReturnFunc *)para);			break;		case TRAPPER_REMOVE_RETURN:			ret = AES_remove_return(opcode, *(AESReturnFunc *)para);			break;		default:			ret = ERROR;		}		break;#if COUNT_JUMPTABLE_USE	case 5:		switch (install) {		case TRAPPER_BIOS:			ret = bios_debug_counter_max;			break;		case TRAPPER_XBIOS:			ret = xbios_debug_counter_max;			break;		case TRAPPER_GEMDOS:			ret = gemdos_debug_counter_max;			break;		case TRAPPER_VDI:			ret = vdi_debug_counter_max;			break;		case TRAPPER_AES:			ret = aes_debug_counter_max;			break;		}		break;#endif	default:		ret = ERROR;	}	if (!is_super) {		semaphore = 0;	}//	EXIT_CALLBACK();	return ret;}int main(){	if (check_XBRA_user(&gemdos_XBRA, (xbra_function *)0x84)		|| check_XBRA_user(&xbios_XBRA, (xbra_function *)0xB8)		|| check_XBRA_user(&bios_XBRA, (xbra_function *)0xB4)		|| check_XBRA_user(&GEM_XBRA, (xbra_function *)0x88)) {		Cconws("\r\nTrapper is already installed.\r\n");		return 0;	}	install_XBRA_user(&bios_XBRA, (xbra_function *)0xB4);	install_XBRA_user(&xbios_XBRA, (xbra_function *)0xB8);	install_XBRA_user(&gemdos_XBRA, (xbra_function *)0x84);	/* restliche Traps nur installieren, wenn Trapper nicht aus AUTO-Ordner gestartet wurde: */	{		int16 global[15];		global[0] = -1;		if (appl_init(global) >= 0 && global[0] != -1) {	// nicht aus AUTO-Ordner?			install_XBRA_user(&GEM_XBRA, (xbra_function *)0x88);			appl_exit(global);		}	}	bios_insert_call(5, bios5_trace_instgem);					// fŸr nachtrŠgliches Installieren den GEM-Traps (AUTO-Ordner, ...)	xbios_insert_call(TRAPPER_OPCODE, trapper_call);			// Trapper-Call (Dummy)	xbios_insert_return(TRAPPER_OPCODE, trapper_return);		// Trapper-Call (AusfŸhrung)	Cconws(TRAPPER_INFOTEXT);/* Terminate and stay resistent: */	Ptermres((int8 *)&_StackEnd - (int8 *)_BasPag->p_lowtpa, 0);	/* Programmsize without Stack */}