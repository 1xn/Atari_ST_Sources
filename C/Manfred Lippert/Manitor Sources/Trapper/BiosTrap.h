#ifndef __Trapper_BiosTrap_H__#define __Trapper_BiosTrap_H__#include "TrapperDebug.h"#include <xbra.h>#include <AVLTree.h>#include <LinkedList.h>#include <trapper.h>#undef OSTRAP_IS_BIOS#undef OSTRAP_IS_XBIOS#undef OSTRAP_IS_GEMDOS#define OSTRAP_IS_BIOS		1#define OSTRAP_IS_XBIOS		0#define OSTRAP_IS_GEMDOS	0#undef LABEL_TRACED#undef LABEL_CALL_TRACED#undef LABEL_RETURN_TRACED#undef LABEL_XBRA#undef CALL_TRACE#undef RETURN_TRACE#undef INSERT_CALL#undef REMOVE_CALL#undef INSERT_RETURN#undef REMOVE_RETURN#undef CALLFUNC#undef RETURNFUNC#undef OSCALL#undef CALLKETTE#undef CALLSAVL#undef CALLSAVLTREE#undef OSRETURN#undef RETURNKETTE#undef RETURNSAVL#undef RETURNSAVLTREE#undef JUMPTABLEENTRY#undef JUMPTABLE#undef JUMPTABLENEXT#undef JUMPTABLECOUNTER#undef JUMPTABLECOUNTERMAX#define LABEL_TRACED		bios_traced#define LABEL_CALL_TRACED	bios_call_traced#define LABEL_RETURN_TRACED	bios_return_traced#define LABEL_XBRA			bios_XBRA#define CALL_TRACE			bios_call_trace#define RETURN_TRACE		bios_return_trace#define INSERT_CALL			bios_insert_call#define REMOVE_CALL			bios_remove_call#define INSERT_RETURN		bios_insert_return#define REMOVE_RETURN		bios_remove_return#define CALLFUNC			BiosCallFunc#define RETURNFUNC			BiosReturnFunc#define OSCALL				BiosCall#define CALLKETTE			BiosCallKette#define CALLSAVL			BiosCallsAVL#define CALLSAVLTREE		BiosCallsAVLTree#define OSRETURN			BiosReturn#define RETURNKETTE			BiosReturnKette#define RETURNSAVL			BiosReturnsAVL#define RETURNSAVLTREE		BiosReturnsAVLTree#define JUMPTABLEENTRY		BiosJumpTableEntry#define JUMPTABLE			bios_jump_table#define JUMPTABLENEXT		bios_next_entry#if COUNT_JUMPTABLE_USE	#define JUMPTABLECOUNTER	bios_debug_counter	#define JUMPTABLECOUNTERMAX	bios_debug_counter_max#endif#include "OSTrap1.h"#if 0extern int16 bios_traced;			// Flag, ob Bios grundsŠtzlich getraced werden sollextern int16 bios_call_traced;		// Flag, ob vor Bios-Aufrufen getraced werden sollextern int16 bios_return_traced;	// Flag, ob nach Bios-Aufrufen getraced werden sollextern XBRA bios_XBRA;extern int16 bios_insert_call(int16 opcode, BiosCallFunc func);extern int16 bios_remove_call(int16 opcode, BiosCallFunc func);extern int16 bios_insert_return(int16 opcode, BiosReturnFunc func);extern int16 bios_remove_return(int16 opcode, BiosReturnFunc func);/* Klasses for Call-Trace: */class BiosCall : public Glied {	BiosCallFunc func;	// eingeklinkte Routinepublic:	BiosCall(BiosCallFunc func) {this->func = func;};	int32 call(int16 *para, int16 *call_original, int16 super_called) const {		return func(para, call_original, super_called);	}	BiosCall *get_next() const {return (BiosCall *)Glied::get_next();};	BiosCall *get_prev() const {return (BiosCall *)Glied::get_prev();};	BiosCallFunc get_func() const {return func;};};class BiosCallKette : public Kette {public:	void insert(BiosCall *glied, BiosCall *pos = 0, int16 posdef = KETT_END) {		Kette::insert(glied, pos, posdef);	};	void remove(BiosCall *glied) {Kette::remove(glied);};	void kill(BiosCall *glied) {Kette::kill(glied);};	BiosCall *get_first() const {return (BiosCall *)Kette::get_first();};	BiosCall *get_last() const {return (BiosCall *)Kette::get_last();};};class BiosCallsAVL : public AVL {	int16 opcode;			// Bios-Call, in den sich diese Routinen eingeklinkt haben	BiosCallKette calls;	// eingeklinkte Routinenpublic:	BiosCallsAVL(int16 opcode) {this->opcode = opcode;};	int16 get_opcode() const {return opcode;};	BiosCallKette *get_calls() {return &calls;};};class BiosCallsAVLTree : public AVLTree {	int32 counter;public:	int32 compare(AVL *a, AVL *b) const {return compare((BiosCallsAVL *)a, (BiosCallsAVL *)b);};	int32 compare(BiosCallsAVL *a, BiosCallsAVL *b) const {		return (int32)(a->get_opcode() - b->get_opcode());	}	void add_counter(int16 val);	void insert(BiosCallsAVL *elem) {AVLTree::insert(elem); add_counter(1);};	void remove(BiosCallsAVL *elem) {add_counter(-1); AVLTree::remove(elem);};	void kill(BiosCallsAVL *elem) {add_counter(-1); AVLTree::kill(elem);};	BiosCallsAVL *search(BiosCallsAVL *elem) const {		return (BiosCallsAVL *)AVLTree::search(elem);	};	BiosCallsAVL *search(int16 opcode) const {		BiosCallsAVL elem(opcode);		return search(&elem);	};};/* Klasses for Return-Trace: */class BiosReturn : public Glied {	BiosReturnFunc func;	// eingeklinkte Routinepublic:	BiosReturn(BiosReturnFunc func) {this->func = func;};	int32 call(int32 ret, int16 *para, int16 is_super) const {		return func(ret, para, is_super);	}	BiosReturn *get_next() const {return (BiosReturn *)Glied::get_next();};	BiosReturn *get_prev() const {return (BiosReturn *)Glied::get_prev();};	BiosReturnFunc get_func() const {return func;};};class BiosReturnKette : public Kette {public:	void insert(BiosReturn *glied, BiosReturn *pos = 0, int16 posdef = KETT_END) {		Kette::insert(glied, pos, posdef);	};	void remove(BiosReturn *glied) {Kette::remove(glied);};	void kill(BiosReturn *glied) {Kette::kill(glied);};	BiosReturn *get_first() const {return (BiosReturn *)Kette::get_first();};	BiosReturn *get_last() const {return (BiosReturn *)Kette::get_last();};};class BiosReturnsAVL : public AVL {	int16 opcode;			// Bios-Return, in den sich diese Routinen eingeklinkt haben	BiosReturnKette calls;	// eingeklinkte Routinenpublic:	BiosReturnsAVL(int16 opcode) {this->opcode = opcode;};	int16 get_opcode() const {return opcode;};	BiosReturnKette *get_calls() {return &calls;};};class BiosReturnsAVLTree : public AVLTree {	int32 counter;public:	int32 compare(AVL *a, AVL *b) const {return compare((BiosReturnsAVL *)a, (BiosReturnsAVL *)b);};	int32 compare(BiosReturnsAVL *a, BiosReturnsAVL *b) const {		return (int32)(a->get_opcode() - b->get_opcode());	}	void add_counter(int16 val);	void insert(BiosReturnsAVL *elem) {AVLTree::insert(elem); add_counter(1);};	void remove(BiosReturnsAVL *elem) {add_counter(-1); AVLTree::remove(elem);};	void kill(BiosReturnsAVL *elem) {add_counter(-1); AVLTree::kill(elem);};	BiosReturnsAVL *search(BiosReturnsAVL *elem) const {		return (BiosReturnsAVL *)AVLTree::search(elem);	};	BiosReturnsAVL *search(int16 opcode) const {		BiosReturnsAVL elem(opcode);		return search(&elem);	};};#endif#endif