#ifndef __Trapper_GemdosTrap_H__#define __Trapper_GemdosTrap_H__#include "TrapperDebug.h"#include <xbra.h>#include <AVLTree.h>#include <LinkedList.h>#include <trapper.h>#undef OSTRAP_IS_BIOS#undef OSTRAP_IS_XBIOS#undef OSTRAP_IS_GEMDOS#define OSTRAP_IS_BIOS		0#define OSTRAP_IS_XBIOS		0#define OSTRAP_IS_GEMDOS	1#undef LABEL_TRACED#undef LABEL_CALL_TRACED#undef LABEL_RETURN_TRACED#undef LABEL_XBRA#undef CALL_TRACE#undef RETURN_TRACE#undef INSERT_CALL#undef REMOVE_CALL#undef INSERT_RETURN#undef REMOVE_RETURN#undef CALLFUNC#undef RETURNFUNC#undef OSCALL#undef CALLKETTE#undef CALLSAVL#undef CALLSAVLTREE#undef OSRETURN#undef RETURNKETTE#undef RETURNSAVL#undef RETURNSAVLTREE#undef JUMPTABLEENTRY#undef JUMPTABLE#undef JUMPTABLENEXT#undef JUMPTABLECOUNTER#undef JUMPTABLECOUNTERMAX#define LABEL_TRACED		gemdos_traced#define LABEL_CALL_TRACED	gemdos_call_traced#define LABEL_RETURN_TRACED	gemdos_return_traced#define LABEL_XBRA			gemdos_XBRA#define CALL_TRACE			gemdos_call_trace#define RETURN_TRACE		gemdos_return_trace#define INSERT_CALL			gemdos_insert_call#define REMOVE_CALL			gemdos_remove_call#define INSERT_RETURN		gemdos_insert_return#define REMOVE_RETURN		gemdos_remove_return#define CALLFUNC			GemdosCallFunc#define RETURNFUNC			GemdosReturnFunc#define OSCALL				GemdosCall#define CALLKETTE			GemdosCallKette#define CALLSAVL			GemdosCallsAVL#define CALLSAVLTREE		GemdosCallsAVLTree#define OSRETURN			GemdosReturn#define RETURNKETTE			GemdosReturnKette#define RETURNSAVL			GemdosReturnsAVL#define RETURNSAVLTREE		GemdosReturnsAVLTree#define JUMPTABLEENTRY		GemdosJumpTableEntry#define JUMPTABLE			gemdos_jump_table#define JUMPTABLENEXT		gemdos_next_jump_entry#if COUNT_JUMPTABLE_USE	#define JUMPTABLECOUNTER	gemdos_debug_counter	#define JUMPTABLECOUNTERMAX	gemdos_debug_counter_max#endif#include "OSTrap1.h"#if 0extern int16 gemdos_traced;			// Flag, ob Gemdos grundsŠtzlich getraced werden sollextern int16 gemdos_call_traced;	// Flag, ob vor Gemdos-Aufrufen getraced werden sollextern int16 gemdos_return_traced;	// Flag, ob nach Gemdos-Aufrufen getraced werden sollextern XBRA gemdos_XBRA;extern int16 gemdos_insert_call(int16 opcode, GemdosCallFunc func);extern int16 gemdos_remove_call(int16 opcode, GemdosCallFunc func);extern int16 gemdos_insert_return(int16 opcode, GemdosReturnFunc func);extern int16 gemdos_remove_return(int16 opcode, GemdosReturnFunc func);/* Klasses for Call-Trace: */class GemdosCall : public Glied {	GemdosCallFunc func;	// eingeklinkte Routinepublic:	GemdosCall(GemdosCallFunc func) {this->func = func;};	int32 call(int16 *para, int16 *call_original, int16 super_called) const {		return func(para, call_original, super_called);	}	GemdosCall *get_next() const {return (GemdosCall *)Glied::get_next();};	GemdosCall *get_prev() const {return (GemdosCall *)Glied::get_prev();};	GemdosCallFunc get_func() const {return func;};};class GemdosCallKette : public Kette {public:	void insert(GemdosCall *glied, GemdosCall *pos = 0, int16 posdef = KETT_END) {		Kette::insert(glied, pos, posdef);	};	void remove(GemdosCall *glied) {Kette::remove(glied);};	void kill(GemdosCall *glied) {Kette::kill(glied);};	GemdosCall *get_first() const {return (GemdosCall *)Kette::get_first();};	GemdosCall *get_last() const {return (GemdosCall *)Kette::get_last();};};class GemdosCallsAVL : public AVL {	int16 opcode;			// Gemdos-Call, in den sich diese Routinen eingeklinkt haben	GemdosCallKette calls;	// eingeklinkte Routinenpublic:	GemdosCallsAVL(int16 opcode) {this->opcode = opcode;};	int16 get_opcode() const {return opcode;};	GemdosCallKette *get_calls() {return &calls;};};class GemdosCallsAVLTree : public AVLTree {	int32 counter;public:	int32 compare(AVL *a, AVL *b) const {return compare((GemdosCallsAVL *)a, (GemdosCallsAVL *)b);};	int32 compare(GemdosCallsAVL *a, GemdosCallsAVL *b) const {		return (int32)(a->get_opcode() - b->get_opcode());	}	void add_counter(int16 val);	void insert(GemdosCallsAVL *elem) {AVLTree::insert(elem); add_counter(1);};	void remove(GemdosCallsAVL *elem) {add_counter(-1); AVLTree::remove(elem);};	void kill(GemdosCallsAVL *elem) {add_counter(-1); AVLTree::kill(elem);};	GemdosCallsAVL *search(GemdosCallsAVL *elem) const {		return (GemdosCallsAVL *)AVLTree::search(elem);	};	GemdosCallsAVL *search(int16 opcode) const {		GemdosCallsAVL elem(opcode);		return search(&elem);	};};/* Klasses for Return-Trace: */class GemdosReturn : public Glied {	GemdosReturnFunc func;	// eingeklinkte Routinepublic:	GemdosReturn(GemdosReturnFunc func) {this->func = func;};	int32 call(int32 ret, int16 *para, int16 is_super) const {		return func(ret, para, is_super);	}	GemdosReturn *get_next() const {return (GemdosReturn *)Glied::get_next();};	GemdosReturn *get_prev() const {return (GemdosReturn *)Glied::get_prev();};	GemdosReturnFunc get_func() const {return func;};};class GemdosReturnKette : public Kette {public:	void insert(GemdosReturn *glied, GemdosReturn *pos = 0, int16 posdef = KETT_END) {		Kette::insert(glied, pos, posdef);	};	void remove(GemdosReturn *glied) {Kette::remove(glied);};	void kill(GemdosReturn *glied) {Kette::kill(glied);};	GemdosReturn *get_first() const {return (GemdosReturn *)Kette::get_first();};	GemdosReturn *get_last() const {return (GemdosReturn *)Kette::get_last();};};class GemdosReturnsAVL : public AVL {	int16 opcode;			// Gemdos-Return, in den sich diese Routinen eingeklinkt haben	GemdosReturnKette calls;	// eingeklinkte Routinenpublic:	GemdosReturnsAVL(int16 opcode) {this->opcode = opcode;};	int16 get_opcode() const {return opcode;};	GemdosReturnKette *get_calls() {return &calls;};};class GemdosReturnsAVLTree : public AVLTree {	int32 counter;public:	int32 compare(AVL *a, AVL *b) const {return compare((GemdosReturnsAVL *)a, (GemdosReturnsAVL *)b);};	int32 compare(GemdosReturnsAVL *a, GemdosReturnsAVL *b) const {		return (int32)(a->get_opcode() - b->get_opcode());	}	void add_counter(int16 val);	void insert(GemdosReturnsAVL *elem) {AVLTree::insert(elem); add_counter(1);};	void remove(GemdosReturnsAVL *elem) {add_counter(-1); AVLTree::remove(elem);};	void kill(GemdosReturnsAVL *elem) {add_counter(-1); AVLTree::kill(elem);};	GemdosReturnsAVL *search(GemdosReturnsAVL *elem) const {		return (GemdosReturnsAVL *)AVLTree::search(elem);	};	GemdosReturnsAVL *search(int16 opcode) const {		GemdosReturnsAVL elem(opcode);		return search(&elem);	};};#endif#endif