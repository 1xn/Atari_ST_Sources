Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 1



1                        ;
2                        ; Programme de calcul des ensembles fractals de Mandelb
rot
3                        ; Et de Julia par le DSP 56001.
4                        ; Protocole de communication :
5                        ; * CPU -> DSP
6                        ; mot 1 : ordre a effectuer :
7                        ;         $1 : Envoi des parametres de calcul
8                        ;         $2 : Calcul de 3 lignes
9                        ;         $3 : Fin  des calculs
10                       ; mot 2 : Nombre n de mots a recevoir par la suite (en 
tout 2+n mots)
11                       ; * DSP -> CPU
12                       ; Envoi des 3 lignes calculees.
13                       ; Attente du numero de la prochaine ligne ou de l'ordre
 d'arret
14                       ;
15                       ; Equivalences standards
16        00FFFE         BCR       EQU     $FFFE
17        00FFE0         PBC       EQU     $FFE0
18        00FFE8         HCR       EQU     $FFE8
19        00FFE9         HSR       EQU     $FFE9
20        00FFEB         HTX       EQU     $FFEB
21        00FFEB         HRX       EQU     $FFEB
22        00FFFF         IPR       EQU     $FFFF
23                       ;
24                       ; Variables passees en parametre par le CPU
25                       ; Elles sont stockees dans la memoire X
26        000000         maxiter   EQU     $00
27        000001         type      EQU     maxiter+$01
28        000002         pix       EQU     maxiter+$02
29        000003         piy       EQU     maxiter+$03
30        000004         xmin      EQU     maxiter+$04
31        000005         ydsp      EQU     maxiter+$05
32        000006         echx      EQU     maxiter+$06
33        000007         echy      EQU     maxiter+$07
34        000008         ech2x     EQU     maxiter+$08
35        000009         ech2y     EQU     maxiter+$09
36        00000A         nbptx     EQU     maxiter+$0A
37        00000B         nr1       EQU     maxiter+$0B
38        00000C         angle     EQU     maxiter+$0C
39        00000D         cos_a     EQU     maxiter+$0D
40        00000E         sin_a     EQU     maxiter+$0E
41        00000F         xc        EQU     maxiter+$0F
42        000010         yc        EQU     maxiter+$10
43     
44        000015         ix        EQU     maxiter+$15
45        000016         iy        EQU     maxiter+$16
46        000017         cx        EQU     maxiter+$17
47        000018         cy        EQU     maxiter+$18
48        000019         cxc       EQU     maxiter+$19
49        00001A         cyc       EQU     maxiter+$1A
50        00001B         orb00     EQU     maxiter+$1B
51        00001C         orb01     EQU     maxiter+$1C
52        00001D         orb10     EQU     maxiter+$1D
53        00001E         orb11     EQU     maxiter+$1E
54        00001F         orb3      EQU     maxiter+$1F
55        000020         orb4      EQU     maxiter+$20
56        000021         xp        EQU     maxiter+$21
57        000022         yp        EQU     maxiter+$22
58        000023         t         EQU     maxiter+$23
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 2



59     
60        000026         preabs    EQU     maxiter+$26
61     
62                       ; Debut de la table contenant les orbites a calculmer p
our le CPU
63                       ; Les orbites sont stockees en memoire Y
64                       ; Comme P:$200-$3FFF = Y:$200-$3FFF, startorb doit comm
encer
65                       ; Apres l'adresse de la derniere instruction du program
me
66        000300         startorb  EQU     $300
67     
68                                                 OPT     CC
69     
70        P:0000                                   ORG     P:$0
71        P:0000 0AF080  [6 -        6]            JMP     start
                 000040
72     
73     
74        P:0040                                   ORG     P:$40
75        P:0040 08F4A8  [6 -       12]  start     MOVEP             #0,X:<<HCR
                 000000
76        P:0042 08F4BF  [6 -       18]            MOVEP             #$C00,X:<<I
PR
                 000C00
77        P:0044 08F4A0  [6 -       24]            MOVEP             #1,X:<<PBC
                 000001
78        P:0046 08F4BE  [6 -       30]            MOVEP             #0,X:<<BCR
                 000000
79        P:0048 000BB8  [2 -       32]            ANDI    #$0B,MR              
             ; No scaling
80        P:0049 0003F8  [2 -       34]            ORI     #$03,MR              
             ; Toutes IT
81     
82        P:004A 0500BA  [2 -       36]            MOVE              #0,OMR
83        P:004B 08F4BE  [6 -       42]            MOVEP             #0,X:<<BCR 
             ; Pas de Wait State
                 000000
84     
85        P:004D 0AA980  [6 -       48]  main      JCLR    #0,X:<<HSR,*         
             ; Attendre un ordre du CPU
                 00004D
86        P:004F 200013  [2 -       50]            CLR     A
87        P:0050 084C2B  [4 -       54]            MOVEP             X:<<HRX,A1
88        P:0051 45F400  [4 -       58]            MOVE              #>1,X1     
             ; 1 : Envoi des parametres par le CPU
                 000001
89        P:0053 200065  [2 -       60]            CMP     X1,A
90        P:0054 0AF0AA  [6 -       66]            JEQ     getpar
                 000061
91        P:0056 45F400  [4 -       70]            MOVE              #>2,X1     
             ; 2 : Demande de calcul
                 000002
92        P:0058 200065  [2 -       72]            CMP     X1,A
93        P:0059 0AF0AA  [6 -       78]            JEQ     calc
                 00007E
94        P:005B 45F400  [4 -       82]            MOVE              #>3,X1     
             ; 3 : Fin du calcul
                 000003
95        P:005D 200065  [2 -       84]            CMP     X1,A
96        P:005E 0AF0AA  [6 -       90]            JEQ     end_calc
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 3



                 00008F
97        P:0060 0C004D  [4 -       94]            JMP     main                 
             ; On retourne attendre
98                                       ;                                   ; N
on reconnu : on attend le prochain
99                                       getpar
100       P:0061 0AA980  [6 -      100]            JCLR    #0,X:<<HSR,*         
             ; Nombre de mots
                 000061
101       P:0063 08502B  [4 -      104]            MOVEP             X:<<HRX,R0
102       P:0064 310000  [2 -      106]            MOVE              #<maxiter,R
1            ; Premier element : maxiter
103       P:0065 05FFA1  [2 -      108]            MOVE              #$FF,M1    
             ; Limite a 256 mots DSP
104       P:0066 06D000  [6 -      114]            DO      R0,endrec            
             ; Pour R0 mots
                 00006A
105       P:0068 0AA980  [6 -      120]            JCLR    #0,X:<<HSR,*         
             ; On attend le prochain mot
                 000068
106       P:006A 0859AB  [4 -      124]            MOVEP             X:<<HRX,X:(
R1)+         ; On stocke ce mot
107                                      endrec
108       P:006B 310000  [2 -      126]            MOVE              #<maxiter,R
1
109       P:006C 06D000  [6 -      132]            DO      R0,e_send
                 000070
110       P:006E 0AA981  [6 -      138]            JCLR    #1,X:<<HSR,*
                 00006E
111       P:0070 08D9AB  [4 -      142]            MOVEP             X:(R1)+,X:<
<HRX
112                                      e_send
113                                      ; On recoit maintenant les precalculs s
ur les abscisses
114       P:0071 05F420  [4 -      146]            MOVE              #-1,M0
                 FFFFFF
115       P:0073 302600  [2 -      148]            MOVE              #preabs,R0
116       P:0074 060A00  [6 -      154]            DO      X:<nbptx,end_pabs
                 000078
117       P:0076 0AA980  [6 -      160]            JCLR    #0,X:<<HSR,*
                 000076
118       P:0078 0858AB  [4 -      164]            MOVEP             X:<<HRX,X:(
R0)+
119                                      end_pabs
120    
121       P:0079 458200  [2 -      166]            MOVE              X:<pix,X1
122       P:007A 451500  [2 -      168]            MOVE              X1,X:<ix
123       P:007B 458300  [2 -      170]            MOVE              X:<piy,X1
124       P:007C 451600  [2 -      172]            MOVE              X1,X:<iy
125       P:007D 0C004D  [4 -      176]            JMP     main                 
             ; Attendre l'ordre de calcul
126    
127                                      calc
128       P:007E 0AA980  [6 -      182]            JCLR    #0,X:<<HSR,*         
             ; Nombre de mots
                 00007E
129       P:0080 08502B  [4 -      186]            MOVEP             X:<<HRX,R0
130       P:0081 0AA980  [6 -      192]            JCLR    #0,X:<<HSR,*
                 000081
131       P:0083 0870AB  [6 -      198]            MOVEP             X:<<HRX,X:y
dsp          ; Premiere ligne a calculer
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 4



                 000005
132       P:0085 708113  [2 -      200]            CLR     A         X:<type,N0
133       P:0086 60F400  [4 -      204]            MOVE              #adr_calc,R
0
                 000274
134       P:0088 0AA823  [4 -      208]            BSET    #3,X:<<HCR           
             ; Informe le Host (Hf2 = 1)
135       P:0089 07E897  [8 -      216]            MOVE              P:(R0+N0),R
7
136       P:008A 0BF080  [6 -      222]            JSR     compute_3lignes
                 0001C6
137    
138       P:008C 0BF080  [6 -      228]  do_send   JSR     sendata
                 000263
139       P:008E 0C004D  [4 -      232]            JMP     main
140    
141                                      end_calc
142       P:008F 0AA980  [6 -      238]            JCLR    #0,X:<<HSR,*         
             ; Nombre de mots
                 00008F
143       P:0091 08502B  [4 -      242]            MOVEP             X:<<HRX,R0
144       P:0092 0C004D  [4 -      246]            JMP     main
145    
146                                      ; Calcul de l'orbite a renvoyer au cas 
ou le
147                                      ; Critere de divergence a echoue
148                                      out_set
149       P:0093 44801B  [2 -      248]            CLR     B         X:<maxiter,
X0
150       P:0094 2D0244  [2 -      250]            SUB     X0,A      #$2,B1
151       P:0095 200036  [2 -      252]            NEG     A
152       P:0096 200010  [2 -      254]            ADD     B,A
153       P:0097 51F400  [4 -      258]            MOVE              #$FFFF00,B0
                 FFFF00
154       P:0099 212500  [2 -      260]            MOVE              B0,X1
155       P:009A 218D00  [2 -      262]            MOVE              A1,B1
156       P:009B 20006E  [2 -      264]            AND     X1,B
157       P:009C 0AF0A2  [6 -      270]            JNE     change
                 00009F
158       P:009E 00000C  [4 -      274]            RTS
159       P:009F 20001B  [2 -      276]  change    CLR     B
160       P:00A0 2D0100  [2 -      278]            MOVE              #$01,B1
161       P:00A1 21A500  [2 -      280]            MOVE              B1,X1
162       P:00A2 200065  [2 -      282]            CMP     X1,A
163       P:00A3 0AF0AA  [6 -      288]            JEQ     do_ch
                 0000A6
164       P:00A5 00000C  [4 -      292]            RTS
165       P:00A6 2C0200  [2 -      294]  do_ch     MOVE              #$000002,A1
166       P:00A7 00000C  [4 -      298]            RTS
167    
168    
169    
170                                      ;
171                                      ; Routine gnrale de calcul
172                                      ; Initialisateurs  c : X:cx et X:cy
173                                      ;                 z0 : X:ix et X:iy
174                                      ; Registres modifies :
175                                      ;                      A, B, X, Y
176                                      ;                      R1, R2
177                                      ; Resultat dans A1
178                                      calculate
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 5



179                                      ; Effectue l'eventuelle rotation
180       P:00A8 568C00  [2 -      300]            MOVE              X:<angle,A
181       P:00A9 200003  [2 -      302]            TST     A
182       P:00AA 0AF0AA  [6 -      308]            JEQ     call_calc
                 0000BE
183                                      ; Effectue la rotation de centre (xc,yc
), d'angle angle sur (cx,cy)
184       P:00AC 569700  [2 -      310]            MOVE              X:<cx,A
185       P:00AD 448F00  [2 -      312]            MOVE              X:<xc,X0
186       P:00AE 579844  [2 -      314]            SUB     X0,A      X:<cy,B
187       P:00AF 469000  [2 -      316]            MOVE              X:<yc,Y0
188       P:00B0 21C400  [2 -      318]            MOVE              A,X0       
             ; X0 = cx-xc
189       P:00B1 458D5C  [2 -      320]            SUB     Y0,B      X:<cos_a,X1
             ; B = cy-yc, X1 = cos_a
190       P:00B2 478E00  [2 -      322]            MOVE              X:<sin_a,Y1
             ;            Y1 = sin_a
191       P:00B3 21E6A0  [2 -      324]            MPY     X1,X0,A   B,Y0       
             ; Y0 = cy-yc
192       P:00B4 2000B2  [2 -      326]            MAC     Y1,Y0,A
193       P:00B5 200032  [2 -      328]            ASL     A
194       P:00B6 200032  [2 -      330]            ASL     A
195       P:00B7 2000CC  [2 -      332]            MPY     -X0,Y1,B
196       P:00B8 448FEA  [2 -      334]            MAC     X1,Y0,B   X:<xc,X0
197       P:00B9 20003A  [2 -      336]            ASL     B
198       P:00BA 46903A  [2 -      338]            ASL     B         X:<yc,Y0
199       P:00BB 200040  [2 -      340]            ADD     X0,A
200       P:00BC 561758  [2 -      342]            ADD     Y0,B      A,X:<cx
201       P:00BD 571800  [2 -      344]            MOVE              B,X:<cy
202    
203    
204                                      ; Appelle la routine spcifique
205                                      call_calc
206       P:00BE 0BE780  [4 -      348]            JSR     (R7)
207    
208       P:00BF 00000C  [4 -      352]            RTS
209    
210    
211                                      ;
212                                      ; Calcul de l'orbite d'un point
213                                      ; Ensembles de Mandelbrot
214                                      ;
215                                      mandelbrot_calc
216       P:00C0 61F400  [4 -      356]            MOVE              #mandelbrot
_again,R1
                 0000D0
217       P:00C2 000FB9  [2 -      358]            ANDI    #$0F,CCR
218       P:00C3 449500  [2 -      360]            MOVE              X:<ix,X0
219       P:00C4 469600  [2 -      362]            MOVE              X:<iy,Y0
220    
221       P:00C5 060000  [6 -      368]            DO      X:<maxiter,mandelbrot
_loop
                 0000D8
222       P:00C7 200080  [2 -      370]            MPY     X0,X0,A
223       P:00C8 578B92  [2 -      372]            MAC     Y0,Y0,A   X:<nr1,B
224       P:00C9 200005  [2 -      374]            CMP     B,A
225       P:00CA 0AE1AB  [4 -      378]            JMI     (R1)
226       P:00CB 200013  [2 -      380]            CLR     A
227       P:00CC 044CBF  [2 -      382]            MOVEC             LC,A1
228       P:00CD 00008C  [2 -      384]            ENDDO
229       P:00CE 0D0093  [4 -      388]            JSR     out_set
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 6



230       P:00CF 00000C  [4 -      392]            RTS
231    
232                                      mandelbrot_again
233       P:00D0 200094  [2 -      394]            MPY     -Y0,Y0,A
234       P:00D1 579782  [2 -      396]            MAC     X0,X0,A   X:<cx,B
235       P:00D2 200032  [2 -      398]            ASL     A
236       P:00D3 200012  [2 -      400]            ADDL    B,A
237    
238       P:00D4 2000D8  [2 -      402]            MPY     X0,Y0,B
239       P:00D5 21C43A  [2 -      404]            ASL     B         A,X0
240       P:00D6 56983A  [2 -      406]            ASL     B         X:<cy,A
241       P:00D7 20001A  [2 -      408]            ADDL    A,B
242    
243       P:00D8 21E600  [2 -      410]            MOVE              B,Y0
244                                      mandelbrot_loop
245       P:00D9 2C0100  [2 -      412]            MOVE              #$01,A1
246       P:00DA 00000C  [4 -      416]            RTS
247    
248    
249                                      ;
250                                      ; Calcul de l'orbite d'un point
251                                      ; Ensembles de Julia
252                                      ;
253                                      julia_calc
254       P:00DB 61F400  [4 -      420]            MOVE              #julia_agai
n,R1
                 0000EB
255       P:00DD 000FB9  [2 -      422]            ANDI    #$0F,CCR
256       P:00DE 449700  [2 -      424]            MOVE              X:<cx,X0
257       P:00DF 469800  [2 -      426]            MOVE              X:<cy,Y0
258    
259       P:00E0 060000  [6 -      432]            DO      X:<maxiter,julia_loop
                 0000F3
260       P:00E2 200080  [2 -      434]            MPY     X0,X0,A
261       P:00E3 578B92  [2 -      436]            MAC     Y0,Y0,A   X:<nr1,B
262       P:00E4 200005  [2 -      438]            CMP     B,A
263       P:00E5 0AE1AB  [4 -      442]            JMI     (R1)
264       P:00E6 200013  [2 -      444]            CLR     A
265       P:00E7 044CBF  [2 -      446]            MOVEC             LC,A1
266       P:00E8 00008C  [2 -      448]            ENDDO
267       P:00E9 0D0093  [4 -      452]            JSR     out_set
268       P:00EA 00000C  [4 -      456]            RTS
269    
270                                      julia_again
271       P:00EB 200094  [2 -      458]            MPY     -Y0,Y0,A
272       P:00EC 579582  [2 -      460]            MAC     X0,X0,A   X:<ix,B
273       P:00ED 200032  [2 -      462]            ASL     A
274       P:00EE 200012  [2 -      464]            ADDL    B,A
275    
276       P:00EF 2000D8  [2 -      466]            MPY     X0,Y0,B
277       P:00F0 21C43A  [2 -      468]            ASL     B         A,X0
278       P:00F1 56963A  [2 -      470]            ASL     B         X:<iy,A
279       P:00F2 20001A  [2 -      472]            ADDL    A,B
280    
281       P:00F3 21E600  [2 -      474]            MOVE              B,Y0
282                                      julia_loop
283       P:00F4 2C0100  [2 -      476]            MOVE              #$01,A1
284       P:00F5 00000C  [4 -      480]            RTS
285    
286                                      ;
287                                      ; Calcul de l'orbite d'un point
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 7



288                                      ; Ensembles Unity
289                                      unity_calc
290       P:00F6 61F400  [4 -      484]            MOVE              #unity_agai
n,R1
                 000106
291       P:00F8 000FB9  [2 -      486]            ANDI    #$0F,CCR
292       P:00F9 449700  [2 -      488]            MOVE              X:<cx,X0
293       P:00FA 469800  [2 -      490]            MOVE              X:<cy,Y0
294    
295       P:00FB 060000  [6 -      496]            DO      X:<maxiter,unity_loop
                 000114
296       P:00FD 200080  [2 -      498]            MPY     X0,X0,A
297       P:00FE 578B92  [2 -      500]            MAC     Y0,Y0,A   X:<nr1,B
298       P:00FF 200005  [2 -      502]            CMP     B,A
299       P:0100 0AE1AB  [4 -      506]            JMI     (R1)
300       P:0101 200013  [2 -      508]            CLR     A
301       P:0102 044CBF  [2 -      510]            MOVEC             LC,A1
302       P:0103 00008C  [2 -      512]            ENDDO
303       P:0104 0D0093  [4 -      516]            JSR     out_set
304       P:0105 00000C  [4 -      520]            RTS
305    
306                                      unity_again
307       P:0106 200032  [2 -      522]            ASL     A
308       P:0107 200032  [2 -      524]            ASL     A
309       P:0108 459636  [2 -      526]            NEG     A         X:<iy,X1   
             ; X1 = cy
310       P:0109 21C700  [2 -      528]            MOVE              A,Y1
311       P:010A 200060  [2 -      530]            ADD     X1,A
312       P:010B 21C500  [2 -      532]            MOVE              A,X1
313       P:010C 2000A8  [2 -      534]            MPY     X0,X1,B
314       P:010D 44953A  [2 -      536]            ASL     B         X:<ix,X0
315       P:010E 20EE3A  [2 -      538]            ASL     B         Y1,A
316       P:010F 21E640  [2 -      540]            ADD     X0,A      B,Y0
317       P:0110 21C500  [2 -      542]            MOVE              A,X1
318       P:0111 2000E0  [2 -      544]            MPY     Y0,X1,A
319       P:0112 200032  [2 -      546]            ASL     A
320       P:0113 200032  [2 -      548]            ASL     A
321       P:0114 21C400  [2 -      550]            MOVE              A,X0
322    
323                                      unity_loop
324       P:0115 2C0100  [2 -      552]            MOVE              #$01,A1
325       P:0116 00000C  [4 -      556]            RTS
326    
327    
328                                      ;
329                                      ; Calcul de l'orbite d'un point
330                                      ; Ensembles ManowarM
331                                      manowarm_calc
332       P:0117 61F400  [4 -      560]            MOVE              #manowarm_a
gain,R1
                 000129
333       P:0119 000FB9  [2 -      562]            ANDI    #$0F,CCR
334       P:011A 449500  [2 -      564]            MOVE              X:<ix,X0
335       P:011B 469600  [2 -      566]            MOVE              X:<iy,Y0
336       P:011C 442100  [2 -      568]            MOVE              X0,X:<xp
337       P:011D 462200  [2 -      570]            MOVE              Y0,X:<yp
338    
339       P:011E 060000  [6 -      576]            DO      X:<maxiter,manowarm_l
oop
                 000133
340       P:0120 200080  [2 -      578]            MPY     X0,X0,A
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 8



341       P:0121 578B92  [2 -      580]            MAC     Y0,Y0,A   X:<nr1,B
342       P:0122 200005  [2 -      582]            CMP     B,A
343       P:0123 0AE1AB  [4 -      586]            JMI     (R1)
344       P:0124 200013  [2 -      588]            CLR     A
345       P:0125 044CBF  [2 -      590]            MOVEC             LC,A1
346       P:0126 00008C  [2 -      592]            ENDDO
347       P:0127 0D0093  [4 -      596]            JSR     out_set
348       P:0128 00000C  [4 -      600]            RTS
349    
350                                      manowarm_again
351       P:0129 2000D8  [2 -      602]            MPY     X0,Y0,B
352       P:012A 20003A  [2 -      604]            ASL     B
353       P:012B 56983A  [2 -      606]            ASL     B         X:<cy,A
354       P:012C 56A21A  [2 -      608]            ADDL    A,B       X:<yp,A
355       P:012D 200018  [2 -      610]            ADD     A,B
356    
357       P:012E 462294  [2 -      612]            MPY     -Y0,Y0,A  Y0,X:<yp
358       P:012F 21E682  [2 -      614]            MAC     X0,X0,A   B,Y0
359       P:0130 579732  [2 -      616]            ASL     A         X:<cx,B
360       P:0131 57A112  [2 -      618]            ADDL    B,A       X:<xp,B
361       P:0132 442110  [2 -      620]            ADD     B,A       X0,X:<xp
362    
363       P:0133 21C400  [2 -      622]            MOVE              A,X0
364                                      manowarm_loop
365       P:0134 2C0100  [2 -      624]            MOVE              #$01,A1
366       P:0135 00000C  [4 -      628]            RTS
367    
368                                      ;
369                                      ; Calcul de l'orbite d'un point
370                                      ; Ensembles ManowarJ
371                                      manowarj_calc
372       P:0136 61F400  [4 -      632]            MOVE              #manowarj_a
gain,R1
                 000148
373       P:0138 000FB9  [2 -      634]            ANDI    #$0F,CCR
374       P:0139 449700  [2 -      636]            MOVE              X:<cx,X0
375       P:013A 469800  [2 -      638]            MOVE              X:<cy,Y0
376       P:013B 442100  [2 -      640]            MOVE              X0,X:<xp
377       P:013C 462200  [2 -      642]            MOVE              Y0,X:<yp
378    
379       P:013D 060000  [6 -      648]            DO      X:<maxiter,manowarj_l
oop
                 000152
380       P:013F 200080  [2 -      650]            MPY     X0,X0,A
381       P:0140 578B92  [2 -      652]            MAC     Y0,Y0,A   X:<nr1,B
382       P:0141 200005  [2 -      654]            CMP     B,A
383       P:0142 0AE1AB  [4 -      658]            JMI     (R1)
384       P:0143 200013  [2 -      660]            CLR     A
385       P:0144 044CBF  [2 -      662]            MOVEC             LC,A1
386       P:0145 00008C  [2 -      664]            ENDDO
387       P:0146 0D0093  [4 -      668]            JSR     out_set
388       P:0147 00000C  [4 -      672]            RTS
389    
390                                      manowarj_again
391       P:0148 2000D8  [2 -      674]            MPY     X0,Y0,B
392       P:0149 20003A  [2 -      676]            ASL     B
393       P:014A 56963A  [2 -      678]            ASL     B         X:<iy,A
394       P:014B 56A21A  [2 -      680]            ADDL    A,B       X:<yp,A
395       P:014C 200018  [2 -      682]            ADD     A,B
396    
397       P:014D 462294  [2 -      684]            MPY     -Y0,Y0,A  Y0,X:<yp
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 9



398       P:014E 21E682  [2 -      686]            MAC     X0,X0,A   B,Y0
399       P:014F 579532  [2 -      688]            ASL     A         X:<ix,B
400       P:0150 57A112  [2 -      690]            ADDL    B,A       X:<xp,B
401       P:0151 442110  [2 -      692]            ADD     B,A       X0,X:<xp
402    
403       P:0152 21C400  [2 -      694]            MOVE              A,X0
404                                      manowarj_loop
405       P:0153 2C0100  [2 -      696]            MOVE              #$01,A1
406       P:0154 00000C  [4 -      700]            RTS
407    
408    
409                                      ;
410                                      ; Calcul de l'orbite d'un point
411                                      ; Ensembles de BarnsleyM
412                                      ;
413                                      barnsleym_calc
414       P:0155 61F400  [4 -      704]            MOVE              #barnsleym_
again,R1
                 000167
415       P:0157 000FB9  [2 -      706]            ANDI    #$0F,CCR
416       P:0158 449500  [2 -      708]            MOVE              X:<ix,X0
417       P:0159 469600  [2 -      710]            MOVE              X:<iy,Y0
418       P:015A 62F400  [4 -      714]            MOVE              #t_is_posit
ifm,R2
                 000175
419    
420       P:015C 060000  [6 -      720]            DO      X:<maxiter,barnsleym_
loop
                 00017B
421       P:015E 200080  [2 -      722]            MPY     X0,X0,A
422       P:015F 578B92  [2 -      724]            MAC     Y0,Y0,A   X:<nr1,B
423       P:0160 200005  [2 -      726]            CMP     B,A
424       P:0161 0AE1AB  [4 -      730]            JMI     (R1)
425       P:0162 200013  [2 -      732]            CLR     A
426       P:0163 044CBF  [2 -      734]            MOVEC             LC,A1
427       P:0164 00008C  [2 -      736]            ENDDO
428       P:0165 0D0093  [4 -      740]            JSR     out_set
429       P:0166 00000C  [4 -      744]            RTS
430    
431                                      barnsleym_again
432       P:0167 479800  [2 -      746]            MOVE              X:<cy,Y1
433       P:0168 4597C0  [2 -      748]            MPY     X0,Y1,A   X:<cx,X1
434       P:0169 208FE2  [2 -      750]            MAC     X1,Y0,A   X0,B
435       P:016A 448B32  [2 -      752]            ASL     A         X:<nr1,X0
436       P:016B 200032  [2 -      754]            ASL     A
437       P:016C 0AE2A7  [4 -      758]            JGT     (R2)
438       P:016D 562348  [2 -      760]            ADD     X0,B      A,X:<t
439       P:016E 21E4B4  [2 -      762]            MPY     -Y0,Y1,A  B,X0
440       P:016F 57A3A2  [2 -      764]            MAC     X0,X1,A   X:<t,B
441       P:0170 200032  [2 -      766]            ASL     A
442       P:0171 200032  [2 -      768]            ASL     A
443       P:0172 21C478  [2 -      770]            ADD     Y1,B      A,X0
444       P:0173 0AF080  [6 -      776]            JMP     last_updatem
                 00017B
445                                      t_is_positifm
446       P:0175 56234C  [2 -      778]            SUB     X0,B      A,X:<t
447       P:0176 21E4B4  [2 -      780]            MPY     -Y0,Y1,A  B,X0
448       P:0177 57A3A2  [2 -      782]            MAC     X0,X1,A   X:<t,B
449       P:0178 200032  [2 -      784]            ASL     A
450       P:0179 200032  [2 -      786]            ASL     A
451       P:017A 21C47C  [2 -      788]            SUB     Y1,B      A,X0
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 10



452                                      last_updatem
453       P:017B 21E600  [2 -      790]            MOVE              B,Y0
454                                      barnsleym_loop
455       P:017C 2C0100  [2 -      792]            MOVE              #$01,A1
456       P:017D 00000C  [4 -      796]            RTS
457    
458                                      ;
459                                      ; Calcul de l'orbite d'un point
460                                      ; Ensembles de BarnsleyJ
461                                      ;
462                                      barnsleyj_calc
463       P:017E 61F400  [4 -      800]            MOVE              #barnsleyj_
again,R1
                 000190
464       P:0180 000FB9  [2 -      802]            ANDI    #$0F,CCR
465       P:0181 449700  [2 -      804]            MOVE              X:<cx,X0
466       P:0182 469800  [2 -      806]            MOVE              X:<cy,Y0
467       P:0183 62F400  [4 -      810]            MOVE              #t_is_posit
ifj,R2
                 00019E
468    
469       P:0185 060000  [6 -      816]            DO      X:<maxiter,barnsleyj_
loop
                 0001A4
470       P:0187 200080  [2 -      818]            MPY     X0,X0,A
471       P:0188 578B92  [2 -      820]            MAC     Y0,Y0,A   X:<nr1,B
472       P:0189 200005  [2 -      822]            CMP     B,A
473       P:018A 0AE1AB  [4 -      826]            JMI     (R1)
474       P:018B 200013  [2 -      828]            CLR     A
475       P:018C 044CBF  [2 -      830]            MOVEC             LC,A1
476       P:018D 00008C  [2 -      832]            ENDDO
477       P:018E 0D0093  [4 -      836]            JSR     out_set
478       P:018F 00000C  [4 -      840]            RTS
479    
480                                      barnsleyj_again
481       P:0190 479600  [2 -      842]            MOVE              X:<iy,Y1
482       P:0191 4595C0  [2 -      844]            MPY     X0,Y1,A   X:<ix,X1
483       P:0192 208FE2  [2 -      846]            MAC     X1,Y0,A   X0,B
484       P:0193 448B32  [2 -      848]            ASL     A         X:<nr1,X0
485       P:0194 200032  [2 -      850]            ASL     A
486       P:0195 0AE2A7  [4 -      854]            JGT     (R2)
487       P:0196 562348  [2 -      856]            ADD     X0,B      A,X:<t
488       P:0197 21E4B4  [2 -      858]            MPY     -Y0,Y1,A  B,X0
489       P:0198 57A3A2  [2 -      860]            MAC     X0,X1,A   X:<t,B
490       P:0199 200032  [2 -      862]            ASL     A
491       P:019A 200032  [2 -      864]            ASL     A
492       P:019B 21C478  [2 -      866]            ADD     Y1,B      A,X0
493       P:019C 0AF080  [6 -      872]            JMP     last_updatej
                 0001A4
494                                      t_is_positifj
495       P:019E 56234C  [2 -      874]            SUB     X0,B      A,X:<t
496       P:019F 21E4B4  [2 -      876]            MPY     -Y0,Y1,A  B,X0
497       P:01A0 57A3A2  [2 -      878]            MAC     X0,X1,A   X:<t,B
498       P:01A1 200032  [2 -      880]            ASL     A
499       P:01A2 200032  [2 -      882]            ASL     A
500       P:01A3 21C47C  [2 -      884]            SUB     Y1,B      A,X0
501                                      last_updatej
502       P:01A4 21E600  [2 -      886]            MOVE              B,Y0
503                                      barnsleyj_loop
504       P:01A5 2C0100  [2 -      888]            MOVE              #$01,A1
505       P:01A6 00000C  [4 -      892]            RTS
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 11



506    
507                                      ;
508                                      ; Calcul de l'orbite d'un point
509                                      ; Ensembles de Hyperbasin
510                                      ;
511                                      hyperbasin_calc
512       P:01A7 61F400  [4 -      896]            MOVE              #hyperbasin
_again,R1
                 0001B7
513       P:01A9 000FB9  [2 -      898]            ANDI    #$0F,CCR
514       P:01AA 449700  [2 -      900]            MOVE              X:<cx,X0
515       P:01AB 469800  [2 -      902]            MOVE              X:<cy,Y0
516    
517       P:01AC 060000  [6 -      908]            DO      X:<maxiter,hyperbasin
_loop
                 0001C3
518       P:01AE 200080  [2 -      910]            MPY     X0,X0,A
519       P:01AF 578B92  [2 -      912]            MAC     Y0,Y0,A   X:<nr1,B
520       P:01B0 200005  [2 -      914]            CMP     B,A
521       P:01B1 0AE1AB  [4 -      918]            JMI     (R1)
522       P:01B2 200013  [2 -      920]            CLR     A
523       P:01B3 044CBF  [2 -      922]            MOVEC             LC,A1
524       P:01B4 00008C  [2 -      924]            ENDDO
525       P:01B5 0D0093  [4 -      928]            JSR     out_set
526       P:01B6 00000C  [4 -      932]            RTS
527    
528                                      hyperbasin_again
529       P:01B7 459594  [2 -      934]            MPY     -Y0,Y0,A  X:<ix,X1
530       P:01B8 479682  [2 -      936]            MAC     X0,X0,A   X:<iy,Y1
531       P:01B9 2000A6  [2 -      938]            MAC     -X0,X1,A
532       P:01BA 2000B6  [2 -      940]            MAC     -Y0,Y1,A
533       P:01BB 200032  [2 -      942]            ASL     A
534       P:01BC 200032  [2 -      944]            ASL     A
535       P:01BD 5623D8  [2 -      946]            MPY     X0,Y0,B   A,X:<t
536       P:01BE 2000E0  [2 -      948]            MPY     Y0,X1,A
537       P:01BF 20001A  [2 -      950]            ADDL    A,B
538       P:01C0 44A3CE  [2 -      952]            MAC     -X0,Y1,B  X:<t,X0
539       P:01C1 20003A  [2 -      954]            ASL     B
540       P:01C2 20003A  [2 -      956]            ASL     B
541       P:01C3 21E600  [2 -      958]            MOVE              B,Y0
542                                      hyperbasin_loop
543       P:01C4 2C0100  [2 -      960]            MOVE              #$01,A1
544       P:01C5 00000C  [4 -      964]            RTS
545    
546    
547                                      ;
548                                      ; Calcul de 3 lignes de l'ensemble
549                                      ;
550                                      compute_3lignes
551       P:01C6 458400  [2 -      966]            MOVE              X:<xmin,X1
552       P:01C7 451900  [2 -      968]            MOVE              X1,X:<cxc
553       P:01C8 458500  [2 -      970]            MOVE              X:<ydsp,X1
554       P:01C9 451A00  [2 -      972]            MOVE              X1,X:<cyc
555       P:01CA 05F420  [4 -      976]            MOVE              #-1,M0
                 FFFFFF
556       P:01CC 64F400  [4 -      980]            MOVE              #startorb,R
4            ; R4 pointe la premiere ligne
                 000300
557       P:01CE 758A00  [2 -      982]            MOVE              X:<nbptx,N5
558       P:01CF 65F400  [4 -      986]            MOVE              #startorb,R
5
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 12



                 000300
559       P:01D1 66F400  [4 -      990]            MOVE              #startorb,R
6
                 000300
560       P:01D3 768A00  [2 -      992]            MOVE              X:<nbptx,N6
561       P:01D4 204D19  [2 -      994]            RND     B         (R5)+N5    
             ; R5 pointe la seconde ligne
562       P:01D5 204E19  [2 -      996]            RND     B         (R6)+N6
563       P:01D6 204E19  [2 -      998]            RND     B         (R6)+N6    
             ; R6 pointe la troisieme ligne
564       P:01D7 332600  [2 -     1000]            MOVE              #preabs,R3
565       P:01D8 3B0200  [2 -     1002]            MOVE              #2,N3
566       P:01D9 3C0200  [2 -     1004]            MOVE              #2,N4
567       P:01DA 3D0200  [2 -     1006]            MOVE              #2,N5
568       P:01DB 3E0200  [2 -     1008]            MOVE              #2,N6
569       P:01DC 05F423  [4 -     1012]            MOVE              #-1,M3
                 FFFFFF
570       P:01DE 05F424  [4 -     1016]            MOVE              #-1,M4
                 FFFFFF
571       P:01E0 05F425  [4 -     1020]            MOVE              #-1,M5
                 FFFFFF
572       P:01E2 05F426  [4 -     1024]            MOVE              #-1,M6
                 FFFFFF
573    
574       P:01E4 459900  [2 -     1026]            MOVE              X:<cxc,X1
575       P:01E5 451700  [2 -     1028]            MOVE              X1,X:<cx
576       P:01E6 459A00  [2 -     1030]            MOVE              X:<cyc,X1
577       P:01E7 451800  [2 -     1032]            MOVE              X1,X:<cy
578       P:01E8 0D00A8  [4 -     1036]            JSR     calculate
579       P:01E9 541B00  [2 -     1038]            MOVE              A1,X:<orb00
             ; orbite00 = calcul(cx,cy)
580       P:01EA 5C6400  [2 -     1040]            MOVE                         
 A1,Y:(R4)
581       P:01EB 448913  [2 -     1042]            CLR     A         X:ech2y,X0
582       P:01EC 569A00  [2 -     1044]            MOVE              X:<cyc,A
583       P:01ED 469944  [2 -     1046]            SUB     X0,A      X:<cxc,Y0
584       P:01EE 461700  [2 -     1048]            MOVE              Y0,X:<cx
585       P:01EF 541800  [2 -     1050]            MOVE              A1,X:<cy
586       P:01F0 0D00A8  [4 -     1054]            JSR     calculate
587       P:01F1 541D00  [2 -     1056]            MOVE              A1,X:<orb10
             ; orbite10 = calcul(cx,cy-2*ey)
588       P:01F2 5C6600  [2 -     1058]            MOVE                         
 A1,Y:(R6)
589       P:01F3 448713  [2 -     1060]            CLR     A         X:<echy,X0
590       P:01F4 569A00  [2 -     1062]            MOVE              X:<cyc,A
591       P:01F5 469944  [2 -     1064]            SUB     X0,A      X:<cxc,Y0
592       P:01F6 461700  [2 -     1066]            MOVE              Y0,X:<cx
593       P:01F7 541800  [2 -     1068]            MOVE              A1,X:<cy
594       P:01F8 0D00A8  [4 -     1072]            JSR     calculate
595       P:01F9 541F00  [2 -     1074]            MOVE              A1,X:<orb3 
             ; orbite3 = calcul(cx,cy-2*ey)
596       P:01FA 5C6500  [2 -     1076]            MOVE                         
 A1,Y:(R5)
597    
598       P:01FB 200013  [2 -     1078]            CLR     A
599       P:01FC 548A00  [2 -     1080]            MOVE              X:<nbptx,A1
600       P:01FD 200023  [2 -     1082]            LSR     A
601       P:01FE 21D100  [2 -     1084]            MOVE              A,R1
602       P:01FF 000000  [2 -     1086]            NOP
603       P:0200 205119  [2 -     1088]            RND     B         (R1)-
604       P:0201 000000  [2 -     1090]            NOP
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 13



605       P:0202 06D100  [6 -     1096]            DO      R1,end_x1
                 000258
606       P:0204 45EB00  [4 -     1100]            MOVE              X:(R3+N3),X
1
607       P:0205 451700  [2 -     1102]            MOVE              X1,X:<cx
608       P:0206 459A00  [2 -     1104]            MOVE              X:<cyc,X1
609       P:0207 451800  [2 -     1106]            MOVE              X1,X:<cy
610       P:0208 0D00A8  [4 -     1110]            JSR     calculate
611       P:0209 541C00  [2 -     1112]            MOVE              A1,X:<orb01
             ; orbite01 = calcul(cx+2*ex,cy)
612       P:020A 5C6C00  [4 -     1116]            MOVE                         
 A1,Y:(R4+N4)
613    
614       P:020B 569A00  [2 -     1118]            MOVE              X:<cyc,A
615       P:020C 578900  [2 -     1120]            MOVE              X:<ech2y,B
616       P:020D 45EB14  [4 -     1124]            SUB     B,A       X:(R3+N3),X
1
617       P:020E 451700  [2 -     1126]            MOVE              X1,X:<cx
618       P:020F 541800  [2 -     1128]            MOVE              A1,X:<cy
619       P:0210 0D00A8  [4 -     1132]            JSR     calculate
620       P:0211 541E00  [2 -     1134]            MOVE              A1,X:<orb11
             ; orbite11 = calcul(cx+2*ex,cy-2*ey)
621       P:0212 5C6E00  [4 -     1138]            MOVE                         
 A1,Y:(R6+N6)
622    
623       P:0213 569C00  [2 -     1140]            MOVE              X:<orb01,A 
             ; Si on le deduit
624       P:0214 449B1B  [2 -     1142]            CLR     B         X:<orb00,X0
625       P:0215 559C00  [2 -     1144]            MOVE              X:<orb01,B1
626       P:0216 205C4D  [2 -     1146]            CMP     X0,B      (R4)+
627       P:0217 0AF0AA  [6 -     1152]            JEQ     aop1
                 00021F
628       P:0219 205B19  [2 -     1154]            RND     B         (R3)+
629       P:021A 459A00  [2 -     1156]            MOVE              X:<cyc,X1
630       P:021B 451800  [2 -     1158]            MOVE              X1,X:<cy
631       P:021C 45D300  [2 -     1160]            MOVE              X:(R3)-,X1
632       P:021D 451700  [2 -     1162]            MOVE              X1,X:<cx
633       P:021E 0D00A8  [4 -     1166]            JSR     calculate
634       P:021F 5C5400  [2 -     1168]  aop1      MOVE                         
 A1,Y:(R4)-
635       P:0220 549E00  [2 -     1170]            MOVE              X:<orb11,A1
             ; Prepare la possible deduction
636       P:0221 449D1B  [2 -     1172]            CLR     B         X:<orb10,X0
637       P:0222 559E00  [2 -     1174]            MOVE              X:orb11,B1
638       P:0223 205E4D  [2 -     1176]            CMP     X0,B      (R6)+
639       P:0224 0AF0AA  [6 -     1182]            JEQ     aop2
                 00022E
640       P:0226 205B19  [2 -     1184]            RND     B         (R3)+
641       P:0227 569A00  [2 -     1186]            MOVE              X:<cyc,A
642       P:0228 578900  [2 -     1188]            MOVE              X:<ech2y,B
643       P:0229 200014  [2 -     1190]            SUB     B,A
644       P:022A 541800  [2 -     1192]            MOVE              A1,X:<cy
645       P:022B 45D300  [2 -     1194]            MOVE              X:(R3)-,X1
646       P:022C 451700  [2 -     1196]            MOVE              X1,X:<cx
647       P:022D 0D00A8  [4 -     1200]            JSR     calculate
648       P:022E 5C5600  [2 -     1202]  aop2      MOVE                         
 A1,Y:(R6)-
649       P:022F 459E00  [2 -     1204]            MOVE              X:<orb11,X1
650       P:0230 452000  [2 -     1206]            MOVE              X1,X:<orb4
651       P:0231 549E00  [2 -     1208]            MOVE              X:<orb11,A1
652       P:0232 449E1B  [2 -     1210]            CLR     B         X:<orb11,X0
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 14



653       P:0233 559C00  [2 -     1212]            MOVE              X:<orb01,B1
654       P:0234 20004D  [2 -     1214]            CMP     X0,B
655       P:0235 0AF0AA  [6 -     1220]            JEQ     aop4
                 00023F
656       P:0237 569A00  [2 -     1222]            MOVE              X:<cyc,A
657       P:0238 578700  [2 -     1224]            MOVE              X:<echy,B
658       P:0239 200014  [2 -     1226]            SUB     B,A
659       P:023A 541800  [2 -     1228]            MOVE              A1,X:<cy
660       P:023B 45EB00  [4 -     1232]            MOVE              X:(R3+N3),X
1
661       P:023C 451700  [2 -     1234]            MOVE              X1,X:<cx
662       P:023D 0D00A8  [4 -     1238]            JSR     calculate
663       P:023E 542000  [2 -     1240]            MOVE              A1,X:<orb4 
             ; orbite4 = calcul(cx+2*ex,cy-ey)
664       P:023F 5C6D00  [4 -     1244]  aop4      MOVE                         
 A1,Y:(R5+N5)
665       P:0240 54A000  [2 -     1246]            MOVE              X:<orb4,A1
666       P:0241 449F1B  [2 -     1248]            CLR     B         X:<orb3,X0
667       P:0242 55A000  [2 -     1250]            MOVE              X:<orb4,B1
668       P:0243 205D4D  [2 -     1252]            CMP     X0,B      (R5)+
669       P:0244 0AF0AA  [6 -     1258]            JEQ     aop5
                 00024E
670       P:0246 205B19  [2 -     1260]            RND     B         (R3)+
671       P:0247 569A00  [2 -     1262]            MOVE              X:<cyc,A
672       P:0248 578700  [2 -     1264]            MOVE              X:<echy,B
673       P:0249 200014  [2 -     1266]            SUB     B,A
674       P:024A 541800  [2 -     1268]            MOVE              A1,X:<cy
675       P:024B 45D300  [2 -     1270]            MOVE              X:(R3)-,X1
676       P:024C 451700  [2 -     1272]            MOVE              X1,X:<cx
677       P:024D 0D00A8  [4 -     1276]            JSR     calculate
678       P:024E 5C5500  [2 -     1278]  aop5      MOVE                         
 A1,Y:(R5)-
679    
680       P:024F 459C00  [2 -     1280]            MOVE              X:<orb01,X1
681       P:0250 451B00  [2 -     1282]            MOVE              X1,X:<orb00
682       P:0251 459E00  [2 -     1284]            MOVE              X:<orb11,X1
683       P:0252 451D00  [2 -     1286]            MOVE              X1,X:<orb10
684       P:0253 45A000  [2 -     1288]            MOVE              X:<orb4,X1
685       P:0254 451F00  [2 -     1290]            MOVE              X1,X:<orb3
686       P:0255 204B19  [2 -     1292]            RND     B         (R3)+N3
687       P:0256 204C19  [2 -     1294]            RND     B         (R4)+N4
688       P:0257 204D19  [2 -     1296]            RND     B         (R5)+N5
689       P:0258 204E19  [2 -     1298]            RND     B         (R6)+N6
690                                      end_x1
691       P:0259 205C19  [2 -     1300]            RND     B         (R4)+
692       P:025A 205D19  [2 -     1302]            RND     B         (R5)+
693       P:025B 205E19  [2 -     1304]            RND     B         (R6)+
694       P:025C 549C00  [2 -     1306]            MOVE              X:<orb01,A1
695       P:025D 5C6400  [2 -     1308]            MOVE                         
 A1,Y:(R4)
696       P:025E 54A000  [2 -     1310]            MOVE              X:<orb4,A1
697       P:025F 5C6500  [2 -     1312]            MOVE                         
 A1,Y:(R5)
698       P:0260 549E00  [2 -     1314]            MOVE              X:<orb11,A1
699       P:0261 5C6600  [2 -     1316]            MOVE                         
 A1,Y:(R6)
700    
701       P:0262 00000C  [4 -     1320]            RTS
702    
703    
704                                      ;Envoi des donnees au CPU
Motorola DSP56000 Assembler  Version 4.1.1   95-06-24  11:23:04  
CALC_DSP.ASMCALC_DSP  Page 15



705                                      sendata
706       P:0263 0AA803  [4 -     1324]            BCLR    #3,X:<<HCR           
             ; Informe le Host (Hf2 = 0)
707       P:0264 60F400  [4 -     1328]            MOVE              #startorb,R
0
                 000300
708       P:0266 05F420  [4 -     1332]            MOVE              #-1,M0
                 FFFFFF
709       P:0268 060A00  [6 -     1338]            DO      X:<nbptx,end_send
                 000272
710       P:026A 0AA981  [6 -     1344]            JCLR    #1,X:<<HSR,*
                 00026A
711       P:026C 08D8EB  [4 -     1348]            MOVEP             Y:(R0)+,X:<
<HTX
712       P:026D 0AA981  [6 -     1354]            JCLR    #1,X:<<HSR,*
                 00026D
713       P:026F 08D8EB  [4 -     1358]            MOVEP             Y:(R0)+,X:<
<HTX
714       P:0270 0AA981  [6 -     1364]            JCLR    #1,X:<<HSR,*
                 000270
715       P:0272 08D8EB  [4 -     1368]            MOVEP             Y:(R0)+,X:<
<HTX
716                                      end_send
717       P:0273 00000C  [4 -     1372]            RTS
718    
719                                      adr_calc
720       P:0274                                   DC      mandelbrot_calc
721       P:0275                                   DC      julia_calc
722       P:0276                                   DC      manowarm_calc
723       P:0277                                   DC      manowarj_calc
724       P:0278                                   DC      unity_calc
725       P:0279                                   DC      barnsleym_calc
726       P:027A                                   DC      barnsleyj_calc
727       P:027B                                   DC      hyperbasin_calc
728                                                END     start

0    Errors
0    Warnings
