
     /*      $Id: MENU.TXT,v 1.23 1994/06/12 22:00:00 SCR Exp SCR $ */

     The all AES' submenu library
     ============================

     Using this library is simple. Just follow the official documentation.

     For those who don't have these docs,  here  is a quick run down. Names
     enclosed in  chevrons  <thus>  indicate  names  of  variables  in that
     function's parameter list.

     The limitations of this package are as follows:

     Submenus are limited to a depth of 1, this may be increased.

     Submenu scrolling is not supported and is not likely to be.

     Only G_STRING and  G_BOX  object  are  presently  supported, these are
     normally the only objects found in  the  menu  bar, so there is little
     point in adding the other objects, unless there is a demand of course.

     Menu_popup doesn't support  scrolling  drop-down  list  boxes but this
     will be added RSN ½ Atari 1985-1994.

     There are only 3 functions in this library:
     menu_attach
     menu_istart
     menu_popup

     There are in fact  2  other  functions,  evnt_multi  & evnt_mesag, but
     these are invisible to the  programmer  and replace the normal library
     calls, they work in exactly the same way.

     This library should be linked *after* any other libraries but *before*
     the main Lattice libraries.

     ---------------------------------------------------------------------

     This is the MENU structure which is used by the submenus:

     typedef struct
     {
        OBJECT *mn_tree;    /* the object tree containing the submenus */
        short  mn_menu;     /* the parent object of the submenu items  */
        short  mn_item;     /* the index of the submenu to align to    */
        short  mn_scroll;   /* the index of the first scrolling object */
                            /* or zero if no scrolling is needed       */
                            /* this library does not support scrolling */
        short  mn_keystate; /* the shift keys state when the submenu   */
                            /* was selected                            */
     } MENU;

     This is the new MN_SELECTED message returned by the AES:

         msg[0]  Message type - MN_SELECTED
         msg[1]  Application Identifier
         msg[2]  length of message - 16
         msg[3]  object number of menu title selected
         msg[4]  object number of menu OR submenu selected
         msg[5]  high word of the object tree of the selected menu
         msg[6]  low word of the object tree of the selected menu
         msg[7]  parent of the selected menu OR submenu

     A little clarification is needed here.

     This message is backwardly  compatible  with  the  older  AES'. When a
     submenu item is selected there appears to be a problem with msg[4]. If
     a submenu and  a  menu  both  have  the  same  index  then  the way to
     determine which one has been selected is to check which object tree it
     belongs to by turning msg[5]  &  msg[6]  back  into a tree pointer and
     comparing this value against the value  passed to the AES when calling
     menu_bar & menu_attach.

     ---------------------------------------------------------------------

     int menu_attach(int flag, OBJECT *tree, int item, MENU *data);

     Attach, change or remove a submenu.

     The value returned is 0 if an error occurred, non-zero if not.

     flag can have 3 values:

         ME_INQUIRE  (0)
         ME_ATTACH   (1)
         ME_REMOVE   (2)

     ME_INQUIRE
     Returns in <data>  the  information  on  the  submenu  attached to the
     menu designated by <tree> and <item>.

     ME_ATTACH
     Attach or change a submenu. All of <data> should be initialised by
     the application before the call, except for <keystate>. <tree> and
     <item> are the OBJECT * and index of  the menu which the submenu is to
     be attached.    If <data> is NULL then any attachment is removed.

     ME_REMOVE
     Remove a submenu. <tree> and <item> are the OBJECT * and the index  of
     the menu which the submenu is attached to. <data> should be NULL.
     ----------------------------------------------------------------------
     int menu_istart(int flag, OBJECT *tree, int imenu, int item);

     Align a submenu with the parent menu item.

     The value returned is 0 if an  error occurred or the positive index of
     the object which is currently aligned with the main menu.

     flag can have 2 values:
         get alignment information   (0)
         set alignment information   (1)

     <tree> is the OBJECT * of the submenu tree.
     <imenu> is the parent of the submenus.
     <item> is the submenu to align to the main menu.

     You may have noticed that the menu  OBJECT is not referenced at all in
     the above call, this is correct.

     ----------------------------------------------------------------------
     int menu_popup(MENU *menu, int xpos, int ypos, MENU *data);

     Display a popup and returns the user's selection.

     returns 1 if <data> contains valid  information, 0 if the user clicked
     off the popup.

     <menu>  is  a  pointer  to  a  MENU  structure  containing  the  usual
     information.  <xpos>  &  <ypos>  are  the  coordinates  of  where  the
     *starting* object (mn_item) in  the  menu  structure  is  to be drawn.

     <data> will  be  filled  in  with  the  information  about  the object
     selected by the user.

     ----------------------------------------------------------------------
     Please feel free to add to this section.

     I suggest that you  use  Profile  or  Profile  2  to determine the AES
     version for inclusion in this section. [Hi Mark. :-) ]

     This code has been tested on:
       TOS 4.04      -       AES 3.40
       TOS 4.02      -       AES 3.40
       TOS 2.06      -       AES 3.20
       TOS 2.05      -       AES 3.20
       TOS 1.04      -       AES 1.40
       TOS 1.00      -       AES ?.??

     Also tested on:    [But could be a bit shaky - I don't have a TT]
       TOS 3.00      -       AES 3.29
       TOS 3.06      -       AES 3.20

     - thanks to Mark Baines, Robert Perry.

     ----------------------------------------------------------------------
     Versions:

     2.00
     - in an attempt to solve the  very last problem I have gone completely
     legal even down to the method of moving the mouse from the VDI. Memory
     is now allocated dynamically and fences are  placed at each end of the
     buffer to help detect overwrites by the VDI.

     1.23
     - Memory to store  the  screen  under  the  submenu is now dynamically
     allocated using Mxalloc if available  to  guarantee  ST Ram on the TT.
     This has not yet been confirmed as working.
     - The workstation for menu_popup wasn't being closed when an item was
       selected.
     - the documentation for the value returned by menu_popup was reversed.
     1 indicates that an item was selected, 0 indicates not.

     1.22
     - Memory to store  the  screen  under  the  submenu is now dynamically
     allocated instead of the fixed 8KB buffer previously.

     1.21
     - Disabled submenus were returning a message.

     1.20
     - A fault with drawing disabled menus has now been corrected.

     1.19
     - The submenu code doesn't open  it's  own  workstation now to avoid a
     bug in some AES'. The  problem  with the disappearing titles/menus was
     traced to vqt_attributes returning a mode value of 0, which is invalid
     (the range is 1 - 4).

     1.18
     - The submenu code now opens  its  own virtual workstation in the hope
     that this will solve a  problem  with  AES  1.40, where the titles and
     menu items will disappear. This has not yet been confirmed.

     1.17
     - It is now possible to attach the same submenu to more than one menu.
     Simple really, I just have to calculate the position of the submenu on
     the fly. :-) The MN_SELECTED  is  now  exactly  the same as AES 3.30+.
     Previously  the  menu  tree  &  parent   values  were  NULL  and  zero
     respectively when a main menu item  was  selected, and only valid if a
     submenu had been selected.

     1.14 - 1.16
     - Small bug fixes. Too trivial to mention. :-)

     1.13
     - Hopefully corrected a bug  which  prevents  the next menu item being
     recognised if a submenu was opened and nothing selected from it.

     1.12
     - evnt_multi & evnt_mesag calls added.

     1.11
     - All functions are now named  the  same  as the official Atari calls.
     There are now no extra calls to take into account.

     1.10
     - Menu_Popup added.

     1.09
     - menu_pause added to prevent submenus  flashing  up when the mouse is
     being dragged down to a lower  menu  item,  looks more like the normal
     Atari menus.

     1.08
     - Finally understood the menu_istart docs. Changed my code to work the
     same.

     1.07
     - Menu_Convert now added to mask out the spurious messages caused by
     clicking on the desktop.

     1.06
     - The submenu now stays in  place  even  when the mouse moves onto the
     desktop. Unfortunately this causes a message to be sent when you click
     on the desktop. No way round this :-(

     1.05
     - Changed all code to the AES 3.30+ style submenu functions.

     1.04 - 1.00
     - None of these version ever saw the  light of day due to the fact the
     I had not seen the official Atari  docs  at the time and therefore had
     no idea how  the  submenu  code  had  been  implemented,  and are best
     forgotten :-)

     ----------------------------------------------------------------------

     #include <std_disclaimer.h>

     This package  can  be  freely  distributed  provided  it  is  not  for
     commercial gain on any BBs, but should not be included on a cover disk
     without my prior approval.

     Simon Robins - July 1994

     Email: srobins@cix.compulink.co.uk
     NeST:  90:100/102
