
     There are few changes  in  this  month's  source  code. The (int)x and
     (int)y fields of the  BOARD  struct  have  been  replaced  by a single
     (int)offset field,  all  text  output  has  been  redirected  -  using
     sprint() - through a small suite of  functions in the file GRAPH.C and
     the source code has been split into separate files.

     If you are not using Hisoft  C  then  you  can ignore the remainder of
     this file, and ignore the files OTHELLO.HS and FOOBAR.C as well.

             Convertion Notes for Users of the Hisoft C Interpreter
             ------------------------------------------------------

     I have gone out of my way  in  writing  this source code to make it as
     compatible with the  Hisoft  C  Interpreter  as  is  possible, without
     compromising the code. Whole functions have been re-written, variables
     renamed,  macro  definitions  endlessly  modified  and  algorithms re-
     thought toward this end.

     Since this source code is  to  accompany  a  tutorial  series on the C
     language, however, I have  occassionally  had  to  present source code
     which is not permitted within the extremely narrow limitations imposed
     by Hisoft C.

     So far in this tutorial  series,  I  have  provided  two copies of the
     source code, one for Hisoft C users and one for everybody else. I will
     no longer be doing this, because - so long as I was supplying Hisoft C
     users with separate  source  code  -  you  have  been  deprived of the
     opportunity to learn and  get  used  to  some  of  the most useful and
     important C commands, the compiler directives.

     From now on, then, you will instead  be provided with a file along the
     lines of this one which will  provide  you  with a guide to converting
     the code yourself, thus  allowing  you  to  become familiar with those
     commands which are incorrectly handled -  or  not  handled at all - by
     the Hisoft C Interpreter. When the program works from within Hisoft C,
     you will know that you  have  succeeded.  Initially,  I will guide you
     step-by-step through the  modifications  which  are  required. As time
     goes by, however, you should not need  to have your hand held quite so
     tightly, and this file will start to shrink.

     Before this source code will  operate  with  Hisoft  C, then, you will
     have to make the following changes.  Not making the changes will cause
     Hisoft C to produce  spurious,  and  often  entirely irrelevant, error
     messages.

           -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

     The OTHELLO.HS file must be moved to  the same folder as your Hisoft C
     Interpreter program and  renamed  to  OTHELLO.H  -  this  replaces the
     OTHELLO.H file already on this disk.  I would recommend, however, that
     you read through the OTHELLO.H file at least once, if only to get some
     idea of the changes made to that file in order to produce OTHELLO.HS .

     The Hisoft C standard library does  not contain the strdup() function,
     a standard function which takes  a  pointer  to  a string, allocates a
     block of memory the  same  size  as  that  string, copies the original
     string into the new memory block and then returns a pointer to the new
     memory block - or  NULL  if  an  error  occurred.  As a consequence, a
     Hisoft C file, FOOBAR.C, is  supplied  which defines this function for
     you.

     In the file DO_MOVE.C  there  is  a  segment  of  code  which is to be
     conditionally compiled only if the symbol DEBUG is pre-defined. Hisoft
     C has serious difficulties, unfortunately, with all compiler commands,
     and so the lines "#ifdef DEBUG" and  "#endif /* DEBUG */" in that file
     must be deleted if you wish to make use of this debugging code. In any
     event, the automatic variables declared within that block will need to
     be relocated to the head of  the  function,  or the DEBUGging block of
     code deleted altogether.

     At the top of the file INIT.C are two lines:
     #include <malloc.h>
     #include <string.h>
     These two  lines  must  be  deleted  or,  alternatively,  dummy  files
     (containing only a comment)  with  these  names  placed  in the HEADER
     directory.

     Throughout the code, function  definitions  are preceded with 'extern'
     or 'static' to indicate the scope  of the function. Delete these words
     from in front of the  function  declarations,  as  it appears that the
     Hisoft C Interpreter treats  functions  in  an  odd  manner and cannot
     handle scoped functions.

     On a related note: at the head  of  most  files is a block of 'extern'
     statements, declaring functions and/or variables outside that file for
     use within it. While these declarations are _essential_ for use with a
     C compiler, Hisoft C, again, throws up spurious error messages when it
     encounters them. Therefore, delete  all  'extern'  lines which declare
     functions. e.g. delete a  line  "extern  int  foo();",  but not a line
     "extern int foo;".

     In  the  get_best()  function  in  the  file  COMPUTER.C  there  is  a
     do...while() loop which has  its  final  condition "while ((currbrd !=
     NULL) && mfound);". While (no pun  intended) this is perfectly correct
     C code, Hisoft C can't handle it -  for  no reason that I can see. You
     are going to have to rewrite  this  condition to take the "(currbrd !=
     NULL)" out of  the  while()  statement  and  replace  it  with  a flag
     instead. If you've got the  source  code  from last month's CoverDisk,
     you can patch in the replacement  used  in get_best() in that code. If
     not, just rewrite by introducing a  new (int)flag variable whose value
     depends on whether or not currbrd has the value NULL.

     All conditional compilation has  to  be  re-written  to  remove it. In
     particular, the conditional  of  the  do...while()  loop in get_move()
     should be simplified, to remove  conditional  compilation, to a simple
     condition. The precise value of  the  condition depends, of course, on
     the value which you have given to BRD_W in OTHELLO.H .

           -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

     In the OTHELLO.H file, four  macros  which take arguments are defined:
     At_left(), At_right(), At_top() and At_bottom().  I'm very, very sorry
     about this, but these macros are  damn-near  essential for the code to
     be readable. Since Hisoft C cannot  handle these macros, however, four
     functions with the same names  are  provided  in the Hisoft C-specific
     file FOOBAR.C It would  appear  that,  amongst  many other things, the
     Hisoft C Interpreter cannot handle macros in relation to struct's. You
     may remember the problems caused by the PLAYR and OPPONENT macros used
     in game_over() last month to help clarify the code in that function. A
     similar problem appears to be operating here.

     Finally, for now, there  also  appear  to  be  some  problems with the
     pointer test function in the  Hisoft  C  Interpreter  - it claims that
     there are pointer errors in the  strdup()  function in FOOBAR.C and in
     setup_board() in INIT.C . No doubt  it would also have difficulty with
     brddup() in TOOLKIT.C as well. It  is  best  simply to switch off this
     feature of Hisoft C as there  is  nothing wrong with these routines. I
     say again: There is nothing  wrong  with  these  routines - Hisoft C's
     pointer test apparently  cannot  cope  with  looping  through a memory
     block.

                           /* End file README.1ST */
