Midi Programming in C

It may seem a little strange, but Ian Ritchie has turned his ST into a
Stylophone! Will someone tie his kangaroo down?

INFERNAL SOUNDS

     This months delve into the arcane craft of making music using computers
introduces the Atari internal sound chip.  'Oh no!', I hear you cry.  'I
thought we left behind those rather weedy beeps and bips with our Sinclair
Spectrums and our BBC Micros'.

     By and large we did.  The scope of sounds available from modern synths,
samplers and sound modules is vast.  Many applications in the music area are
only appropriately served using midi.  Other programs however, such as the ear
training program in last months edition do not require a high quality audio
output to be effective.  If you have any aspirations of having a wider audience
for any of your C programmed musical creations you should take heed.  By the
introduction of relatively few extra lines of code, your potential user base
will be greatly increased.

     The programmable sound generator has three tone generators and a noise
generator which can be mixed and matched on three output channels.  We shall
ignore the noise generator as well as the chips capacity to shape the sound
using envelopes.  The command we shall use to make the chip sing is called
Giaccess.  It is called with two arguments as follows :-

     char Giaccess( data, register )

     int data, register;

    The register value specifies the action taken.  Registers 0 and 1 control
the frequency of voice 1.  A twelve bit word is neccessary with the lower eight
bits stored in register 0 and the upper four bits stored in 1. Registers 2 and
3 control frequency of voice 2. Registers 4 and 5 control frequency of voice 3.
Register 7 controls the voices enabled. Register 8, 9 and 10 control the
volumes of voices 1, 2 and 3.  The volume data ranges from 0 to 15.

     Giaccess()'s use in practice can be seen in the first example program, the
Atari Stylophone Simulator.  This program allows the internal sound generator
to be controlled from a midi keyboard.  In one fell swoop make hundreds of
pounds worth of computer and synthesizer sound like a sixties toy keyboard
played by Rolf Harris!

Beep with Rolf

    On first glance at the listing the main thing you notice is the two large
initialisation arrays ftune[] and ctune[].  These contain the fine and coarse
tuning information for 5 octaves of notes around A 440.  These values are
employed in the sound() function which actually plays notes using the sound
chip on channel one.  The first Giaccess call specifies the note volume for
channel one ( vme = data and 0x88 is the hexadecimal representation for 128 + 8
).  This is followed by the fine then coarse tuning values sent to register 0
(0x80 = 0 + 128) and register 1 (0x81 = 1 + 128).

     The main() function is quite straightforward.  Bconin(3) is used as usual
to test for incoming midi data.  In this instance any midi input channel can be
used.  If a value between 143 and 159 is recieved it is presumed midi note
information and the note value and velocity information are extracted.  The
sound() function is then called .  The frq variable is brought in tune with its
equivalent midi note by subtracting 25.  The volume information for the chip
can have values from 0 to 15 so I have divided by 9 to bring the midi value
into range.  This produces a rather extreme velocity control of the chip.  You
might like to experiment with different ways to improve this.

     I was using a DX-7 which sends a zero velocity note on instead of a true
note off.  I will leave it to you to adapt the program for the wider case
dealing with both types of note off signal.

Stop that Infernal Racket!

     Now that we have routines for accessing the sound generator we could
easily install them in most of the previous programs in the series.  As an
example I have taken the 'Hall of the Mountain King' playing program and
outfited it to play through the sound chip and midi port simultaneously. The
program is on the cover disk as INFERNAL.C

     The sound() function and the ftune[] and ctune[] initialisations can be
copied as is, or better still incorporated in a link file ( possibly along with
the Note_On, Note_Off() and initialisation() functions we have been using so
frequently ).  Sound is then simply used wherever Note_on() or Note_Off()
appear.

Hold down a Chord

    The final program 'Chord Organ' is the most interesting of the bunch.  It
allows you to play chords from a midi keyboard by pressing a single key.  The
chords are transmitted through midi as well as played on the internal sound
generator.  I have only assigned the notes between middle C (60) and one octave
above (72) but this could easily be extended.  Try the chord sequences C / A /
D / G / and C / F / C / G to get a feel for how it works.

     As before ftune[] and ctune[] are used unchanged as are Note_on() and
Note_Off().  The sound() function however gains an extra 'channel' argument.
The main() function kicks off by enabling all three tone channels with :
Giaccess( 56, 0x87 )

     A while loop is used to test for a Note On on midi channel one.  Once this
is received the following note and velocity data are sent to the select()
function to identify the correct chord.  In this instance they are simple
triads in C major with inversions within the range 60 to 72.  There is no
reason why you could not adapt this technique to generate more extended or
esoteric chords.  The note values a, b and c are then used as arguments in
chord() which sends the notes to the midi out port and sound_chord() which does
the same for the sound chip.  The different channels are selected in the
sound() function as follows :-
                  ---- tuning ----
  channel  volume   fine   coarse
     1       0x88    0x80    0x81

     2       0x89    0x82    0x83

     3       0x90    0x84    0x85

     You might like to try modifying the Rolf Harris Stylophone to accept three
note polyphony using the new sound() with the extra parameter.

     That about raps it up.
