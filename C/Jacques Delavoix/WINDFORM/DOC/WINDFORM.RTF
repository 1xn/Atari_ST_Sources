{\rtf1\pc{\fonttbl{\f7\fnil Dutch 801 Roman;}
{\f8\fnil Dutch 801 Italic;}
{\f9\fnil Dutch 801 Bold;}
{\f10\fnil Dutch 801 Bold Italic;}
{\f15\fnil Park Avenue;}
{\f21\fnil VAG Rounded;}
}\paperw11904\paperh16836\margl567\margr567\margt850\margb850\pgnstart1\ftntj\ftnstart1\ftnrestart\makeback
\sectd\pgndec\headery283\footery850\cols1\colsx567\pgndec
\pard\tx3401\qj\f21\fs40 La mise en oeuvre facile des Fen\'88tres de dialogue non 
modales.	\fs24 par  Jacques  Delavoix .\fs40\
\pard\qj\f7\fs24\
\pard\tx567\qj 	Comme ce titre l'indique, ces routines, dont je viens de terminer la mise au point, ont \'82t\'82 \'82tudi\'82es 
pour permettre une mise en oeuvre tr\'8As fa\'87ile des formulaires en fen\'88tres non bloquants, encore 
appel\'82s "fen\'88tres de dialogue non modales", avec une architecture similaire (mais pas identique) \'85 celle 
employ\'82e lors de la mise en oeuvre de formulaires bloquants par "form_do()".\
	Il \'82tait \'82galement important d'\'82viter une dispersion et un m\'82lange du code et aussi d'obtenir une 
bonne structuration de celui_ ci; le code g\'82rant le fonctionnement des fen\'88tres de dialogue est ici ind\'82
pendant du code de gestion des fen\'88tres principales. Cette structuration offre en outre l'avantage de 
faciliter la mise en oeuvre, la mise au point et le d\'82boggage des programmes.\
\
	Il est important de noter que les routines fournies ici donnent une base pour la programmation 
des fen\'88tres de dialogue, mais que ce code peut \'88tre modifi\'82 pour \'88tre adapt\'82 aux besoins propres de 
chaque programmeur. On pourra d'ailleurs s'en rendre compte lorsque je fournirai, durant l'automne 
1995, un accessoire utilisant une version sp\'82cialis\'82e de "\f9 WINDFORM\f7 ".\
\
	Quatre routines sont \'85 la disposition des programmeurs pour la gestion de ces fen\'88tres :\
	- \f9 init_var()\f7  pour l'initialisation de chaque fen\'88tre.\
	- \f9 open_dialog()\f7  pour ouvrir une fen\'88tre de dialogue.\
	- \f9 close_dialog()\f7  pour la refermer.\
\li680\fi-680 	- \f9 windform_do()\f7  pour g\'8Arer le dialogue actuellement actif, le coeur du dispositif, \'82quivalent en 
gestion non bloquante \'85 la fonction form_do().\
\li567\fi-567\
\li0\fi0 Pour la suite des explications, le terme de "routine \f9 utilisateur\f7 ", servira \'85 d\'82signer les fonctions ayant une 
action particuli\'8Are dans votre programme et qui vont \f9 utiliser\f7  les fen\'88tres de dialogue; par exemple une 
fonction de Recherche et Remplacement ou tout simplement une routine affichant la traditionnelle boi
te d'Informations du programme (baptis\'82e "\f9 informe()\f7 " dans le programme d'exemple fourni).\
\
\f21\fs28 Le principe de fonctionnement :\
\f7\fs24\
	Nous allons donc justement voir ce qui se passe dans le cas de la boite "\f9 Informations\f7 " :\
Regardez tout d'abord dans la fonction "\f9 main()\f7 ", apr\'8As l'appel \'85 \f9 evnt_multi()\f7 , on commence, dans un 
premier temps, par d\'82coder les options de menu et appeler notre routine \f9 utilisateur\f7  "\f9 informe()\f7 ". Vous 
remarquerez que l'on transmet un param\'8Atre baptis\'82 "\f9 OPEN_DIAL\f7 " \'85 cette routine. Ce param\'8Atre, 
comme son nom le laisse supposer, indique \'85 cette routine que l'on demande l'ouverture du dialogue. 
Cette routine va donc ouvrir la fen\'88tre d'"\f9 Informations\f7 " puis va retourner dans la boucle d'attente des 
\'82v\'8Anements.\
	Mais maintenant nous avons un probl\'8Ame ! car il faut bien que nous y retournions dans cette routi
ne pour pouvoir g\'8Arer le dialogue et effectuer les actions voulues en fonction du choix fait par l'utilisa
teur dans la fen\'88tre de dialogue ! Et bien c'est l\'85 le \f9 principe fondamental\f7  du concept expos\'82 ici : apr\'8As 
le d\'82codage des options du menu, \f9 nous allons effectuer un aiguillage\f7  \f9 en fonction du Handle de fen\'88tre 
renvoy\'82 par la fonction "evnt_multi()"\f7  et appeler de nouveau notre routine "\f9 informe()\f7 ", mais cette fois 
en lui transmettant la variable des flags d'\'82v\'8Anements en param\'8Atre. Etant donn\'82 que le param\'8Atre 
"\f9 OPEN_DIAL\f7 " emprunte le m\'88me chemin, sa valeur a \'82t\'82 fix\'82e suffisamment haute pour ne pas interf\'82
rer avec les flags d'\'82v\'8Anements. \
	\f9 Avant de faire ceci\f7  il nous reste quand m\'88me un petit probl\'8Ame \'85 r\'82gler, en effet, le handle de 
fen\'88tre renvoy\'82 dans le mot \f9 3\f7  du buffer de message n'est valable que pour les \'82v\'8Anements "\f9 Message\f7 "... 
Et bien peu inporte car nous allons, au pr\'82alable, affecter un handle de fen\'88tre aux \'82v\'8Anements qui 
nous int\'82ressent et qui en sont d\'82pourvus :\
	- Pour "\f9 MU_KEYBD\f7 " nous demandons le handle de la fen\'88tre qui se trouve au premier plan.\
	- Pour "\f9 MU_BUTTON\f7 " nous demandons, par "\f9 wind_find()\f7 ", le handle de la fen\'88tre qui se trouve 
sous la souris, de fa\'87on \'85 pouvoir aiguiller, le cas \'82ch\'82ant, vers un traitement des objets pr\'82sents sur le 
bureau du programme (non employ\'82 dans l'exemple fourni).\
\
\f21\fs28 Les Variables :\f7\fs24\
	Pour pouvoir faire fonctionner nos fen\'88tres de dialogue, nous allons avoir besoin d'un certain 
nombre de variables : L'adresse du formulaire, le Handle de la fen\'88tre et ses coordonn\'82es ainsi que 
deux variables n\'82c\'82ssaires \'85 la gestion des champs de texte \'82ditables. Ces variables, qui sont personnel
les \'85 chaque fen\'88tre, ont \'82t\'82 regroup\'82es dans une structure de type "\f9 WINDFORM_VAR\f7 ". L'adresse de 
la structure concern\'82e sera transmise par notre routine \f9 utilisateur\f7  aux fonctions de gestion du dialogue 
(voir le fichier "\f9 WINDFORM.H\f7 "). Il faudra donc pr\'82voir une structure "\f9 WINDFORM_VAR\f7 " pour cha
que fen\'88tre de dialogue que l'on compte utiliser.\
\
\f21\fs28 La Routine "Utilisateur" :\
\f7\fs24 	Pour que le fonctionnement soit possible notre routine doit \'88tre con\'87ue selon un sh\'82mas particu
lier, d'une mani\'8Are similaire \'85 ce que l'on ferait pour une gestion bloquante par "form_do()", et dont 
voici le principe :\
\
Routine utilisateur (\'82v\'8Anements)\
	Si \'82v\'8Anements == OPEN_DIAL\
\pard\tx567\tx1134\qj 		/* Initialisations \'82ventuelles (champs \'82ditables et/ou radio_buttons) */\
		Alors Ouverture du dialogue\
	sinon Choix = Gestion du dialogue\
\pard\tx567\tx1134\tx4308\qj 		Si Choix diff\'82rent de Z\'82ro	/* si Choix == 0 le dialogue n'est pas termin\'82. */\
\pard\tx567\tx1134\tx1701\qj 			Alors Fermeture possible du dialogue\
			Si Choix == CLOSE_DIAL  /* La case de fermeture a \'82t\'82 cliqu\'82e. */\
\pard\tx567\tx1134\tx1701\tx2268\qj 						Choix = ANNULER   /* C'est \'85 vous de le d\'82cider ! */\
			fin Si\
\pard\tx567\tx1134\tx1701\qj 			Si Choix diff\'82rent de ANNULER\
\pard\tx567\tx1134\tx1701\tx2268\qj 				Alors action demand\'82e\
			fin Si\
		fin Si\
	fin Si\
Retour\
\
Voyons donc ce qui se passe dans le cas de la proc\'82dure "\f9 color_window\f7 ()":\
	Si cette routine re\'87oit le param\'8Atre "OPEN_DIAL", apr\'8As avoir v\'82rifi\'82 que la fen\'88tre n'est pas 
d\'82j\'85 ouverte, nous initialisons l'unique champ de texte \'82ditable pr\'82sent dans cette Boite, (notez que 
dans la boite "Client" les champs de texte ne sont initialis\'82s que lors du d\'82marrage du programme, (c'est 
suivant ce que vous voulez faire) puis nous appellons la proc\'82dure d'ouverture.\
	Sinon le param\'8Atre re\'87u est un \'82v\'8Anement, et nous appellons la fonction de gestion du dialogue 
"\f9 windform_do()\f7 "; au retour de cette fonction, nous commen\'87ons par tester si le dialogue est termin\'82, 
dans ce cas la valeur renvoy\'82e (r\'82cup\'82r\'82e dans la variable "\f9 choix\f7 ") est diff\'82rente de z\'82ro, et le reste du 
traitement est identique \'85 celui que l'on aurait eu dans le cas d'une gestion par "\f9 form_do()\f7 ", except\'82 la 
prise en compte de la valeur "CLOSE_DIAL" indiquant un Clic sur la case de fermeture de la fen\'88tre, 
normalement consid\'82r\'82e comme \'82quivalente \'85 "ANNULER", comme c'est le cas dans l'exemple fourni, 
mais vous pouvez bien entendu en d\'82cider autrement.\
	Observez attentivement les routines "\f9 informe()\f7 ", "\f9 fiche_client()\f7 "  et "\f9 color_window()\f7 " dans le pro
gramme et comparez les avec le mod\'8Ale que je viens de d\'82crire.\
\
\f9 NOTE :\f7  Remarquez le bouton "\f9 noir\f7 " dans cette boite qui a \'82t\'82 d\'82clar\'82 "\f9 DISABLED\f7 ".\
\
\f21\fs28 Les quatre routines principales :\f7\fs24\
	Ces quatre routines re\'87oivent toutes l'adresse de la structure \f9 WINDFORM_VAR\f7  concern\'82e en 
premier param\'8Atre. Leurs prototypes se trouvent dans le fichier "\f9 WINDFORM.H\f7 " ainsi que les diff\'82ren
tes d\'82finitions utilis\'82es par les routines "\f9 WINDFORM\f7 ".\
\
\f21\fs28 La routine d'initialisation :\f7\fs24\
\
	Cette routine doit \'88tre appel\'82e durant la phase d'initialisation du programme pour chaque fen\'88tre 
de dialogue. Le deuxi\'8Ame param\'8Atre est l'index du formulaire dans le fichier ressource, donn\'82 par le 
fichier header associ\'82 (.H). Les deux param\'8Atres "inf_x" et "inf_y" sont pr\'82vus pour \'88tre utilis\'82s en con
jonction avec la lecture d'un fichier "\f9 .INF\f7 " o\'97 pourront \'88tre sauvegard\'82es les coordonn\'82es initiales X et 
Y de chaque fen\'88tre (sauvegarde des pr\'82f\'82rences). Si ces deux param\'8Atres sont \'85 z\'82ro, la fen\'88tre sera 
centr\'82e \'85 l'\'82cran.\
	\f9 Voir la proc\'82dure "init_prog()" dans le programme.\f7\
\f21\fs28\
La routine d'ouverture :\f7\fs24\
	Cette routine assure l'ouverture de la fen\'88tre de dialogue. Les deux autres param\'8Atres \'85 passer 
sont un pointeur sur le titre de la fen\'88tre et l'index de l'objet texte \'82ditable o\'97 doit apparaitre le cu
seurd'\'82dition (ou '0' sinon).\
\
\f21\fs28 La routine de fermeture :\f7\fs24\
	Fermeture de la fen\'88tre de dialogue concern\'82e.\
\
\f21\fs28 La routine de gestion du dialogue :\f7\fs24\
	Voici enfin cette fameuse routine ! Le deuxi\'8Ame param\'8Atre est constitu\'82 des flags d'\'82v\'8Anement 
retransmis par la routine \f9 utilisateur\f7  appelante. La valeur retourn\'82e est soit :\
\
	- Z\'82ro : Le dialogue n'est pas termin\'82.\
\li680\fi-680 	- CLOSE_DIAL  : Valeur -1, la case de fermeture de la fen\'88tre a \'82t\'82 cliqu\'82e.\
	- Une valeur Positive : Dans ce cas l'utilisateur a actionn\'82 un bouton de sortie et cette valeur en 
repr\'82sente l'index.\
\li0\fi0\
\f21\fs28 La Mise en Oeuvre :\f7\fs24\
	Elle doit \'88tre faite de la fa\'87on suivante, en vous inspirant du programme d'exemple fourni :\
\
	\f9 1\f7 , D\'82clarez une structure WINDFORM_VAR pour chaque fen\'88tre de dialogue que vous d\'82sirez 
mettre dans votre programme, et en lui donnant un nom explicite.\
\
	\f9 2\f7 , Si ce n'est d\'82j\'85 fait, structurez le traitement des \'82v\'8Anements effectu\'82 aussit\'93t apr\'8As le retour de 
l'appel \f9 evnt_multi()\f7 , en traitant d'abord les options de Menu, puis en affectant un Handle de fen\'88tre 
aux \'82v\'8Anements voulus et en effectuant ensuite des aiguillages sur vos proc\'82dures \f9 "utilisateur"\f7  en fonc
tion de ce Handle. Je laisse \'85 votre initiative le traitement d'autres \'82v\'8Anements comme par exemple les 
\'82v\'8Anements MU_TIMER; d'ailleurs en ce qui con\'87erne l'\'82v\'8Anement TIMER, je me permet de vous in
citer \'85 la prudence : N'utiliser cet \'82v\'8Anement que si vous en avez r\'82ellement besoin, par exemple pour la 
sauvegarde automatique du document actif toute les \f9 n\f7  secondes.\
\
	\f9 3\f7 , Lors de l'initialisation du programme, effectuez un appel \'85 \f9 init_var()\f7  pour chaque fen\'88tre de 
dialogue, en passant en param\'8Atres : L'adresse de la structure concern\'82e, l'Indice du formulaire concer
n\'82 et \'82ventuellement les coordonn\'82es \f9 X\f7  et \f9 Y\f7  de d\'82part (pouvant provenir de la lecture d'un fichier 
\f9 INF)\f7 .\
\
	\f9 4\f7 ,  Concevez vos fonctions "\f9 utilisateurs\f7 " conform\'82ment \'85 ce qui a \'82t\'82 d\'82crit plus haut.\
\
\f21\fs28 Les Formulaires :\f7\fs24\
\
	Ils seront \'82dit\'82s de la m\'88me fa\'87on que pour une mise en oeuvre classique avec des radio_buttons, 
champs de texte \'82ditables, ic\'93nes couleurs, boutons de sortie et un bouton par d\'82faut \'82ventuel. Libre \'85 
vous de mettre en oeuvre les menus POP_UP du FALCON , les USERDEFS et autres...\
	Notez que l'\'82paisseur du cadre du formulaire doit \'88tre au moins \'82gal \'85 2 pour les boites en 3D, il 
est \'82galement possible de lui donner une \'82paisseur de 3 si l'on veut que ce cadre soit visible dans la fe
n\'88tre.\
\
\f21\fs28 Les extensions :\f7\fs24\
\
	WINDFORM_DO permet des commandes \'82tendues, tout d'abord pour les champs \'82ditables avec 
le positionnement du curseur en d\'82but ou en fin de champ par les touches "Control" + les touches  cur
seur gauche et droite, sauter un mot par la touche "Shift" + ces m\'88me touches curseur et positionner le 
curseur sur une lettre avec la souris.\
\f21\fs28 Les Raccourcis clavier :\f7\fs24\
\
	Ils sont trait\'82s pour les Boutons dont l'OB_TYPE \'82tendu comporte la valeur 18 et la lettre concer
n\'82e doit \'88tre pr\'82c\'82d\'82e du symbole "\f9 [\f7 " standard. Dans ces conditions le dessin et le comportement de ces 
boutons est tout \'85 fait conforme aux boutons du GEM par le truchement de la routine \f9 USERDEF\f7  four
nie ici, avec l'affichage du raccourci par un soulignement. Les flags 3D du nouveau TOS sont \'82galement 
pris en compte (\f9 ob_flags 9\f7  et\f9  ob_flags 10\f7 ), seul l'\'82tat SHADOWED n'est pas trait\'82 par la routine (faute 
d'avoir eu le temps de m'en occuper). J'ai cependant dot\'82 cette routine d'une possibilit\'82 suppl\'82mentai
re, accessible en donnant la valeur 22 au lieu de 18 pour l'OB_TYPE \'82tendu, et qui affiche alors un 
"\f9 mini bouton\f7 " (d\'82crit un peu plus bas).\
\
\ul Les valeurs utilis\'82es :\ul0\
\
	Afficher des raccourcis clavier dans des boutons transform\'82s en USERDEFS est une chose, en 
assurer la d\'82tection dans la routine de gestion en est une autre. On pourrait penser qu'il suffit de d\'82tec
ter la valeur 18 pour d\'82cider que le bouton puisse comporter un raccourci clavier, mais on se retrouve 
alors limit\'82 \'85 un seul type de bouton; rajouter des tests sur d'autres valeurs est tout aussi limitatif, et de 
plus il faudrait encore d\'82cider quelle seraient les valeurs \'85 employer.\
	J'ai donc opt\'82 pour le syst\'8Ame suivant : La valeur 18, pr\'82conis\'82e par INTERFACE pour les rac
courcis clavier, positionne le bit Num\'82ro 1 de OB_TYPE \'82tendu (valeur 2), la d\'82tection des raccourcis 
clavier se fera donc en testant si ce bit est \'85 1, ce qui nous laisse une belle brochette de valeurs pour les 
routines de boutons avec raccourcis que nous pourrons impl\'82menter.\
\
\f9\ul Les "mini boutons" :\f7\ul0\
\
	Cette possibilit\'82 est accessible en donnant une valeur de 22 \'85 l'OB_TYPE \'82tendu au lieu de 18, on 
a alors acc\'82s \'85 un bouton GEM de taille r\'82duite et dont le texte est affich\'82 avec la plus petite fonte sys
t\'8Ame (fonte des Ic\'93nes de hauteur \f9 4\f7 ). Il sera par contre utile, dans ce cas, de r\'82duire la largeur du bou
ton lors de l'\'82dition du ressource.\
\
\f9\ul Les routines USERDEFS :\f7\ul0\
\
	-\f9 set_user()\f7  : Cette routine parcours le formulaire \'85 la recherche des objets \'85 transformer en 
USERDEFS et appelle, dans ce cas, la routine \f9 set_objc()\f7  qui r\'82alise cette transformation, en lui trans
mettant l'adresse de l'objet et l'adresse de la routine de dessin \'85 utiliser (\f9 under_button()\f7  ).\
	Une particularit\'82 du TOS 4.02 fait que les flags 3D ne sont pas directement utilisables; ils sont 
donc automatiquement d\'82plac\'82s dans \f9 ob_flags 11\f7  et \f9 ob_flags 12\f7  si n\'82c\'82ssaire.\
Ces flags sont d\'82finis au d\'82but du fichier \f9 WINDFORM.C\f7  par USR_INDICATOR et USR_ACTIVA
TOR.\
\f21\fs28\column
Les Accessoires :\f7\fs24\
\
	Le fichier \f9 ACC_FORM.C\f7  est un squelette pour la programmation d'un accessoire utilisant les rou
tines \f9 WINDFORM\f7 . L'utilisation d'une allocation dynamique de m\'82moire \'82tant d\'82conseill\'82e dans le cas 
d'un accessoire, il suffit alors de r\'82server un tableau de structures \f9 USERBLK\f7  dont le nombre d'\'82l\'82
ments sera au moins \'82gal au nombre de boutons contenu dans le Ressource. La fonction \f9 set_objc()\f7  doit 
dans ce cas \'88tre modifi\'82e en cons\'82quence, une variable globale sera alors utilis\'82e, comme compteur, 
pour indexer ce tableau d'USERBLKs et incr\'82m\'82nt\'82e apr\'8As chaque transformation en USERDEF.\
\f21\fs28\
Annexe :\f7\fs24\
\
	Le fichier "\f9 USAGE\f7 " est destin\'82 \'85 l'utilisateur de votre programme et est pr\'82vu pour \'88tre incorpor\'82 
dans le Manuel de celui_ci.\
\
\f21\fs28 Les d\'82fauts :\f7\fs24\
\
	Malgr\'8As une \'82tude approfondie, je n'ai pu \'82viter un ph\'82nom\'8Ane de non_r\'82apparition du curseur  
d'\'82dition dans certains cas, assez rares il est vrai. Si cela se produit, il suffit d'activer une autre fen\'88tre 
puis de r\'82activer la fen\'88tre de dialogue en cliquant dessus (ceci peut se produire si une fen\'88tre \'85 \'82t\'82 
d\'82plac\'82e sur notre fen\'88tre de dialogue puis red\'82plac\'82e compl\'8Atement en dehors de celle_ci, puis 
ferm\'82e, autant dire qu'il faut presque le faire expr\'8As).\
\f21\fs28\
Le Programme d'exemple :\f7\fs24\
\
	Ce programme est founi sous la forme de  plusieurs fichiers source :\
\li680\fi-680 	- \f9 WINDFORM.C \f7 : Contient les routines de gestion du dialogue ainsi que \f9 rc_intersect()\f7  et 	
\f9 stdkey()\f7 . \f9 Ce fichier est  pr\'82vu pour \'88tre incorpor\'82 directement dans un projet logiciel\f7 .\
	 \f9 ATTENTION\f7  : Ce fichier utilise des variables externes d\'82finies dans le programme principal et il 
vous faudra mettre les noms des variables concern\'82es en concordance.\
\
	- \f9 WINFDEMO.C\f7  : Le programme d'exemple proprement dit.\
	\f9 ATTENTION\f7  : V\'82rifier dans votre fichier \f9 AES.H\f7  si la structure utilis\'82e par votre version de PURE 
C se nomme \f9 _GemParBlk\f7 ; Si elle se nomme \f9 _VDIParBlk\f7  , alors mettez en service la ligne de 
red\'82finition situ\'82e au d\'82but du fichier \f9 WINDFORM.H\f7 .\
\
\li567\fi-567 	- \f9 WINDFORM.H\f7  contient les prototypes des fonctions et les d\'82clarations utilis\'82es pour la gestion 
des dialogues.\
\li680\fi-680\
	- \f9 ACC_FORM.C\f7  : Squelette d'un accessoire utilisant les routines WINDFORM.\
\li0\fi0\
\f15\fs36 A bient\'93t, Jacques Delavoix.
}