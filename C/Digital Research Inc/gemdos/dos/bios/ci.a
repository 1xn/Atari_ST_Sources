/*  ci.ps - common interrupt handler					*/

#include	"ps.h"
#include	"ivec.h"


	EXTERN	_kpanic
	EXTERN	_kprintf


/*
**  CVEC - common vector entry point.
**	'n' is the 'id' of the interrupt vector, which is the index into
**	civtab, which defines the address of the hardware and logical 
**	interrupt handlers for the device.  The code saves d0, loads d0 with
**	this index, then goes to the common interrupt handler
*/

#define	CVEC(x,n)\
x:\
	PUSH(l,d0)\
	move.l	#n,d0\
	bra	commintr


	.data
/*
**  civtab - common interrupt vector table
**	initialized to handle spurious interrupt for the entries, they are
**	replaced with 'real' addresses by the setvec routine
*/

civtab	= 	(*)			*  common intr vect tab
	COVEC	= (*)-civtab					* offset
	.dc.w	KBDVECNO				*  vector nbr
	COCISR	= (*)-civtab					*  offset
	.dc.l	VECkbd					*  comm isr entry pt.
	COPISR	= (*)-civtab					*  offset
	.dc.l	nopint					* physical
	COLISR	= (*)-civtab					*  offset
	.dc.l	nolint					* logical
	TBESIZ	=	(*) - civtab				* size of entry

	.dc.w	SIOVECNO
	.dc.l	VECsio
	.dc.l	nopint
	.dc.l	nolint

	.dc.w	TIMVECNO
	.dc.l	VECtim
	.dc.l	nopint
	.dc.l	nolint

	.dc.w	-1			*  end of table; must be -1 !


PIV	=	0			*  offset for physical vectors
LIV	=	4			*  offset for logical vectors


/*
**  nopmsg - no physical interrupt vector panic message
*/

nopmsg:	.dc.b	'UnInitialized Physical Interrupt; index = %x'
	.dc.b	0

/*
**  pmsg - message for panic
*/

pmsg:	.dc.b	'Unable To Continue'
	.dc.b	0

	.text

/*
**  _ciiinit - init common interrupt vector logic
**	save any special vectors in the vect page, init the page with our own
**	uninit intr handler, restore any special vectors, then init vectors
**	that we want to use the common interrupt logic.
*/

	GLOBAL	_ciiinit
_ciinit:
	move.l	$138,-(sp)		*  save vme-10 abort button intr vector

	move.l	#$100,a0		*  start with 1st user vector
	move.l	#nopint,a1		*  address of uninit inter handler
ciilp1:
	move.l	a1,(a0)+		*  set new vector and bump ptr
	cmp.l	#$400,a0		*  check for upper bounds
	blt	ciilp1			*  branch if it has lettuce & tomato

	move.l	(sp)+,$138		*  restore abort button intr vector

**
**	for each entry in the civtab, 
**		get the intr vec no, replace the corr vect with the comm intr
**		addr.
**

	move.l	#civtab,a0		*  start addr of table
	move.w	#-1,d1			*  d1 = terminator
ciilp2:
	cmp.w	(a0),d1			*  end of table
	beq	cii1			*    exit loop

	move.w	(a0),d0			*  d0 = int vec no
	ext.l	d0	
	lsl.l	#2,d0			
	exg	d0,a1			*  a1 = int vector addr
	move.l	COCISR(a0),(a1)		*  move comm isr entry point to vector
	adda.l	#TBESIZ,a0		*  bump to next entry
	bra	ciilp2			*  repeat
cii1:
	rts

/*
**  CVEC - Common Int Vector individual entry points
**	these macros (defined above) create entry points which load d0
**	with the index into civtab for the particular interrupt, then
**	branch to commintr.
*/

CVEC(VECkbd,KBDVECNO)

CVEC(VECsio,SIOVECNO)

CVEC(VECtim,TIMVECNO)

/*
**  commintr - common entry point for comm interrupt routines.
**	calls physical interrupt handler, then logical interrupt handler, 
**	both defined in civtab.
**  entry:
**	d0.w has vector number for interrupt
**  exit:
**	void
*/

commintr:
	movem.l	d1-d7/a0-a6,-(sp)	*  save the rest of the registers

	bsr	gettab			*  get addr of entry

	PUSH(l,a0)			*  save addr of entry
	move.l	COPISR(a0),a1		*  get addr of phys intr handler
	jsr	(a1)			*  call it
	POP(l,a0)			*  restore addr of entry

	move.l	COLISR(a0),a1		*  get addr of logical intr handler
	jsr	(a1)			*  call it

	movem.l	(sp)+,d1-d7/a0-a6	*  restore group-saved regs

	POP(l,d0)			*  restore orig d0 save at entry pt
	rte

nopint:
	move.w	d0,-(sp)		*  index into table
	move.l	#nopmsg,-(sp)		*  address of message
	bsr	_kprintf		*  displ msg
	
	move.l	#pmsg,-(sp)		*  msg for panic
	bsr	_kpanic			*  panic and halt

nolint:
	rts


/*
**  _hsetv - set hardware vector for those intr using the common intr handler
**  _lsetv - set logical  vector for those intr using the common intr handler
**	invocation:
**
**		PISR	hsetv( v , addr )
**		PISR	lsetv( v , addr )
**
**		int	v ;			interrupt vector no	
**		PISR	addr ;			addr of hdw isr	
**
**  returns
**	NULL	if fail (bad vec no)
**	else addr of current entry, to be reset when thru
**
*/

	GLOBAL	_hsetv
_hsetv:
	move.l	#PIV,d2		*  d2 = index
	bra	setv


	GLOBAL	_lsetv
_lsetv:
	move.l	#LIV,d2		*  d2 = index
	bra	setv
/*
**  _hgetv - get hardware vector for those intr using the common intr handler
**  _lgetv - get logical  vector for those intr using the common intr handler
**	invocation:
**
**		PISR	hgetv( v )
**		PISR	lgetv( v )
**
**		int	v ;			interrupt vector no	
**		PISR	addr ;			addr of hdw isr	
**
**  returns
**	NULL	if fail (bad vector nbr)
**	else addr of current entry, to be reset when thru
**
*/


	GLOBAL	_hgetv
_hgetv:
	move.l	#COPISR,d2		*  d2 = offset for physical isr
	bra	getv


	GLOBAL	_lgetv
_lgetv:
	move.l	#COLISR,d2		*  d2 = offset for logical isr
	bra	getv
	
/*
**  setv - does the dirty work for _hsetv and _lsetv, then returns
**  getv - like setv, but only gets the vector.
**  on entry:
**	d2 = offset for isr addr (COPISR or COLISR)
**  reg usage:
**	d0 = intr vector nbr
**	d1 = 0 if set, otherwise get only
**	a1 = new addr (for set)
**  on exit:
**	d0 = 0 if vector accepted and set
**	d0 = -1 if vector not accepted
*/
setv:
	movea.l	6(sp),a1		*  a1 = the new addr
	move.w	0,d1			*  flag for set
	bra	sgcomm

getv:
	move.w	1,d1			*  flag for get only

sgcomm:
	move.w	4(sp),d0		*  get intr vect nbr
	bsr	gettab			*  a0 => entry
	cmpa.l	#0,a0			*  if valid, 
	bne	sv			*    continue

	move.l	#0,d0			*  set fail
	bra	svx			*  and exit

*	sv - a0 => entry for table, d2 = offset into table for h/l isr addr
sv:
	move.l	(a0,d2),d0		*  get current contents for return
	cmpi.w	#0,d1			*  if get only
	bne	svx			*    exit now

	move.l	a1,(a0,d2)		*  set new addr

*	svx - d0 has 0 if fail, else old contents of table entry
svx:
	rts
	

/*
**  gettab - get a pointer to an entry in civtab, given a key.
**	entry:
**		d0.w = interrupt vector nbr
**	exit:
**		a0 => table entry
*/

gettab:
	PUSH(w,d1)		*  save d1.w
	move.w	#-1,d1		*  end of table marker
	move.l	#civtab,a0	*  tbl ptr.

gtloop:
	cmp.w	(a0),d1		*  is this the end, my friend?
	  beq	gterr		*  if so, exit with err
	cmp.w	(a0),d0		*  is this a match?
	  beq	gtxit		*  if so, exit with a0 => entry
	adda.l	#TBESIZ,a0	*  add entry size to ptr to get next entry
	bra	gtloop		*  and repeat

gterr:
	move.l	#0,a0		*  error exit
	bra	gtxit
gtxit:
	rts


	.end

