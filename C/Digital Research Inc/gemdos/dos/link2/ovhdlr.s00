*
*	Overlay handler modified from cpm version
*	Jan 9, 1986 	MLC  Ported to GEMDOS.
*	Jan 24, 1986	MLC  change overlay table.  Also there is only
*		one overlay file now. So the access scheme is changed.
*
*
*	GEMDOS Function Definitions
*
pterm0	   =	0			* terminate the program func code
cconws     =	9			* console string write func code
fopen	   =   61			* file open func code, 3d
fclose	   =   62			* file close func code, 3e
fseek	   =   66			* seek func code, 42 hex
*
.globl	_ovhdlr
.globl	_$OVEX$
.xdef	_loadr
	.text
*
_ovhdlr:
 	move.w	sr,savecc		* save condition codes for 68000
*	move	ccr, savecc		* save condition codes for 68010,20
	movem.l	d1-d7/a0-a6,saver	* save all registers
	movea.l	(a7)+,a6		* pop pointer to inline parameter
	move.l	#4,d6			* adjust return address
	add.l	a6,d6			*  to skip over table pointer
	move.l	d6,-(a7)		* push return address
*
*	overlay table:		_________________________
*			0	| addr of basepg +2c	| pt to envir str
*				-------------------------
*			4	| overlay file name	| 16 bytes
*				-------------------------
*			0x14	| addr of overlay table	|
*				-------------------------
*			0x18	| offset of overlay file| from which to be load
*				-------------------------
*			0x1c	| Load address		| to which ovly loads
*				-------------------------
*	These three fields |-->	| addr of overlay table	|
*	exist in the table |    -------------------------
*	for every overlay  |	| offset of overlay file|
*	entries.           |	-------------------------
*			   |-->	| load address		|
*				-------------------------
*				|	.....		|
*					.....
*					.....		
*	Overlay table contains the address of basepage +2c (pt to envir str),
*	and the overlay file name at the header, for each overlay entry,
*	it provides the addr of the overlay table, offset of the overlay file
*	which the overlay segment will be loaded from, and the load address
*	to which the overlay segment will be loaded.  These code was added for
*	gem applications.  For the default directory maybe different from
*	the one application or overlay file resides.  The environment string
*	need to be searched to find the right directory to open the overlay
*	file,  then we move to the offset(from beginning of the overlay file),
*	we load it to the load address specified.
*
    	movea.l	(a6), a6		* get ovl entry address
    	move.l	(a6)+, tblhd		* addr of table head
    	move.l	(a6)+, d5		* offset of the ovly file
    	cmp.l	oldadd,d5		* was it loaded before?
    	beq	done			* nothing needed to be done
    	move.l	d5,    offset		* keep it in offset
    	move.l	(a6),  lowadr		* load address
    	move.b	ovfl_fd, d5		* overlay file found before?
    	tst.b	d5
    	bne	open_file		* if so, need not find it,just open it
*
*	search the overlay file in default directory first, if not found, then
*	search the environment string: first find the key word 'PATH=',
*	if found, a6 will point to the envir. string.
*
    	lea.l	pathnm, a3		* a3 contains the addr of path name
    	bra	ok			* search default directory
env_serch:
    	move.b	#1, path_sch		* indicate the path is being searched
    	movea.l tblhd, a6		* addr of overlay table
    	move.l	(a6),  a6		* get addr of basepage + 2c
    	move.l	(a6),  a6		* get environment str pointer
* 	try to find key word 'PATH', stop when find 2 consecutive null
serch_s:  	
    	tst.b	(a6)			* if it points to null?
    	bne	serch_p			* if not, search for 'P'
    	tst.b	(a6)+			* just advance a6
    	tst.b	(a6)			* if it is the consecutive null?
    	bne	serch_p			* no, go search for 'P'
no_path:				* it is end of env. str., goto no_path
    	move.b	#1,  last_sch		* no path was found, no need to seach
    	bra	ok
serch_p:
    	cmpi.b	#80, (a6)+		* compare with 'P'
    	bne	serch_s
    	cmpi.b	#65, (a6)+		* compare with 'A'
    	bne	serch_s
    	cmpi.b	#84, (a6)+		* compare with 'T'
    	bne	serch_s
    	cmpi.b	#72, (a6)+		* compare with 'H'
    	bne	serch_s
    	cmpi.b	#61, (a6)+		* compare with '='
    	bne	serch_s
path_loop:
    	move.b	(a6)+, d6
    	cmpi.b	#59,  d6		* compare with ';'
    	beq	concat
    	move.b	d6,  (a3)+		* move the char into a3
    	tst.b	(a6)			* if next char is null, no need to loop
    	bne	path_loop
    	move.b	#1, last_sch		* it is the last search
concat:
    	cmpi.b	#92, -1(a3)		* if the last char is a '\'?
    	beq	ok			* no need to put a \ between path and nm
    	move.b	#92, (a3)+		* put a \ before putting file name
ok:
    	movea.l tblhd, a5		* addr of table head
    	addq.l	#4,	a5		* addr of overlay file name
    	move.l	a5,	ovfna		* remember the overlay file name addr
    	move.w	#15,	d5		* at most 16 times for moving the name
mv_nm:
    	tst.b	(a5)			* if null, it is the end of name str
    	beq	check_nm
    	move.b	(a5)+, (a3)+		* move file name into pathnm
       	dbf	d5, mv_nm
check_nm:
   	cmpi.b	#0, -1(a3)		* if the last char is not null
    	beq	open_file
    	move.b	#0, (a3)		* move null into pathnm
open_file:
    	move.l	a6, -(a7)		* save a6
    	move.w	#0, -(a7)		* read access
    	pea.l	pathnm			* file name
    	move.w	#fopen,	-(a7)		* fopen fun code
    	trap	#1
    	addq.l	#8, a7			* pop parameters
    	move.l	(a7)+, a6		* restore a6
    	tst.l	d0			* if successful?
    	bge	file_fd
    	cmpi.l	#-35, d0
    	beq	nohdle
    	cmpi.l	#-36, d0
    	beq	noaccs
    	move.b	last_sch, d5		* if this is the last search
    	tst.b	d5
    	bne	openerr			* could not find overlay file
    	lea.l	pathnm, a3		* reinitial a3
    	move.b	path_sch, d5
    	tst.b	d5
    	beq	env_serch		* if path hasn't been searched
    	bra	path_loop		* more directory to try    	
file_fd:
    	move.b	#1, ovfl_fd
    	move.w	d0, flhd		* file handle
seek:	
    	move.w	#0, -(a7)		* seek from the beginning of ovly file
    	move.w	flhd, -(a7)		* file handle
    	move.l	offset, -(a7)		* offset
    	move.w	#fseek, -(a7)		* f_seek fun code
    	trap	#1
    	add.l	#10, a7
    	tst.l	d0
    	blt	seekerr
    	
*
*	GET FILE NAME AND LOAD PT
*
*
*	FILL THE LPB
*
    	lea	flhd, a0		* a0 contains address of fild handle
	lea	ovbspg,a3		* get address of input buffer 
	move.l	a3,baspag		* put it in LPB
	jsr	_loadr			*load the module
    	move.l  d0, -(a7)		* save the return code d0 on stack

*
*	CLOSE THE FILE
*	
    	move.w	flhd,  -(a7)		* file handle
    	move.w	#fclose, -(a7)		* f_close func code
    	trap	#1
    	addq.l	#4, a7			* pop parameters
    	tst.l	d0			* test return code
    	bne	closerr			* not alright, goto closerr
    	move.l	(a7)+, d0		* pop d0 from stack
	tst.l	d0			*was the load successful?
	bne	lderr			*if not then print error message
    	move.l	offset, d5		* update oddadd
    	move.l	d5,	oldadd
*
*	RESTORE AND RETURN
*
done:	movem.l	saver,d1-d7/a0-a6	* restore all registers
	move.w	savecc,ccr		* restore condition codes for 68000
*    	move	savecc, ccr		* restore condition codes for 68010,20
_$OVEX$:
	rts
*
*	PRINT ERROR MESSAGE
*
openerr:
	move.l	ovfna,-(a7)	*get address of filename
	move.l	#openmsg,-(a7)	*get address of error message 
	jsr	_ov_err		*to be printed
    	bra	cmdrtn
nohdle:
	move.l	ovfna,-(a7)	*get address of filename
    	move.l	#hdlemsg, -(a7)	*get addr of error message
    	jsr	_ov_err
    	bra	cmdrtn
noaccs:
	move.l	ovfna,-(a7)	*get address of filename
    	move.l	#accmsg, -(a7)	*get addr of error message
    	jsr	_ov_err
    	bra	cmdrtn
closerr:
	move.l	ovfna,-(a7)	*get address of filename
    	move.l	#closmsg, -(a7) *get addr of error message
    	jsr	_ov_err
    	bra	cmdrtn
seekerr:
	move.l	ovfna,-(a7)	*get address of filename
    	move.l	#seekmsg, -(a7)
    	jsr	_ov_err
    	bra	cmdrtn
lderr:
	move.l	ovfna,-(a7)	*get address of filename
	move.l  #loaderr,-(a7)	*get address of error message 
    	jsr	_ov_err
cmdrtn:
    	move.w	#pterm0, -(a7)
    	trap	#1
*
*	DATA
*
	.data
*
*	ERROR MESSAGE STRINGS
*
	.even
oldadd: 	.dc.l	1	* offset for last loaded overlay, initially 
*    				 put and odd offset 1, so it's impossible.
path_sch:	.dc.b	0
ovfl_fd:	.dc.b	0
last_sch:	.dc.b	0
loaderr:	.dc.b  'Error Loading Overlay File ',0
openmsg:	.dc.b  'Unable to Open Overlay File ',0
hdlemsg:	.dc.b  'No file handle left for file ',0
accmsg:		.dc.b  'Access denied for file ',0
closmsg:	.dc.b   'Invalid file handle for closing file ', 0
seekmsg:	.dc.b   'Error positioning overlay file ',0
*
*	BSS
*
	.bss
	.even
ovfna:	.ds.l	1		* overlay file name address.
saver:	.ds.l	14
savecc:	.ds.w	1
ovbspg:	.ds.w	64		* input buffer (like basepage) for loadr
*
*	FILE CONTROL BLOCK
*
	.even
tblhd:	.ds.l	1
offset:	.ds.l	1
pathnm:	.ds.b	64
cr:	.ds.b	1
*
*	LOAD PARAMETER BLOCK
*	If the following label and storage size are changed, the offsets
*	defined in loadr needs to changed too.
    	.even
flhd:	   .ds.w	1      *file handle of program file
lowadr:    .ds.l	1      *Low boundary of area in which to load program
baspag:	   .ds.l	1      *Base page address of loaded program
	.end
