========================================================================
= Nothing ==============================================================
========================================================================

; Nothing tut gar nichts  

   jmp 0

Dieses Programm tut nichts. Es eignet sich zur Programmentwicklung.
Zur gleichen Kategorie gehoert Block.

;Block

   TOP   JMP   BTM
   BTM   JMP   TOP


========================================================================
= KNIRPS ===============================================================
========================================================================

;knirps

   mov   0  1
   
Der Knirps ist ein Programm, dass sich selber weiterkopiert.
Durch mov 0 1 wird bewirkt das der Inhalt der Speicherstelle
die 0 Speicherplaetze entfernt ist, also die MOV-Speicher-
stelle eine Speicherstelle weiter kopiert wird. Wenn MARS das 
Programm das naechste mal abarbeitet wird der Befehlszeiger
um eins erhoeht und befindet sich somit auf der kopierten
Speicherstelle.
Trifft der Knirps auf ein gegnerisches Programm so ueberschreibt
er dessen erste Zeile usw. Wird nun das gegnerische Programm
ausgefuehrt so zeigt dessen Befehlszeiger auf eine Adresse wo
vorher eigner Code stand der jetzt mit dem Knirps ueberschrieben
wurde. Folglich existiert auf dieser Speicherstelle eine aus-
fuehrbare Anweisung das gegnerische Programm ist zum Knirps 
geworden. Wenn jetzt keine Splits mehr existieren ist das
Spiel unentschieden ausgegangen, da zwei Knirpse durch den
Speicher laufen, die sich nicht gegenseitig zerstoeren koennen.
Das Spiel ist dann Unentschieden. 


========================================================================
= MINID ================================================================
========================================================================

      DAT   -1
START MOV   #0    <-1
      JMP   START

MINID ist ein typischer Vertreter der 'Nullen-Bomber'-Klasse. Dies sind
Programme, welche den Speicher in bestimmten, meist regelmaessigen Ab-
staenden mit Null-Bomben fuellen, in der Hoffnung, dabei auch mal den 
Gegner zu treffen. MINID stellt uebrigens das kuerzeste Programm dieser 
Art dar.

Dabei geht MINID folgendermassen vor: Durch MOV #0 <-1 wird eine Null 
in das B-Feld derjenigen Speicherstelle geschrieben, welche durch den 
Inhalt der DAT-Zeile bestimmt ist. Vor Ausfuehrung dieses Befehls steht 
in der DAT-Zeile der Wert '-1'. Da der MOV-Befehl fuer die Zieladresse 
die Adressierungsart auto-decrement verwendet, wird der Inhalt der DAT-
Zeile vorher noch um 1 vermindert, d.h. auf '-2' geaendert. Der Befehl 
MOV #0 <-1 schreibt also eine Null an die Adresse, die 2 Speicherstellen 
VOR der DAT-Zeile liegt.

Der naechste Befehl - JMP START - fuehrt wieder zu dem MOV-Befehl zu-
rueck. Die DAT-Zeile wird wieder um eins vermindert, und auch an diese 
Adresse wird eine Null geschrieben usw. usw. 

MINID legt also hinter sich einen dichten Teppich von Null-Bomben. Wird 
dabei das untere Ende des Speichers erreicht, so macht das Programm an-
schliessend an dessen oberen Ende weiter. Dies ergibt sich aus der 
ringfoermigen Struktur des 'Schlachtfeld'-Speichers.

Was passiert nun, wenn der Bombenteppich den Aufenthaltsort von MINID 
selbst erreicht? Um es vorwegzunehmen:  MINID uebersteht dies 
unbeschadet... Irgendwann wird MINID eine Bombe in den eigenen JMP-
Befehl schiessen. Da die Null jedoch ins B-Feld der Zieladresse ge-
schrieben wird, und das B-Feld fuer den JMP-Befehl bedeutungslos ist, 
passiert hierbei nichts. 
Beim naechstenmal allerdings landet die Bombe dann im B-Feld des MOV-
Befehls.
   Aus dem Befehl            MOV #0 <-1
   wird dann ploetzlich      MOV #0 <0  
Wird dieser - veraenderte - Befehl ausgefuehrt, so geschieht folgendes:
Zuerst wird die 0 seines zweiten Operanden wieder zu '-1' ( auto-decre-
ment! ). Die Zieladresse fuer die Bombe ist also das B-FELD DER DAT-ZEILE.
Bevor nun die naechste Bombe verschossen wird, wird der Inhalt der DAT-
Zeile von 0 zu -1, wir haben den Anfangszustand erreicht, und das Spiel-
chen nimmt seinen Lauf.
========================================================================
= FACTA NON VERBA ======================================================
========================================================================

;FACTA

START    MOV   IMP   900
LOOP     MOV   #0    START
         MOV   #0    START
         MOV   #0    START
         MOV   #0    START
         SPL   895
         JMP   LOOP
IMP      MOV   0 1


FACTA NON VERBA wie auch LOCUST ist ein Programm, das Knirpse in Be-
wegung setzt. 
Zuerst wird ein Knirps 900 Speicherplaetze weiter kopiert. Danach geht
das Programm in eine Schleife ueber. Zuerst wird viermal hintereinander 
auf den START-Speicherplatz eine 0 geschrieben, um Knirpse abzufangen.
Der danach folgende SPLIT spaltet die Programmausfuehrung. Zuerst wird
der am Anfang kopierte Knirps losgeschickt und danach die Schleife mit
den MOV #0 START  Befehlen durchlaufen. Danach wieder ein Knirps los-
geschickt usw...
Durch den SPLIT-Befehl wird die Befehlsausfuehrung auf immer mehr
Teilprozesse verteilt, so das der LOOP der ja Knirpse abfangen soll
immer seltener zum Zug kommt und die Verteidigung gegen die Knirpse
schwaecher wird. 
FACTA NON VERBA ist ein Programm, das nicht gewinnen kann, da es nur 
Knirpse losschickt durch die das Spiel nur unentschieden ausgehen 
kann. Dies aber mit sehr hoher Wahrscheinlichkeit, da mit zunehmender
Programm dauer immer mehr schwer zu treffende Knirpse durch den Speicher 
laufen.  



========================================================================
= CHANG1 ===============================================================
========================================================================
;chang1

       MOV   #0       -1
       JMP   -1
       DAT            9
START  SPL   -2
       SPL   4
       ADD   #-16     -3
       MOV   #0       @-4
       JMP   -4
       SPL   2
       JMP   -1
       MOV   0        1


Chang1 besteht aus drei Elementen:
   
   1. Versucht es Knirpse abzufangen
   2. Verschiesst es ungueltige Befehle
   3. Schickt es Knirpse los
   
Beim ersten SPLIT-Befehl in der START-Zeile wird der MOV-Stopper 
aktiviert. Beim zweiten SPLIT wird die Schleife die Nullen ver-
schiesst aktiviert und durch den dritten SPLIT werden Knirpse
losgeschickt.
Ein echter SPLITTER moechte man sagen, es passiert viel, wenn auch
zunehmend langsamer.




========================================================================
= PARASIT ==============================================================
========================================================================
;PARASIT


      DAT  #11
      DAT  #-2
START SPL  $5
     ;-------------- Schleife prueft Speicherplaetze hinter PARASIT    
      JMZ  $2    @-3
      SPL  @-4
      ADD  #1    $-5
      JMP  -3
     ;-------------- Schleife prueft Speicherplaetze vor PARASIT
      JMZ  $2    @-6
      SPL  @-7
      SUB  #1    -8
      JMP -3

PARASIT ist ein Programm das die Speicherplaetze vor und hinter sich 
ueberprueft. Mittels des JMZ-Befehls wird festgestellt ob eine 
Speicherstelle den Wert 0 hat. Ist dies der Fall wird die Ausfuehrung 
an die Adresse des A-Arguments uebergeben. Bezogen auf die erste 
Schleife heisst dies es wird der ADD-Befehl ausgefuehrt, durch die 
erste DAT-Zeile um 1 erhoeht wird. Trifft das Programm bei seiner 
Abarbeitung auf eine nicht leere Speicherstelle, so wird der SPL-Befehl
ausgefuehrt. Dadurch beteiligt sich PARASIT an der Abarbeitung des 
gegnerischen Programms und macht seinem Namen alle Ehre.
PARASIT ist ein Virus-Programm, dass nicht versucht andere Programme 
direkt zu treffen, sondern versucht deren Code fuer sich zu verwenden. 
Inwieweit dies gelingt haengt natuerlich davon ab auf welchen Befehl
der SPL-Befehl trifft.




========================================================================
= COMANNDO =============================================================
========================================================================
;COMMANDO

      MOV   0     -1       ; Knirps-Stopper
      JMP   -1
   ;---------------------     
START SPL   -2
      MOV         IMP 123  ;Knirps wird kopiert
      SPL   122            ;und aktiviert
   ;---------------------
COPY  MOV   <LOC  <NEW     ;Das Programm kopiert sich selber
      CMP   LOC   #-12
      JMP   COPY
   ;--------------------
IMP   MOV   0     1
NEW   DAT   114
LOC   DAT   DUMMY
DUMMY DAT   0


COMMANDO aktiviert zuerst durch den SPL-Befehl einen Knirps-Stopper
und kopiert anschliessend einen Knirps 123 Speicherplaetze weiter.
Durch den naechsten Split wird der Knirps in Gang gesetzt und es
wird damit begonnen das Programm weiter zu kopieren. Ist dies
geschehen wird ein Knirps in Bewegung gesetzt.
Das kopierte Programm wird nicht aktiviert, was durch einen 
JMP-Befehl eigentlich leicht zu realisieren gewesen waere. Wahr-
scheinlich wollte Dewdney, von dem dieses Programm ist, nicht beim
letzten Turnier gewinnen (siehe Spektrum d. Wissenschaft 4/87). 
Im Programm COMMAND1 habe ich den JMP-Befehl eingefuegt. Das 
Programm erhaelt dadurch ein ganz anderes Verhalten.




========================================================================
= MICE =================================================================
========================================================================
;MICE

PTR     DAT    0              
START   MOV    #12    PTR
     ;-------------------        
LOOP    MOV    @PTR   <5      ;Schleife, die das Programm kopiert
        DJN    LOOP   PTR
     ;-------------------
        SPL    @3
        ADD    #653   2
        JMZ    -5     -6
        DAT    833

MICE erzeugt eine Kopie von sich selber 832 Speicherplaetze hinter sich.
Das Programm kopiert sich beginnend mit der letzen Zeile (DAT 833).
Jedesmal bevor der MOV-Befehl ausgefuehrt wird, wird mittels des auto-
dekrement-Arguments der Wert in der DAT 833 Zeile um eins erniedrigt.
Durch den DJN-Befehl wird der in der PTR-Zeile gespeicherte Wert um
1 erniedrigt. Dadurch wird solange kopiert, bis in der PTR-Zeile der
Wert 0 steht.
Danach wird durch den Split das neue Programm aktiviert und  
der Wert in der DAT-833-Zeile steht, um 653 erhoeht. Dies ist
die naechste Adresse auf die sich MICE kopiert. 
Bevor MICE mit der naechsten Kopie beginnt, wird geprueft, ob die PTR-
Zeile noch den Wert 0 enthaelt. Ist dies der Fall, wird mit der START-
Zeile fortgefahren. Steht dagegen auf diesem Speicherplatz ein anderer
Wert, so begeht MICE Selbstmord, indem es auf die DAT-Zeile laeuft.
Dadurch wird verhindert, dass ein anderes Programm, welches jetzt
auf dem PTR-Speicherplatz operiert, MICE fuer sich umdreht.
MICE ist der Sieger des letztjaehrigen Krieg der Kerne Turniers, dass
im Computermuseum in Boston stattfand. 
Das naechste Turnier wird im Herbst '87 stattfinden, dann wird sich
herausstellen ob MICE zu schlagen ist, denn bei den derzeitigen
Befehlssatz stellt MICE ein Optimum dar. Es ist kurz, kopiert sich
selber und versucht dem Gegner durch Selbstmord auszuweichen.

