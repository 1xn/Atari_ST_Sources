<html>
<head>
<title>BOB</title>
	<LINK REL="stylesheet" TYPE="text/css" href="../html/newsdk.css">
</head>
<body bgcolor="#ffffff">
<table width="100%" border="0">
  <tr bgcolor="#CCCCCC"> 
    <td><font size="+1" face="Arial, Helvetica, sans-serif"><b>BOB</b></font></td>
  </tr>
</table>
<pre>
Bob was written by:

	David Betz
	P.O. Box 144
	Peterborough, NH 03458
	(603) 924-4145

Bob is available free of charge for non-commercial use.  If you're
interested in using Bob commercially, please contact me at the above
address.

Bob Syntax:

<b>Class definition:</b>

  class &lt;class-name&gt; [ : &lt;base-class-name&gt; ]
    { &lt;member-definition&gt;... }

<b>Member definition:</b>

  &lt;variable-name&gt;... ;
  static &lt;variable-name&gt;... ;
  &lt;function-name&gt; ( [ &lt;formal-argument-list&gt; ] ) ;
  static &lt;function-name&gt; ( [ &lt;formal-argument-list&gt; ] ) ;

<b>Function definition:</b>

  [ &lt;class-name&gt; :: ] &lt;function-name&gt;
    ( [ &lt;formal-argument-list&gt; [ ; &lt;temporary-list&gt; ] )
    { &lt;statement&gt;... }

<b>Statement:</b>

  if ( &lt;test-expression&gt; ) &lt;then-statement&gt; [ else &lt;else-statement&gt; ] ;
  while ( &lt;test-expression&gt; ) &lt;body-statement&gt;
  do &lt;body-statement&gt; while ( &lt;test-expression&gt; ) ;
  for ( &lt;init-expression&gt; ; &lt;test-expression&gt; ; &lt;increment-expression&gt; )
    &lt;body-statement&gt;
  break ;
  continue ;
  return [ &lt;result-expression&gt; ] ;
  [ &lt;expression&gt; ] ;
  { &lt;statement&gt;... }
  ;

<b>Expression:</b>

  &lt;expression&gt; , &lt;expression&gt;
  &lt;lvalue&gt; = &lt;expression&gt;
  &lt;lvalue&gt; += &lt;expression&gt;
  &lt;lvalue&gt; -= &lt;expression&gt;
  &lt;lvalue&gt; *= &lt;expression&gt;
  &lt;lvalue&gt; /= &lt;expression&gt;
  &lt;lvalue&gt; %= &lt;expression&gt;
  &lt;lvalue&gt; &= &lt;expression&gt;
  &lt;lvalue&gt; |= &lt;expression&gt;
  &lt;lvalue&gt; ^= &lt;expression&gt;
  &lt;lvalue&gt; &lt;&lt;= &lt;expression&gt;
  &lt;lvalue&gt; &gt;&gt;= &lt;expression&gt;
  &lt;test-expression&gt; ? &lt;true-expression&gt; : &lt;false-expression&gt;
  &lt;expression&gt; || &lt;expresssion&gt;
  &lt;expression&gt; && &lt;expression&gt;
  &lt;expression&gt; | &lt;expression&gt;
  &lt;expression&gt; ^ &lt;expression&gt;
  &lt;expression&gt; & &lt;expression&gt;
  &lt;expression&gt; == &lt;expression&gt;
  &lt;expression&gt; != &lt;expression&gt;
  &lt;expression&gt; &lt; &lt;expression&gt;
  &lt;expression&gt; &lt;= &lt;expression&gt;
  &lt;expression&gt; &gt;= &lt;expression&gt;
  &lt;expression&gt; &gt; &lt;expression&gt;
  &lt;expression&gt; &lt;&lt; &lt;expression&gt;
  &lt;expression&gt; &gt;&gt; &lt;expression&gt;
  &lt;expression&gt; + &lt;expression&gt;
  &lt;expression&gt; - &lt;expression&gt;
  &lt;expression&gt; * &lt;expression&gt;
  &lt;expression&gt; / &lt;expression&gt;
  &lt;expression&gt; % &lt;expression&gt;
  - &lt;expression&gt;
  ! &lt;expression&gt;
  ~ &lt;expression&gt;
  ++ &lt;lvalue&gt;
  -- &lt;lvalue&gt;
  &lt;lvalue&gt; ++
  &lt;lvalue&gt; --
  new &lt;class-name&gt; ( [ &lt;constructor-arguments&gt; ] )
  &lt;expression&gt; ( [ &lt;arguments&gt; ] )
  &lt;expression&gt; -&gt; &lt;function-name&gt; ( [ &lt;arguments&gt; ] )
  &lt;expression&gt; '[' &lt;expression ']'
  ( &lt;expression&gt; )
  &lt;variable-name&gt;
  &lt;number&gt;
  &lt;string&gt;
  nil

<b>Lvalue:</b>

  &lt;variable-name&gt;
  &lt;vector-or-string-expression&gt; '[' &lt;expression&gt; ']'

<b>Global Variables:</b>

stdin		The standard input file pointer
stdout		The standard output file pointer
stderr		The standard error file pointer

<b>Runtime Routines:</b>

typeof(x)		Returns the type of its argument
newvector(s)		Returns a new vector of the specified size
newstring(s)		Returns a new string of the specified size
sizeof(x)		Returns the size of a vector or string
fopen(name,mode)	Opens a file (returns a file pointer)
fclose(fp)		Closes a file
getc(fp)		Gets a character from an open file
putc(ch,fp)		Writes a character to an open file
print(x)		Prints an object to stdout
getarg(n)		Gets argv[n]
system(cmd)		Executes a shell command
</pre>

</body>
</html>
