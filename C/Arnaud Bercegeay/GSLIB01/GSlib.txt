**************************************************************
GEMScript protocol for WinDom applications
Copyright (c) 2000-2001 Arnaud BERCEGEAY
**************************************************************

The package contains:

./
 gslib.h    : the header file
 gslib.c    : the source code of the GS lib
 gslib.txt  : that file
 gslib.a    : the lib for sozobonx
 makefile   : makefile for sozobonx
 gslib.lib  : the lib for pure C
 gslib.prj  : project for pure C

./contrib/
 gsrecv.c   : sources of "gsrecv"
 gsrecv.app : executable
 gsrecv.prj : project for pure c
 gssend.c   : sources of "gssend"
 gssend.ttp : executable
 gssend.prj : project for pure c

./gscript/
 gscript.hyp: 1st-guide version of the protocol GEMSCRIPT 1.20
 gscript.ref: translated in english by Peter West

**************************************************************
 What's in ?
**************************************************************

Some functions to use easily gemscript protocol.
You need the WINDOM lib (available for PureC, SozobonX, and
maybe GCC)

**************************************************************
  Functions
**************************************************************

The whole documentation is included in the gslib.h file.

Here are some examples:

----------------------------------------------------------
/* example 1 : just a command receiver */
int execute_command( void* gsc, int argc, char *argv[])
{
	if ( stricmp(argv[0],"command_name") == 0 ) {
		/* do something ... */
		GSSetCommandResult(gsc,"ok :)");
	} else {
		/* do nothing */
		GSSetCommandResult(gsc,"unknow command :(");
	}
}
main()
{
	GSInit(execute_command,0L);
	/* evnt_multi() loop */
	GSExit();
}
------------------------------------------------------------
/* example 2 : just a command sender */
main()
{
	GSInit(NULL,0L);
	/* evnt_multi loop */
	GSExit();
}
do_something()
{
	void* gsc = NULL;
	int other_apid = appl_find("LUNA    ");
	if (other_apid > 0) 
		gsc = GSOpen(other_apid);
	if (gsc) {
		/* send some commands */
		GSSendCommand(gsc,"New",0);
		/* and close the GS pipe */
		GSClose(gsc);
	}
}
------------------------------------------------------------
/* example 3: reply using an already opened pipe */
void *gl_gsc=NULL;
int execute_command( void* gsc, int argc, char *argv[])
{
	if ( stricmp(argv[0],"command_name") == 0 ) {
		/* do something ... */
		GSSetCommandResult(gsc,"ok :)");
		gl_gsc = gsc;
	} else {
		/* do nothing */
		GSSetCommandResult(gsc,"unknow command :(");
	}
}
main()
{
	GSInit(execute_command,0L);
	/* evnt_multi() loop */
	GSExit();
}
do_something()
{
	if (gl_gsc) {
		/* Share the GS pipe */
		GSShare(gl_gsc);
		/* send some commands */
		GSSendCommand(gl_gsc,"New",0);
		/* and unshare the GS pipe */
		GSClose(gl_gsc);
	}
}

**************************************************************
  Some rules
**************************************************************

I supposed you know the GEMSCRIPT protocol. No ? so read the
hypertext file in the gscript first !

Ok, now we can talk about gemscript messages.

When your application received a GS_COMMAND, the function
"execute_command" (the one you put as parameter in the
function GSInit()) is called.
Then, in that "execute_command" function, you can set the
returned value (string returned to the other application
in in GS_ACK message, in reply to the GS_COMMAND message).
So, while the "execute_command" function is running, no
GS_ACK message is sent back to the other application.
--> you must leave "execute_command" very quickly so that
your application (GSlib) can send the GS_ACK message.


**************************************************************
  History
**************************************************************

first developped as part of gemtidy.
Now (20th jan 2001), that lib seems to be stable. I decided to
write down each modification about that lib and the following
lines... This is the begin of the "GSlib" story :)

version (20th jan 2001) - not released
¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹
  add GSLIB_EVENT message

version (21th jan 2001) - not released
¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹
  add GSShare / GSUnShare functions

version (23th jan 2001) - not released
¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹
  fix minor bug in GS_ACK message (ptr_cmd was wrong)

version 001 (21th feb 2001)
¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹¹
  1st release: add __Ident_gslib[] string
  add PUREC support (thanks to Dominique BEREZIAT)
  

**************************************************************
  Contacts
**************************************************************

Author :
Arnaud BERCEGEAY <bercegeay@atari.org>
http://perso.wanadoo.fr/arnaud.bercegeay/

More about WinDom:
http://windom.free.fr

--
safinila