/* All of the prototypes */
/**************** First, PPP physical layer prototypes ************/
extern void ppp_in(void);
extern void ppp_out(void);
extern ULONG getinpkt(GPKT **inpkt, UWORD *buf_avail, BYTE **nextin,
                      UWORD *bufsize);
extern ULONG ppp_check_fcs(UBYTE *body, UWORD len);
extern UWORD receive_ppp_hdr(UWORD *fcs);
extern void ppp_kicker(void);

/***************** Test routines *****/
#ifdef LATTICE_TEST
/* For testing, maybe make file in/out routines */
#define CharAvailable CharAvailableTest
#define PortGetByte PortGetByteTest
#define PortSendByte PortSendByteTest
extern ULONG CharAvailableTest(DEV_LIST *port_list);
extern UBYTE PortGetByteTest(DEV_LIST *port_list);
extern void PortSendByteTest(DEV_LIST *bdev, UBYTE c);
#define ip_in(gpkt) delete_packet(gpkt, NI_FRAGMENT)
extern void main(void);
#endif

/***************** State machine prototypes ******************************/
extern void dummy(STATE_DATA *state, UBYTE *new_msg, UWORD protocol_offset);
extern void protocol_reject(UWORD protocol, UBYTE code, GPKT *data);
extern void code_reject(UWORD protocol, GPKT *data);
extern void ppp_state_machine(UWORD protocol, UBYTE code, GPKT *inpkt);
extern void start_next_protocol(STATE_DATA *state, UWORD protocol_offset);

/*********************** LCP-related prototypes *********************/
extern void sxup(STATE_DATA *state, UBYTE *new_msg, UWORD protocol_reject);
extern void sxterminate_request(STATE_DATA *state, UBYTE *new_msg,
								UWORD protocol_offset);
extern void sxconfigure_request(STATE_DATA *state, UBYTE *new_msg,
								UWORD protocol_offset);
extern void s68configure_ack(STATE_DATA *state, UBYTE *new_msg,
								UWORD protocol_offset);
extern void sxconfigure_nack(STATE_DATA *state, UBYTE *new_msg,
								UWORD protocol_offset);
extern void s9close(STATE_DATA *state, UBYTE *new_msg,
								UWORD protocol_offset);
extern void s9echo_request(STATE_DATA *state, UBYTE *new_msg,
								UWORD protocol_offset);
extern void ip_compression(STATE_DATA *state, UBYTE *new_msg,
								UWORD protocol_offset);
extern void ip_address(STATE_DATA *state, UBYTE *new_msg,
								UWORD protocol_offset);
extern void send_cfg_reject(UBYTE *option, UBYTE id, WORD len_left,
								UWORD protocol_offset);
extern void send_cfg_nak(STATE_DATA *state, UBYTE *option,
						 UBYTE id, WORD len_left, UWORD protocol_offset);
extern void send_cfg_req(STATE_DATA *state, UBYTE *new_msg,
								UWORD protocol_offset);
extern void reset_to6(STATE_DATA *state, UBYTE *new_msg,
								UWORD protocol_offset);

/**************** LCP Option field checking prototypes *****************/
extern ULONG invalid_opt(STATE_DATA *state, UBYTE *option_data);
extern ULONG validate_mru(STATE_DATA *state, UBYTE *option_data);
extern ULONG validate_accm(STATE_DATA *state, UBYTE *option_data);
extern ULONG validate_magicnum(STATE_DATA *state, UBYTE *option_data);
extern ULONG validate_auth(STATE_DATA *state, UBYTE *option_data);
extern ULONG validate_pfc(STATE_DATA *state, UBYTE *option_data);
extern ULONG validate_acfc(STATE_DATA *state, UBYTE *option_data);

/**************** LCP Ack verification prototypes **********************/
extern ULONG verify_mru(STATE_DATA *state, UBYTE *option_data);
extern ULONG verify_accm(STATE_DATA *state, UBYTE *option_data);
extern ULONG verify_magicnum(STATE_DATA *state, UBYTE *option_data);
extern ULONG verify_pfc(STATE_DATA *state, UBYTE *option_data);
extern ULONG verify_acfc(STATE_DATA *state, UBYTE *option_data);

/**************** LCP Option field negotiation prototypes **************/
extern void no_neg(STATE_DATA *state, UBYTE *option_data,
				UWORD protocol_offset);
extern void new_mru(STATE_DATA *state, UBYTE *option_data,
				UWORD protocol_offset);
extern void new_accm(STATE_DATA *state, UBYTE *option_data,
				UWORD protocol_offset);
extern void new_magicnum(STATE_DATA *state, UBYTE *option_data,
				UWORD protocol_offset);
extern void new_pfc(STATE_DATA *state, UBYTE *option_data,
				UWORD protocol_offset);
extern void new_acfc(STATE_DATA *state, UBYTE *option_data,
				UWORD protocol_offset);

/*************** LCP Build configuration request prototypes ***********/
extern ULONG invalid_build(STATE_DATA *state, UBYTE *option);
extern ULONG build_mru(STATE_DATA *state, UBYTE *option);
extern ULONG build_accm(STATE_DATA *state, UBYTE *option);
extern ULONG build_magicnum(STATE_DATA *state, UBYTE *option);
extern ULONG build_pfc(STATE_DATA *state, UBYTE *option);
extern ULONG build_acfc(STATE_DATA *state, UBYTE *option);

/****************** LCP Reject handling functions ***********************/
extern void reject_generic(STATE_DATA *state, UBYTE *option,
				UWORD protocol_offset);
extern void reject_mru(STATE_DATA *state, UBYTE *option,
				UWORD protocol_offset);
extern void reject_magicnum(STATE_DATA *state, UBYTE *option,
				UWORD protocol_offset);

/********************** IPCP Build configuration request prototypes *******/
extern ULONG ip_address_txcfg(STATE_DATA *state, UBYTE *option);

/********************** IPCP prototypes to verify an ack ******************/
extern ULONG verify_ip_addr(STATE_DATA *state, UBYTE *option_data);

/********************** IPCP prototypes to valid cfg req ******************/
extern ULONG validate_ispip(STATE_DATA *state, UBYTE *option);

/********************** IPCP prototypes for negotiation of Nak ************/
extern void new_ip(STATE_DATA *state, UBYTE *option,
				UWORD protocol_offset);

/********* PAP authentication request *********/
extern ULONG pap_authreq(STATE_DATA *state, UBYTE *option);

/*************** Generic verify ack ******************************/
extern ULONG generic_verify(STATE_DATA *state, UBYTE *option_data);
