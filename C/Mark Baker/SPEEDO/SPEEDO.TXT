
                           Programming for SpeedoGDOS
                           ==========================

                                  By Mark Baker
                             email: mnb20@cam.ac.uk

    When GEM was launched on the PC, a year or two before the ST was launched
    (with the speed and graphics  capability  of  PCs  in those days it can't
    have been much fun  to  use!)  it  had  support  for  printer drivers and
    multiple bitmap fonts built in.

    When the ST was launched with GEM  built in, these features were missing.
    This may be because there  wasn't  room  in  the  ROMs,  or maybe it just
    wasn't ready on time for the release of the ST.

    It  was  subsequently  released  to  developers  to  include  with  their
    software. The result was that the few  programs  that did use GDOS had to
    install it themselves - and normally would  install it over the top of an
    existing GDOS setup. Timeworks, although  probably  the most popular GDOS
    program ever, had  some  quirks  in  its  font  handling  which  meant it
    wouldn't work with a GDOS setup anyway.  For these reasons GDOS got a not
    entirely deserved reputation for being difficult to use.

    The advantages of GDOS from the  users  point  of view are that they only
    need one printer driver for all  their  programs, and new fonts will also
    work with everything. For  programmers  the  advantage  is  even bigger -
    because GDOS is an integral part of GEM (even if Atari didn't see it that
    way!) almost the same code  will  drive  any  printer,  a plotter, save a
    metafile or draw on the screen.

    When SpeedoGDOS was released a  couple  of  years  ago  it solved all the
    problems of older GDOS versions -  it  came  with a nice install program,
    drivers for modern printers etc. More importantly it did vector fonts.

    Until that point you could argue that  by avoiding GDOS you could get the
    same output and give easier  installation  for  the user, admittedly with
    far more work yourself,  but  this  is  no  longer  true. While writing a
    bitmap font engine is easy - I wrote one last week in a couple of hours -
    writing a vector font engine is  harder  and writing one with the quality
    and speed of the one Atari licensed from Bitstream is nearly impossible.

    This article is an introduction to programming for GDOS, and specifically
    SpeedoGDOS. I have assumed  some  knowledge  of  using  VDI  calls on the
    screen. I suspect most people  will  have  this knowledge, as it's needed
    for most GEM programs.

    Any code fragments are in C,  as  that's  what  I  know best and also the
    easiest language for anything that involves calling the operating system.
    HiSoft or GFA basic, Assembler,  Pascal  and  in fact almost any language
    apart from STOS  are  also  suitable  -  if  your  language  doesn't have
    bindings for the new VDI calls you'll find information on what opcodes to
    use and where to pass the parameters in the Atari Compendium.

    For any VDI calls that were  introduced  with  Speedo I've listed all the
    parameters in full, older ones  are  fully  documented elsewhere, so I've
    just said something like 'close  the  workstation with v_clswk()' without
    giving any more details.

    VDI calls
    ---------
    The VDI, Virtual Device Interface,  is  the  part  of GEM responsible for
    graphics output (the other part being  the  AES, which is responsible for
    the user interface and itself  calls  the  VDI).  To draw graphics on any
    device in a legal way, you should call the VDI.

    There are commands to draw  lines,  circles,  markers  and boxes etc, and
    text. With SpeedoGDOS, "bezigons" are added to  this list. A bezigon is a
    name someone invented for a polygon where  some of the straight lines are
    replaced by Bezier curve segments. They  were added to SpeedoGDOS because
    a character in a vector font  is  made  of bezigons. In theory you should
    check  whether  any  graphics  primitive  you  want  is  available  on  a
    particular device before using it, but  I haven't come across any printer
    driver that hasn't supported the whole lot. (Maybe plotter ones won't but
    I haven't seen one to find out).

    There are also commands to set or enquire attributes such as colour, fill
    pattern and  so  on;  all  of  these  work  on  printers  as  much  as is
    appropriate. Because drivers normally make  a  bitmap  of the page before
    printing it you can draw in white as well as black.

    There are a few VDI calls you should avoid.
    v_hardcopy() isn't really a VDI call, it just calls the xbios screen dump
    routine which is limited to normal  size  screens and only works on Epson
    printers.
    The alpha text calls are also best avoided; they are the same as printing
    using GEMDOS and on the screen  will  make  a  mess as they won't line up
    with your windows, on the printer  they will be printed immediately while
    the graphics will be printed when  you've  finished  the page, so you get
    funny results if they're mixed.
    The vex_???() functions are also  best  avoided  as  they will affect all
    applications.

    Using printers
    --------------
    Each installed device on a GDOS system  has  an id number, 21 is the main
    printer. There may be other  printers  on  22  to  30, so you could offer
    users a choice of which device  to  open  but just using 21 is acceptable
    and the drivers control panel provides a better method to choose printers
    anyway.

    You open the printer device using the v_opnwk() call.

    The difference between this and the  v_opnvwk() call normally used on the
    screen is that you are opening the printer for your own use. When you use
    the  screen  you  are  sharing  it   with  the  AES  and  possibly  other
    applications and desk accessories  -  each  application  will have one or
    more virtual workstations which use  the  same  device  but keep track of
    attributes separately so changing colour  for  example won't affect other
    applications. The real  physical  workstation,  opened  by  v_opnwk(), is
    owned by the AES. If you  like,  you  can use virtual workstations on the
    printer, but it isn't often  useful  and  you  must  in any case open one
    physical workstation first.

    The work_out[]  array  returned  when  you  open  a  workstation contains
    various things, you'll find  details  in  any  GEM reference guide. Among
    them are the width  and  height  of  the  device  in  pixels, minus one -
    obviously this is essential - and  the resolution, expressed as the pixel
    size in microns (æm). One micron is a millionth of a metre and as a rough
    guide, a screen pixel is about 300æm and a phototypesetter pixel is 10æm.
    A printer should be somewhere between the two. The resolution returned in
    work_out[] is correct for printers, it can  be wrong on the screen but is
    still useful there as you can use it to work out the aspect ratio.

    Older GDOS drivers always returned the  size  of the printable area. This
    meant everything you drew  would  be  printed,  but  there  was no way of
    knowing where on the physical page  it  would appear. With SpeedoGDOS the
    user can set drivers to use print area offsets. When these are used (0,0)
    is the top left of the paper, and (work_out[0],work_out[1]) is the bottom
    right of the paper,  neither  of  which  points  can  be printed. You can
    however be sure of exactly  where  something  will print. As explained by
    M†rten in Ictari a few months ago,  an undocumented feature allows you to
    find out what parts of  the  page  will  actually  print: do a vq_extnd()
    which returns a variety of things including a flag to indicate whether or
    not print area offsets are on  in  work_out[19]  and  the top left X, top
    left Y, bottom right  X  and  bottom  right  Y  of  the printable area in
    work_out[45] to work_out[48].

    When you have finished  drawing  the  contents  of  a  page you should do
    v_updwk() to print what you've done,  then v_clrwk() to clear the display
    list ready for the next page and  form  feed. If there are any more pages
    then just  start  drawing  them,  otherwise  close  the  workstation with
    v_clswk(). It is possible to print  the  page  so far but allowing you to
    add to it later, using v_form_adv(). I  can  see this might be useful for
    diagnostics when developing a program but  I  can't see where it would be
    used in a release version of anything.

    You may have noticed that Speedo  is supplied with colour drivers. Colour
    printers are handled just like colour  screens  in  that you can only use
    the colours the printer can do directly. A modern colour printer can do a
    convincing imitation of most colours using  dithering, but if you want to
    use it in your program you'll have to dither it yourself, the driver only
    offers the colours the printer can  do as solid colours (normally primary
    and secondary colours and black). This is  of course exactly what you get
    from the screen drivers so it  isn't  surprising,  but a driver that does
    dithering for you would be wonderful.

    Text under SpeedoGDOS
    ---------------------
    If you have done much GEM programming, you will probably have come across
    the v_gtext() call which writes  text  on  the  screen wherever you want.
    With any form of GDOS installed you  can change the typeface, size etc of
    the text, and also use exactly  the  same  function to output text on the
    printer.

    Note: I'm using the word  typeface,  or  just  face,  to refer to a basic
    style of text like "Swiss", and  font  to  refer to a particular size and
    style like "Swiss 12pt  Italic".  (The  correct  word  is  fount, but the
    Americanism font is used almost  universally).  If  you get face and font
    confused you're not alone, as  Atari  called  the function to choose face
    vst_font(). Mind you, they also called a function SetPallete (sic)!

    Before using fonts other than  the  system  font  you must load them with
    vst_load_fonts(). This used  to  load  all  fonts  into  memory  with the
    original GDOS, with Speedo it only reads  in the headers, even for bitmap
    fonts, so it doesn't take up all the  memory. On the screen you should do
    a vst_unload_fonts() when you've finished,  which  frees the memory used.
    You should do it on the printer as  well, but it doesn't really matter as
    it is done for you when you close the workstation.

    work_out[10] contains the number of typefaces available when you open the
    workstation, to this you should  add the number vst_load_fonts() returns,
    which is the number of faces it has  just loaded, to get the total number
    of faces available. Passing a number between zero and the number of faces
    minus one to vqt_name() will enable you  to  find  the name and ID of the
    face. It is the ID that you use when selecting a face with vst_font().

    Unfortunately there is no such easy way  to find the available sizes in a
    particular face. This  is  important  for  bitmap  fonts  which  are only
    available in some sizes. For vector fonts there are still preferred sizes
    set by the user for compatibility with older programs that don't know how
    to set an arbitrary size. It is  nice  to  put these preferred sizes in a
    popup menu or list box, so they  can  access  them quickly, and add a box
    where they  can  type  in  an  arbitrary  size  if  they  want  something
    different. To find the available/preferred sizes  the  only way I know is
    to attempt to set sizes  and  see  which  ones work. The vst_point() call
    will only allow you to set a  preferred size, so try setting a ridiculous
    size like 10000 point, and see what  it returns as the size actually set.
    That is the largest size available, so  next  try one point less, it will
    round it down to give you the next largest, and by going through that way
    until it starts rounding up not down you can find all available sizes.

    To set an arbitrary size under SpeedoGDOS, use the vst_arbpt() call;
    if Speedo is not available you have to use vst_point() which rounds down.

    short vst_arbpt( short handle, short points, short *wchar,
                    short *hchar, short *wcell, short *hcell )

    This is limited to integer point sizes.  A  variation of it allows you to
    specify fractional sizes using fixed  point  numbers. Fixed point numbers
    have a "binary point" in them,  which  is  something similar to a decimal
    point. The digit after the binary point is for halves, the one after that
    for quarters and so on. So  two  and  three  quarters would be 10.11 This
    might be represented in a long as

                        0000000000000010 1100000000000000

    ie. with the integer bit in the high  word and the fractional part in the
    low word, this is the format used in SpeedoGDOS and they called it fix31.
    If you find this confusing, you can just  think of it as an integer which
    is 65536 times the point size. The function you need to use it is

    short vst_arbpt32( short handle, fix31 points, short *wchar,
                    short *hchar, short *wcell, short *hcell )

    Properly spaced text
    --------------------
    Text output by v_gtext() will always  look  good.  It may surprise you to
    learn that there are times when this isn't desirable!

    If when rendering text in small  sizes  it calculates the spacing between
    characters to be say ten  and  a  third  pixels  it will forget about the
    third of a pixel. If it drops the  third of a pixel after every character
    then the spacing will look  consistent,  if  marginally  less than it was
    designed to be. This is what v_gtext() does.

    If you instead use v_ftext() it  remembers  the extra third, and when the
    extra adds up to a  whole  pixel  it  adds  it  in.  As  a result you get
    inconsistent spacing with some  gaps  between  letters wider than others,
    but the width is correct giving better WYSIWYG.

    void v_ftext( short handle, short x, short y, char *str )

    If you've ever used Kandinsky you may have noticed that text that appears
    to fit in a box when on  screen,  overflows when printed. I think this is
    because it uses v_gtext() to draw on screen rather than v_ftext().

    In  a  similar  way,  there   is   a   vqt_f_extent()  call.  This,  like
    vqt_extent(), calculates the width of  a  text  string,  but it gives the
    width you will get from v_ftext() rather than that from v_gtext().

    void vqt_f_extent( short handle, char *str, short *pxyarray )

    I can't think of much use  for  v_ftext_offset() but this function allows
    you to specify an offset for each character. This offset will be added to
    the position for each character. The offset  parameter is a pointer to an
    array of shorts, which are X and Y offsets for each character.

    void v_ftext_offset( short handle, short x, short y, char *str,
                                            short *offset )

    You can also  kern  text  with  SpeedoGDOS.  There  are  two types, track
    kerning just adjusts the spacing  between letters generally, pair kerning
    closes the gap between particular letters, such as M and W in some fonts,
    that look better with less than  the  normal  gap or even an overlap. The
    vst_kern() function allows you to switch both these modes on or off.

    void vst_kern( short handle, short tmode, short pmode, short
                                            *tracks, short *pairs )

    tmode should contain a number  between  zero  and  three to represent the
    amount of track kerning, pmode  should  be  one  to turn on pair kerning,
    zero to turn it off. It  returns  the  amount of tracking actually set in
    tracks and the number of kern pairs defined in pairs.

    Text Effects
    ------------
    There are a variety of effects you can apply to text using vst_effects().
    They don't look very  good  on  bitmaps,  and  tend  to  be even worse on
    outline fonts. They include  a  thicken  option  which  looks  OK on some
    fonts, a lighten option  which  literally  makes  fonts  lighter (by only
    setting alternate pixels) rather than  using  thinner lines like a proper
    light font, a skew option - now,  this  was never supposed to be italics,
    but even if you just want a slanted font it's useless as it does too much
    skewing. Underline works well, and outline does  so long as you don't use
    it in conjunction with thicken or skew.

    With Speedo there are a variety of other ways you can make your text less
    readable. I mean more  interesting.  One  way  is  to skew it. vst_skew()
    takes an angle in tenths of a degree.  You can use negative numbers for a
    strange backwards skew. This only works on vector fonts.

    short vst_skew( short handle, short skew_angle )

    The return value is the skew angle actually set.

    You can change the width of the font to give compressed or expanded text.
    The size you specify isn't a  measure  of anything directly, but a number
    equal  to  the  point  size  will  result  in  a  correctly  proportioned
    character. You can use fix31s for this  as  well if you want a fractional
    size.

    short vst_setsize( short handle, short width, short
                    *wchar,short *hchar, short *wcell, short *hcell )
    short vst_setsize32( short handle, fix31 width, short
                    *wchar,short *hchar, short *wcell, short *hcell )

    Like vst_point() etc, this fills in the width and height of the cell;
    the return value is the size  actually  set. Changing the point size with
    vst_point(), vst_arbpt(), vst_arbpt32() or vst_height()  will revert to a
    correctly proportioned font.

    With any version of GDOS  you  can  rotate  text with vst_rotation(), but
    with bitmap fonts it is only  possible  to  rotate  by a multiple of 90ø.
    Speedo allows you to rotate text to any angle.

    Example program
    ---------------
    The program GDOSTEST.C demonstrates opening a  printer and writing to it.
    Trying it with and without print area offsets will demonstrate their use.
    The Deskjet driver I use doesn't seem  to get them quite right. I haven't
    attempted to demonstrate the text effects as  I believe them mostly to be
    fairly obvious; however I may  write  a  program  to demonstrate them for
    next month's issue.

    Conclusion
    ----------
    I've covered enough now for you  to  print graphics and various styles of
    text to a GDOS printer.

    There's a few other things  I'd  like  to  write about; one of particular
    interest is printing  bitmapped  graphics.  Also  there  are functions to
    enable you to have more  control  of  the text rendering for implementing
    special effects etc, and ways to  handle  more than just the normal ASCII
    characters (the  Bitstream  international  character  set  has  about 500
    characters). I'll have to experiment  with  all  of these first, and then
    hopefully write another article next month about these.

    Please write  or  email  to  me  if  you  have  any  questions  about (or
    corrections to!) anything I've written here.
