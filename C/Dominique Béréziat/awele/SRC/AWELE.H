#define TOTAL_SIZE 12#define HALF_SIZE 6#define START1 0#define START2 6#define END1 6#define END2 12#define PLAYER1 1 /* humain */#define PLAYER2 2 /* ordinateur */#define TRUE 1#define FALSE 0#define INFINI 50#define ALLPIECES 48#define DEFAULT_SEARCH 6#define DEFAULT_FILENAME "awele.save"/* nom du fichier de sauvegarde *//*char nomfich[80] ;*/typedef struct {    char board[TOTAL_SIZE] ; /* l'echiquier */    char p1 ;                /* prisonniers fait par l'humain */    char p2 ;                /* prisonniers fait par la becane */} AWELE ;typedef struct tree {    char prof ;  /* nb de 1/2 coup depuis racine */    char player ; /* joueur courant */    char note ; /* note calculee */    char best ; /* meilleur fils */    AWELE *aw ; /* awele courant */    struct tree *son[HALF_SIZE]  ;} TREE ;/* move.c */void init_awele( AWELE * ) ;int awele_play_hole( AWELE * , int ) ;int check_possible_move( AWELE * , int  , char ) ;int play( int , AWELE * , char ) ;/* util.c */char switch_player( char ) ;void awele_equal( AWELE * , AWELE * );AWELE * create_awele( void ) ;void destroy_awele( AWELE ** ) ;TREE * create_tree( char , char , AWELE * ) ;void destroy_tree( TREE ** ) ;void awele2str( AWELE * , int , int , char * ) ;void str2awele( char * , AWELE * , int * , int * ) ;void str2level( char * , int * ) ;void level2str( char * , int ) ;/* alphabeta.c */void think( char , AWELE * , int , int * , int * ) ;void randplay( AWELE * , int * , int * ) ;