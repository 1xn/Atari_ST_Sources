/* 
 *   Copyright (c) 1990 Rodney Volz
 *   ALL RIGHTS RESERVED 
 * 
 *   THIS SOFTWARE PRODUCT CONTAINS THE
 *   UNPUBLISHED SOURCE CODE OF RODNEY VOLZ
 *
 *   The copyright notices above do not evidence
 *   intended publication of such source code.
 *
 */

/*
 * MERCURY UUCP SOURCECODE [batch.c]
 */


#ifndef MWC
#include "uulib.c"
overlay "main"
#else
#include "define.h"
#endif

#define BLOCK	4096


main(argc,argv)
int argc;
char *argv[];
{
	static char *dlist[NEWSANZ * 2];
	static char batfile[LLEN];
	static char sys_hosts[LLEN],spooldir[LLEN],host[LLEN];
	static char compress[LLEN],tmpdir[LLEN],myname[LLEN];
	static char s[LLEN],s2[LLEN],s3[LLEN],temp[LLEN];
	static char opt[LLEN];
	char *cp;
	char atr;
	int bits = 16;
	char *buf;
	int i,n,inh,outh,work,art;
	long l,length;

	length = 0l;
	art = 0;
	work = 0;

	strcpy("",opt);
	buf = (char *)malloc((long)BLOCK + 10);

	getconf(2,myname);
	getconf(15,sys_hosts);
	getconf(8,compress);
	getconf(21,tmpdir);
	sys_impdirn(tmpdir);


	curs();
	if (argc != 2)
	{
		send("Usage: sendbatch <system>");
		cr(1);
		return(-1);
	}

	strcpy(argv[1],s);
	strcpy(s,host);
	
	strcpy(sys_hosts,s2);

	inh = open(s2,2);
	if (inh < 0)
	{
		send("Error opening host database.");
		cr(1);
		send("Please create ");
		send(s2);
		send(" before using mercury uucp.");
		cr(1);
		return(-1);
	}

	while (getline(inh,s2) != -1)
	{
		strcpys(s2,s3,0,linstr(s2,'|') - 1);
		if (strcmp(s3,s) == TRUE)
			break;
	}
	
	if (strcmp(s3,s) == TRUE)
	{
		strcpys(s2,spooldir,rinstr(s2,'|') + 1,strlen(s2));
		if (strlen(spooldir) < 2)
		{
			send("Error in hosts database.");
			cr(1);
			return(-1);
		}
	}
	else
	{
		send("No such host.");
		cr(1);
		return(-1);
	}
	close(inh);

	send("Sendbatch <");
	send(VERSION);
	send(">");
	cr(2);

	send("Listing jobs... ");
	sys_impdirn(spooldir);
	strcpy(spooldir,s3);
	stradd("*.b-",s3);
	while (exist(s3) != FALSE)
		sys_remove(s3);

	n = 0;
	strcpy(spooldir,s3);
	stradd("*.b",s3);
	while (exist(s3) != FALSE)
	{
		dtaxtr(s,&l,&atr);
		strcpy(spooldir,batfile);
		stradd(s,batfile);
		inh = open(batfile,2);
	
		if (inh < 0)
		{
			send("Error opening ");
			send(batfile);
			cr(1);
			return(-1);
		}

		/* Get compress/batch options */
		getline(inh,s);
		trim(s);

		if (!valid(opt))
			strcpy(s,opt);

		getline(inh,s);		/* Skip dummyline */

		while (getline(inh,s) != -1)
		{
			trim(s);

			if (*s)
			{
				dlist[n] = (char *)malloc((long)(strlen(s) + 2));
				strcpy(s,dlist[n++]);
			}
		}
		close(inh);
		strcpy(batfile,s);
		stradd("-",s);
		sys_rename(batfile,s);   
	}
	dlist[n] = "";
	send("Done.");
	cr(1);


	strcpy(tmpdir,temp);
	mktmp(temp);

	outh = open(temp,1);
	if (outh < 0)
	{
		send("Error opening ");
		send(temp);
		send(" as output.");
		cr(1);
		return(-1);
	}

	send("Total of ");
	sendd(n);
	send(". files");
	cr(1);
	
	if (n != 0)
	{
		sprintf(s,"Sendbatch started; %d jobs for %s",n,host);
		log(s,"batch");
	}

	n = 0;
	while (*dlist[n])
	{
		strcpy(dlist[n],s);
		send(s);
		send("... ");
		if (exist(s) == TRUE)
		{
			dtaxtr(s2,&l,&atr);
			inh = open(s,2);
			
			sprintf(s2,"#! rnews %ld",l);
			uu_putline(outh,s2);
			
			while(0 == 0)
			{
				l = (long)sys_fread(inh,(long)BLOCK,buf);
				sys_fwrite(outh,(long)l,buf);
			
				if (l < (long)BLOCK)
					break;
			}
			close(inh);
			send("Batched.");
			++art;
			++work;
		}
		else
		{
			send("Skipped.");
		}
		cr(1);
		++n;
	}
	close(outh);
	cr(1);

	if (!work)
	{
		send("No work.");
		cr(1);
		return(0);
	}

	
	/* Check option line */
	lower(opt);

	for (cp = opt; *cp && *cp != 'c'; cp++);
	for ( ; *cp && !isdigit(*cp); cp++);

	if (val(cp) != 0)
		bits = val(cp);

	if (bits > 16)
		bits = 16;

	if (bits < 8)
		bits = 8;

	sprintf(s,"Running %d-bit compress",bits);
	log(s,"batch");
	
#if 0
	printf("%s...\n",s);
#endif


	sprintf(s,"-b%d %s",bits,temp);
	printf("%s %s\n",compress,s);
	noenv_exec(compress,s);

	stradd(".z",temp);

	inh = open(temp,2);
	if (inh <= 0)
	{
		bell();
		cr(1);
		send("Error running compress.");
		cr(1);
		return(-1);
	}
	
	send("Done.");
	cr(1);

	strcpy(tmpdir,temp);
	mktmp(temp);

	outh = open(temp,1);
	if (outh < 0)
	{
		send("Error opening ");
		send(temp);
		send(" as output.");
		cr(1);
		return(-1);
	}


	send("Copying files to remote system... ");

	/* Endgueltiges Batch-File schreiben */
	uu_putline(outh,"#! cunbatch");
	
	while(0 == 0)
	{
		l = (long)sys_fread(inh,(long)BLOCK,buf);
		sys_fwrite(outh,(long)l,buf);
	
		if (l < (long)BLOCK)
			break;
	}
	close(inh);
	close(outh);

	strcpy("D.",s);
	while (strlen(s) < 12)
	{
		str(sys_rnd(9),s2);
		stradd(s2,s);
	}


	length = fsize(temp);
	sys_uucp(temp,s,host);

	/* X-File erzeugen */
	strcpy(tmpdir,temp);
	mktmp(temp);

	outh = open(temp,1);
	if (outh < 0)
	{
		send("Error opening ");
		send(temp);
		send(" as output.");
		cr(1);
		return(-1);
	}

	uu_putline(outh,"# Mercury uucp sendbatch");
	
	strcpy("U news ",s2);
	stradd(myname,s2);
	uu_putline(outh,s2);

	uu_putline(outh,"N");	/* No return status */

	uu_putline(outh,"R news");

	strcpy("F ",s2);
	stradd(s,s2);
	uu_putline(outh,s2);

	strcpy("I ",s2);
	stradd(s,s2);
	uu_putline(outh,s2);

	uu_putline(outh,"C rnews");
	close(outh);



	/* X-File zum Remote host abschicken */

	strcpy("X.",s);
	while (strlen(s) < 12)
	{
		str(sys_rnd(9),s2);
		stradd(s2,s);
	}

	sys_uucp(temp,s,host);

	send("Done.");
	cr(1);


	/* Aufraeumen */
	send("Cleaning up... ");

	strcpy(tmpdir,s);
	stradd("a*.*",s);
	sys_remove(s);
	sys_remove(s);
	sys_remove(s);
	sys_remove(s);
	sys_remove(s);

	send("Done.");
	cr(1);
	
	send("sendbatch <");
	send(VERSION);
	send("> finished.");
	cr(1);

	sprintf(s,"sendbatch: finished (%ld bytes of output, %d articles)",(long)length,art);
	log(s,"batch");
}
