/* 
 *   Copyright (c) 1990 Rodney Volz
 *   ALL RIGHTS RESERVED 
 * 
 *   THIS SOFTWARE PRODUCT CONTAINS THE
 *   UNPUBLISHED SOURCE CODE OF RODNEY VOLZ
 *
 *   The copyright notices above do not evidence
 *   intended publication of such source code.
 *
 */

/*
 * MERCURY UUCP SOURCECODE [mail.c]
 */


#define _MAIL

#ifndef MWC
#include "uulib.c"
#include "header.c"
overlay "main"
#else
#include "define.h"
#endif

static char sys_tmpdir[LLEN];

main(argc,argv)	/* E-Mail schreiben */
int argc;
char *argv[];
{
	static char user[LLEN],subject[LLEN];
	static char s[LLEN],s2[LLEN],s3[LLEN],s4[LLEN];
	static char in[256],domain[LLEN];
	int i,n,cnt,inh,outh,anz,atr,ptr;
	long dmy;
	struct header *head,*hd;
	static char usr_name[LLEN],usr_fullname[LLEN],sys_myname[LLEN];
	static char usr_home[LLEN],sys_orgline[LLEN];
	char addresse[LLEN];
	static char temp[LLEN];
	char eoh;
	char *msg[100];

	curs();


	strcpy((char *)argv[argc - 1],user);

	getprof(1,(char *)usr_name);
	getconf(2,(char *)sys_myname);
	getconf(3,(char *)sys_orgline);
	getconf(4,domain);
	getconf(21,(char *)sys_tmpdir);
	sys_impdirn((char *)sys_tmpdir);
	getprof(2,(char *)usr_home);

	sys_impdirn((char *)usr_home);

	getprof(3,(char *)usr_fullname);


	/******************************************************/
	/* Reply on postings                                  */
	if (argc > 2)
	{
		if (strcmp(argv[argc - 2],"-preply") == TRUE)
		{
			send("Invoking editor... ");

			strcpy(sys_tmpdir,temp);
			mktmp(temp);
			strcpy(temp,s2);

			strcpy(argv[argc - 1],(char *)s);

			hd = (struct header *)malloc((long)sizeof(struct header));
			bzero((struct header *)hd,(long)sizeof(struct header));

			head = gethead(s);
			inh = open(s,2);
			if (inh < 0)
			{
				send("Error opening ");
				send(s);
				send(" as input.");
				cr(1);
				return(-1);
			}

			outh = open(s2,1);
			if (outh <= 0)
			{
				/* Oh no damned bugs... */
				send("Error opening ");
				send(s2);
				send(" as output.");
				cr(1);
				return(-1);
			}

			eoh = FALSE;

			strcpy("In ",s2);
			if (valid(head->id))
			{
				stradd("article ",s2);
				stradd(head->id,s2);
			}

			if (valid(head->nbuf))
			{
				stradd(" of ",s2);
				stradd(head->nbuf,s2);
			}

			if (valid(head->replyto))
			{
				if (strcmp(head->from,head->replyto) == FALSE)
				{
					stradd(" ",s2);
					stradd(head->from,s2);
				}
				else
				{
					stradd(" you",s2);
				}
			}
			else
			{
				stradd(" you",s2);
			}


			stradd(" wrote:",s2);

			putline(outh,s2);


			while (getline(inh,s) != -1)
			{
				strcpy("> ",s2);
				stradd(s,s2);
				putline(outh,s2);
			}

			close(inh);
			close(outh);



			
			if (valid(head->subject) == TRUE)
			{
				strcpy("In reply to: ",hd->subject);
				stradd(head->subject,hd->subject);
			}
			else
			{
				strcpy("In reply to: (none)",hd->subject);
			}




			if (valid(head->replyto))
			{
				strcpy(head->replyto,hd->to);
				if (valid(head->replytofull))
					strcpy(head->replytofull,hd->tofull);
			}
			else
				if (valid(head->from))
				{
					strcpy(head->from,hd->to);
					if (valid(head->fromfull))
						strcpy(head->fromfull,hd->tofull);
				}
				else
				if (valid(head->apparent))
				{
					strcpy(head->apparent,hd->to);
					if (valid(head->apparentfull))
						strcpy(head->apparentfull,hd->tofull);
				}
				else
					if (valid(head->sender))
					{
						strcpy(head->sender,hd->to);
						if (valid(head->senderfull))
							strcpy(head->senderfull,hd->tofull);
					}

edit_again:
			edi(temp);
			cr(1);


			send("Mail to ");
			send(hd->to);
			trim(hd->tofull);
			if (valid(hd->tofull));
			{
				send(" (");
				send(hd->tofull);
				send(")");
			}
			cr(1);

prepswitch_again:
			cr(1);
			n = whatnow("What now? Edit, Send, Cancel, DES-Encrypt, Options?","escdo");
			switch(n)
			{
			case 1:	
				goto edit_again;
			case 2: 
				break;
			case 3:
				{
					send("Cancelled.");
					cr(1);
					goto preply_cancel;
				}
			case 4:
				{
					mail_encrypt(temp);
					goto prepswitch_again;
				}
			case 5:
				{
					m_options(hd);
					goto prepswitch_again;
				}
			}


			if (valid(head->replyto))
			{
				strcpy(head->replyto,hd->to);
				if (valid(head->replytofull))
					strcpy(head->replytofull,hd->tofull);
			}
			else
				if (valid(head->from))
				{
					strcpy(head->from,hd->to);
					if (valid(head->fromfull))
						strcpy(head->fromfull,hd->tofull);
				}
				else
					if (valid(head->sender))
					{
						strcpy(head->sender,hd->to);
						if (valid(head->senderfull))
							strcpy(head->senderfull,hd->tofull);
					}


			send("Sending reply to posting... ");

			strcpy(sys_orgline,hd->organization);
			strcpy(usr_name,hd->from);
			strcpy(usr_fullname,hd->fromfull);
			sys_mail(temp,hd);
			send("Done.");
			cr(1);

preply_cancel:
			mfree(head);
			mfree(hd);
			return(0);
		}
	} /* End of REPLY TO POSTING */


	if (user[0] == 0)
	{
		strcpy((char *)usr_home,s);
		stradd("*.msg",s);


		i = 0;

		n = sfirst((char *)s);
		while (n >= 0)
		{
			dtaxtr((char *)s,&dmy,&atr);

			strcpy((char *)usr_home,s2);
			stradd(s,s2);
			msg[i] = (char *)malloc((long)LLEN);
			strcpy(s2,(char *)msg[i]);
			++i;

			n = snext();
		}

		anz = i;
		if (anz == 0)
		{
			send("No mail.");
			cr(1);
			return(-2);
		}

		ptr = 0;

		while (0 == 0)
		{
			cnt = 0;
re_open:
			strcpy((char *)msg[ptr],s);


			inh = -1;

			if (s[0] != '-')
				inh = open((char *)s,2);

			if (inh < 0)
			{
				++ptr;
				if (ptr == anz)
					ptr = 0;
				++cnt;
				if (cnt > (anz + 2))
					return(0);

				goto re_open;

			}
			cnt = 0;

			i = 0;
			while (0 == 0)
			{
				if (uu_getline(inh,s) == -1)
					break;

				if (linstr(s,':') != -1)
				{
					strcpys(s,s2,0,linstr(s,':'));
					if (strcmp(s2,"Subject:") == TRUE)
						send("\033p");
				}

				send(s);

				if (linstr(s,':') != -1)
				{
					strcpys(s,s2,0,linstr(s,':'));
					if (strcmp(s2,"Subject:") == TRUE)
						send("\033q");
				}

				cr(1);
				++i;

				if (i == 22)
				{
					send("\033p-(");
					sendd(ptr + 1);
					send(")- MORE ---\033q");
					n = inp();
					send("\015                  \015");
					i = 0;

					/* Maybe they'll be usin' uppercases */
					if ((n == 'Q') || (n == 'q')
					    || (n == 'x') || (n == 'X'))
						break;
				}
			}
			close(inh);

re_ask:
			strcpy("",s);

			while (s[0] == '\0')
			{
				sendd(ptr + 1);
				send("> ");
				rec(s);
				cr(1);
			}
			upper(s);
			switch(s[0])
			{
			case 'Q':
				return(0);

			case 'S':
				{
					if (linstr(s,' ') != -1)
					{
						stradd(" ",s);
						strcpys(s,s2,linstr(s,' ') + 1,strlen(s));
						strcpys(s2,s,0,linstr(s2,' ') - 1);

						if (linstr(s,'\\') == -1)
							strcpy(usr_home,s2);
						else
							strcpy("",s2);

						stradd(s,s2);
					}
					else
						strcpy("",s2);


					if (strlen(s2) < 2)
					{
						strcpy(usr_home,s2);
						stradd("mbox",s2);
					}

					send("Writing to ");
					send(s2);
					send("... ");
					strcpy((char *)msg[ptr],s);

					inh = open(s,2);
					dtaxtr(s,&dmy,&atr);

					if (exist(s2) == TRUE)
						outh = open(s2,4);
					else
						outh = open(s2,1);

					if (outh <= 0)
					{
						/* Fuckyababe!! Could happen
						while usin discs */

						send("Error opening ");
						send(s2);
						send(" for writing.");
						cr(1);
						exit(2);
					}

					putline(outh,"");

#if 1
					while (uu_getline(inh,in) != -1)
						putline(outh,in);
#else
					for (;;)
					{
						dmy = sys_fread(inh,(long)(LLEN - 1),s);
						sys_fwrite(outh,dmy,s);
						if (dmy < (long)(LLEN - 1))
							break;
					}
#endif

					close(inh);
					close(outh);

					send("Done.");
					cr(1);
					goto re_ask;
					break;
				}

				/* Decrypt message */
			case 'O':
				{
					mail_decrypt(msg[ptr]);
					cr(1);
					send("\033p - Hit Return - \033q ");
					rec(s);
					send("\033E");
					break;
				}

			case 'V':
				{
					break;
				}

				/* Reply option, will get a copy of the old
				msg to the usr */
			case 'R':
				{
					send("Invoking editor... ");

					strcpy(sys_tmpdir,temp);
					mktmp(temp);
					strcpy(temp,s2);

					strcpy((char *)msg[ptr],(char *)s);

					hd = (struct header *)malloc((long)sizeof(struct header));
					bzero((struct header *)hd,(long)sizeof(struct header));

					head = gethead(s);
					inh = open(s,2);
					if (inh < 0)
					{
						send("Error opening ");
						send(s);
						send(" as input.");
						cr(1);
						return(-1);
					}

					outh = open(s2,1);
					if (outh <= 0)
					{
						send("Error opening ");
						send(s2);
						send(" as output.");
						cr(1);
						return(-1);
					}

					eoh = FALSE;
					strcpy("In ",s2);
					if (valid(head->id))
						stradd(head->id,s2);
					else
						stradd("your letter",s2);
					stradd(", you write:",s2);

					putline(outh,s2);

#if 0
					while (getline(inh,s) != -1)
					{
						if (strlen(s) < 3)
							break;
					}
#endif

					while (getline(inh,s) != -1)
					{
						strcpy("> ",s2);
						stradd(s,s2);
						putline(outh,s2);
					}

					close(inh);
					close(outh);

					if (valid(head->subject) == TRUE)
					{
						strcpy(head->subject,s);
						s[3] = '\0';
						if (strcmp(s,"Re:") == TRUE)
							strcpy("",hd->subject);
						else
							strcpy("Re: ",hd->subject);
						stradd(head->subject,hd->subject);
					}
					else
					{
						strcpy("Re: (none)",hd->subject);
					}


					
					if (valid(head->replyto))
					{
						strcpy(head->replyto,hd->to);
						if (valid(head->replytofull))
							strcpy(head->replytofull,hd->tofull);
					}
					else
						if (valid(head->from))
						{
							strcpy(head->from,hd->to);
							if (valid(head->fromfull))
								strcpy(head->fromfull,hd->tofull);
						}
						else
							if (valid(head->sender))
							{
								strcpy(head->sender,hd->to);
								if (valid(head->senderfull))
/* code folded from here */
	strcpy(head->senderfull,hd->tofull);
/* unfolding */
							}

reped_again:

					edi(temp);
					cr(1);

					send("Mail to ");
					send(hd->to);
					trim(hd->tofull);
					if (valid(hd->tofull));
					{
						send(" (");
						send(hd->tofull);
						send(")");
					}
					cr(1);

reply_whatagain:
					cr(1);
					n = whatnow("What now? Edit, Send, Cancel, DES-Encrypt, Options?","escdo");
					switch(n)
					{
					case 1: 
						goto reped_again;
					case 2: 
						break;
					case 3: 
						goto reply_cancel;
					case 4:
						{
							mail_encrypt(temp);
							goto reply_whatagain;
						}
					case 5:
						{
							m_options(hd);
							goto reply_whatagain;
						}
					}


					send("Sending reply... ");

					strcpy(sys_orgline,hd->organization);
					strcpy(usr_name,hd->from);
					strcpy(usr_fullname,hd->fromfull);
					sys_mail(temp,hd);
					send("Done.");
					cr(1);

reply_cancel:
					mfree(head);
					mfree(hd);
					goto re_ask;
					break;
				} /* Replyto */

			case 'D':
				{
					send("Removing... ");
					strcpy((char *)msg[ptr],s);
					if (sys_remove(s) == 0)
					{
						send("Done.");
						cr(1);
					}
					else
					{
						send("Couldn't unlink ");
						send(s);
						cr(1);
					}
					strcpy("-",(char *)msg[ptr]);
					break;
				} /* Delete */

			case '+':
				{
					++ptr;
					if (ptr == anz)
						ptr = 0;
					break;
				}

			case '-':
				{
					--ptr;
					if(ptr == -1)
						ptr = anz - 1;
					break;
				}

			case 'H':
				{
					help();
					goto re_ask;
					break;
				}

			case '?':
				{
					help();
					goto re_ask;
					break;
				}

			}
		}
		return(0);
	} /* END OF INTERACTIVE MODE */



	/*............................................................*/

	if ((linstr(user,'@') == -1) && (linstr(user,'!') == -1))
	{
		stradd("@",user);
		stradd(sys_myname,user);
	}

	hd = (struct header *)malloc((long)sizeof(struct header));
	bzero((struct header *)hd,(long)sizeof(struct header));

	strcpy(user,hd->to);


	send("To: ");
	send(hd->to);
	cr(1);


	send("Subject: ");
	rec(hd->subject);
	cr(1);

	if (strlen(hd->subject) == 0)
	{
		send("No subject. Hope that's okay.");
		cr(1);
	}


	strcpy(sys_tmpdir,s);
	mktmp(s);

	send("Invoking editor...");
	cr(1);

	strcpy(s,s2);

normed_again:

	edi(s);
	cr(1);

	send("Mail to ");
	send(hd->to);
	trim(hd->tofull);

	if (valid(hd->tofull));
	{
		send(" (");
		send(hd->tofull);
		send(")");
	}
	cr(1);



norm_whatagain:
	cr(1);
	n = whatnow("What now? Edit, Send, Cancel, DES-Encrypt, Options?","escdo");
	switch(n)
	{
	case 1:	
		goto normed_again;
	case 2: 
		break;
	case 3:
		{
			send("Cancelled.");
			cr(1);
			goto norm_cancel;
		}
	case 4:
		{
			mail_encrypt(s);
			goto norm_whatagain;
		}
	case 5:
		{
			m_options(hd);
			goto norm_whatagain;
		}
	}


	strcpy(usr_name,hd->from);
	strcpy(usr_fullname,hd->fromfull);
	stradd(addresse,hd->to);
	strcpy(sys_orgline,hd->organization);

	sys_mail(s2,hd);

	send("Mail sent. ");
	cr(1);

norm_cancel:
	mfree(hd);
	return(0);
}


edi(file)	/* Editor aufrufen */
char file[];
{
	char sys_ed[LLEN];
	char s[LLEN],s2[LLEN],s3[LLEN];

	getconf(20,sys_ed);
	strcpy(sys_ed,s);

	strcpy(file,s3);
	strcpy("_",s2);		/* Fuck TOS. It works this way. */
	stradd(s3,s2);

	strcpy("",s3);
	gemdos(0x4b,0,(char *)s,(char *)s2,"\0\0\0");

	curs();

	return(0);
}



mail_route()	/* addresse <s> routen */
{
	return(-1);
}


sys_mail(sfile,head)	/* <file> in die Mail-Queue stellen */
char *sfile;
struct header *head;
{
	static char s[LLEN],s2[LLEN],s3[LLEN],s4[LLEN],file[LLEN],sequence[LLEN];
	static char sys_mqueue[LLEN],sys_myname[LLEN],usr_home[LLEN];
	int inh,outh,n,a,cnt;
	static char xout[LLEN],sender[LLEN],dout[LLEN],domain[LLEN];
	char lo[LLEN];
	long sys_fread();

	getconf(4,(char *)domain);

	getconf(2,(char *)sys_myname);
	getprof(2,(char *)usr_home);
	sys_impdirn((char *)usr_home);

	getconf(14,(char *)sys_mqueue);
	sys_impdirn((char *)sys_mqueue);


	strcpy((char *)sfile,(char *)file);

	while (0 == 0)
	{
		strcpy("",s);

		while(strlen(s) < 7)
		{
			n = 0;
			while(n == 0)
			{
				n = sys_rnd(9);
			}

			str(n,(char *)s2);
			stradd(s2,(char *)s);
		}

		strcpy(s,sequence);	/* Sequence is '1234' */

		strcpy(sys_mqueue,dout);
		stradd("a",dout);
		stradd(sequence,dout);
		stradd(".d",dout);	/* DOUT Name steht. */

		strcpy(sys_mqueue,xout);
		stradd("a",xout);
		stradd((char *)sequence,(char *)xout);
		stradd(".x",(char *)xout);


		if ((exist(xout) == FALSE) && (exist(dout) == FALSE))
			break;
	}

	/************************************* '???.D' erzeugen */

	inh = open((char *)file,2);		/* Open in-file readonly */
	if (inh < 0)
	{

		send("Error opening input file.");
		cr(1);
		gemerror(inh);
		return(-1);
	}

	outh = open((char *)dout,1);	/* Creative open */

	if (outh <= 0)
	{
		cr(1);
		send("Error opening for output: ");
		send(dout);
		send(".");
		cr(1);
		return;
	}

	strcpy("Mail: ",lo);

	if (valid(head->from))
	{
		strcpy(head->from,sender);
	}
	else
		if (valid(head->sender))
		{
			strcpy(head->sender,sender);
		}
		else
		{
			send("sys_mail: Couldn't get sender's name.");
			cr(1);
			return(-1);
		}

	stradd(sender,lo);
	stradd(" -> ",lo);


	strcpy("From ",s);
	stradd((char *)sender,s);

	/* Datum in der Form "Tue May 16 06:11:13 1989" erzeugen */
	stradd(" ",s);
	sd(s2);
	stradd(s2,s);
	stradd(" remote from ",s);
	stradd(sys_myname,s);

#if 0	/* This is *no* standard. */
	stradd(domain,s);
#endif

	uu_putline(outh,s);	/* Zeile 1: From vaxima... */



	if (valid(head->id))
	{
		strcpy("Message-Id: ",s);
		stradd(head->id,s);
	}
	else
	{
		strcpy("Message-Id: <",s);
		strcpy(sequence,s2);
		stradd(s2,s);
		stradd("@",s);
		stradd(sys_myname,s);
		stradd(domain,s);
		stradd(">",s);	/* Kein ';' dahinter!!! */
	}

	uu_putline(outh,s);	/* Zeile 4: 'Message-Id: <kjighkjg'... */

	strcpy("From: ",s);
	stradd(sender,s);
	stradd("@",s);
	stradd(sys_myname,s);
	stradd(domain,s);
	if (valid(head->fromfull))
	{
		stradd(" (",s);
		stradd(head->fromfull,s);
		stradd(")",s);
	}

	uu_putline(outh,s);	/* 'From: root@merkur.uucp (Die Systemverwaltung) */

	if (valid(head->replyto))
	{
		strcpy("Reply-To: ",s);
		stradd(head->replyto,s);
		if (valid(head->replytofull))
		{
			stradd(" (",s);
			stradd(head->replytofull,s);
			stradd(")",s);
		}
		uu_putline(outh,s);
	}

	if (valid(head->organization))
	{
		strcpy("Organization: ",s); /* Organization: Blablabla... */
		stradd(head->organization,s);

		uu_putline(outh,s);
	}

	strcpy("X-Version: ",s);
	stradd(VERSION,s);
	uu_putline(outh,s);

	stradd(head->to,lo);

	if (valid(head->subject))
	{
		strcpy("Subject: ",s);
		stradd(head->subject,s);

		uu_putline(outh,s);	/* Subject-line */

		stradd(" subj:",lo);
		stradd(head->subject,lo);
	}


	log(lo,"mail");

	strcpy("To: ",s);
	stradd(head->to,s);
	if (valid(head->tofull))
	{
		stradd(" (",s);
		stradd(head->tofull,s);
		stradd(")",s);
	}
	uu_putline(outh,s);	/* To: <receiver>@<host> */

	/* Carbon copy */
	if (valid(head->cc))
	{
		sprintf(s,"Cc: %s",head->cc);
		uu_putline(outh,s);
	}

	if (valid(head->date))
	{
		strcpy("Date: ",s);
		stradd(head->date,s);
	}
	else
	{
#if 0
		strcpy("Date: ",s);
		sd(s2);
		stradd(s2,s);
#else
		sys_dayname(s2);
		sys_time(s3);
		sys_monthname(s4);
		sprintf(s,"Date: %s, %d %s %d %s MET",s2,sys_dayofmonth(),s4,sys_year() % 100,s3);
#endif
	}

	uu_putline(outh,s);	/* Date: Day, 99 May 99 14:30:08 */

	uu_putline(outh,"");	/* Eine Leerzeile drunter! */

	/* So, und jetzt wird der Rest 'drunterkopiert. */
	while (getline(inh,s) != -1)
	{
		filter(s);	/* ^M's filtern */
		uu_putline(outh,s);
	}
	close(inh);

	strcpy(usr_home,s2);
	sys_impdirn(s2);

	stradd("signatur.mai",s2);

	inh = open(s2,2);	/* Open signature file */
	if (inh < 0)
	{
		send("Error reading signature file ");
		send(s2);
		cr(1);
	}
	else
	{
		uu_putline(outh,"");
		uu_putline(outh,"--");

		while (0 == 0)
		{
			a = getline(inh,s);

			if (a == -1)
				break;

			filter(s);

			uu_putline(outh,s);
		}
		close(inh);
	}
	close(outh);


	/*********************** Xfile ausgeben ************************/

	outh = open(xout,1);	/* Open for creation */
	if (outh <= 0)
	{
		send("Error opening ");
		send(xout);
		send(" as output.");
		cr(1);
		return;
	}

	strcpy("U ",s);
	stradd((char *)sender,(char *)s);
	stradd(" ",s);
	stradd(sys_myname,s);
	uu_putline(outh,s);

	strcpy("F D.",s);
	stradd(sequence,s);
	uu_putline(outh,s);

	strcpy("I D.",s);
	stradd(sequence,s);
	uu_putline(outh,s);

	strcpy("C rmail ",s);
	stradd(head->to,s);
	uu_putline(outh,s);

	close(outh);
}



help()
{
	send("\033E");
	send("         \033p - Mailer commands - \033q");
	cr(2);
	send("         + ............ next message");
	cr(1);
	send("         - ............ previous message");
	cr(1);
	send("         s [<name>] ... save message to named file; default: $HOME\\mbox");
	cr(1);
	send("         d ............ delete message");
	cr(1);
	send("         r ............ reply to actually displayed message");
	cr(1);
	send("         o ............ uudecode and DES-decrypt displayed message");
	cr(1);
	send("         v ............ view current message again");
	cr(1);
#if 0
	send("         R ............ reply and include message");
	cr(1);
#endif
	send("         q ............ quit mailer");
	cr(2);
}




mail_encrypt(file)
char *file;
{
	char s[LLEN],s2[LLEN],s3[LLEN],temp[LLEN];
	char des[LLEN],uuenc[LLEN];
	int inh,outh;

	send("Enter encryption password: ");
	rec(s);
	send("\015                                                      \015");
	send("Repeat, please: ");
	rec(s2);
	send("\015Repeat, please: ########                                   \015");
	cr(1);

	if (strcmp(s,s2) != TRUE)
	{
		send("Passwords do not match.");
		cr(1);
		return(-1);
	}

	if (strlen(s) < 4)
	{
		send("Password too short.");
		cr(1);
		return(-1);
	}

	strcpy(sys_tmpdir,temp);
	mktmp(temp);

#if 0
	if (sys_fcopy(file,temp) < 0)
	{
		send("Couldn't copy ");
		send(file);
		send(" to ");
		send(temp);
		cr(1);
		return(-1);
	}
#endif

	getconf(23,des);
	getconf(24,uuenc);

	if ((exist(des) == FALSE) || (exist(uuenc) == FALSE))
	{
		send("Couldn't find DES and/or uuencode.");
		cr(1);
		send("Update field 23 and/or 24 in your config file.");
		cr(1);
		return(-1);
	}

	strcpy("-e -k ",s2);
	stradd(s,s2);
	stradd(" ",s2);
	stradd(file,s2);
	stradd(" ",s2);
	stradd(temp,s2);

	send("des running... ");
	noenv_exec(des,s2);
	send("Done.");
	cr(1);

	if (exist(temp) != TRUE)
	{
		send("Error running des.");
		cr(1);
		send("Check your configuration file.");
		cr(1);
		return(-1);
	}


	strcpy(temp,s2);
	stradd(" ",s2);

	strcpy(sys_tmpdir,s3);
	mktmp(s3);

	stradd(s3,s2);
	stradd(" message.des",s2);

	send("uuencode running... ");
	noenv_exec(uuenc,s2);
	send("Done.");
	cr(1);

	if (exist(s3) != TRUE)
	{
		send("Error running uuencode.");
		cr(1);
		send("Check your configuration file.");
		cr(1);
		return(-1);
	}

	sys_remove(file);
	sys_rename(s3,file);
}






mail_decrypt(file)
char *file;
{
	char s[LLEN],s2[LLEN],s3[LLEN],temp[LLEN];
	char des[LLEN],uudec[LLEN];
	int inh,outh;

	send("Enter decryption password: ");
	rec(s);
	send("\015                                                             \015");
	send("Repeat, please: ");
	rec(s2);
	send("\015Repeat, please: #######                                     \015");
	cr(1);

	if (strcmp(s,s2) != TRUE)
	{
		send("Passwords do not match.");
		cr(1);
		return(-1);
	}

	if (strlen(s) < 4)
	{
		send("Password too short.");
		cr(1);
		return(-1);
	}

#if 0
	if (sys_fcopy(file,temp) < 0)
	{
		send("Couldn't copy ");
		send(file);
		send(" to ");
		send(temp);
		cr(1);
		return(-1);
	}
#endif

	getconf(23,des);
	getconf(25,uudec);

	if ((exist(des) == FALSE) || (exist(uudec) == FALSE))
	{
		send("Couldn't find DES and/or uudecode.");
		cr(1);
		send("Update field 23 and/or 25 in your config file.");
		cr(1);
		return(-1);
	}

	strcpy(file,s2);
	stradd(" ",s2);

	strcpy(sys_tmpdir,temp);
	mktmp(temp);

	stradd(temp,s2);

	send("uudecode running... ");
	noenv_exec(uudec,s2);
	send("Done.");
	cr(1);

	if (exist(temp) != TRUE)
	{
		send("Error running uudecode.");
		cr(1);
		send("Check your configuration file.");
		cr(1);
		return(-1);
	}

	strcpys(file,s3,0,rinstr(file,'.'));
	stradd("des",s3);
	sys_remove(s3);
	sys_rename(file,s3);

	strcpy("-d -k ",s2);
	stradd(s,s2);
	stradd(" ",s2);
	stradd(temp,s2);
	stradd(" ",s2);
	stradd(file,s2);

	send("des running... ");
	noenv_exec(des,s2);
	send("Done.");
	cr(1);

	if (exist(file) != TRUE)
	{
		send("Error running des.");
		cr(1);
		send("Check your configuration file.");
		cr(1);
		sys_rename(s3,file);
		return(-1);
	}

	cr(1);
	send(s3);
	send(" is a copy of the original message.");
	cr(1);
}


m_options(hd)
struct header *hd;
{
	int n;
	char s[LLEN],s2[LLEN];
	send("\033E");
	cr(2);
	send("	- Change \"[T]o:\"-line");
	cr(1);
	send("	- Insert \"[R]eply-to:\"-line");
	cr(1);
	send("	- New \"[S]ubject:\"-line");
	cr(1);
	send("	- Add \"[C]c:\"-line");
	cr(1);
	send("	- E[x]it this menu");
	cr(1);

	cr(1);
	n = whatnow("Your choice:","trscx");

	switch(n)
	{
		case 1:
		{
			send("To (old): ");
			send(hd->to);
			if (valid(hd->tofull));
			{
				send(" (");
				send(hd->tofull);
				send(")");
			}
			cr(1);
			send("To (new): ");
			rec(s);
			cr(1);
			trim(s);
			if (s[0])
			{
				strcpy("",hd->tofull);
				adrparse(s,hd->to,hd->tofull);
			}
			else
			{
				send("Nothing changed.");
				cr(1);
			}
			break;
		}

		case 2:
		{
			if (valid(hd->replyto))
			{
				send("Reply-To (old): ");
				send(hd->replyto);
				if (valid(hd->replytofull));
				send(" (");
				send(hd->replytofull);
				send(")");
				cr(1);
				send("Reply-To (new): ");
			}
			else
			{
				send("Reply-To: ");
			}
			
			rec(s);
			cr(1);
			trim(s);
			if (valid(s))
			{
				strcpy("",hd->replytofull);
				adrparse(s,hd->replyto,hd->replytofull);
			}
			else
			{
				send("Nothing changed.");
				cr(1);
			}
			return(0);
		}

		case 3:
		{
			if (valid(hd->subject))
			{
				send("Subject (old): ");
				send(hd->subject);
				cr(1);
				send("Subject (new): ");
			}
			else
				send("Subject: ");
			
			rec(s);
			cr(1);
			trim(s);
			if (!*s)
			{
				send("Subject-line left unchanged.");
				cr(1);
			}
			else
				strcpy(s,hd->subject);
			return(0);
		}

		case 4:
		{
			send("Carbon copy doesn't work in this Version!");
			cr(1);
			if (valid(hd->cc))
			{
				send("Cc (old): ");
				send(hd->cc);
				send("Cc (new): ");
			}
			else
			{
				send("Cc: ");
			}
			
			rec(s);
			cr(1);
			trim(s);
			if (valid(s))
			{
				adrparse(s,hd->cc,s2);
			}
			else
			{
				send("Nothing changed.");
				cr(1);
			}
			return(0);
		}
	}
}
